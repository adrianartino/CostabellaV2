# Renderizado
from csv import list_dialects
from multiprocessing.sharedctypes import Value
from operator import truediv
from os import remove
import string
from tkinter import N
from types import TracebackType
from django.shortcuts import render
from django.shortcuts import redirect
from django.http.response import HttpResponse

#Para ruta
from pathlib import Path
import os
BASE_DIR = Path(__file__).resolve().parent.parent

# Importacion de modelos
from appCostabella.models import Sucursales, Empleados, Clientes, ProductosVenta,ProductosRenta,ProductosGasto, ComprasVentas, ComprasGastos, ComprasRentas,MovimientosCaja,ConfiguracionCaja,Rentas,Servicios,ServiciosProductosGasto,Descuentos,Ventas, ConfiguracionCredito, Creditos, PagosCreditos,Permisos, Tratamientos, TratamientosProductosGasto, PaquetesPromocionTratamientos, Citas,TratamientosClientes, HistorialTratamientosClientes, citasTratamientos, pagosPaquetesTratamientos, CortesDeCaja, ServiciosCertificados, ProductosServiciosCertificados, CertificadosProgramados

# Libreria para manejar archivos en python
from django.core.files.base import ContentFile

# Librerías de fecha
from datetime import date, datetime, time,timedelta

from calendar import c, calendar

from dateutil.relativedelta import relativedelta

# Archivo configuración de django
from django.conf import settings

#Librerias reportes pdf
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter
from reportlab.lib.units import cm
from reportlab.platypus import Image, Paragraph, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib import colors
from reportlab.lib.enums import TA_CENTER

#Libreria excel.
import xlwt
from io import StringIO

#Libreria Random
import random 
from random import choice

import json
from django.db.models import Q

#Para mandar telegram
import telepot
from appCostabella import keysBotCostabella

#Para leer exceles.
import pandas as pd
import numpy as np

#Correo electrónico
from django.core.mail import send_mail
from django.core.mail import EmailMessage
from django.core import mail
from django.template.loader import render_to_string
from django.utils.html import strip_tags

#Impresora
from escpos.printer import Usb
from zebra import Zebra

#Plugin impresora termica
from appCostabella import Conector

def notificacionRentas(request):
     #Si ya existe una sesion al teclear login...
    if "idSesion" in request.session:
        idEmpleado = request.session['idSesion']
        datosEmpleado = Empleados.objects.filter(id_empleado =idEmpleado)
        for empleado in datosEmpleado:
            sucursal = empleado.id_sucursal_id
        if sucursal == None:
            
            fechaHoy = date.today()
            rentas = Rentas.objects.exclude(estado_devolucion = "F").filter(Q(fecha_entrega_renta =  fechaHoy) | Q(fecha_limite_devolucion = fechaHoy))
            rentasNotificacion =[]
            for renta in rentas:
                idrenta = renta.id_renta
                vestido = renta.codigos_productos_renta
                estatusRenta = renta.estado_devolucion
                cliente = renta.cliente_id
                vestidos = []
                arregloVestidos = vestido.split(',')
                
                for vestidoRenta in arregloVestidos:
                    consultaVestido = ProductosRenta.objects.filter(codigo_producto= vestidoRenta)
                    for dato in consultaVestido:
                        codigoVestido= dato.codigo_producto
                        nombreVestido = dato.nombre_producto
                        sucursalVestido = dato.sucursal_id
                        consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursalVestido)
                        for datoSucursal in consultaSucursal:
                            nombreSucursal = datoSucursal.nombre
                    vestidos.append([codigoVestido,nombreVestido])
                
                clienteRenta = Clientes.objects.filter(id_cliente = cliente)
                for datoCliente in clienteRenta:
                    nombreCliente = datoCliente.nombre_cliente
                    apellidoPaterno = datoCliente.apellidoPaterno_cliente
                nombreCompletoCliente = nombreCliente + " " + apellidoPaterno
                
                rentasNotificacion.append([idrenta,estatusRenta,vestidos,nombreCompletoCliente,nombreSucursal])   
        else:
            
            fechaHoy = date.today()
            rentas = Rentas.objects.exclude(estado_devolucion = "F").filter(Q(fecha_entrega_renta = fechaHoy ) | Q(fecha_limite_devolucion =  fechaHoy))
            rentasNotificacion =[]
            for renta in rentas:
                idVendedor = renta.realizado_por_id
                datosVendedor = Empleados.objects.filter(id_empleado = idVendedor)
                for datoVendedor in datosVendedor:
                    sucursalVendedor = datoVendedor.id_sucursal_id
                if sucursalVendedor == sucursal:
                    idrenta = renta.id_renta
                    vestido = renta.codigos_productos_renta
                    estatusRenta = renta.estado_devolucion
                    cliente = renta.cliente_id
                    vestidos = []
                    arregloVestidos = vestido.split(',')
                    
                    for vestidoRenta in arregloVestidos:
                        consultaVestido = ProductosRenta.objects.filter(codigo_producto= vestidoRenta)
                        for dato in consultaVestido:
                            codigoVestido= dato.codigo_producto
                            nombreVestido = dato.nombre_producto
                            consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursalVestido)
                            for datoSucursal in consultaSucursal:
                                nombreSucursal = datoSucursal.nombre
                        vestidos.append([codigoVestido,nombreVestido])
                    
                    clienteRenta = Clientes.objects.filter(id_cliente = cliente)
                    for datoCliente in clienteRenta:
                        nombreCliente = datoCliente.nombre_cliente
                        apellidoPaterno = datoCliente.apellidoPaterno_cliente
                    nombreCompletoCliente = nombreCliente + " " + apellidoPaterno
                    
                    rentasNotificacion.append([idrenta,estatusRenta,vestidos,nombreCompletoCliente,nombreSucursal]) 
        
        return rentasNotificacion
              
        
    # Si no hay una sesion iniciada..
    else:
        return render(request, "1 Login/login.html")


def notificacionCitas(request):
     #Si ya existe una sesion al teclear login...
    if "idSesion" in request.session:
        idEmpleado = request.session['idSesion']
        datosEmpleado = Empleados.objects.filter(id_empleado =idEmpleado)
        for empleado in datosEmpleado:
            sucursal = empleado.id_sucursal_id

        
        fechaHoy = date.today()
        if sucursal == None: #Todas las citas
            citas = Citas.objects.filter(fecha_pactada = fechaHoy, estado_cita = "sinCanjear")
        else:
            citas = Citas.objects.filter(fecha_pactada = fechaHoy, estado_cita = "sinCanjear", sucursal_id__id_sucursal = sucursal)

        citasNotificacion =[]
        for cita in citas:
            idCita = cita.id_cita
            #cliente
            cliente = cita.cliente_id
            consultaCliente = Clientes.objects.filter(id_cliente = cliente)
            for datoCliente in consultaCliente:
                nombreCliente = datoCliente.nombre_cliente
                apellidoCliente = datoCliente.apellidoPaterno_cliente
            nombreCompletoCliente = nombreCliente+" "+apellidoCliente
            #sucursal
            sucursal = cita.sucursal_id
            consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursal)
            for datoSucursal in consultaSucursal:
                nombreSucursal = datoSucursal.nombre

            

            tipoCita = cita.tipo_cita   #Tratamiento, PaqueteTratamiento, Servicio
            idServTratPaq = cita.id_serv_trat_paq
            certificadoServicio = cita.certificado_servicio
            if tipoCita == "Servicio":
                consultaServicio = Servicios.objects.filter(id_servicio = idServTratPaq)
                for datoServicio in consultaServicio:
                    tipoServicio = datoServicio.tipo_servicio
                    nombreServicio = datoServicio.nombre_servicio
                
                nombreServicioTratamientoPaqueteCita = tipoServicio +" "+nombreServicio
                esCertificado = "No"
                idCertificado = "No"
            elif tipoCita == "SesionTratamiento":
                consultaTratamiento = Tratamientos.objects.filter(id_tratamiento = idServTratPaq)
                for datoTratamiento in consultaTratamiento:
                    tipoTratamiento = datoTratamiento.tipo_tratamiento
                    nombreTratamiento = datoTratamiento.nombre_tratamiento
                nombreServicioTratamientoPaqueteCita = tipoTratamiento +" "+nombreTratamiento
                esCertificado = "No"
                idCertificado = "No"
            elif tipoCita == "PaqueteTratamiento":
                consultaPaqueteTratamiento = PaquetesPromocionTratamientos.objects.filter(id_paquete_tratamiento = idServTratPaq)
                for datoPromo in consultaPaqueteTratamiento:
                    nombrePaquete = datoPromo.nombre_paquete
                    sesionesPaquete = datoPromo.numero_sesiones
                nombreServicioTratamientoPaqueteCita = nombrePaquete + " "+str(sesionesPaquete)+" sesiones"
                esCertificado = "No"
                idCertificado = "No"
            elif tipoCita == "ServicioCertificado":
                servCertSeparado = certificadoServicio.split("-")
                idCertificado = servCertSeparado[0]
                idServicioCertificado = servCertSeparado[1]
                idCertificadoInt = int(idCertificado)
                idServicioCertificadoInt = int(idServicioCertificado)

                #Consulta de certificado
                consultaCertificado = CertificadosProgramados.objects.filter(id_certificado = idCertificadoInt)
                for datoCertificado in consultaCertificado:
                    codigoCertificado = datoCertificado.codigo_certificado

                #Consulta de servicio certificado
                consultaServicioCertificado = ServiciosCertificados.objects.filter(id_servicio_certificado = idServicioCertificadoInt)
                for datoServicio in consultaServicioCertificado:
                    nombreServicioCertificado = datoServicio.nombre
                nombreServicioTratamientoPaqueteCita = codigoCertificado + " - "+nombreServicioCertificado
                esCertificado = "Si"
                idCertificado = idCertificadoInt
            

            
            
            horaPactada = cita.hora_pctada
            duracion = cita.duracionCitaMinutos
            duracion = int(duracion)
    
            
            citasNotificacion.append([idCita,nombreSucursal,horaPactada,nombreCompletoCliente,nombreServicioTratamientoPaqueteCita,duracion, esCertificado, idCertificado])  
           
        
        
        
        return citasNotificacion
              
        
    # Si no hay una sesion iniciada..
    else:
        return render(request, "1 Login/login.html")
    
    
        
        



def salir(request):

   # Cerrar variables de sesión
   del request.session["idSesion"]
   del request.session['nombresSesion']
   del request.session['tipoUsuario'] 

   return redirect('/login/')
# Vista login
def login(request):

    #Si ya existe una sesion al teclear login...
    if "idSesion" in request.session:
        return redirect('/inicio/')
    # Si no hay una sesion iniciada..
    else:
        #si se apretó el botón.
        if request.method == "POST":
            nombreusuario = request.POST['nombreusuario']
            contrasenaIngresada = request.POST['pwd']
            
            consultaUsuario = Empleados.objects.filter(nombre_usuario = nombreusuario)
            
            if consultaUsuario:
                
                
                for dato in consultaUsuario:
                    idEmpleado = dato.id_empleado
                    nombres = dato.nombres
                    contrasena = dato.contrasena
                    sucursal = dato.id_sucursal_id
                    puesto = dato.puesto
                    
                if contrasenaIngresada == contrasena:
                    #El usuario se loguea.. 
                    ingresado = "Bienvenido!"
                    
                    request.session['idSesion'] = idEmpleado
                    request.session['nombresSesion'] = nombres
                    request.session['puestoSesion'] = puesto
                    request.session['recienIniciado'] = "primerInicio"
                    
                    date = datetime.now()
                    hora = date.time().strftime("%H:%M")
                    if sucursal == None: #Si no tiene una sucursal..
                        request.session['tipoUsuario'] = "esAdmin"
                        try:
                            tokenTelegram = keysBotCostabella.tokenBotCostabella
                            botCostabella = telepot.Bot(tokenTelegram)

                            idGrupoTelegram = keysBotCostabella.idGrupo
                            mensaje = "Hola \U0001F44B! La empleada administradora "+nombres+" ha iniciado sesión a las "+str(hora)+" horas."
                            botCostabella.sendMessage(idGrupoTelegram,mensaje)

                        except:
                            print("An exception occurred")
                        
                        return redirect("/inicio/")
                    else:
                        consultaSucursal = Sucursales.objects.filter(id_sucursal =sucursal )
                        
                        for datoSucursal in consultaSucursal:
                            nombreSucural = datoSucursal.nombre
                    
                        request.session['tipoUsuario'] = "esEmpleado"
                        try:
                            tokenTelegram = keysBotCostabella.tokenBotCostabella
                            botCostabella = telepot.Bot(tokenTelegram)

                            idGrupoTelegram = keysBotCostabella.idGrupo
                            mensaje = "Hola \U0001F44B	! La empleada "+nombres+" ha iniciado sesión  en la sucursal "+nombreSucural+" a las "+str(hora)+" horas."
                            botCostabella.sendMessage(idGrupoTelegram,mensaje)


                        except:
                            print("An exception occurred")
                        
                        
                        return redirect("/inicio/")
                else:
                    error = "Ha ingresado una contraseña incorrecta!"
                    return render(request, "1 Login/login.html", {"error":error,"nombreusuario":nombreusuario})
            else:
                error = "El usuario no existe!"
                return render(request, "1 Login/login.html", {"error":error})
            
        return render(request, "1 Login/login.html")

# Vista inicio
def inicio(request):

    #Si ya existe una sesion al teclear login...
    if "idSesion" in request.session:
        idEmpleado = request.session['idSesion']
        idPerfil = idEmpleado
        idConfig = idEmpleado
        nombresEmpleado = request.session['nombresSesion']
      
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']
        
        #Variable para menu
        estaEnInicio = True
        
        
        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
        
        #notificacionRentas
        notificacionRenta = notificacionRentas(request)

        #notificacionCitas
        notificacionCita = notificacionCitas(request)

        #permisosEmpleado
        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)



        



        #Si es la primera vez que inicia sesión.. Bienvenida 
        if "recienIniciado" in request.session:
            bienvenida = "Bienvenida, "+nombresEmpleado+ "!!"
            del request.session['recienIniciado']#se cierra la sesión del primer inicio de sesión
            return render(request, "2 Inicio/inicio.html", {"idEmpleado":idEmpleado, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado,"estaEnInicio":estaEnInicio, "bienvenida":bienvenida, "idPerfil":idPerfil, "idConfig":idConfig,
                                                            "notificacionRenta":notificacionRenta,"notificacionCita":notificacionCita, "consultaPermisos":consultaPermisos})
        else:
            return render(request, "2 Inicio/inicio.html", {"idEmpleado":idEmpleado, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado,"estaEnInicio":estaEnInicio, "idPerfil":idPerfil, "idConfig":idConfig,
                                                            "notificacionRenta":notificacionRenta,"notificacionCita":notificacionCita, "consultaPermisos":consultaPermisos})
    # Si no hay una sesion iniciada..
    else:
        return render(request, "1 Login/login.html")

def altaEmpleado(request):

    if "idSesion" in request.session:

        # Variables de sesión
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        idPerfil = idEmpleado
        idConfig = idEmpleado
    
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']

        # Variable para Menu
        estaEnAltaEmpleado = True

        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
        
        #notificacionRentas
        notificacionRenta = notificacionRentas(request)

        #notificacionCitas
        notificacionCita = notificacionCitas(request)

        #permisosEmpleado
        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)

        # retornar sucrusales
        sucursales = Sucursales.objects.all()
        if request.method == "POST":
            nombresEmpleadoRecibido = request.POST['nombresEmpleado']
            apellidoPat = request.POST['apellidoPat']
            apellidoMat = request.POST['apellidoMat']
            telefono = request.POST['telefono']
            nombreUsuario = request.POST['nombreUsuario']
            pwd = request.POST['pwd']
            tipoUsuarioRecibido = request.POST['tipoUsuario']
            puestoUsuario = request.POST['puestoUsuario']
            sucursal = request.POST['sucursal']

            fechaAlta = datetime.today().strftime('%Y-%m-%d')

            # Si usuario administrador..
            if sucursal == "Todas":
                altaEmpleado = Empleados(nombre_usuario=nombreUsuario,
                contrasena=pwd,
                nombres=nombresEmpleadoRecibido,
                apellido_paterno = apellidoPat,
                apellido_materno = apellidoMat,
                telefono = telefono,
                puesto =puestoUsuario,
                fecha_alta = fechaAlta,
                estado_contratacion = "A"
                ) #Sin sucursal porque Admin
                altaEmpleado.save()
            else:
                altaEmpleado = Empleados(nombre_usuario=nombreUsuario,
                contrasena=pwd,
                nombres=nombresEmpleadoRecibido,
                apellido_paterno = apellidoPat,
                apellido_materno = apellidoMat,
                telefono = telefono,
                puesto =puestoUsuario,
                fecha_alta = fechaAlta,
                estado_contratacion = "A",
                id_sucursal = Sucursales.objects.get(id_sucursal = sucursal)
                ) #Sin sucursal porque Admin
                altaEmpleado.save()

               

            if altaEmpleado:
                    empleadoAgregado = "El empleado "+nombresEmpleadoRecibido + " ha sido agregado satisfactoriamente!"
                    #Creacion de permisos
                    tablas_modulos =["Panel administrativo","Empleados","Clientes","Sucursales","Ventas","Descuentos","Configuracion caja", "Movimientos","Movimiento semanal","Rentas","Calendario rentas","Productos",
                                     "Servicios","Paquetes","Creditos","Configuracion credito","Pagos creditos","Compras","Citas","Calendario citas","Codigos de barras","Tratamientos", "Certificado"]
                    
                    ultimoEmpleado = 0
                    empleadosTotales = Empleados.objects.all()
                    for empleado in empleadosTotales:
                    
                        ultimoEmpleado = ultimoEmpleado + 1
                    permiso =""
                    if tipoUsuarioRecibido == "Administrador":
                        permiso ="Si"
                    else:
                        permiso ="No"
                    for tablas in tablas_modulos:
                        tabla = tablas
                        if tabla == "Panel administrativo":
                         
                                        altaPermisosEmpleado = Permisos(id_empleado= Empleados.objects.get(id_empleado = ultimoEmpleado),
                                        ver=permiso,
                                        agregar=permiso,
                                        editar = permiso,
                                        bloquear = permiso,
                                        ver_detalles = permiso,
                                        activar =permiso,
                                        comprar = permiso,
                                        recibir_pagos = permiso,
                                        tabla_modulo = tabla,
                                        
                                        ) #Sin sucursal porque Admin
                                        altaPermisosEmpleado.save()
                           
                        elif tabla == "Empleados":
                    
                                        altaPermisosEmpleado = Permisos(id_empleado= Empleados.objects.get(id_empleado = ultimoEmpleado),
                                          ver=permiso,
                                        agregar=permiso,
                                        editar = permiso,
                                        bloquear = permiso,
                                        ver_detalles = permiso,
                                        activar =permiso,
                                        comprar = permiso,
                                        recibir_pagos = permiso,
                                        tabla_modulo = tabla,
                                        
                                        ) #Sin sucursal porque Admin
                                        altaPermisosEmpleado.save()
                          
                        
                        elif tabla == "Clientes":
                               
                                        altaPermisosEmpleado = Permisos(id_empleado= Empleados.objects.get(id_empleado = ultimoEmpleado),
                                         ver=permiso,
                                        agregar=permiso,
                                        editar = permiso,
                                        bloquear = permiso,
                                        ver_detalles = permiso,
                                        activar =permiso,
                                        comprar = permiso,
                                        recibir_pagos = permiso,
                                        tabla_modulo = tabla,
                                        
                                        ) #Sin sucursal porque Admin
                                        altaPermisosEmpleado.save()
                       
                                    
                        elif tabla == "Sucursales":
                                
                                        altaPermisosEmpleado = Permisos(id_empleado= Empleados.objects.get(id_empleado = ultimoEmpleado),
                                          ver=permiso,
                                        agregar=permiso,
                                        editar = permiso,
                                        bloquear = permiso,
                                        ver_detalles = permiso,
                                        activar =permiso,
                                        comprar = permiso,
                                        recibir_pagos = permiso,
                                        tabla_modulo = tabla,
                                        
                                        ) #Sin sucursal porque Admin
                                        altaPermisosEmpleado.save()
                                
                                    
                        elif tabla == "Ventas":
                            
                                    altaPermisosEmpleado = Permisos(id_empleado= Empleados.objects.get(id_empleado = ultimoEmpleado),
                                     ver=permiso,
                                        agregar=permiso,
                                        editar = permiso,
                                        bloquear = permiso,
                                        ver_detalles = permiso,
                                        activar =permiso,
                                        comprar = permiso,
                                        recibir_pagos = permiso,
                                        tabla_modulo = tabla,
                                    
                                    ) #Sin sucursal porque Admin
                                    altaPermisosEmpleado.save()
  
                                
                        elif tabla == "Descuentos":
                         
                                    altaPermisosEmpleado = Permisos(id_empleado= Empleados.objects.get(id_empleado = ultimoEmpleado),
                                     ver=permiso,
                                        agregar=permiso,
                                        editar = permiso,
                                        bloquear = permiso,
                                        ver_detalles = permiso,
                                        activar =permiso,
                                        comprar = permiso,
                                        recibir_pagos = permiso,
                                        tabla_modulo = tabla,
                                    
                                    ) #Sin sucursal porque Admin
                                    altaPermisosEmpleado.save()
                           
                                
                        elif tabla == "Configuracion caja":
                           
                                    altaPermisosEmpleado = Permisos(id_empleado= Empleados.objects.get(id_empleado = ultimoEmpleado),
                                    ver=permiso,
                                        agregar=permiso,
                                        editar = permiso,
                                        bloquear = permiso,
                                        ver_detalles = permiso,
                                        activar =permiso,
                                        comprar = permiso,
                                        recibir_pagos = permiso,
                                        tabla_modulo = tabla,
                                    
                                    ) #Sin sucursal porque Admin
                                    altaPermisosEmpleado.save()
                           
                        
                        elif tabla == "Movimientos":
                          
                                    altaPermisosEmpleado = Permisos(id_empleado= Empleados.objects.get(id_empleado = ultimoEmpleado),
                                     ver=permiso,
                                        agregar=permiso,
                                        editar = permiso,
                                        bloquear = permiso,
                                        ver_detalles = permiso,
                                        activar =permiso,
                                        comprar = permiso,
                                        recibir_pagos = permiso,
                                        tabla_modulo = tabla,
                                    
                                    ) #Sin sucursal porque Admin
                                    altaPermisosEmpleado.save()
                           
                                
                        elif tabla == "Movimiento semanal":
                          
                                    altaPermisosEmpleado = Permisos(id_empleado= Empleados.objects.get(id_empleado = ultimoEmpleado),
                                     ver=permiso,
                                        agregar=permiso,
                                        editar = permiso,
                                        bloquear = permiso,
                                        ver_detalles = permiso,
                                        activar =permiso,
                                        comprar = permiso,
                                        recibir_pagos = permiso,
                                        tabla_modulo = tabla,
                                    
                                    ) #Sin sucursal porque Admin
                                    altaPermisosEmpleado.save()
                          
                                
                        elif tabla == "Rentas":
                           
                                        altaPermisosEmpleado = Permisos(id_empleado= Empleados.objects.get(id_empleado = ultimoEmpleado),
                                      ver=permiso,
                                        agregar=permiso,
                                        editar = permiso,
                                        bloquear = permiso,
                                        ver_detalles = permiso,
                                        activar =permiso,
                                        comprar = permiso,
                                        recibir_pagos = permiso,
                                        tabla_modulo = tabla,
                                        
                                        ) #Sin sucursal porque Admin
                                        altaPermisosEmpleado.save()
                                
                                    
                        elif tabla == "Calendario rentas":
                            
                                    altaPermisosEmpleado = Permisos(id_empleado= Empleados.objects.get(id_empleado = ultimoEmpleado),
                                      ver=permiso,
                                        agregar=permiso,
                                        editar = permiso,
                                        bloquear = permiso,
                                        ver_detalles = permiso,
                                        activar =permiso,
                                        comprar = permiso,
                                        recibir_pagos = permiso,
                                        tabla_modulo = tabla,
                                    
                                    ) #Sin sucursal porque Admin
                                    altaPermisosEmpleado.save()
                            
                                
                        elif tabla == "Productos":
                          
                                    altaPermisosEmpleado = Permisos(id_empleado= Empleados.objects.get(id_empleado = ultimoEmpleado),
                                     ver=permiso,
                                        agregar=permiso,
                                        editar = permiso,
                                        bloquear = permiso,
                                        ver_detalles = permiso,
                                        activar =permiso,
                                        comprar = permiso,
                                        recibir_pagos = permiso,
                                        tabla_modulo = tabla,
                                    
                                    ) #Sin sucursal porque Admin
                                    altaPermisosEmpleado.save()
                           
                                
                        elif tabla == "Servicios":
                          
                                    altaPermisosEmpleado = Permisos(id_empleado= Empleados.objects.get(id_empleado = ultimoEmpleado),
                                    ver=permiso,
                                        agregar=permiso,
                                        editar = permiso,
                                        bloquear = permiso,
                                        ver_detalles = permiso,
                                        activar =permiso,
                                        comprar = permiso,
                                        recibir_pagos = permiso,
                                        tabla_modulo = tabla,
                                    
                                    ) #Sin sucursal porque Admin
                                    altaPermisosEmpleado.save()
                           
                                
                        elif tabla == "Paquetes":
                           
                                    altaPermisosEmpleado = Permisos(id_empleado= Empleados.objects.get(id_empleado = ultimoEmpleado),
                                     ver=permiso,
                                        agregar=permiso,
                                        editar = permiso,
                                        bloquear = permiso,
                                        ver_detalles = permiso,
                                        activar =permiso,
                                        comprar = permiso,
                                        recibir_pagos = permiso,
                                        tabla_modulo = tabla,
                                    
                                    ) #Sin sucursal porque Admin
                                    altaPermisosEmpleado.save()
                           
                                
                        elif tabla == "Creditos":
                          
                                    altaPermisosEmpleado = Permisos(id_empleado= Empleados.objects.get(id_empleado = ultimoEmpleado),
                                        ver=permiso,
                                        agregar=permiso,
                                        editar = permiso,
                                        bloquear = permiso,
                                        ver_detalles = permiso,
                                        activar =permiso,
                                        comprar = permiso,
                                        recibir_pagos = permiso,
                                        tabla_modulo = tabla,
                                    
                                    ) #Sin sucursal porque Admin
                                    altaPermisosEmpleado.save()
                          
                                
                        elif tabla == "Configuracion credito":
                           
                                    altaPermisosEmpleado = Permisos(id_empleado= Empleados.objects.get(id_empleado = ultimoEmpleado),
                                      ver=permiso,
                                        agregar=permiso,
                                        editar = permiso,
                                        bloquear = permiso,
                                        ver_detalles = permiso,
                                        activar =permiso,
                                        comprar = permiso,
                                        recibir_pagos = permiso,
                                        tabla_modulo = tabla,
                                    
                                    ) #Sin sucursal porque Admin
                                    altaPermisosEmpleado.save()
                           
                                
                        elif tabla == "Pagos creditos":
                           
                                    altaPermisosEmpleado = Permisos(id_empleado= Empleados.objects.get(id_empleado = ultimoEmpleado),
                                     ver=permiso,
                                        agregar=permiso,
                                        editar = permiso,
                                        bloquear = permiso,
                                        ver_detalles = permiso,
                                        activar =permiso,
                                        comprar = permiso,
                                        recibir_pagos = permiso,
                                        tabla_modulo = tabla,
                                    
                                    ) #Sin sucursal porque Admin
                                    altaPermisosEmpleado.save()
                  
                                
                        elif tabla == "Compras":
                          
                                    altaPermisosEmpleado = Permisos(id_empleado= Empleados.objects.get(id_empleado = ultimoEmpleado),
                                     ver=permiso,
                                        agregar=permiso,
                                        editar = permiso,
                                        bloquear = permiso,
                                        ver_detalles = permiso,
                                        activar =permiso,
                                        comprar = permiso,
                                        recibir_pagos = permiso,
                                        tabla_modulo = tabla,
                                    
                                    ) #Sin sucursal porque Admin
                                    altaPermisosEmpleado.save()
                           
                                
                        elif tabla == "Citas":
                        
                                    altaPermisosEmpleado = Permisos(id_empleado= Empleados.objects.get(id_empleado = ultimoEmpleado),
                                    ver=permiso,
                                        agregar=permiso,
                                        editar = permiso,
                                        bloquear = permiso,
                                        ver_detalles = permiso,
                                        activar =permiso,
                                        comprar = permiso,
                                        recibir_pagos = permiso,
                                        tabla_modulo = tabla,
                                    
                                    ) #Sin sucursal porque Admin
                                    altaPermisosEmpleado.save()
                     
                        
                        elif tabla == "Calendario citas":
                          
                                    altaPermisosEmpleado = Permisos(id_empleado= Empleados.objects.get(id_empleado = ultimoEmpleado),
                                        ver=permiso,
                                        agregar=permiso,
                                        editar = permiso,
                                        bloquear = permiso,
                                        ver_detalles = permiso,
                                        activar =permiso,
                                        comprar = permiso,
                                        recibir_pagos = permiso,
                                        tabla_modulo = tabla,
                                    
                                    ) #Sin sucursal porque Admin
                                    altaPermisosEmpleado.save()
                          
                        
                        elif tabla == "Codigos de barras":
                         
                                    altaPermisosEmpleado = Permisos(id_empleado= Empleados.objects.get(id_empleado = ultimoEmpleado),
                                        ver=permiso,
                                        agregar=permiso,
                                        editar = permiso,
                                        bloquear = permiso,
                                        ver_detalles = permiso,
                                        activar =permiso,
                                        comprar = permiso,
                                        recibir_pagos = permiso,
                                        tabla_modulo = tabla,
                                    
                                    ) #Sin sucursal porque Admin
                                    altaPermisosEmpleado.save()
                        elif tabla == "Tratamientos":
                         
                                    altaPermisosEmpleado = Permisos(id_empleado= Empleados.objects.get(id_empleado = ultimoEmpleado),
                                        ver=permiso,
                                        agregar=permiso,
                                        editar = permiso,
                                        bloquear = permiso,
                                        ver_detalles = permiso,
                                        activar =permiso,
                                        comprar = permiso,
                                        recibir_pagos = permiso,
                                        tabla_modulo = tabla,
                                    
                                    ) #Sin sucursal porque Admin
                                    altaPermisosEmpleado.save()
                        elif tabla == "Certificado":
                         
                                    altaPermisosEmpleado = Permisos(id_empleado= Empleados.objects.get(id_empleado = ultimoEmpleado),
                                        ver=permiso,
                                        agregar=permiso,
                                        editar = permiso,
                                        bloquear = permiso,
                                        ver_detalles = permiso,
                                        activar =permiso,
                                        comprar = permiso,
                                        recibir_pagos = permiso,
                                        tabla_modulo = tabla,
                                    
                                    ) #Sin sucursal porque Admin
                                    altaPermisosEmpleado.save()
                            

                        
                            
                            
                            
                                
                                
                            
                            
                            
                    
                    return render(request, "3 Empleados/altaEmpleado.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado, "idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado,"estaEnAltaEmpleado":estaEnAltaEmpleado, "sucursales":sucursales, "empleadoAgregado":empleadoAgregado,
                                                                             "notificacionRenta":notificacionRenta,"notificacionCita":notificacionCita})
            else:
                    empleadoNoAgregado = "Error en la base de datos, intentelo más tarde.."
                    return render(request, "3 Empleados/altaEmpleado.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado,"estaEnAltaEmpleado":estaEnAltaEmpleado, "sucursales":sucursales, "empleadoNoAgregado":empleadoNoAgregado,"notificacionRenta":notificacionRenta,"notificacionCita":notificacionCita})

        
        return render(request, "3 Empleados/altaEmpleado.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado,"estaEnAltaEmpleado":estaEnAltaEmpleado, "sucursales":sucursales,"notificacionRenta":notificacionRenta,"notificacionCita":notificacionCita})
    else:
        return render(request,"1 Login/login.html")

def verEmpleados(request):

    if "idSesion" in request.session:

        # Variables de sesión
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']
        idPerfil = idEmpleado
        idConfig = idEmpleado
       

        

        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
        
           #notificacionRentas
        notificacionRenta = notificacionRentas(request)

        #notificacionCitas
        notificacionCita = notificacionCitas(request)

        #permisosEmpleado
        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)

        usuariosSpan = []
        sucursalesEmpleados = []
        tipoEmpleados = []
        colores = ['bg-blue', 'bg-azure', 'bg-indigo', 'bg.purple', 'bg-pink', 'bg-orange', 'bg-teal', 'bg-red', 'bg-gray']
        coloresRandom=[]
        empleados = Empleados.objects.all()
        

        contadorActivos = 0
        contadorInactivos = 0
        empleadosActivos = Empleados.objects.filter(estado_contratacion = "A")
        empleadosInactivos = Empleados.objects.filter(estado_contratacion = "I")
        
        for activo in empleadosActivos:
            contadorActivos = contadorActivos + 1
        for inactivo in empleadosInactivos:
            contadorInactivos = contadorInactivos + 1

        for empleado in empleados:
            nombre = empleado.nombres
            apellidoPat = empleado.apellido_paterno
            apellidoMat = empleado.apellido_materno 
            
            if empleado.id_sucursal_id == None:
                esAdministrador = True
                sucursal = "Todas"
            else:
                esAdministrador = False
                
                sucursal = empleado.id_sucursal_id 
            
            letraNombre = nombre[0]
            letraPaterno = apellidoPat[0]
            letraMaterno = apellidoMat[0]
            
        
            usuariosSpan.append([letraNombre, letraPaterno, letraMaterno])
            
            if esAdministrador == False:
            
                sucursales = Sucursales.objects.filter(id_sucursal = sucursal)
                for suc in sucursales: 
                    nombreSucursal = suc.nombre
                    
                tipo = "Empleado"
                    
            elif esAdministrador == True:
                nombreSucursal = "Todas"
                tipo = "Administrador"
            
            colorRandom = choice(colores)
            coloresRandom.append(colorRandom)
            sucursalesEmpleados.append(nombreSucursal)
            tipoEmpleados.append(tipo)
            
        usuariosSpanA = []
        sucursalesEmpleadosA = []
        tipoEmpleadosA = []
        coloresA = ['bg-blue', 'bg-azure', 'bg-indigo', 'bg.purple', 'bg-pink', 'bg-orange', 'bg-teal', 'bg-red', 'bg-gray']
        coloresRandomA=[]
        for empleadoActivo in empleadosActivos:
            nombreA = empleadoActivo.nombres
            apellidoPatA = empleadoActivo.apellido_paterno
            apellidoMatA = empleadoActivo.apellido_materno 
            
            if empleadoActivo.id_sucursal_id == None:
                esAdministradorA = True
                sucursalA = "Todas"
            else:
                esAdministradorA = False
                
                sucursalA = empleadoActivo.id_sucursal_id 
            
            letraNombreA = nombreA[0]
            letraPaternoA = apellidoPatA[0]
            letraMaternoA = apellidoMatA[0]
            
        
            usuariosSpanA.append([letraNombreA, letraPaternoA, letraMaternoA])
            
            if esAdministradorA == False:
            
                sucursalesA = Sucursales.objects.filter(id_sucursal = sucursalA)
                for sucA in sucursalesA: 
                    nombreSucursalA = sucA.nombre
                    
                tipoA = "Empleado"
                    
            elif esAdministradorA == True:
                nombreSucursalA = "Todas"
                tipoA = "Administrador"
            
            colorRandomA = choice(coloresA)
            coloresRandomA.append(colorRandomA)
            sucursalesEmpleadosA.append(nombreSucursalA)
            tipoEmpleadosA.append(tipoA)
        
             
        usuariosSpanI = []
        sucursalesEmpleadosI = []
        tipoEmpleadosI = []
        coloresI = ['bg-blue', 'bg-azure', 'bg-indigo', 'bg.purple', 'bg-pink', 'bg-orange', 'bg-teal', 'bg-red', 'bg-gray']
        coloresRandomI=[]
        for empleadoInactivo in empleadosInactivos:
            nombreI = empleadoInactivo.nombres
            apellidoPatI = empleadoInactivo.apellido_paterno
            apellidoMatI = empleadoInactivo.apellido_materno 
            
            if empleadoInactivo.id_sucursal_id == None:
                esAdministradorI = True
                sucursalI = "Todas"
            else:
                esAdministradorI = False
                
                sucursalI = empleadoInactivo.id_sucursal_id 
            
            letraNombreI = nombreI[0]
            letraPaternoI = apellidoPatI[0]
            letraMaternoI = apellidoMatI[0]
            
        
            usuariosSpanI.append([letraNombreI, letraPaternoI, letraMaternoI])
            
            if esAdministradorI == False:
            
                sucursalesI = Sucursales.objects.filter(id_sucursal = sucursalI)
                for sucI in sucursalesI: 
                    nombreSucursalI = sucI.nombre
                    
                tipoI = "Empleado"
                    
            elif esAdministradorI == True:
                nombreSucursalI = "Todas"
                tipoI = "Administrador"
            
            colorRandomI = choice(coloresI)
            coloresRandomI.append(colorRandomI)
            sucursalesEmpleadosI.append(nombreSucursalI)
            tipoEmpleadosI.append(tipoI)
            
            
                
                
       
            
            
        lista = zip (empleados, usuariosSpan, sucursalesEmpleados, tipoEmpleados, coloresRandom)
        listaActivos =  zip (empleadosActivos, usuariosSpanA, sucursalesEmpleadosA, tipoEmpleadosA, coloresRandomA)
        listaInactivos =  zip (empleadosInactivos, usuariosSpanI, sucursalesEmpleadosI, tipoEmpleadosI, coloresRandomI)
        if 'empleadoActualizado' in request.session:
            mensaje = request.session['empleadoActualizado']
            del request.session['empleadoActualizado']
            
            return render(request, "3 Empleados/verEmpleados.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, "empleados":empleados, "usuariosSpan":usuariosSpan, "lista": lista,
        "contadorActivos":contadorActivos, "contadorInactivos":contadorInactivos, "mensaje":mensaje, "listaActivos":listaActivos,"listaInactivos":listaInactivos,"notificacionRenta":notificacionRenta,"notificacionCita":notificacionCita})
        
        
        


        return render(request, "3 Empleados/verEmpleados.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, "empleados":empleados, "usuariosSpan":usuariosSpan, "lista": lista,
        "contadorActivos":contadorActivos, "contadorInactivos":contadorInactivos,"listaActivos":listaActivos,"listaInactivos":listaInactivos,"notificacionRenta":notificacionRenta,"notificacionCita":notificacionCita})
    else:
        return render(request,"1 Login/login.html")


def altaSucursal(request):

    if "idSesion" in request.session:

        # Variables de sesión
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        idPerfil = idEmpleado
        idConfig = idEmpleado
    
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']

        # Variable para Menu
        estaEnAltaSucursal = True

        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
        
           #notificacionRentas
        notificacionRenta = notificacionRentas(request)

        #notificacionCitas
        notificacionCita = notificacionCitas(request)

        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)


        # retornar sucrusales
        sucursales = Sucursales.objects.all()
        if request.method == "POST":
            nombreSucursal = request.POST['nombreSucursal']
            telefono = request.POST['telefonoSucursal']
            direccion = request.POST['direccionSucursal']
            latitud = request.POST['latitud']
            longitud = request.POST['longitud']
       

      

            # Si usuario administrador..
     
            altaSucursal = Sucursales(nombre= nombreSucursal,
                direccion=direccion,
                telefono=telefono,
                latitud = latitud,
                longitud = longitud
                ) #Sin sucursal porque Admin
            altaSucursal.save()

            if altaSucursal:
                sucursalAgregado = "La sucursal "+nombreSucursal + " ha sido agregado satisfactoriamente!"
                return render(request, "4 Sucursales/altaSucursal.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado,"estaEnAltaSucursal":estaEnAltaSucursal, "sucursales":sucursales, "sucursalAgregado":sucursalAgregado,"notificacionRenta":notificacionRenta, "notificacionCita":notificacionCita})
            else:
                sucursalNoAgregada = "Error en la base de datos, intentelo más tarde.."
                return render(request, "4 Sucursales/altaSucursal.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado,"estaEnAltaSucursal":estaEnAltaSucursal, "sucursales":sucursales, "sucursalNoAgregada":sucursalNoAgregada,"notificacionRenta":notificacionRenta, "notificacionCita":notificacionCita})

        return render(request, "4 Sucursales/altaSucursal.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado,"estaEnAltaSucursal":estaEnAltaSucursal, "sucursales":sucursales,"notificacionRenta":notificacionRenta, "notificacionCita":notificacionCita})
    else:
        return render(request,"1 Login/login.html")

def verSucursales(request):

    if "idSesion" in request.session:

        # Variables de sesión
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']
        idPerfil = idEmpleado
        idConfig = idEmpleado
       

        

        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
        
           #notificacionRentas
        notificacionRenta = notificacionRentas(request)

        #notificacionCitas
        notificacionCita = notificacionCitas(request)

        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)


        empleadosPorSucursal = []
        
        empleadosTotalesPorSucursal =[]
   
        listaSucursales = Sucursales.objects.all()
        cantidadSucursales = 0
        
       
        
        for sucursal in listaSucursales:
            cantidadSucursales +=1
            id_sucursal_una = sucursal.id_sucursal
            sucursalInt = int(id_sucursal_una)
            
            empleadosEnSucursal = Empleados.objects.filter(id_sucursal_id__id_sucursal = sucursalInt)#filtro de los empleados que esten dentro de un area especifica
            if empleadosEnSucursal:
                empleadosDatos = []
                for datosEmpleado in empleadosEnSucursal:
                    idEmpleadoSucursal = datosEmpleado.id_empleado
                    nombreEmpleadoSucursal = datosEmpleado.nombres
                    apellidoPEmpleadoSucursal = datosEmpleado.apellido_paterno
                    apellidoMEmpleadoSucursal = datosEmpleado.apellido_materno
                    empleadosDatos.append([idEmpleadoSucursal,nombreEmpleadoSucursal,apellidoPEmpleadoSucursal,apellidoMEmpleadoSucursal])
                empleadosTotalesPorSucursal.append(empleadosDatos)
                
                numero_empleados = 0
                for empleado in empleadosEnSucursal:
                    numero_empleados+=1
                
                empleadosPorSucursal.append(numero_empleados)
            else:
                empleadosTotalesPorSucursal.append("Sin empleados")
                empleadosPorSucursal.append(0)

                
                    
        
            
        lista = zip(listaSucursales,empleadosTotalesPorSucursal)
                
                
       
            
            
        
        
        
        


        return render(request, "4 Sucursales/verSucursales.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, "lista":lista, "cantidadSucursales":cantidadSucursales,"notificacionRenta":notificacionRenta,"notificacionCita":notificacionCita})
    else:
        return render(request,"1 Login/login.html")

def editarEmpleado(request):

    if "idSesion" in request.session:

        # Variables de sesión
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']
        idPerfil = idEmpleado
        idConfig = idEmpleado
       
        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
        
           #notificacionRentas
        notificacionRenta = notificacionRentas(request)

        #notificacionCitas
        notificacionCita = notificacionCitas(request)
        
         #permisosEmpleado
        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)
        
        listaSucursales = []
        listaSucursalesFaltantes =[]

        if request.method == "POST":
            idEmpleadoEditar = request.POST['idEmpleadoEditar']

            consultaEmpleado = Empleados.objects.filter(id_empleado = idEmpleadoEditar)

            for dato in consultaEmpleado:
                idEmpleadoEditar2 = dato.id_empleado
                idEmpleadoEditar3 = dato.id_empleado
                idEmpleadoEditar4 = dato.id_empleado
                nombreUsuario = dato.nombre_usuario
                nombres = dato.nombres
                apellidoPaterno = dato.apellido_paterno
                apellidoMaterno = dato.apellido_materno
                telefono = dato.telefono
                puesto = dato.puesto
                estatus = dato.estado_contratacion
                fecha_alta = dato.fecha_alta

                fecha_baja = dato.fecha_baja
                if dato.id_sucursal_id == None:
                    sucursal = "Todas"
                    idsucursal = ""
                    tipo = "Administrador"
                else:
                    
                    idsucursal = dato.id_sucursal_id
                    tipo ="Empleado"
                    sucursales = Sucursales.objects.filter(id_sucursal = idsucursal)
                    for dato in sucursales:
                        sucursal = dato.nombre


                letrasEmpleado = nombres[0] + apellidoPaterno[0] + apellidoMaterno[0]
            
            sucursalesTotales = Sucursales.objects.all()
            for totales in sucursalesTotales:
                sucursal_TotalID = totales.id_sucursal
                nombre_sucursal = totales.nombre
                listaSucursales.append([sucursal_TotalID,nombre_sucursal])
                listaSucursalesFaltantes.append([sucursal_TotalID,nombre_sucursal])
                
            if idsucursal != "":
                listaSucursalesFaltantes.pop(idsucursal -1)
            
            if estatus == "A":
                activo = True
                activo2 = True
            elif estatus == "I":
                activo = False
                activo2 = False

            totalVentas = 0
            contadorVentas = 0
            consultaVentas = Ventas.objects.filter(empleado_vendedor_id__id_empleado = idEmpleadoEditar)  
            for venta in consultaVentas:
                montoVendido = venta.monto_pagar
                contadorVentas = contadorVentas + 1
                totalVentas = totalVentas + montoVendido     
            



            return render(request, "3 Empleados/editarEmpleado.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado, "idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado,
        "nombres":nombres,"apellidoPaterno":apellidoPaterno, "apellidoMaterno":apellidoMaterno, "telefono":telefono,
        "puesto":puesto, "nombreUsuario":nombreUsuario, "letrasEmpleado":letrasEmpleado, "tipo":tipo,"sucursal":sucursal, "idsucursal":idsucursal,"listaSucursales":listaSucursales,"listaSucursalesFaltantes":listaSucursalesFaltantes, "idEmpleadoEditar2":idEmpleadoEditar2, "activo":activo, "fecha_alta":fecha_alta, 
        "fecha_baja":fecha_baja, "idEmpleadoEditar3":idEmpleadoEditar3, "idEmpleadoEditar4":idEmpleadoEditar4,"activo2":activo2, "contadorVentas":contadorVentas, "totalVentas":totalVentas,"notificacionRenta":notificacionRenta,"notificacionCita":notificacionCita})

        return redirect('/verEmpleados/')
    else:
        return render(request,"1 Login/login.html")

        
    
def actInfoPersonal(request):

    if "idSesion" in request.session:

        idEmpleado = request.session['idSesion']
       

        if request.method == "POST":
            idActualizado = request.POST['idActualizado']
            nombreActualizado = request.POST['nombreActualizado']
            apellidoPatActualizado = request.POST['apellidoPatActualizado']
            apellidoMatActualizado = request.POST['apellidoMatActualizado']
            telefonoActualizado = request.POST['telefonoActualizado']




            if str(idEmpleado) == str(idActualizado):
                del request.session['nombresSesion']
                request.session['nombresSesion'] = nombreActualizado

            

            actualizarInfoPersonal = Empleados.objects.filter(id_empleado = idActualizado).update(nombres = nombreActualizado, apellido_paterno = apellidoPatActualizado,
                                                                                               apellido_materno = apellidoMatActualizado, telefono = telefonoActualizado)
            
            if actualizarInfoPersonal:
                #falta notificacion
                request.session['empleadoActualizado'] = "La empleada " + nombreActualizado + " ha sido actualizado satisfactoriamente."
                return redirect('/verEmpleados/')
            
                    
            



            

        return redirect('/verEmpleados/')
    else:
        return render(request,"1 Login/login.html")
    

def actInfoLaboral(request):

    if "idSesion" in request.session:

        idEmpleado = request.session['idSesion']

        if request.method == "POST":
            idActualizado = request.POST['idActualizado']
            tipoUsuarioActualizado = request.POST['tipoUsuario']
            puestoActualizado = request.POST['puestoUsuario']
            idSucursalActualizado = request.POST['idSucursal'] #Id o puede ser "Todas" 

            if str(idEmpleado) == str(idActualizado):
                request.session['tipoUsuario'] = tipoUsuarioActualizado
                request.session['puestoEmpleado'] = puestoActualizado

        
            consultaEmpleado = Empleados.objects.filter(id_empleado = idActualizado)

            for dato in consultaEmpleado:
                nombre = dato.nombres

            if idSucursalActualizado == "Todas":
                actualizarInfoLaboral = Empleados.objects.filter(id_empleado = idActualizado).update(puesto = puestoActualizado, id_sucursal = None)
                
                #Darle todos los permisos..
                
            else:
                actualizarInfoLaboral = Empleados.objects.filter(id_empleado = idActualizado).update(puesto = puestoActualizado, id_sucursal = Sucursales.objects.get(id_sucursal = idSucursalActualizado) )
                #falta notificacion
                
                #Quitarle todos los permisos..
                
            if actualizarInfoLaboral:    
                request.session['empleadoActualizado'] = "El empleado " + nombre + " ha sido actualizado satisfactoriamente."
                return redirect('/verEmpleados/')
                    
            



            

        return redirect('/verEmpleados/')
    else:
        return render(request,"1 Login/login.html")  
    

def darAltaEmpleado(request):

    if "idSesion" in request.session:

        if request.method == "POST":
            idEmpleadoAlta = request.POST['idEmpleadoAlta']

            consultaEmpleado = Empleados.objects.filter(id_empleado = idEmpleadoAlta)

            for dato in consultaEmpleado:
                nombre = dato.nombres

            fechaAlta = datetime.today().strftime('%Y-%m-%d')

            actualizacionEmpleado = Empleados.objects.filter(id_empleado = idEmpleadoAlta).update(estado_contratacion = "A", fecha_baja=None, fecha_alta = fechaAlta)
            
            if actualizacionEmpleado:    
                request.session['empleadoActualizado'] = "El empleado " + nombre + " ha sido dado de alta en el sistema."
                return redirect('/verEmpleados/')
                    
            



            

        return redirect('/verEmpleados/')
    else:
        return render(request,"1 Login/login.html")  

def darBajaEmpleado(request):

    if "idSesion" in request.session:

        if request.method == "POST":
            idEmpleadoBaja = request.POST['idEmpleadoBaja']

            consultaEmpleado = Empleados.objects.filter(id_empleado = idEmpleadoBaja)

            for dato in consultaEmpleado:
                nombre = dato.nombres

            fechaBaja = datetime.today().strftime('%Y-%m-%d')

            actualizacionEmpleado = Empleados.objects.filter(id_empleado = idEmpleadoBaja).update(estado_contratacion = "I", fecha_baja=fechaBaja)
            
            if actualizacionEmpleado:    
                request.session['empleadoActualizado'] = "El empleado " + nombre + " ha sido dado de baja del sistema."
                return redirect('/verEmpleados/')
                    
            



            

        return redirect('/verEmpleados/')
    else:
        return render(request,"1 Login/login.html")  
        
def editarConfiguracionEmpleado(request):

    if "idSesion" in request.session:

        # Variables de sesión
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']
        idPerfil = idEmpleado
        idConfig = idEmpleado
       
        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
        
           #notificacionRentas
        notificacionRenta = notificacionRentas(request)

        #notificacionCitas
        notificacionCita = notificacionCitas(request)
        
         #permisosEmpleado
        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)
        
        listaSucursales = []
        listaSucursalesFaltantes =[]

        if request.method == "POST":
            idEmpleadoConfigurar = request.POST['idEmpleadoConfigurar']

            consultaEmpleado = Empleados.objects.filter(id_empleado = idEmpleadoConfigurar)

            for dato in consultaEmpleado:
                idEmpleadoEditar2 = dato.id_empleado
                idEmpleadoEditar3 = dato.id_empleado
                idEmpleadoEditar4 = dato.id_empleado
                nombreUsuario = dato.nombre_usuario
                nombres = dato.nombres
                apellidoPaterno = dato.apellido_paterno
                apellidoMaterno = dato.apellido_materno
                telefono = dato.telefono
                puesto = dato.puesto
                estatus = dato.estado_contratacion
                fecha_alta = dato.fecha_alta

                fecha_baja = dato.fecha_baja
                if dato.id_sucursal_id == None:
                    sucursal = "Todas"
                    idsucursal = ""
                    tipo = "Administrador"
                else:
                    
                    idsucursal = dato.id_sucursal_id
                    tipo ="Empleado"
                    sucursales = Sucursales.objects.filter(id_sucursal = idsucursal)
                    for dato in sucursales:
                        sucursal = dato.nombre


                letrasEmpleado = nombres[0] + apellidoPaterno[0] + apellidoMaterno[0]
            
            sucursalesTotales = Sucursales.objects.all()
            for totales in sucursalesTotales:
                sucursal_TotalID = totales.id_sucursal
                nombre_sucursal = totales.nombre
                listaSucursales.append([sucursal_TotalID,nombre_sucursal])
                listaSucursalesFaltantes.append([sucursal_TotalID,nombre_sucursal])
                
            if idsucursal != "":
                listaSucursalesFaltantes.pop(idsucursal -1)
            
            if estatus == "A":
                activo = True
            elif estatus == "I":
                activo = False

            totalVentas = 0
            contadorVentas = 0
            consultaVentas = Ventas.objects.filter(empleado_vendedor_id__id_empleado = idEmpleadoConfigurar)  
            for venta in consultaVentas:
                montoVendido = venta.monto_pagar
                contadorVentas = contadorVentas + 1
                totalVentas = totalVentas + montoVendido   
                    
            



            return render(request, "3 Empleados/configEmpleado.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado, "idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado,
        "nombres":nombres,"apellidoPaterno":apellidoPaterno, "apellidoMaterno":apellidoMaterno, "telefono":telefono,
        "puesto":puesto, "nombreUsuario":nombreUsuario, "letrasEmpleado":letrasEmpleado, "tipo":tipo,"sucursal":sucursal, "idsucursal":idsucursal,"listaSucursales":listaSucursales,"listaSucursalesFaltantes":listaSucursalesFaltantes, "idEmpleadoEditar2":idEmpleadoEditar2, "activo":activo, "fecha_alta":fecha_alta, 
        "fecha_baja":fecha_baja, "idEmpleadoEditar3":idEmpleadoEditar3, "idEmpleadoEditar4":idEmpleadoEditar4, "totalVentas":totalVentas, "contadorVentas":contadorVentas,"notificacionRenta":notificacionRenta,"notificacionCita":notificacionCita})

        return redirect('/verEmpleados/')
    else:
        return render(request,"1 Login/login.html")




def xlInventarioProductosVenta(request):
    if request.method == "POST":
        tipoProductos= request.POST['tipoProductos'] #A o I
        sucursalInventarioProductosVenta = request.POST['sucursalInventarioProductosVenta']
            
    response = HttpResponse(content_type='application/ms-excel')
    if tipoProductos == "productosVenta":
    
        response['Content-Disposition'] = 'attachment; filename=Reporte Inventario Productos para venta '+str(datetime.today().strftime('%Y-%m-%d'))+'.xls'
    elif tipoProductos == "productosGasto":
        response['Content-Disposition'] = 'attachment; filename=Reporte Inventario Productos gasto '+str(datetime.today().strftime('%Y-%m-%d'))+'.xls'
    elif tipoProductos == "productosRenta":
        response['Content-Disposition'] = 'attachment; filename=Reporte Inventario Productos para renta '+str(datetime.today().strftime('%Y-%m-%d'))+'.xls'
    
    
    #creación de libro de excel
    libro = xlwt.Workbook(encoding='utf-8')
    hoja = libro.add_sheet('Productos')
    
    numero_fila = 0
    estilo_fuente = xlwt.XFStyle()
    estilo_fuente.font.bold = True
    
    if tipoProductos == "productosVenta":
        columnas = ['Id','Código Producto','Nombre','SKU','Costo unitario','Existencias','Costo Total en inventario', 'Margen de ganancia', 'Costo de venta', 'Stock', 'Fecha de agregado','Sucursal']
    elif tipoProductos == "productosGasto":
        columnas = ['Id','Código Producto','Nombre','SKU','Costo unitario','Existencias','Costo Total en inventario', 'Stock', 'Fecha de agregado','Sucursal']
    elif tipoProductos == "productosRenta":
        columnas = ['Id','Código Producto','Nombre','Costo compra','Existencias','Estado de renta','Costo de renta', 'Fecha de agregado','Sucursal']
    
    for columna in range(len(columnas)):
        hoja.write(numero_fila, columna, columnas[columna], estilo_fuente)
       
    
    #lista de productos dependiento de la sucursal
    if sucursalInventarioProductosVenta == "todas":
        if tipoProductos == "productosVenta":
            productosVenta = ProductosVenta.objects.all()
        elif tipoProductos == "productosGasto":
            productosVenta = ProductosGasto.objects.all()
        elif tipoProductos == "productosRenta":
            productosVenta = ProductosRenta.objects.all()
        
    else:
        if tipoProductos == "productosVenta":
            productosVenta = ProductosVenta.objects.filter(sucursal_id__id_sucursal = sucursalInventarioProductosVenta)
        elif tipoProductos == "productosGasto":
            productosVenta = ProductosGasto.objects.filter(sucursal_id__id_sucursal = sucursalInventarioProductosVenta)
        elif tipoProductos == "productosRenta":
            productosVenta = ProductosRenta.objects.filter(sucursal_id__id_sucursal = sucursalInventarioProductosVenta)
    
    sucursales = []
    costosTotalesProductos = []
    for producto in productosVenta:
        sucursalProducto = producto.sucursal_id
        consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursalProducto)
        for datoSucursal in consultaSucursal:
            nombreSucursal = datoSucursal.nombre
            
        sucursales.append(nombreSucursal)
        
        if tipoProductos == "productosRenta":
            jejej = True
        else:
            costoCompraProducto = producto.costo_compra
            cantidadExistenteProducto = producto.cantidad
            
            costoTotalProducto = float(costoCompraProducto) * float(cantidadExistenteProducto)
            costosTotalesProductos.append(costoTotalProducto)
        
    datosProductos = []
    cont=0
    for x in productosVenta:
        cont+=1
        if tipoProductos == "productosVenta":
            datosProductos.append([x.id_producto, x.codigo_producto, x.nombre_producto,x.sku_producto, x.costo_compra,x.cantidad
                               ,costosTotalesProductos[cont-1],x.margen_ganancia_producto,x.costo_venta,x.stock,x.fecha_alta, sucursales[cont-1]
                            ])
        elif tipoProductos == "productosGasto":
            datosProductos.append([x.id_producto, x.codigo_producto, x.nombre_producto,x.sku_producto, x.costo_compra,x.cantidad
                               ,costosTotalesProductos[cont-1],x.stock,x.fecha_alta, sucursales[cont-1]
                            ])
        elif tipoProductos == "productosRenta":
            datosProductos.append([x.id_producto, x.codigo_producto, x.nombre_producto, x.costo_de_compra,x.cantidad
                               ,x.estado_renta,x.costo_renta,x.fecha_alta, sucursales[cont-1]
                            ])
            
        
    estilo_fuente = xlwt.XFStyle()
    for productito in datosProductos:
        numero_fila+=1
        for columna in range(len(productito)):
            hoja.write(numero_fila, columna, str(productito[columna]), estilo_fuente)
        
    
    
    
        
    libro.save(response)
    return response    
    #creación 
    
    

def xlInventarioCiclicoProductosVenta(request):
    if request.method == "POST":
        tipoProductos= request.POST['tipoProductos'] #A o I
        sucursalInventarioProductosVenta = request.POST['sucursalInventarioProductosVenta']
            
    response = HttpResponse(content_type='application/ms-excel')
    if tipoProductos == "productosVenta":
    
        response['Content-Disposition'] = 'attachment; filename=Reporte Inventario cíclico Productos para venta '+str(datetime.today().strftime('%Y-%m-%d'))+'.xls'
    elif tipoProductos == "productosGasto":
        response['Content-Disposition'] = 'attachment; filename=Reporte Inventario cíclico Productos gasto '+str(datetime.today().strftime('%Y-%m-%d'))+'.xls'
    elif tipoProductos == "productosRenta":
        response['Content-Disposition'] = 'attachment; filename=Reporte Inventario cíclico Productos para renta '+str(datetime.today().strftime('%Y-%m-%d'))+'.xls'
    
    
    #creación de libro de excel
    libro = xlwt.Workbook(encoding='utf-8')
    hoja = libro.add_sheet('Productos')
    
    numero_fila = 0
    estilo_fuente = xlwt.XFStyle()
    estilo_fuente.font.bold = True
    
    columnas = ['Sucursal','Id','Código Producto','Nombre','SKU','Stock','Costo unitario de compra','Existencias en sistema','Cantidad Contada', 'Diferencia +/-']
    for columna in range(len(columnas)):
        hoja.write(numero_fila, columna, columnas[columna], estilo_fuente)
       
    
    #lista de productos dependiento de la sucursal
    if sucursalInventarioProductosVenta == "todas":
        if tipoProductos == "productosVenta":
            productosVenta = ProductosVenta.objects.all()
        elif tipoProductos == "productosGasto":
            productosVenta = ProductosGasto.objects.all()
        elif tipoProductos == "productosRenta":
            productosVenta = ProductosRenta.objects.all()
    else:
        if tipoProductos == "productosVenta":
            productosVenta = ProductosVenta.objects.filter(sucursal_id__id_sucursal = sucursalInventarioProductosVenta)
        elif tipoProductos == "productosGasto":
            productosVenta = ProductosGasto.objects.filter(sucursal_id__id_sucursal = sucursalInventarioProductosVenta)
        elif tipoProductos == "productosRenta":
            productosVenta = ProductosRenta.objects.filter(sucursal_id__id_sucursal = sucursalInventarioProductosVenta)
        
    
    sucursales = []
    costosTotalesProductos = []
    for producto in productosVenta:
        sucursalProducto = producto.sucursal_id
        consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursalProducto)
        for datoSucursal in consultaSucursal:
            nombreSucursal = datoSucursal.nombre
            
        sucursales.append(nombreSucursal)
        
       
        
    datosProductos = []
    cont=0
    for x in productosVenta:
        cont+=1
        datosProductos.append([sucursales[cont-1],x.id_producto, x.codigo_producto, x.nombre_producto,x.sku_producto, x.stock,x.costo_compra,x.cantidad,"",""
                            ])
            
        
    estilo_fuente = xlwt.XFStyle()
    for productito in datosProductos:
        numero_fila+=1
        for columna in range(len(productito)):
            hoja.write(numero_fila, columna, str(productito[columna]), estilo_fuente)
        
    
    
    
        
    libro.save(response)
    return response    
    #creación 
    
    

def informeStockBajoProductosVenta(request):
    if request.method == "POST":
        tipoProductos= request.POST['tipoProductos']
        sucursalInventarioProductosVenta = request.POST['sucursalInventarioProductosVenta']
        
        if tipoProductos == "productosVenta":
            if sucursalInventarioProductosVenta == "todas":
                consultaProductosVenta = ProductosVenta.objects.all()
            else:
                consultaProductosVenta = ProductosVenta.objects.filter(sucursal_id__id_sucursal = sucursalInventarioProductosVenta)
                
        if tipoProductos == "productosGasto":
            if sucursalInventarioProductosVenta == "todas":
                consultaProductosVenta = ProductosGasto.objects.all()
            else:
                consultaProductosVenta = ProductosGasto.objects.filter(sucursal_id__id_sucursal = sucursalInventarioProductosVenta)
                
        if tipoProductos == "productosRenta":
            if sucursalInventarioProductosVenta == "todas":
                consultaProductosVenta = ProductosRenta.objects.all()
            else:
                consultaProductosVenta = ProductosRenta.objects.filter(sucursal_id__id_sucursal = sucursalInventarioProductosVenta)
            
                
        productosBajosEnStock = []
        for producto in consultaProductosVenta:
            existenciaActual = producto.cantidad
            stockActual = producto.stock
            
            if existenciaActual <= stockActual:
                idProducto = producto.id_producto
                codigoProducto = producto.codigo_producto
                nombreProducto = producto.nombre_producto
                skuProducto = producto.sku_producto
                costoUnitarioProducto = producto.costo_compra
                fechaAgregadoProducto = producto.fecha_alta
                sucursalProducto = producto.sucursal_id
                
                consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursalProducto)
                for datoSucursal in consultaSucursal:
                    nombreSucursalProducto = datoSucursal.nombre
                    
                productosBajosEnStock.append([idProducto,codigoProducto,nombreProducto,skuProducto,costoUnitarioProducto,stockActual,existenciaActual,fechaAgregadoProducto,
                                              nombreSucursalProducto])
                    
        try:
            #Excel.
            response = HttpResponse(content_type='application/ms-excel')
            response['Content-Disposition'] = 'attachment; filename=Reporte Stock Bajo Productos Venta '+str(datetime.today().strftime('%Y-%m-%d'))+'.xls'
            
            libro = xlwt.Workbook(encoding='utf-8')
            hoja = libro.add_sheet('Productos')
            
            numero_fila = 0
            estilo_fuente = xlwt.XFStyle()
            estilo_fuente.font.bold = True
            
            columnas = ['Id','Código Producto','Nombre','SKU','Costo unitario','Stock','Existencias','Fecha de agregado','Sucursal']
            for columna in range(len(columnas)):
                hoja.write(numero_fila, columna, columnas[columna], estilo_fuente)
            
            estilo_fuente = xlwt.XFStyle()
            for productito in productosBajosEnStock:
                numero_fila+=1
                for columna in range(len(productito)):
                    hoja.write(numero_fila, columna, str(productito[columna]), estilo_fuente)
            

            libro.save(response)
            
            #Datos a mandar en correo.
            
            #datos de sucursal
            if sucursalInventarioProductosVenta == "todas":
                nombreSucursalCorreo = "Todas las sucursales"
            else:
                consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursalInventarioProductosVenta)
                for datoSucursal in consultaSucursal:
                    nombreSucursalCorreo = datoSucursal.nombre
                
            #datos empleado
            nombresEmpleado = request.session['nombresSesion']
            
            if tipoProductos == "productosVenta":
                productos = "venta"
            elif tipoProductos == "productosGasto":
                productos = "gasto"
                
            
            #Mandar correo.
            correo = "sistemas@customco.com.mx"
            asunto = "Costabella | Informe de Productos Venta con stock bajo."
            plantilla = "6 Productos/Correos/correoStockPv.html"
            html_mensaje = render_to_string(plantilla,{"nombreSucursalCorreo":nombreSucursalCorreo,"nombresEmpleado":nombresEmpleado, "productos":productos}) #Aqui va el diccionario de datos.
            email_remitente = settings.EMAIL_HOST_USER
            email_destino = [correo]
            mensaje = EmailMessage(asunto, html_mensaje, email_remitente, email_destino)
            mensaje.content_subtype = 'html'
            #Mandar excel en el correo.
            mensaje.attach('Reporte Stock Bajo Productos Venta '+str(datetime.today().strftime('%Y-%m-%d'))+'.xls', response.getvalue())
            mensaje.send()
            request.session['correoEnviado'] = "Se ha mandado el informe a tu correo electrónico!"
            return redirect('/inventarioProductos/')
        except:
            request.session['correoNoEnviado'] = "Error en el proceso, avisar a Soporte!"
            return redirect('/inventarioProductos/')
    
def ajusteProductosVenta(request):
    
    if request.method == "POST":
        
        sucursal = request.POST['sucursal']
        myfile = request.FILES['archivoExcelAjusteProductosVenta']     
        
        '''try:'''
       
        data = pd.read_excel(myfile, sheet_name="Productos")  
        
        sucursalesProductos = data['Sucursal'].tolist()
        idsProductosVenta = data['Id'].tolist()
        codigosProductosVenta = data['Código Producto'].tolist()
        nombresProductosVenta = data['Nombre'].tolist()
        skuProductosVenta = data['SKU'].tolist()
        stocksProductosVenta = data['Stock'].tolist()
        costosUnitariosProductosVenta = data['Costo unitario de compra'].tolist()
        existenciasProductosVenta = data['Existencias en sistema'].tolist()
        cantidadContadaProductosVenta = data['Cantidad Contada'].tolist()
        diferenciaProductosVenta = data['Diferencia +/-'].tolist()
        
        
        
        
        
        if sucursal == "todas":
            consultaProductosVenta = ProductosVenta.objects.all()
            sucursalCoincide = True
        else:
            sucuralDelExcel = sucursalesProductos[0] #Se saca la sucursal de un producto
            
            sucursalCoincide = True
            consultaSucursalElegida = Sucursales.objects.filter(id_sucursal = sucursal)
            for datoSucursal in consultaSucursalElegida:
                nombreSucursal = datoSucursal.nombre
                
            if nombreSucursal == sucuralDelExcel:
                consultaProductosVenta = ProductosVenta.objects.filter(sucursal_id__id_sucursal = sucursal)
            else:
                sucursalCoincide = False
        
        if sucursalCoincide:
            for productoVenta in consultaProductosVenta:
                idProducto = productoVenta.id_producto
                codigoProducto = productoVenta.codigo_producto 
                listaExcel = zip(idsProductosVenta,codigosProductosVenta,stocksProductosVenta,costosUnitariosProductosVenta,existenciasProductosVenta,cantidadContadaProductosVenta,diferenciaProductosVenta)
                for ida, codigo, stock, costo, existencias, cantidadContada, diferencia in listaExcel:
                    idProductoExcel = int(ida)
                    codigoProductoExcel = str(codigo)
                    
                    
                    if idProducto == idProductoExcel and codigoProducto == codigoProductoExcel:
                        isNaN = np.isnan(cantidadContada) #Si el campo de cantidad contada es nulo
                        
                        if isNaN == False:
                            
                            
                            stockProductoExcel = int(stock)
                            costoProductoExcel = float(costo)
                            existenciasProductoExcel = int(existencias)
                            cantidadContadaProductoExcel = int(cantidadContada)
                            diferenciaProductoExcel = str(diferencia)
                            
                            print(str(codigoProductoExcel)+" "+str(cantidadContadaProductoExcel))
                        
                            try:
                                actualizacionProducto = ProductosVenta.objects.filter(id_producto = idProductoExcel, codigo_producto = codigoProductoExcel).update(
                                    stock = stockProductoExcel, costo_compra = costoProductoExcel,cantidad = cantidadContadaProductoExcel)
                                
                                productosActualizados = True
                                
                            except:
                                productosActualizados = False
        
                            
        
            if productosActualizados:
                
                #CORREEEEEOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO 
                #datos de sucursal
                if sucursal == "todas":
                    nombreSucursalCorreo = "Todas las sucursales"
                else:
                    consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursal)
                    for datoSucursal in consultaSucursal:
                        nombreSucursalCorreo = datoSucursal.nombre
                    
                #datos empleado
                nombresEmpleado = request.session['nombresSesion']
                
                productos = "venta"
                
                #Mandar el excel
                listaExcelSubido = zip(sucursalesProductos,idsProductosVenta,codigosProductosVenta,nombresProductosVenta,skuProductosVenta,stocksProductosVenta,
                                       costosUnitariosProductosVenta,existenciasProductosVenta,cantidadContadaProductosVenta,diferenciaProductosVenta)
                
                listaParaGenerarExcel = []
                for sucursalES, idES, codigoES, nombreES,skuES, stokES, costoUnitarioES, existenciasProductoES, cantidadContadaES, diferenciaProductosES in listaExcelSubido:
                    listaParaGenerarExcel.append([sucursalES,idES,codigoES,nombreES,skuES,stokES,costoUnitarioES,existenciasProductoES,cantidadContadaES,diferenciaProductosES])
                
                 #Excel.
                response = HttpResponse(content_type='application/ms-excel')
                response['Content-Disposition'] = 'attachment; filename=Ajuste productos venta '+str(datetime.today().strftime('%Y-%m-%d'))+'.xls'
                
                libro = xlwt.Workbook(encoding='utf-8')
                hoja = libro.add_sheet('Productos')
                
                numero_fila = 0
                estilo_fuente = xlwt.XFStyle()
                estilo_fuente.font.bold = True
                
                columnas = ['Sucursal','Id','Código Producto','Nombre','SKU','Stock','Costo unitario de compra','Exsitencias en sistema','Cantidad Contada','Diferencia +/-']
                for columna in range(len(columnas)):
                    hoja.write(numero_fila, columna, columnas[columna], estilo_fuente)
                
                estilo_fuente = xlwt.XFStyle()
                for productito in listaParaGenerarExcel:
                    numero_fila+=1
                    for columna in range(len(productito)):
                        hoja.write(numero_fila, columna, str(productito[columna]), estilo_fuente)
                

                libro.save(response)
                
                
                #Mandar correo.
                correo = "sistemas@customco.com.mx"
                asunto = "Costabella | Ajuste de productos para venta."
                plantilla = "6 Productos/Correos/correoAjustePv.html"
                html_mensaje = render_to_string(plantilla,{"nombreSucursalCorreo":nombreSucursalCorreo,"nombresEmpleado":nombresEmpleado, "productos":productos}) #Aqui va el diccionario de datos.
                email_remitente = settings.EMAIL_HOST_USER
                email_destino = [correo]
                mensaje = EmailMessage(asunto, html_mensaje, email_remitente, email_destino)
                mensaje.content_subtype = 'html'
                #Mandar excel en el correo.
                mensaje.attach('Ajuste de productos para venta '+str(datetime.today().strftime('%Y-%m-%d'))+'.xls', response.getvalue())
                mensaje.send()
                
                
                
                # FIN CORREEEEOOOOOOOOOOOOOOOOOOOO
                
                # MANDAR NOTIFICACIÓN A TELÉFONO.
                try:
                    tokenTelegram = keysBotCostabella.tokenBotCostabella
                    botCostabella = telepot.Bot(tokenTelegram)

                    idGrupoTelegram = keysBotCostabella.idGrupo

                    if sucursal == "todas":
                        mensajeSucursalesTotdas = True
                    else:
                        mensajeSucursalesTotdas = False

                    date = datetime.now()
                    hora = date.time().strftime("%H:%M")

                    if mensajeSucursalesTotdas:
                        mensaje = "Hola \U0001F44B! La empleada administradora "+nombresEmpleado+" ha realizado un ajuste de existencias de productos para venta en todas las sucursales costabella a las "+str(hora)+" horas. Favor de checar correo electrónico"
                    else:
                        mensaje = "Hola \U0001F44B! La empleada "+nombresEmpleado+" ha realizado un ajuste de existencias de productos para venta en la sucursal "+nombreSucursalCorreo+" a las "+str(hora)+" horas. Favor de checar correo electrónico."
                    botCostabella.sendMessage(idGrupoTelegram,mensaje)

                except:
                    print("An exception occurred")
                
                    
                request.session['productosActualizados'] = "Se han actualizado los productos para venta con el Excel subido!"
                return redirect('/inventarioProductos/')  
            else:  
                request.session['errorProductosActualizados'] = "Error al actualizar los datos, intente de nuevo más tarde."
                return redirect('/inventarioProductos/')   
        else:
            request.session['errorProductosActualizados'] = "La sucursal elegida no coincide con la sucursal del Excel, favor de elegir bien la sucursal."
            return redirect('/inventarioProductos/')            
        
        
            
def ajusteProductosGasto(request):
    
    if request.method == "POST":
        
        sucursal = request.POST['sucursal']
        myfile = request.FILES['archivoExcelAjusteProductosGasto']     
        
        try:
       
            data = pd.read_excel(myfile, sheet_name="Productos")  
            
            sucursalesProductos = data['Sucursal'].tolist()
            idsProductosVenta = data['Id'].tolist()
            codigosProductosVenta = data['Código Producto'].tolist()
            nombresProductosVenta = data['Nombre'].tolist()
            skuProductosVenta = data['SKU'].tolist()
            stocksProductosVenta = data['Stock'].tolist()
            costosUnitariosProductosVenta = data['Costo unitario de compra'].tolist()
            existenciasProductosVenta = data['Existencias en sistema'].tolist()
            cantidadContadaProductosVenta = data['Cantidad Contada'].tolist()
            diferenciaProductosVenta = data['Diferencia +/-'].tolist()
            
            
            
            
            
            if sucursal == "todas":
                consultaProductosGasto = ProductosGasto.objects.all()
                sucursalCoincide = True
            else:
                sucuralDelExcel = sucursalesProductos[0] #Se saca la sucursal de un producto
                
                sucursalCoincide = True
                consultaSucursalElegida = Sucursales.objects.filter(id_sucursal = sucursal)
                for datoSucursal in consultaSucursalElegida:
                    nombreSucursal = datoSucursal.nombre
                    
                if nombreSucursal == sucuralDelExcel:
                    consultaProductosGasto = ProductosGasto.objects.filter(sucursal_id__id_sucursal = sucursal)
                else:
                    sucursalCoincide = False
            
            if sucursalCoincide:
                for productoVenta in consultaProductosGasto:
                    idProducto = productoVenta.id_producto
                    codigoProducto = productoVenta.codigo_producto 
                    listaExcel = zip(idsProductosVenta,codigosProductosVenta,stocksProductosVenta,costosUnitariosProductosVenta,existenciasProductosVenta,cantidadContadaProductosVenta,diferenciaProductosVenta)
                    for ida, codigo, stock, costo, existencias, cantidadContada, diferencia in listaExcel:
                        idProductoExcel = int(ida)
                        codigoProductoExcel = str(codigo)
                        
                        
                        if idProducto == idProductoExcel and codigoProducto == codigoProductoExcel:
                            isNaN = np.isnan(cantidadContada) #Si el campo de cantidad contada es nulo
                            
                            if isNaN == False:
                                
                                
                                stockProductoExcel = int(stock)
                                costoProductoExcel = float(costo)
                                existenciasProductoExcel = int(existencias)
                                cantidadContadaProductoExcel = int(cantidadContada)
                                diferenciaProductoExcel = str(diferencia)
                                
                                print(str(codigoProductoExcel)+" "+str(cantidadContadaProductoExcel))
                            
                                try:
                                    actualizacionProducto = ProductosGasto.objects.filter(id_producto = idProductoExcel, codigo_producto = codigoProductoExcel).update(
                                        stock = stockProductoExcel, costo_compra = costoProductoExcel,cantidad = cantidadContadaProductoExcel)
                                    
                                    productosActualizados = True
                                    
                                except:
                                    productosActualizados = False
            
                                
            
                if productosActualizados: 
                    
                     #CORREEEEEOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO 
                    #datos de sucursal
                    if sucursal == "todas":
                        nombreSucursalCorreo = "Todas las sucursales"
                    else:
                        consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursal)
                        for datoSucursal in consultaSucursal:
                            nombreSucursalCorreo = datoSucursal.nombre
                    
                    #datos empleado
                    nombresEmpleado = request.session['nombresSesion']
                    
                    productos = "gasto"
            
                    #Mandar el excel
                    listaExcelSubido = zip(sucursalesProductos,idsProductosVenta,codigosProductosVenta,nombresProductosVenta,skuProductosVenta,stocksProductosVenta,
                                       costosUnitariosProductosVenta,existenciasProductosVenta,cantidadContadaProductosVenta,diferenciaProductosVenta)

                    listaParaGenerarExcel = []
                    for sucursalES, idES, codigoES, nombreES,skuES, stokES, costoUnitarioES, existenciasProductoES, cantidadContadaES, diferenciaProductosES in listaExcelSubido:
                        listaParaGenerarExcel.append([sucursalES,idES,codigoES,nombreES,skuES,stokES,costoUnitarioES,existenciasProductoES,cantidadContadaES,diferenciaProductosES])
                    
                    #Excel.
                    response = HttpResponse(content_type='application/ms-excel')
                    response['Content-Disposition'] = 'attachment; filename=Ajuste productos venta '+str(datetime.today().strftime('%Y-%m-%d'))+'.xls'
                    
                    libro = xlwt.Workbook(encoding='utf-8')
                    hoja = libro.add_sheet('Productos')
                    
                    numero_fila = 0
                    estilo_fuente = xlwt.XFStyle()
                    estilo_fuente.font.bold = True
                    
                    columnas = ['Sucursal','Id','Código Producto','Nombre','SKU','Stock','Costo unitario de compra','Exsitencias en sistema','Cantidad Contada','Diferencia +/-']
                    for columna in range(len(columnas)):
                        hoja.write(numero_fila, columna, columnas[columna], estilo_fuente)
                    
                    estilo_fuente = xlwt.XFStyle()
                    for productito in listaParaGenerarExcel:
                        numero_fila+=1
                        for columna in range(len(productito)):
                            hoja.write(numero_fila, columna, str(productito[columna]), estilo_fuente)
                    

                    libro.save(response)
                    
                    #Mandar correo.
                    correo = "sistemas@customco.com.mx"
                    asunto = "Costabella | Ajuste de productos para venta."
                    plantilla = "6 Productos/Correos/correoAjustePv.html"
                    html_mensaje = render_to_string(plantilla,{"nombreSucursalCorreo":nombreSucursalCorreo,"nombresEmpleado":nombresEmpleado, "productos":productos}) #Aqui va el diccionario de datos.
                    email_remitente = settings.EMAIL_HOST_USER
                    email_destino = [correo]
                    mensaje = EmailMessage(asunto, html_mensaje, email_remitente, email_destino)
                    mensaje.content_subtype = 'html'
                    #Mandar excel en el correo.
                    mensaje.attach('Ajuste de productos gasto '+str(datetime.today().strftime('%Y-%m-%d'))+'.xls', response.getvalue())
                    mensaje.send()
                    
                    
                    
                    # FIN CORREEEEOOOOOOOOOOOOOOOOOOOO
                    try:
                        tokenTelegram = keysBotCostabella.tokenBotCostabella
                        botCostabella = telepot.Bot(tokenTelegram)

                        idGrupoTelegram = keysBotCostabella.idGrupo

                        if sucursal == "todas":
                            mensajeSucursalesTotdas = True
                        else:
                            mensajeSucursalesTotdas = False

                        date = datetime.now()
                        hora = date.time().strftime("%H:%M")

                        if mensajeSucursalesTotdas:
                            mensaje = "Hola \U0001F44B! La empleada administradora "+nombresEmpleado+" ha realizado un ajuste de existencias de productos gasto en todas las sucursales costabella a las "+str(hora)+" horas. Favor de checar correo electrónico."
                        else:
                            mensaje = "Hola \U0001F44B! La empleada "+nombresEmpleado+" ha realizado un ajuste de existencias de productos gasto en la sucursal "+nombreSucursalCorreo+" a las "+str(hora)+" horas. Favor de chercar correo electrónico."
                        botCostabella.sendMessage(idGrupoTelegram,mensaje)

                    except:
                        print("An exception occurred")

                    # MANDAR NOTIFICACIÓN A TELÉFONO.
                    
                
                               
                    request.session['productosActualizados'] = "Se han actualizado los productos para venta con el Excel subido!"
                    return redirect('/inventarioProductos/')  
                else:  
                    request.session['errorProductosActualizados'] = "Error al actualizar los datos, intente de nuevo más tarde."
                    return redirect('/inventarioProductos/')   
            else:
                request.session['errorProductosActualizados'] = "La sucursal elegida no coincide con la sucursal del Excel, favor de elegir bien la sucursal."
                return redirect('/inventarioProductos/')            
        
        except:
            request.session['errorProductosActualizados'] = "Error al subir el archivo, contacte a soporte."
            return redirect('/inventarioProductos/')
        
    

def actNombreUsuario(request):

    if "idSesion" in request.session:

        if request.method == "POST":
            idActualizado = request.POST['idActualizado']
            nombreUsuarioActualizado = request.POST['nombreUsuarioActualizado']

            consulta = Empleados.objects.filter(id_empleado = idActualizado)

            for dato in consulta:
                nombreActualizado = dato.nombres

            actualizarInfoPersonal = Empleados.objects.filter(id_empleado = idActualizado).update(nombre_usuario = nombreUsuarioActualizado)
            
            if actualizarInfoPersonal:
                #falta notificacion
                request.session['empleadoActualizado'] = "Se ha actualizado el nombre de usuario de " + nombreActualizado + " correctamente!"
                return redirect('/verEmpleados/')

        return redirect('/verEmpleados/')
    else:
        return render(request,"1 Login/login.html")
    
def actContrasena(request):

    if "idSesion" in request.session:

        if request.method == "POST":
            idActualizado = request.POST['idActualizado']
            contraActualizada = request.POST['contraActualizada']

            consulta = Empleados.objects.filter(id_empleado = idActualizado)

            for dato in consulta:
                nombreActualizado = dato.nombres

            actualizarInfoPersonal = Empleados.objects.filter(id_empleado = idActualizado).update(contrasena = contraActualizada)
            
            if actualizarInfoPersonal:
                #falta notificacion
                request.session['empleadoActualizado'] = "Se ha actualizado la contraseña de " + nombreActualizado + " correctamente!"
                return redirect('/verEmpleados/')

        return redirect('/verEmpleados/')
    else:
        return render(request,"1 Login/login.html")
    
def verClientes(request):

    if "idSesion" in request.session:

        # Variables de sesión
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']
        idPerfil = idEmpleado
        idConfig = idEmpleado
       

        

        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
           #notificacionRentas
        notificacionRenta = notificacionRentas(request)

        #notificacionCitas
        notificacionCita = notificacionCitas(request)

        #permisosEmpleado
        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)

        
        clientes = Clientes.objects.all()
        

        contadorActivos = 0
        contadorBloqueados = 0
        clientesActivos = Clientes.objects.filter(estado = "A")
        clientesBloqueados = Clientes.objects.filter(estado = "B")
        
        for activo in clientesActivos:
            contadorActivos = contadorActivos + 1
        for inactivo in clientesBloqueados:
            contadorBloqueados = contadorBloqueados + 1

        #AQUI EMPIEZAAAAAAAAAAAAAAAAAAAAAAA
        empleadosQueAgregaron = []
        datosClientes = []
        for cliente in clientes:
            idCliente = cliente.id_cliente
            nombre = cliente.nombre_cliente
            apellidoPat = cliente.apellidoPaterno_cliente
            apellidoMat = cliente.apellidoMaterno_cliente
            correo = cliente.correo
            telefono = cliente.telefono
            direccion = cliente.direccion
            if cliente.estado == "A":
                estado = "Activo"
            elif cliente.estado == "B":
                estado = "Bloqueado"
            fechaAgregado = cliente.fecha_agregado
            id_empleadoQueAgrego = cliente.agregado_por_id
            
            consultaEmpleado = Empleados.objects.filter(id_empleado = id_empleadoQueAgrego)
            for dato in consultaEmpleado:
                idEmpleadoAgrego = dato.id_empleado
                nombres = dato.nombres
                apellido = dato.apellido_paterno
            empleadoCompleto = str(idEmpleadoAgrego) + " - " + nombres + " " + apellido
 
            
            datosClientes.append([idCliente, nombre, apellidoPat, apellidoMat, correo, telefono, direccion, estado, fechaAgregado])
            empleadosQueAgregaron.append([idEmpleadoAgrego,empleadoCompleto])
            
        #CLIENTES ACTIVOS
        empleadosQueAgregaronActivos = []
        datosClientesActivos = []
        for clienteActivos in clientesActivos:
            idClienteActivos = clienteActivos.id_cliente
            nombreActivos = clienteActivos.nombre_cliente
            apellidoPatActivos = clienteActivos.apellidoPaterno_cliente
            apellidoMatActivos = clienteActivos.apellidoMaterno_cliente
            correoActivos = clienteActivos.correo
            telefonoActivos = clienteActivos.telefono
            direccionActivos = clienteActivos.direccion
            if clienteActivos.estado == "A":
                estadoA = "Activo"
            elif clienteActivos.estado == "B":
                estadoA = "Bloqueado"
            fechaAgregadoActivos = clienteActivos.fecha_agregado
            id_empleadoQueAgregoActivos = clienteActivos.agregado_por_id
            
            consultaEmpleadoActivos = Empleados.objects.filter(id_empleado = id_empleadoQueAgregoActivos)
            for datoActivos in consultaEmpleadoActivos:
                idEmpleadoAgregoActivos = datoActivos.id_empleado
                nombresActivos = datoActivos.nombres
                apellidoActivos = datoActivos.apellido_paterno
            empleadoCompletoActivos = str(idEmpleadoAgregoActivos) + " - " + nombresActivos + " " + apellidoActivos
 
            
            datosClientesActivos.append([idClienteActivos, nombreActivos, apellidoPatActivos, apellidoMatActivos, correoActivos, telefonoActivos, direccionActivos, estadoA, fechaAgregadoActivos])
            empleadosQueAgregaronActivos.append([idEmpleadoAgregoActivos,empleadoCompletoActivos])
        
        #CLIENTES BLOQUEADOS
        empleadosQueAgregaronBloqueados = []
        datosClientesBloqueados = []
        for clienteBloqueados in clientesBloqueados:
            idClienteBloqueados = clienteBloqueados.id_cliente
            nombreBloqueados = clienteBloqueados.nombre_cliente
            apellidoPatBloqueados = clienteBloqueados.apellidoPaterno_cliente
            apellidoMatBloqueados = clienteBloqueados.apellidoMaterno_cliente
            correoBloqueados = clienteBloqueados.correo
            telefonoBloqueados = clienteBloqueados.telefono
            direccionBloqueados = clienteBloqueados.direccion
            if clienteBloqueados.estado == "A":
                estadoB = "Activo"
            elif clienteBloqueados.estado == "B":
                estadoB = "Bloqueado"
            fechaAgregadoBloqueados = clienteBloqueados.fecha_agregado
            id_empleadoQueAgregoBloqueados = clienteBloqueados.agregado_por_id
            
            consultaEmpleadoBloqueados = Empleados.objects.filter(id_empleado = id_empleadoQueAgregoBloqueados)
            for datoBloqueados in consultaEmpleadoBloqueados:
                idEmpleadoAgregoBloqueados = datoBloqueados.id_empleado
                nombresBloqueados = datoBloqueados.nombres
                apellidoBloqueados = datoBloqueados.apellido_paterno
            empleadoCompletoBloqueados = str(idEmpleadoAgregoBloqueados) + " - " + nombresBloqueados + " " + apellidoBloqueados
 
            
            datosClientesBloqueados.append([idClienteBloqueados, nombreBloqueados, apellidoPatBloqueados, apellidoMatBloqueados, correoBloqueados, telefonoBloqueados, direccionBloqueados, estadoB, fechaAgregadoBloqueados])
            empleadosQueAgregaronBloqueados.append([idEmpleadoAgregoBloqueados,empleadoCompletoBloqueados])
            
        
            

        # 3 LISTAS   
        listaClientes = zip (datosClientes, empleadosQueAgregaron)
        listaClientesActivos = zip (datosClientesActivos, empleadosQueAgregaronActivos)
        listaClientesBloqueados = zip (datosClientesBloqueados, empleadosQueAgregaronBloqueados)

        if 'clienteActualizado' in request.session:
            mensaje = request.session['clienteActualizado']
            del request.session['clienteActualizado']

            return render(request, "5 Clientes/verClientes.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, "listaClientes": listaClientes,
        "contadorActivos":contadorActivos, "contadorBloqueados":contadorBloqueados, "mensaje":mensaje,"listaClientesActivos":listaClientesActivos,"listaClientesBloqueados":listaClientesBloqueados,"notificacionRenta":notificacionRenta,"notificacionCita":notificacionCita, })

        return render(request, "5 Clientes/verClientes.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, "listaClientes": listaClientes,
        "contadorActivos":contadorActivos, "contadorBloqueados":contadorBloqueados,"listaClientesActivos":listaClientesActivos,"listaClientesBloqueados":listaClientesBloqueados,"notificacionRenta":notificacionRenta, "notificacionCita":notificacionCita,})
    else:
        return render(request,"1 Login/login.html")

def altaCliente(request):

    if "idSesion" in request.session:

        # Variables de sesión
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        idPerfil = idEmpleado
        idConfig = idEmpleado
    
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']

        # Variable para Menu
        estaEnAltaEmpleado = True

        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
        
           #notificacionRentas
        notificacionRenta = notificacionRentas(request)

        #notificacionCitas
        notificacionCita = notificacionCitas(request)

        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)

       
        if request.method == "POST":
            nombresCliente = request.POST['nombresCliente']
            apellidoPatCliente = request.POST['apellidoPatCliente']
            apellidoMatCliente = request.POST['apellidoMatCliente']
            telefonoCliente = request.POST['telefonoCliente']
            correoCliente = request.POST['correoCliente']
            direccionCliente = request.POST['direccionCliente']
         
            fechaAgregado = datetime.today().strftime('%Y-%m-%d')
            
            if telefonoCliente == "":
            
                registroCliente = Clientes(nombre_cliente = nombresCliente, apellidoPaterno_cliente = apellidoPatCliente, apellidoMaterno_cliente = apellidoMatCliente, correo = correoCliente, telefono = "Sin número de teléfono",
                                       direccion = direccionCliente, fecha_agregado = fechaAgregado, agregado_por = Empleados.objects.get(id_empleado = idEmpleado), estado ="A", credito_libre = "S")
            
            elif correoCliente == "":

                registroCliente = Clientes(nombre_cliente = nombresCliente, apellidoPaterno_cliente = apellidoPatCliente, apellidoMaterno_cliente = apellidoMatCliente, correo = "Sin correo electrónico", telefono = telefonoCliente,
                                       direccion = direccionCliente, fecha_agregado = fechaAgregado, agregado_por = Empleados.objects.get(id_empleado = idEmpleado), estado ="A",credito_libre = "S")
            elif telefonoCliente == "" and correoCliente == "":
                registroCliente = Clientes(nombre_cliente = nombresCliente, apellidoPaterno_cliente = apellidoPatCliente, apellidoMaterno_cliente = apellidoMatCliente, correo = "Sin correo electrónico", telefono = "Sin número de teléfono",
                                       direccion = direccionCliente, fecha_agregado = fechaAgregado, agregado_por = Empleados.objects.get(id_empleado = idEmpleado), estado ="A",credito_libre = "S")
            else:
                registroCliente = Clientes(nombre_cliente = nombresCliente, apellidoPaterno_cliente = apellidoPatCliente, apellidoMaterno_cliente = apellidoMatCliente, correo = correoCliente, telefono = telefonoCliente,
                                       direccion = direccionCliente, fecha_agregado = fechaAgregado, agregado_por = Empleados.objects.get(id_empleado = idEmpleado), estado ="A",credito_libre = "S")
                
            registroCliente.save()

            if registroCliente:
                    clienteAgregado = "El cliente "+ nombresCliente + " ha sido agregado satisfactoriamente!"
                    return render(request, "5 Clientes/altaCliente.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado, "idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado,"estaEnAltaEmpleado":estaEnAltaEmpleado, "clienteAgregado":clienteAgregado,"notificacionRenta":notificacionRenta, "notificacionCita":notificacionCita})
            else:
                    clienteNoAgregado = "Error en la base de datos, intentelo más tarde.."
                    return render(request, "5 Clientes/altaCliente.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado,"estaEnAltaEmpleado":estaEnAltaEmpleado, "clienteNoAgregado":clienteNoAgregado,"notificacionRenta":notificacionRenta, "notificacionCita":notificacionCita})

        return render(request, "5 Clientes/altaCliente.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado,"estaEnAltaEmpleado":estaEnAltaEmpleado,"notificacionRenta":notificacionRenta, "notificacionCita":notificacionCita})
    else:
        return render(request,"1 Login/login.html")



def bloqueoCliente(request):

    if "idSesion" in request.session:

        if request.method == "POST":
            idClienteBaja = request.POST['idClienteBaja']

            consultaCliente = Clientes.objects.filter(id_cliente = idClienteBaja)

            for dato in consultaCliente:
                nombre = dato.nombre_cliente


            actualizacionCliente = Clientes.objects.filter(id_cliente = idClienteBaja).update(estado="B")
            
            if actualizacionCliente:    
                request.session['clienteActualizado'] = "El cliente " + nombre + " ha sido bloqueado satisfactoriamente!"
                return redirect('/verClientes/')

def activoCliente(request):

    if "idSesion" in request.session:

        if request.method == "POST":
            idClienteAlta = request.POST['idClienteAlta']

            consultaCliente = Clientes.objects.filter(id_cliente = idClienteAlta)

            for dato in consultaCliente:
                nombre = dato.nombre_cliente


            actualizacionCliente = Clientes.objects.filter(id_cliente = idClienteAlta).update(estado="A")
            
            if actualizacionCliente:    
                request.session['clienteActualizado'] = "El cliente " + nombre + " se ha activado satisfactoriamente!"
                return redirect('/verClientes/')
def infoCliente(request):

    if "idSesion" in request.session:

        # Variables de sesión
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']
        idPerfil = idEmpleado
        idConfig = idEmpleado
       
        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
           #notificacionRentas
        notificacionRenta = notificacionRentas(request)

        #notificacionCitas
        notificacionCita = notificacionCitas(request)

        #permisosEmpleado
        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)

        
        clienteInfo = []
        
        if request.method == "POST":
            idCliente = request.POST['idInfoCliente']
            
            datosCliente = Clientes.objects.filter(id_cliente = idCliente)
            
            for dato in datosCliente:
                idC = dato.id_cliente
                idClienteEstatus = dato.id_cliente
                idClienteTelefono = dato.id_cliente
                nombres = dato.nombre_cliente
                apellidoP = dato.apellidoPaterno_cliente
                apellidoM = dato.apellidoMaterno_cliente
                correo = dato.correo
                correo2 = dato.correo
                telefono = dato.telefono
                telefonoParaActualizar = dato.telefono
                direccion = dato.direccion
                fechaAgrego = dato.fecha_agregado
                estado = dato.estado
                estado2 = dato.estado
                persona_agrego = dato.agregado_por_id
            
                
                clienteCompleto = nombres + " " + apellidoP
                letrasCliente = nombres[0]+apellidoP[0]
                
                personaAgrego = Empleados.objects.filter(id_empleado = persona_agrego)
                
                for datoAgrego in personaAgrego:
                    nombre = datoAgrego.nombres
                    apellidoPat = datoAgrego.apellido_paterno
                    
                completoAgrego = nombre + " " + apellidoPat
                
                clienteInfo.append([idC,nombres,apellidoP,apellidoM,correo,telefono,direccion, fechaAgrego,estado,completoAgrego])
            
            #CANTIDADES COMPRAS
            cantidadCompras = 0
            totalComprado = 0
            consultaCompras = Ventas.objects.filter(cliente_id__id_cliente = idCliente, credito="N")
            for compra in consultaCompras:
                montoCompra = compra.monto_pagar
                totalComprado = totalComprado + montoCompra
                cantidadCompras = cantidadCompras + 1

            #COMPRAS REALIZADAS POR CLIENTE
            listaVentasCliente = Ventas.objects.filter(cliente = idCliente, credito="N")
            quienVendioCliente = [] #id, nombre y sucursal del empleado
            sucursalesVentaCliente = []
            tipos_pagos = []
            pagos_tarjeta = []
            pagos_transferencia = []
            #Descuentos
            booleanDescuentoVentaCliente = []
            totalesSinDescuentoVentaCliente = []
            descuentosVentaCliente  = []
            datosDescuentosVentaCliente  = []
            #Productos
            boolProductosVentaCliente  = []
            datosProductosVentaCliente  = []
            #Servicios Faciales
            boolServiciosCoorporalesVentaCliente  = []
            datosServiciosCoorporalesVentaCliente  = []
            #Servicios Corporales
            boolServiciosFacialesVentaCliente  = []
            datosServiciosFacialesVentaCliente  = []
            
            for ventaCliente in listaVentasCliente:
                empleado_vendedor = ventaCliente.empleado_vendedor_id
                tipo_pago = ventaCliente.tipo_pago
                sucursal = ventaCliente.sucursal_id
                descuento = ventaCliente.descuento_id
                monto_total_pagado = ventaCliente.monto_pagar
                codigosProductos = ventaCliente.ids_productos
                serviciosCorporales = ventaCliente.ids_servicios_corporales
                serviciosFaciales = ventaCliente.ids_servicios_faciales
                

                #Datos empleado vendedor
                consultaEmpleadoVendedor = Empleados.objects.filter(id_empleado = empleado_vendedor)
                for datoEmpleadoVendedor in consultaEmpleadoVendedor:
                    idEmpleado = datoEmpleadoVendedor.id_empleado
                    nombreEmpleado = datoEmpleadoVendedor.nombres
                    
                quienVendioCliente.append([idEmpleado, nombreEmpleado])

                tipos_pagos.append(tipo_pago)
                if tipo_pago == "Efectivo":
                    pagos_tarjeta.append("nada")
                    pagos_transferencia.append("nada")
                elif tipo_pago == "Tarjeta":
                    tipo_tarjeta = ventaCliente.tipo_tarjeta
                    referencia = ventaCliente.referencia_pago_tarjeta
                    pagos_tarjeta.append([tipo_tarjeta, referencia])
                    pagos_transferencia.append("nada")
                elif tipo_pago == "Transferencia":
                    clave_rastreo = ventaCliente.clave_rastreo_transferencia
                    pagos_tarjeta.append("nada")
                    pagos_transferencia.append(clave_rastreo)

                #Datos sucursal 
                consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursal)
                for datoSucursal in consultaSucursal:
                    nombreSucursal = datoSucursal.nombre
                sucursalesVentaCliente.append(nombreSucursal)
                
                #Datos descuento
                if descuento == None:
                    booleanDescuentoVentaCliente.append("Sin descuento")
                    totalesSinDescuentoVentaCliente.append("Total normal")
                    descuentosVentaCliente.append("jeje")
                    datosDescuentosVentaCliente.append("sin datos")
                else:
                    booleanDescuentoVentaCliente.append("Con descuento")
                    consultaDescuento = Descuentos.objects.filter(id_descuento = descuento)
                    
                    for datoDescuento in consultaDescuento:
                        porcentaje = datoDescuento.porcentaje
                        nombreDescuento = datoDescuento.nombre_descuento
                    datosDescuentosVentaCliente.append([porcentaje,nombreDescuento])

                    intPorcentaje = int(porcentaje)
                        
                    restaParaSaberCuantoSePago = 100 - intPorcentaje  #85
                    
                    restaConPunto = "."+str(restaParaSaberCuantoSePago) #.85
                    
                    costoReal = monto_total_pagado/float(restaConPunto) #376.470588
                    
                    costoRealRedondeado = round(costoReal)
                    totalesSinDescuentoVentaCliente.append(costoRealRedondeado)
                    
                    porcentajeDescuento = "."+str(intPorcentaje) #.15
                    descuento = costoReal*float(porcentajeDescuento)
                    
                    descuentoRedondeado = round(descuento)
                    descuentosVentaCliente.append(descuentoRedondeado)
                    
                #Datos Productos comprados
                if not codigosProductos:
                    boolProductosVentaCliente.append("Sin productos comprados")
                    datosProductosVentaCliente.append("Sin productos")
                else:
                    boolProductosVentaCliente.append("Productos Comprados")
                    cantidadesProductos = ventaCliente.cantidades_productos
                    
                    datosProductos = []
                    arregloCodigos = codigosProductos.split(",")
                    arregloCantidades = cantidadesProductos.split(",")
                    listaProductosEfectivo = zip(arregloCodigos, arregloCantidades)
                    for codigo, cantidad in listaProductosEfectivo:
                        codigoProducto = str(codigo)
                        cantidadProducto = str(cantidad)
                        consultaProducto = ProductosVenta.objects.filter(codigo_producto = codigoProducto)
                        nombrePro = ""
                        for datoProducto in consultaProducto:
                            nombrePro = datoProducto.nombre_producto
                        
                        datosProductos.append([codigoProducto,nombrePro,cantidadProducto])
                    datosProductosVentaCliente.append(datosProductos)
                    
                #Datos Servicios Coorporales
                if not serviciosCorporales:
                    boolServiciosCoorporalesVentaCliente.append("Sin servicios coorporales")
                    datosServiciosCoorporalesVentaCliente.append("Sin productos")
                else:
                    boolServiciosCoorporalesVentaCliente.append("Servicios coorporales Comprados")
                    cantidadesServiciosCorporales = ventaCliente.cantidades_servicios_corporales
                    
                    datosServicios = []
                    arregloIdsServiciosCorporales = serviciosCorporales.split(",")
                    arregloCantidadesServiciosCorporales = cantidadesServiciosCorporales.split(",")
                    listaServiciosCorporalesEfectivo = zip(arregloIdsServiciosCorporales, arregloCantidadesServiciosCorporales)
                    for idd, cantidad in listaServiciosCorporalesEfectivo:
                        intIdProducto = int(idd)
                        strIdProducto = str(idd)
                        cantidadProducto = str(cantidad)
                        consultaServicio = Servicios.objects.filter(id_servicio = intIdProducto)
                        for datoServicio in consultaServicio:
                            nombreServicio = datoServicio.nombre_servicio
                        
                        datosServicios.append([strIdProducto,nombreServicio,cantidadProducto])
                    datosServiciosCoorporalesVentaCliente.append(datosServicios)
                    
                #Datos Servicios Faciales
                if not serviciosFaciales:
                    boolServiciosFacialesVentaCliente.append("Sin servicios faciales")
                    datosServiciosFacialesVentaCliente.append("Sin servicios")
                else:
                    boolServiciosFacialesVentaCliente.append("Servicios coorporales Comprados")
                    cantidadesServiciosFacialesEfectivo = ventaCliente.cantidades_servicios_faciales
                    
                    datosServicios = []
                    arregloIdsServiciosFaciales = serviciosFaciales.split(",")
                    arregloCantidadesServiciosFaciales = cantidadesServiciosFacialesEfectivo.split(",")
                    listaServiciosFacialesEfectivo = zip(arregloIdsServiciosCorporales, arregloCantidadesServiciosCorporales)
                    for idd, cantidad in listaServiciosFacialesEfectivo:
                        intIdProducto = int(idd)
                        strIdProducto = str(idd)
                        cantidadProducto = str(cantidad)
                        consultaServicio = Servicios.objects.filter(id_servicio = intIdProducto)
                        for datoServicio in consultaServicio:
                            nombreServicio = datoServicio.nombre_servicio
                        
                        datosServicios.append([strIdProducto,nombreServicio,cantidadProducto])
                    datosServiciosFacialesVentaCliente.append(datosServicios)
                    
            listaVentasCliente = zip(listaVentasCliente, 
            quienVendioCliente, 
            sucursalesVentaCliente,
            tipos_pagos, 
            pagos_tarjeta, 
            pagos_transferencia,
             booleanDescuentoVentaCliente,
             totalesSinDescuentoVentaCliente, 
             descuentosVentaCliente,
             datosDescuentosVentaCliente, 
             boolProductosVentaCliente, 
             datosProductosVentaCliente, 
             boolServiciosCoorporalesVentaCliente,
             datosServiciosCoorporalesVentaCliente, 
             boolServiciosFacialesVentaCliente, 
             datosServiciosFacialesVentaCliente)
            
            
        #Creeeditooosss Pendientes....................................
            vendedor = []
            sucursalesCredito =[]
            fechasCreditosPendientes = []
            estatusPago = []
            fechasPago = []
            productosCredito = []
            serviciosCorpCredito = []
            serviciosFacCredito = []

            cantiadCreditosPendientes = 0
            creditosPendientesCliente = Creditos.objects.filter(cliente_id__id_cliente= idCliente, estatus= "Pendiente")
            if creditosPendientesCliente:
                for credito in creditosPendientesCliente:
                    
                    idvendedor = credito.empleado_vendedor_id
                    idsucursal = credito.sucursal_id
                    id_credito = credito.id_credito
                    idVenta = credito.venta_id
                    idRenta = credito.renta_id

                    


                    
                    datosVendedor = Empleados.objects.filter(id_empleado = idvendedor)
                    for dato in datosVendedor:
                        nombreVendedor = dato.nombres
                        apellidoPvendedor = dato.apellido_paterno
                    completoVendedor = str(idvendedor) + " " + nombreVendedor + " " + apellidoPvendedor
                    vendedor.append(completoVendedor)
                    
                    datosSucursalCredito = Sucursales.objects.filter(id_sucursal = idsucursal)
                    for dato in datosSucursalCredito:
                        nombreSucursalCredito = dato.nombre
                    sucursalesCredito.append(nombreSucursalCredito)

                    fechaAltaCredito = credito.fecha_venta_credito
                    fechaPrimerPago = fechaAltaCredito + timedelta(days = 15)
                    fechaSegundoPago =fechaAltaCredito + timedelta(days = 30)
                    fechaTercerPago =fechaAltaCredito + timedelta(days = 45)
                    fechaCuartoPago =fechaAltaCredito + timedelta(days = 60)
                
                    fechasCreditosPendientes.append([fechaPrimerPago,fechaSegundoPago,fechaTercerPago,fechaCuartoPago])
                
                    datosPagos = PagosCreditos.objects.filter(id_credito__id_credito = id_credito)
                    for pago in datosPagos:
                        pago1 = pago.monto_pago1
                        
                        pago2 = pago.monto_pago2
                    
                        pago3 = pago.monto_pago3
                        
                        pago4 = pago.monto_pago4
                        
                        
                        estatusPago1=""
                        estatusPago2=""
                        estatusPago3=""
                        estatusPago4=""
                        if pago1 == None:
                            estatusPago1 = "Pendiente"
                            fechaPago1 = "Sin fecha"
                        else:

                            estatusPago1 = "Se pagaron $ "  + str(pago1) + "MXN el día "
                            fechaPago1 = pago.fecha_pago1
                            
                            
                        if pago2 == None:
                            estatusPago2 = "Pendiente"
                            fechaPago2 = "Sin fecha"
                        else:
                            fechaPago2 = pago.fecha_pago2
                            estatusPago2 = "Se pagaron $ "  + str(pago2) + "MXN el día "+str(fechaPago2)
                            
                            
                        if pago3 == None:
                            estatusPago3 = "Pendiente"
                            fechaPago3 = "Sin fecha"
                        else:
                            fechaPago3 = pago.fecha_pago3
                            estatusPago3 = "Se pagaron $ "  + str(pago3) + "MXN el día "+str(fechaPago3)
                            
                            
                            
                        if pago4 == None:
                            estatusPago4 = "Pendiente"
                            fechaPago4 = "Sin fecha"
                        else:
                            fechaPago4 = pago.fecha_pago4
                            estatusPago4 = "Se pagaron $ "  + str(pago4) + "MXN el día "+str(fechaPago4)
                            
                            
                        estatusPago.append([estatusPago1,estatusPago2,estatusPago3,estatusPago4])
                        fechasPago.append([fechaPago1,fechaPago2,fechaPago3,fechaPago4])
                        
                    if idVenta != None:
                        
                        consultaVenta = Ventas.objects.filter(id_venta = idVenta)

                        for dato in consultaVenta:
                            codigosProductos = dato.ids_productos
                            cantidadesProductos = dato.cantidades_productos

                            codigosServiciosCorporales = dato.ids_servicios_corporales
                            cantidadesServiciosCorporales = dato.cantidades_servicios_corporales

                            idsServiciosFaciales = dato.ids_servicios_faciales
                            cantidadesServiciosFaciales = dato.cantidades_servicios_faciales

                            comrpoProductos = False
                            comproServiciosCorporales = False
                            comproServiciosFaciales = False

                            if codigosProductos == "":
                                comrpoProductos = False
                            else:
                                comrpoProductos = True
                                arregloCodigosProductos = codigosProductos.split(",")
                                arregloCantidadesProductos = cantidadesProductos.split(",")
                                listaProductos = zip(arregloCodigosProductos, arregloCantidadesProductos)

                            if codigosServiciosCorporales == "":
                                comproServiciosCorporales = False
                            else:
                                comproServiciosCorporales = True
                                arregloCodigosServiciosCoporales = codigosServiciosCorporales.split(",")
                                arregloCantidadesServiciosCorporales = cantidadesServiciosCorporales.split(",")
                                listaServiciosCorporales = zip(arregloCodigosServiciosCoporales, arregloCantidadesServiciosCorporales)
                            
                            if idsServiciosFaciales == "":
                                comproServiciosFaciales = False
                            else:
                                comproServiciosFaciales = True
                                arregloIdsServiciosFaciales = idsServiciosFaciales.split(",")
                                arregloCantidadesServiciosFaciales = cantidadesServiciosFaciales.split(",")
                                listaServiciosFaciales = zip(arregloIdsServiciosFaciales,arregloCantidadesServiciosFaciales)

                            #zipeadas
                            
                        
                        

                            listitaProductos = []
                            listtitaServiciosCorporales = []
                            listitaServiciosFaciales = []
                            #Productos
                            if comrpoProductos == True:
                                contadorProductos = 0
                                for producto, cantidad in listaProductos:
                                    contadorProductos = contadorProductos +1
                                    
                                    codigo = str(producto)
                                    if contadorProductos == 1:
                                        if "PV" in codigo:
                                            cantiadCreditosPendientes = cantiadCreditosPendientes +1
                                    cantidadProducto = str(cantidad)
                                    if "PR" in codigo:
                                        consultaProducto = ProductosRenta.objects.filter(codigo_producto = codigo)
                                    else:
                                        consultaProducto = ProductosVenta.objects.filter(codigo_producto = codigo)
                                    for datoProducto in consultaProducto:
                                        nombreProducto = datoProducto.nombre_producto
                                    listitaProductos.append([codigo,nombreProducto, cantidadProducto])
                        
                            

                            if comproServiciosCorporales == True:
                                for servicioCorp, cantCorp in listaServiciosCorporales:
                                    idServicioCorporal = int(servicioCorp)
                                    stridServicioCorporal = str(servicioCorp)
                                    cantidadServicioCorporal = str(cantCorp)

                                    consultaServicioCorporal = Servicios.objects.filter(tipo_servicio = "Corporal", id_servicio = idServicioCorporal)

                                    for datoCorporal in consultaServicioCorporal:
                                        nombreServicioCorporal = datoCorporal.nombre_servicio

                                    listtitaServiciosCorporales.append([stridServicioCorporal, nombreServicioCorporal, cantidadServicioCorporal])
                            
                            if comproServiciosFaciales == True:
                                for servicioFacial, cantFacial in listaServiciosFaciales:
                                    idServicioFacial = int(servicioFacial)
                                    stridServicioFacial = str(servicioFacial)
                                    cantidadServicioFacial = str(cantFacial)

                                    consultaServicioFacial = Servicios.objects.filter(tipo_servicio = "Facial", id_servicio = idServicioFacial)

                                    for datoFacial in consultaServicioFacial:
                                        nombreServicioFacial = datoFacial.nombre_servicio

                                    listitaServiciosFaciales.append([stridServicioFacial, nombreServicioFacial, cantidadServicioFacial])

                            productosCredito.append(listitaProductos)
                            serviciosCorpCredito.append(listtitaServiciosCorporales)
                            serviciosFacCredito.append(listitaServiciosFaciales)

                            
                    
                    listaCreditosPendientesCliente = zip(creditosPendientesCliente,vendedor,sucursalesCredito, fechasCreditosPendientes, estatusPago, fechasPago, productosCredito, serviciosCorpCredito, serviciosFacCredito)
            else:
                listaCreditosPendientesCliente = None
                
        #Reentaaasssss Pendientes...........................................
            cantidadRentasPendientes = 0
            rentasPendientesCliente = Rentas.objects.filter(Q(estado_devolucion =  "A") | Q(estado_devolucion =  "P"), cliente_id__id_cliente =idCliente,)
            if rentasPendientesCliente:    
                datosProductosRentaPendientesCliente=[]
                encargadosPendientesCliente = []
            
                sucursalesPendientesCliente = []
        
                for renT in rentasPendientesCliente:
                    cantidadRentasPendientes = cantidadRentasPendientes + 1
                    
                    idsProductos = renT.codigos_productos_renta
                    encargado_renta = renT.realizado_por_id
                        
                        
                        
                        
                        
                    datosEncargado = Empleados.objects.filter(id_empleado = encargado_renta)
                    for datoE in datosEncargado:
                        nombres = datoE.nombres
                        apellidoPaterno = datoE.apellido_paterno
                        apellidoMaterno = datoE.apellido_materno
                    datosCompletoEncargado = nombres + " " + apellidoPaterno + " " + apellidoMaterno
                    encargadosPendientesCliente.append(datosCompletoEncargado)
                        
                    datosProductos = []
                    arregloCodigos = idsProductos.split(",")
                    
                    
                    for codigo in arregloCodigos:
                        codigoProducto = str(codigo)
                        
                        consultaProducto = ProductosRenta.objects.filter(codigo_producto = codigoProducto)
                        for datoProducto in consultaProducto:
                            nombrePro = datoProducto.nombre_producto
                            idSucursal = datoProducto.sucursal_id
                            imagen = datoProducto.imagen_producto
                            
                                
                        datosProductos.append([codigoProducto,nombrePro,imagen])
                    datosProductosRentaPendientesCliente.append(datosProductos)
                        
                    sucursal = Sucursales.objects.filter(id_sucursal = idSucursal)
                    for dato in sucursal:
                        nombreSucursal = dato.nombre
                    sucursalesPendientesCliente.append(nombreSucursal)
                        
                listaRentasPendientesCliente = zip (rentasPendientesCliente,datosProductosRentaPendientesCliente,encargadosPendientesCliente,sucursalesPendientesCliente)
                        
            else:
                listaRentasPendientesCliente = None
                      
                      

        #Todos los creditos del cliente
            creditosCliente = Creditos.objects.filter(cliente_id__id_cliente = idCliente , concepto_credito = "Venta")
            numeroCreditos = 0
            totalCredito = 0
            
            
            productosCreditoTotal = []
            serviciosCorporalesTotal = []
            serviciosFacialesTotal = []
            boolEstatusCreditoTotal = []
            fechasPagoCreditoTotal = []
            realizadoPorCreditoTotal = []
            sucursalPorCreditoTotal = []
            
            for credito in creditosCliente:
                numeroCreditos = numeroCreditos +1
                montoCredito = credito.monto_pagar
                totalCredito = totalCredito + montoCredito
                id_credito = credito.id_credito
                
                
                #Realizado por
                empleado_vendedor = credito.empleado_vendedor_id
                consultaEmpleadoVendedor = Empleados.objects.filter(id_empleado = empleado_vendedor )
                for datoVendedor in consultaEmpleadoVendedor:
                    nombreVendedor = datoVendedor.nombres
                    apellido = datoVendedor.apellido_paterno
                nombreCompletoVendedor = nombreVendedor + " " + apellido
                realizadoPorCreditoTotal.append(nombreCompletoVendedor)
                
                #sucursal
                sucursal_credito_total = credito.sucursal_id
                sucursalCreditoTotal = Sucursales.objects.filter(id_sucursal = sucursal_credito_total)
                for suc in sucursalCreditoTotal:
                    idSucursalCliente = suc.id_sucursal
                    nombreSucursalCreditoTotal = suc.nombre
                sucursalPorCreditoTotal.append(nombreSucursalCreditoTotal)
                
                #boolEstatusCredito
                estatusCredito = credito.estatus
                boolEstatusCreditoTotal.append(estatusCredito)
                datosPagos = PagosCreditos.objects.filter(id_credito__id_credito = id_credito)
                
                if estatusCredito == "Pendiente":
                     
                    for pago in datosPagos:
                        pago1 = pago.monto_pago1
                        
                        pago2 = pago.monto_pago2
                    
                        pago3 = pago.monto_pago3
                        
                        pago4 = pago.monto_pago4
                        
                        
                        estatusPago1=""
                        estatusPago2=""
                        estatusPago3=""
                        estatusPago4=""
                        if pago1 == None:
                            estatusPago1 = "Pendiente"
                            fechaPago1 = "Sin fecha"
                        else:

                            estatusPago1 = "Se pagaron $ "  + str(pago1) + "MXN el día "
                            fechaPago1 = pago.fecha_pago1
                            
                            
                        if pago2 == None:
                            estatusPago2 = "Pendiente"
                            fechaPago2 = "Sin fecha"
                        else:
                            estatusPago2 = "Se pagaron $ "  + str(pago2) + "MXN el día "+str(fechaPago2)
                            fechaPago2 = pago.fecha_pago2
                            
                        if pago3 == None:
                            estatusPago3 = "Pendiente"
                            fechaPago3 = "Sin fecha"
                        else:
                            estatusPago3 = "Se pagaron $ "  + str(pago3) + "MXN el día "+str(fechaPago3)
                            fechaPago3 = pago.fecha_pago3
                            
                            
                        if pago4 == None:
                            estatusPago4 = "Pendiente"
                            fechaPago4 = "Sin fecha"
                        else:
                            estatusPago4 = "Se pagaron $ "  + str(pago4) + "MXN el día "+str(fechaPago4)
                            fechaPago4 = pago.fecha_pago4
                            
                        fechasPagoCreditoTotal.append([fechaPago1,estatusPago1,fechaPago2,estatusPago2,fechaPago3,estatusPago3,fechaPago4,estatusPago4])
                else: #Si el credito ya se pago..
                    for datosPago in datosPagos:
                        fechaPago1 = datosPago.fecha_pago1
                        fechaPago2 = datosPago.fecha_pago2
                        fechaPago3 = datosPago.fecha_pago3
                        fechaPago4 = datosPago.fecha_pago4
                        
                        if fechaPago1 != None:#Si hay una fecha del pago
                            monto_pago1 = datosPago.monto_pago1
                        else:
                            fechaPago1 = ""
                            monto_pago1 = ""
                            
                            
                            
                        if fechaPago2 != None:#Si hay una fecha del pago
                            monto_pago2 = datosPago.monto_pago2
                        else:
                            fechaPago2 = ""
                            monto_pago2 = ""
                            
                        if fechaPago3 != None:#Si hay una fecha del pago
                            monto_pago3 = datosPago.monto_pago3
                        else:
                            fechaPago3 = ""
                            monto_pago3 = ""
                           
                        if fechaPago4 != None:#Si hay una fecha del pago
                            monto_pago4 = datosPago.monto_pago4
                        else:
                            fechaPago4 = ""
                            monto_pago4 = ""
                            
                    fechasPagoCreditoTotal.append([fechaPago1,monto_pago1,fechaPago2,monto_pago2,fechaPago3,monto_pago3,fechaPago4,monto_pago4])  
                
                venta = credito.venta_id
                consultaVenta = Ventas.objects.filter(id_venta = venta)
                for datoVenta in consultaVenta:
                    codigosProductos = datoVenta.ids_productos
                    cantidadesProductos = datoVenta.cantidades_productos
                    serviciosCorporales = datoVenta.ids_servicios_corporales
                    cantidadesSC = datoVenta.cantidades_servicios_corporales
                    serviciosFaciales = datoVenta.ids_servicios_faciales
                    cantidadesSF = datoVenta.cantidades_servicios_faciales
                
                hayProductos = False
                haySC = False
                haySF = False
                
                if codigosProductos == "":
                    hayProductos = False
                else:
                    hayProductos = True
                    arregloCodigosProductos = codigosProductos.split(",")
                    arregloCantidadesProductos = cantidadesProductos.split(",")
                    listaProductos = zip(arregloCodigosProductos, arregloCantidadesProductos)
                
                if serviciosCorporales == "":
                    haySC = False
                else:  
                    haySC = True
                    arregloidsSC = serviciosCorporales.split(",")
                    arregloCantidadesSC = cantidadesSC.split(",")
                    listaServiciosCorporales = zip(arregloidsSC,arregloCantidadesSC)
                
                if serviciosFaciales == "":
                    haySF = False
                else:
                    haySF = True
                    arregloidsSF = serviciosFaciales.split(",")
                    arregloCantidadesSF = cantidadesSF.split(",")
                    listaServiciosFaciales = zip(arregloidsSF, arregloCantidadesSF)
            
                
                miniProductos = []
                if hayProductos:
                    for codigo, cantidadProducto in listaProductos:
                        codigoProducto = str(codigo)
                        strCantidadProducto = str(cantidadProducto)
                        consultaProducto = ProductosVenta.objects.filter(codigo_producto = codigoProducto)
                        for datoProducto in consultaProducto:
                            nombreProducto = datoProducto.nombre_producto
                        miniProductos.append([codigoProducto,nombreProducto,strCantidadProducto])
            
                
                miniSC = []
                if haySC:
                    for idSC, cantidadSC in listaServiciosCorporales:
                        idServicio = int(idSC)
                        strCantidadServicio = str(cantidadSC)
                        consultarServicio = Servicios.objects.filter(id_servicio = idServicio)
                        for datoServicio in consultarServicio:
                            nombreServicio = datoServicio.nombre_servicio
                        miniSC.append([idServicio,nombreServicio,strCantidadServicio])
                    
                miniSF = []
                if haySF:
                    for idSF, cantidadSF in listaServiciosFaciales:
                        idServicio = int(idSF)
                        strCantidadServicio = str(cantidadSF)
                        consultarServicio = Servicios.objects.filter(id_servicio = idServicio)
                        for datoServicio in consultarServicio:
                            nombreServicio = datoServicio.nombre_servicio
                        miniSF.append([idServicio,nombreServicio,strCantidadServicio])
                
                
               
                productosCreditoTotal.append(miniProductos)
                serviciosCorporalesTotal.append(miniSC)
                serviciosFacialesTotal.append(miniSF)
                
                
            
            
            
            listaCreditosTotales = zip(creditosCliente,productosCreditoTotal,serviciosCorporalesTotal,serviciosFacialesTotal,boolEstatusCreditoTotal,fechasPagoCreditoTotal,realizadoPorCreditoTotal,sucursalPorCreditoTotal)
                
            

            
            

        #Todas las rentas del cliente
            rentasCliente = Rentas.objects.filter(cliente_id__id_cliente =idCliente)
            numeroRentas = 0
            for renta in rentasCliente:
                numeroRentas = numeroRentas + 1

        #Tipo de cliente
            tipoCliente = ""
            sumaCantidades = int(cantidadCompras) + int(numeroCreditos) + int(numeroRentas)
            if sumaCantidades <= 3:
                tipoCliente = "POSIBLE CONSUMIDOR"
            elif sumaCantidades > 3 and sumaCantidades <=6:
                tipoCliente = "CLIENTE POTENCIAL"
            elif sumaCantidades > 6 and sumaCantidades <=9:
                tipoCliente = "CLIENTE FRECUENTE"
            elif sumaCantidades > 9:
                tipoCliente = "SUPER CLIENTE"
                
        #Todas las rentas totales del cliente
        
            
            rentasTotalesDelCliente = Rentas.objects.filter(cliente_id__id_cliente =idCliente)
            if rentasTotalesDelCliente:    
                datosProductosRentasTotalesCliente=[]
                encargadosRentasTotalesCliente = []
            
                sucursalesRentasTotalesCliente = []
        
                for rentasTotales in rentasTotalesDelCliente:
                    
                    
                    idsProductosRentasTotales = rentasTotales.codigos_productos_renta
                    encargado_rentas_totales = rentasTotales.realizado_por_id
                        
                        
                        
                        
                        
                    datosEncargadoRentasTotales = Empleados.objects.filter(id_empleado = encargado_rentas_totales)
                    for datoEncargadoRentas in datosEncargadoRentasTotales:
                        nombresEncargado = datoEncargadoRentas.nombres
                        apellidoPaternoEncargado = datoEncargadoRentas.apellido_paterno
                        apellidoMaternoEncargado = datoEncargadoRentas.apellido_materno
                    datosCompletoEncargadoRentas = nombresEncargado + " " + apellidoPaternoEncargado + " " + apellidoMaternoEncargado
                    encargadosRentasTotalesCliente.append(datosCompletoEncargadoRentas)
                        
                    datosProductosRentasTotales = []
                    arregloCodigosRentasTotalesProductos = idsProductosRentasTotales.split(",")
                    
                    
                    for codigo in arregloCodigosRentasTotalesProductos:
                        codigoProductoRentasTotales = str(codigo)
                        
                        consultaProductoRentasTotales = ProductosRenta.objects.filter(codigo_producto = codigoProductoRentasTotales)
                        for datoProducto in consultaProductoRentasTotales:
                            nombreProRentasTotales = datoProducto.nombre_producto
                            idSucursalRentasTotales = datoProducto.sucursal_id
                            
                            
                                
                        datosProductosRentasTotales.append([codigoProductoRentasTotales,nombreProRentasTotales])
                    datosProductosRentasTotalesCliente.append(datosProductosRentasTotales)
                        
                    sucursalRentasTotales = Sucursales.objects.filter(id_sucursal = idSucursalRentasTotales)
                    for dato in sucursalRentasTotales:
                        nombreSucursalRentasTotales = dato.nombre
                    sucursalesRentasTotalesCliente.append(nombreSucursalRentasTotales)
                        
                listaRentasTotalesCliente = zip (rentasTotalesDelCliente,datosProductosRentasTotalesCliente,encargadosRentasTotalesCliente,sucursalesRentasTotalesCliente)
                        
            else:
                listaRentasTotalesCliente = None
                
            sucursalesTotales = Sucursales.objects.all()
            limitesCreditos = []
            for sucursalTotal in sucursalesTotales:
                idSucursalTotal = sucursalTotal.id_sucursal
                nombreSucursalTotal = sucursalTotal.nombre
                
                configuracionCreditoCliente = ConfiguracionCredito.objects.filter(sucursal_id__id_sucursal = idSucursalTotal,activo = "S")
                if configuracionCreditoCliente:
                    for confCredito in configuracionCreditoCliente:
                        limiteCreditoSucursal = confCredito.limite_credito
                        
                    consultaCreditosPendientes = Creditos.objects.filter(cliente_id__id_cliente = idCliente, estatus ="Pendiente")
                    creditoFaltantePorPagar= 0
                    creditoLibre = 0
                    creditoSolicitado =0
                    creditoPagado = 0
                    for credito in consultaCreditosPendientes:
                        montoTotal = credito.monto_pagar
                        montoPagado = credito.monto_pagado
                        montoRestante = credito.monto_restante
                        
                        creditoSolicitado = creditoSolicitado + montoTotal
                        creditoPagado = creditoPagado + montoPagado
                        creditoFaltantePorPagar = creditoFaltantePorPagar + montoRestante
                    
                    creditoLibre = limiteCreditoSucursal - creditoFaltantePorPagar
                    
                    limitesCreditos.append([idSucursalTotal,nombreSucursalTotal,limiteCreditoSucursal,creditoLibre])
                


            #Citas del cliente
            listaCitaCliente = []
            consultaCitasCliente = Citas.objects.filter(cliente_id__id_cliente = idCliente) 

            for citaCliente in consultaCitasCliente:
                idCita = citaCliente.id_cita
                #empleadoRealizo
                idEmpleadoRealizo = citaCliente.empleado_realizo_id
                consultaEmpleadoRealizo = Empleados.objects.filter(id_empleado = idEmpleadoRealizo)
                for datoEmpleadoRealizo in consultaEmpleadoRealizo:
                    nombreEmpleadoRealizo = datoEmpleadoRealizo.nombres
                    apellidoPaternoRealizo = datoEmpleadoRealizo.apellido_paterno
                nombreCompletoEmpleadoRealizo = nombreEmpleadoRealizo + " "+ apellidoPaternoRealizo

                #sucursal
                idSucursal = citaCliente.sucursal_id
                consultaSucursal = Sucursales.objects.filter(id_sucursal = idSucursal)
                for datoSucusral in consultaSucursal:
                    nombreSucursal = datoSucursal.nombre
                

                    
                    
                
            
                      
                      

        
                

            return render(request, "5 Clientes/InfoCliente/infoCliente.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado, "idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado,"clienteInfo":clienteInfo,"idC":idC, "idClienteEstatus":idClienteEstatus, "estado2":estado2, "telefonoParaActualizar":telefonoParaActualizar, "idClienteTelefono":idClienteTelefono,"correo2":correo2, "clienteCompleto":clienteCompleto, "letrasCliente":letrasCliente,
            "cantidadCompras":cantidadCompras, "totalComprado":totalComprado, "listaVentasCliente":listaVentasCliente,"listaCreditosPendientesCliente":listaCreditosPendientesCliente,"listaRentasPendientesCliente":listaRentasPendientesCliente, "numeroCreditos":numeroCreditos, "totalCredito":totalCredito, "numeroRentas":numeroRentas, "tipoCliente":tipoCliente, "cantiadCreditosPendientes":cantiadCreditosPendientes, "cantidadRentasPendientes":cantidadRentasPendientes, "listaCreditosTotales":listaCreditosTotales,
            "listaRentasTotalesCliente":listaRentasTotalesCliente,"limitesCreditos":limitesCreditos,"notificacionRenta":notificacionRenta, "notificacionCita":notificacionCita})

        return redirect('/verClientes/')
    else:
        return render(request,"1 Login/login.html")

def actTelCliente(request):

    if "idSesion" in request.session:

        if request.method == "POST":
            idClienteTelefono = request.POST['idClienteTelefono']
            telefonoClienteActualizado = request.POST['telefonoClienteActualizado']

            consultaCliente = Clientes.objects.filter(id_cliente = idClienteTelefono)

            for dato in consultaCliente:
                nombre = dato.nombre_cliente


            actualizacionCliente = Clientes.objects.filter(id_cliente = idClienteTelefono).update(telefono=telefonoClienteActualizado)
            
            if actualizacionCliente:    
                request.session['clienteActualizado'] = "El teléfono del cliente " + nombre + " se ha actualizado satisfactoriamente!"
                return redirect('/verClientes/')      
            

def altaProductos(request):

    if "idSesion" in request.session:

        # Variables de sesión
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        idPerfil = idEmpleado
        idConfig = idEmpleado
    
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']

        # Variable para Menu
        estaEnAltaEmpleado = True

        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
        
           #notificacionRentas
        notificacionRenta = notificacionRentas(request)

        #notificacionCitas
        notificacionCita = notificacionCitas(request)

        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)

        # retornar sucrusales
        sucursales = Sucursales.objects.all()
        if request.method == "POST":
            tipo_producto = request.POST['tipoProducto']  #Requerido
            nombre_producto = request.POST['nombreProducto']  #Requerido
            descripcion_producto = request.POST['descripcion']  #Requerido
            imagen_producto = request.FILES.get('imagenProducto') #No requerido
            
                
            sucursal = request.POST['sucursal'] #Requerido
            fechaAlta = datetime.today().strftime('%Y-%m-%d') #Requerido
            #fechaAlta = datetime.now()
            
            if tipo_producto == "venta":
                
                
            
                costo_compraVenta = request.POST['costoCompra']
                sku_producto = request.POST['skuProducto']  #Requerido
                nameInput = "checkboxMargen"
                if request.POST.get(nameInput, False): #Checkeado
                    margen = request.POST['margenManual']
                elif request.POST.get(nameInput, True): #No checkeado
                    margen = request.POST['margen']
                
                cantidad_altaProducto = request.POST['cantidadAltaProducto']
                cantidad_productoStock = request.POST['cantidadStock']

                margenstr = str(margen)
                if margen == "100":
                    porcentajeUtilidad = 1.00
                else:
                    
                    porcentajeUtilidad = "0." + str(margen)   #"0.20"
                procentajeUtilidadNeta = 1.00 + float(porcentajeUtilidad) 
                costoVenta = float(costo_compraVenta) * procentajeUtilidadNeta
                costoVenta = round(costoVenta, 2)
                
                productosVentas = ProductosVenta.objects.all()
                if productosVentas :
                    hayRegistros = True
                    ultimoCodigo =""
                    for venta in productosVentas:
                        ultimoCodigo= venta.codigo_producto
                        
                    primerDigito = ultimoCodigo[2]
                    segundoDigito = ultimoCodigo[3]
                    tercerDigito = ultimoCodigo[4]
                    cuartoDigito = ultimoCodigo[5]
                    
                    numeroCompleto = primerDigito + segundoDigito + tercerDigito + cuartoDigito
                    codigoCompleto = int(numeroCompleto)
                    codigoCompleto = codigoCompleto +1
                    codigo = "PV"+str(codigoCompleto)
             
                else:
                    codigo= "PV1000"

                #Calculo de costo a credito de producto
                costoVentaCredito = float(costoVenta) * 1.20
                costoVentaCredito = round(costoVentaCredito,2)

                #alta de producto para venta
                if imagen_producto == "":

                    registroProducto = ProductosVenta(codigo_producto = codigo,
                    codigo_barras = codigo,
                    tipo_producto = tipo_producto,
                    nombre_producto = nombre_producto, 
                    costo_compra = costo_compraVenta,
                    margen_ganancia_producto = margen,
                    costo_venta = costoVenta, 
                    costo_venta_a_credito = costoVentaCredito,
                    cantidad = cantidad_altaProducto, 
                    stock = cantidad_productoStock, 
                    descripcion = descripcion_producto,
                    fecha_alta = fechaAlta, 
                    sku_producto =sku_producto,
                    creado_por = Empleados.objects.get(id_empleado = idEmpleado),
                    sucursal = Sucursales.objects.get(id_sucursal = sucursal))
                else:
                    registroProducto = ProductosVenta(codigo_producto = codigo,
                    codigo_barras = codigo,
                    tipo_producto = tipo_producto,
                    nombre_producto = nombre_producto, 
                    costo_compra = costo_compraVenta,
                    margen_ganancia_producto = margen,
                    costo_venta = costoVenta, 
                    costo_venta_a_credito = costoVentaCredito,
                    cantidad = cantidad_altaProducto, 
                    stock = cantidad_productoStock, 
                    descripcion = descripcion_producto,
                    imagen_producto = imagen_producto,
                    fecha_alta = fechaAlta, 
                    sku_producto =sku_producto,
                    creado_por = Empleados.objects.get(id_empleado = idEmpleado),
                    sucursal = Sucursales.objects.get(id_sucursal = sucursal))

                registroProducto.save()
                
                # Agregar compra en tabla de compras
                if registroProducto:
                    consultaProductoRecienAgregado = ProductosVenta.objects.filter(codigo_producto = codigo)
                    for dato in consultaProductoRecienAgregado:
                        idProductoRecienAgregado = dato.id_producto
                        nombreVenta = dato.nombre_producto
                        
                    totalCostoCompra = float(costo_compraVenta) * float(cantidad_altaProducto) 
                    totalCostoCompra = round(totalCostoCompra,2)
                        
                    registroCompra = ComprasVentas(id_productoComprado = ProductosVenta.objects.get(id_producto = idProductoRecienAgregado),
                                                   costo_unitario = costo_compraVenta,
                                                   cantidad_comprada = cantidad_altaProducto,
                                                   total_costoCompra = totalCostoCompra,
                                                   fecha_compra = fechaAlta)
                    registroCompra.save()

                    #ImprimirEtiquetas
                    fechaHoy = date.today()
                    cantidadEtiquetas = int(cantidad_altaProducto)
                    
                    primerDigitoCodigo = codigo[2]
                    segundoDigitoCodigo = codigo[3]
                    tercerDigitoCodigo = codigo[4]
                    cuartoDigitoCodigo = codigo[5]
                    
                    numeroCompletoCodigo = primerDigitoCodigo + segundoDigitoCodigo + tercerDigitoCodigo + cuartoDigitoCodigo
                    print(numeroCompletoCodigo)
                    codigoCompletoImprimir = str(numeroCompletoCodigo)

                    for x in range(cantidadEtiquetas):
                        
                        label = ("^XA~TA000~JSN^LT0^MNW^MTD^PON^PMN^LH0,0^JMA^PR2,2~SD30^JUS^LRN^CI0^XZ^XA^MMT^PW406^LL0203^LS0^FO0,160^GFA,00768,00768,00012,:Z64:eJxjYKAnYD/i3n5/zsfzIDb/u/f3z99tf98AZLOlJd69e/d44gEgm+/d+//n/v17fACs3vf+/TvmBw+A1T/uP7//8UMQm4EtgfGADAMjmM33gPGBHQMzmM3iABLjb4CKA9l89PCXvPzH57bHIWz+/7u/J4J9xcAge/9CeeEdiDjf/d2/baFs+fufy3nPQdX3/37/E6oeCNgZGOFsZgZuOJuB8TzCPsZz1PbBSAUAlzNF0w==:6D8B^FO128,128^GFA,01920,01920,00020,:Z64:eJztkT1Lw0Ach+8uoRdDKR2rtE2wy9mpHQotCCp+gRQaOwmCq0OkVh0KnukgBPETOJx1CefiR2jtUOjuKqGCrgFB3Opd2sGXDuKiQ39wy3MP9/L7AzDPPH8dNINBaFnJqlpNfoRUmvSruj5dv4o5g1nfkc4/XZvEXSOo285LL2xhGAqSIGTIONM54yPWSbi+YKWnyttuj0ILZrOLvczgQrCcu3Kba1PE0VJZO2Wu/JFyVgnWFFqyrXR5sR/uKYIhl7A8onnP14h2x0jk4eLgVaH3di3lpPpBS3oKKnodBDj3SaFsXvnSw4nG5aMCm/XDVaeQ3uhieZ63fE494XHCzBiNmsTpRqY3hra9fRzsP2x2VcnK1wttFwmvMrzxkavLO8JnA8dw0z4yjHF4ghNRByMd6cjjohgGdF2TCA5ALL5j2zUAuwDE05HnAqSZnPjR5DQy9TAMtqoHkaA6Uw/w6b547qRuddL2D+c2y5tnnv+bd/8tZhU=:C773^FO8,97^GB391,0,2^FS^BY2,3,61^FT295,29^BCI,,Y,N^FD>:PV>5"+codigoCompletoImprimir+"^FS^FT398,178^A0I,14,14^FH\^FD"+str(fechaHoy)+"^FS^FT236,119^A0I,14,14^FH\^FD"+nombreVenta+"^FS^FT237,143^A0I,11,12^FH\^FDNombre producto:^FS^FT376,143^A0I,17,16^FH\^FDCosto de venta^FS^FT376,110^A0I,28,28^FH\^FD$ "+str(costoVenta)+" ^FS^PQ1,0,1,Y^XZ")  
                        z = Zebra('ZDesigner GC420d')
                        z.output(label)




            elif tipo_producto == "renta":
            
                costo_de_compra = request.POST['costoCompraRenta']
                costo_Renta = request.POST['costoRenta']
          

                
                productosRentas = ProductosRenta.objects.all()
                if productosRentas :
                    hayRegistros = True
                    ultimoCodigo =""
                    for renta in productosRentas:
                        ultimoCodigo= renta.codigo_producto
                        
                    primerDigito = ultimoCodigo[2]
                    segundoDigito = ultimoCodigo[3]
                    tercerDigito = ultimoCodigo[4]
                    cuartoDigito = ultimoCodigo[5]
                    
                    numeroCompleto = primerDigito + segundoDigito + tercerDigito + cuartoDigito
                    codigoCompleto = int(numeroCompleto)
                    codigoCompleto = codigoCompleto +1
                    codigo = "PR"+str(codigoCompleto)
             
                else:
                    codigo= "PR1000"

                #alta de producto para venta
                if imagen_producto == "":

                    registroProducto = ProductosRenta(codigo_producto = codigo,
                    codigo_barras = codigo,
                    tipo_producto = tipo_producto,
                    nombre_producto = nombre_producto, 
                    costo_de_compra =costo_de_compra,
                    costo_renta = costo_Renta,
                 
                    cantidad = 1, 
                    estado_renta = "Sin rentar",
                    descripcion = descripcion_producto,
                    fecha_alta = fechaAlta, 
                    creado_por = Empleados.objects.get(id_empleado = idEmpleado),
                    sucursal = Sucursales.objects.get(id_sucursal = sucursal))
                else:
                    registroProducto = ProductosRenta(codigo_producto = codigo,
                    codigo_barras = codigo,
                    tipo_producto = tipo_producto,
                    nombre_producto = nombre_producto, 
                    costo_de_compra =costo_de_compra,
                    costo_renta = costo_Renta,
                 
                    cantidad = 1, 
                    estado_renta = "Sin rentar",
                    descripcion = descripcion_producto,
                    imagen_producto = imagen_producto,
                    fecha_alta = fechaAlta, 
                    creado_por = Empleados.objects.get(id_empleado = idEmpleado),
                    sucursal = Sucursales.objects.get(id_sucursal = sucursal))
                    
                registroProducto.save()
                
                # Agregar compra en tabla de compras
                if registroProducto:
                    consultaProductoRecienAgregado = ProductosRenta.objects.filter(codigo_producto = codigo)
                    for dato in consultaProductoRecienAgregado:
                        idProductoRecienAgregado = dato.id_producto
                        
                    totalCostoCompra = float(costo_Renta) * float(1) 
                    totalCostoCompra = round(totalCostoCompra,2)
                        
                    registroCompra = ComprasRentas(id_productoComprado = ProductosRenta.objects.get(id_producto = idProductoRecienAgregado),
                                                   costo_unitario = costo_Renta,
                                                   cantidad_comprada = 1,
                                                   total_costoCompra = totalCostoCompra,
                                                   fecha_compra = fechaAlta)
                    registroCompra.save()

                    #ImprimirEtiquetas
                    fechaHoy = date.today()
                    cantidadEtiquetas = int(1)
                    
                    primerDigitoCodigo = codigo[2]
                    segundoDigitoCodigo = codigo[3]
                    tercerDigitoCodigo = codigo[4]
                    cuartoDigitoCodigo = codigo[5]
                    
                    numeroCompletoCodigo = primerDigitoCodigo + segundoDigitoCodigo + tercerDigitoCodigo + cuartoDigitoCodigo
                    codigoCompletoImprimir = str(numeroCompletoCodigo)

                    for x in range(cantidadEtiquetas):
                        label = ("^XA~TA000~JSN^LT0^MNW^MTD^PON^PMN^LH0,0^JMA^PR2,2~SD30^JUS^LRN^CI0^XZ^XA^MMT^PW406^LL0203^LS0^FO0,160^GFA,00768,00768,00012,:Z64:eJxjYKAnYD/i3n5/zsfzIDb/u/f3z99tf98AZLOlJd69e/d44gEgm+/d+//n/v17fACs3vf+/TvmBw+A1T/uP7//8UMQm4EtgfGADAMjmM33gPGBHQMzmM3iABLjb4CKA9l89PCXvPzH57bHIWz+/7u/J4J9xcAge/9CeeEdiDjf/d2/baFs+fufy3nPQdX3/37/E6oeCNgZGOFsZgZuOJuB8TzCPsZz1PbBSAUAlzNF0w==:6D8B^FO128,128^GFA,01920,01920,00020,:Z64:eJztkT1Lw0Ach+8uoRdDKR2rtE2wy9mpHQotCCp+gRQaOwmCq0OkVh0KnukgBPETOJx1CefiR2jtUOjuKqGCrgFB3Opd2sGXDuKiQ39wy3MP9/L7AzDPPH8dNINBaFnJqlpNfoRUmvSruj5dv4o5g1nfkc4/XZvEXSOo285LL2xhGAqSIGTIONM54yPWSbi+YKWnyttuj0ILZrOLvczgQrCcu3Kba1PE0VJZO2Wu/JFyVgnWFFqyrXR5sR/uKYIhl7A8onnP14h2x0jk4eLgVaH3di3lpPpBS3oKKnodBDj3SaFsXvnSw4nG5aMCm/XDVaeQ3uhieZ63fE494XHCzBiNmsTpRqY3hra9fRzsP2x2VcnK1wttFwmvMrzxkavLO8JnA8dw0z4yjHF4ghNRByMd6cjjohgGdF2TCA5ALL5j2zUAuwDE05HnAqSZnPjR5DQy9TAMtqoHkaA6Uw/w6b547qRuddL2D+c2y5tnnv+bd/8tZhU=:C773^FO8,97^GB391,0,2^FS^BY2,3,61^FT295,29^BCI,,Y,N^FD>:PR>5"+codigoCompletoImprimir+"^FS^FT398,178^A0I,14,14^FH\^FD"+str(fechaHoy)+"^FS^FT236,119^A0I,14,14^FH\^FD"+nombre_producto+"^FS^FT237,143^A0I,11,12^FH\^FDNombre vestido:^FS^FT376,143^A0I,17,16^FH\^FDCosto de renta^FS^FT376,110^A0I,28,28^FH\^FD$ "+str(costo_Renta)+" ^FS^PQ1,0,1,Y^XZ")
                       
                        z = Zebra('ZDesigner GC420d')
                        z.output(label)

                    #Checar si ese producto renta se va a vender
                    nameCheckboxVenderVestido = "sePuedeVender"
                    if request.POST.get(nameCheckboxVenderVestido,False): #checkbox chequeado
                        sePuedeVenderVestido = "Si"
                    elif request.POST.get(nameCheckboxVenderVestido,True): #checkbox deschequeado
                        sePuedeVenderVestido = "No"

                    if sePuedeVenderVestido == "Si":

                        costoVentaVestido = request.POST["costoVentaVestido"]
                        #Calculo de costo a credito de producto
                        costoVentaCreditoVestido = float(costo_Renta) * 1.20
                        costoVentaCreditoVestido = round(costoVentaCreditoVestido,2)
                        
                        #Obtener el ultimo codigo venta
                        productosVentas = ProductosVenta.objects.all()
                        if productosVentas :
                            hayRegistros = True
                            ultimoCodigo =""
                            for venta in productosVentas:
                                ultimoCodigo= venta.codigo_producto
                                
                            primerDigito = ultimoCodigo[2]
                            segundoDigito = ultimoCodigo[3]
                            tercerDigito = ultimoCodigo[4]
                            cuartoDigito = ultimoCodigo[5]
                            
                            numeroCompleto = primerDigito + segundoDigito + tercerDigito + cuartoDigito
                            codigoCompleto = int(numeroCompleto)
                            codigoCompleto = codigoCompleto +1
                            codigoPV = "PV"+str(codigoCompleto)
                    
                        else:
                            codigoPV= "PV1000"

                        #Registrar el producto como producto Venta
                        if imagen_producto == "":

                            registroProductoVenta = ProductosVenta(codigo_producto = codigoPV,
                            codigo_barras = codigoPV,
                            tipo_producto = tipo_producto,
                            nombre_producto = nombre_producto, 
                            costo_compra = costo_de_compra,
                            margen_ganancia_producto = 0,
                            costo_venta = costoVentaVestido, 
                            costo_venta_a_credito = costoVentaCreditoVestido,
                            cantidad = 1, 
                            stock = 1, 
                            descripcion = descripcion_producto,
                            fecha_alta = fechaAlta, 
                            sku_producto =codigoPV,
                            creado_por = Empleados.objects.get(id_empleado = idEmpleado),
                            sucursal = Sucursales.objects.get(id_sucursal = sucursal))
                        else:
                           registroProductoVenta = ProductosVenta(codigo_producto = codigoPV,
                            codigo_barras = codigoPV,
                            tipo_producto = tipo_producto,
                            nombre_producto = nombre_producto, 
                            costo_compra = costo_de_compra,
                            margen_ganancia_producto = 0,
                            costo_venta = costoVentaVestido, 
                            costo_venta_a_credito = costoVentaCreditoVestido,
                            cantidad = 1, 
                            stock = 1, 
                            descripcion = descripcion_producto,
                            imagen_producto = imagen_producto,
                            fecha_alta = fechaAlta, 
                            sku_producto =codigoPV,
                            creado_por = Empleados.objects.get(id_empleado = idEmpleado),
                            sucursal = Sucursales.objects.get(id_sucursal = sucursal))

                        registroProductoVenta.save()

                        #Imprimir el ticket

                        # Agregar compra en tabla de compras
                        if registroProducto:
                            consultaProductoRecienAgregado = ProductosVenta.objects.filter(codigo_producto = codigoPV)
                            for dato in consultaProductoRecienAgregado:
                                idProductoRecienAgregado = dato.id_producto
                                nombreVenta = dato.nombre_producto
                          

                            #ImprimirEtiquetas
                            fechaHoy = date.today()
                            cantidadEtiquetas = int(1)
                            
                            primerDigitoCodigoV = codigoPV[2]
                            segundoDigitoCodigoV = codigoPV[3]
                            tercerDigitoCodigoV = codigoPV[4]
                            cuartoDigitoCodigoV = codigoPV[5]
                            
                            numeroCompletoCodigoV = primerDigitoCodigoV + segundoDigitoCodigoV + tercerDigitoCodigoV + cuartoDigitoCodigoV
                            codigoCompletoImprimirV = str(numeroCompletoCodigoV)


                            for x in range(cantidadEtiquetas):
                                
                                label = ("^XA~TA000~JSN^LT0^MNW^MTD^PON^PMN^LH0,0^JMA^PR2,2~SD30^JUS^LRN^CI0^XZ^XA^MMT^PW406^LL0203^LS0^FO0,160^GFA,00768,00768,00012,:Z64:eJxjYKAnYD/i3n5/zsfzIDb/u/f3z99tf98AZLOlJd69e/d44gEgm+/d+//n/v17fACs3vf+/TvmBw+A1T/uP7//8UMQm4EtgfGADAMjmM33gPGBHQMzmM3iABLjb4CKA9l89PCXvPzH57bHIWz+/7u/J4J9xcAge/9CeeEdiDjf/d2/baFs+fufy3nPQdX3/37/E6oeCNgZGOFsZgZuOJuB8TzCPsZz1PbBSAUAlzNF0w==:6D8B^FO128,128^GFA,01920,01920,00020,:Z64:eJztkT1Lw0Ach+8uoRdDKR2rtE2wy9mpHQotCCp+gRQaOwmCq0OkVh0KnukgBPETOJx1CefiR2jtUOjuKqGCrgFB3Opd2sGXDuKiQ39wy3MP9/L7AzDPPH8dNINBaFnJqlpNfoRUmvSruj5dv4o5g1nfkc4/XZvEXSOo285LL2xhGAqSIGTIONM54yPWSbi+YKWnyttuj0ILZrOLvczgQrCcu3Kba1PE0VJZO2Wu/JFyVgnWFFqyrXR5sR/uKYIhl7A8onnP14h2x0jk4eLgVaH3di3lpPpBS3oKKnodBDj3SaFsXvnSw4nG5aMCm/XDVaeQ3uhieZ63fE494XHCzBiNmsTpRqY3hra9fRzsP2x2VcnK1wttFwmvMrzxkavLO8JnA8dw0z4yjHF4ghNRByMd6cjjohgGdF2TCA5ALL5j2zUAuwDE05HnAqSZnPjR5DQy9TAMtqoHkaA6Uw/w6b547qRuddL2D+c2y5tnnv+bd/8tZhU=:C773^FO8,97^GB391,0,2^FS^BY2,3,61^FT295,29^BCI,,Y,N^FD>:PV>5"+codigoCompletoImprimirV+"^FS^FT398,178^A0I,14,14^FH\^FD"+str(fechaHoy)+"^FS^FT236,119^A0I,14,14^FH\^FD"+nombreVenta+"^FS^FT237,143^A0I,11,12^FH\^FDNombre producto:^FS^FT376,143^A0I,17,16^FH\^FDCosto de venta^FS^FT376,110^A0I,28,28^FH\^FD$ "+str(costoVentaVestido)+" ^FS^PQ1,0,1,Y^XZ")  
                                z = Zebra('ZDesigner GC420d')
                                z.output(label)

                
                
            elif tipo_producto == "gasto":
            
                costo_compraGasto = request.POST['costoGasto']
                costo_compraGasto = round(float(costo_compraGasto),2)
                cantidad_altaProducto = request.POST['cantidadAltaProducto']
                cantidad_productoStock = request.POST['cantidadStock']
                sku_producto = request.POST['skuProducto']  #Requerido

                nameInput = "checkboxCuantificable"
                if request.POST.get(nameInput, False): #Checkeado
                    cuantificable = "S"
                elif request.POST.get(nameInput, True): #No checkeado
                    cuantificable = "N"
                
                
                gastos = ProductosGasto.objects.all()
                if gastos :
                    hayRegistros = True
                    ultimoCodigo =""
                    for gasto in gastos:
                        ultimoCodigo= gasto.codigo_producto
                        
                    primerDigito = ultimoCodigo[2]
                    segundoDigito = ultimoCodigo[3]
                    tercerDigito = ultimoCodigo[4]
                    cuartoDigito = ultimoCodigo[5]
                    
                    numeroCompleto = primerDigito + segundoDigito + tercerDigito + cuartoDigito
                    codigoCompleto = int(numeroCompleto)
                    codigoCompleto = codigoCompleto +1
                    codigo = "PG"+str(codigoCompleto)
              
                    
                else:
                    codigo= "PG1000"
                
                 #alta de producto para venta
                if imagen_producto == "":

                    registroProducto = ProductosGasto(codigo_producto = codigo,
                    codigo_barras = codigo,
                    tipo_producto = tipo_producto,
                    nombre_producto = nombre_producto, 
                    costo_compra = costo_compraGasto,
                 
                    cantidad = cantidad_altaProducto, 
                    stock = cantidad_productoStock,
                    contenido_cuantificable = cuantificable,
                  
                    descripcion = descripcion_producto,
                    fecha_alta = fechaAlta, 
                    sku_producto =sku_producto,
                    creado_por = Empleados.objects.get(id_empleado = idEmpleado),
                    sucursal = Sucursales.objects.get(id_sucursal = sucursal))
                else:
                    registroProducto = ProductosGasto(codigo_producto = codigo,
                    codigo_barras = codigo,
                    tipo_producto = tipo_producto,
                    nombre_producto = nombre_producto, 
                    costo_compra = costo_compraGasto,
                 
                    cantidad = cantidad_altaProducto, 
                    stock = cantidad_productoStock,
                    contenido_cuantificable = cuantificable,
                  
                    descripcion = descripcion_producto,
                    imagen_producto = imagen_producto,
                    fecha_alta = fechaAlta, 
                      sku_producto =sku_producto,
                    creado_por = Empleados.objects.get(id_empleado = idEmpleado),
                    sucursal = Sucursales.objects.get(id_sucursal = sucursal))
                    
                registroProducto.save()
                
                # Agregar compra en tabla de compras
                if registroProducto:
                    consultaProductoRecienAgregado = ProductosGasto.objects.filter(codigo_producto = codigo)
                    for dato in consultaProductoRecienAgregado:
                        idProductoRecienAgregado = dato.id_producto
                        
                    totalCostoCompra = float(costo_compraGasto) * float(cantidad_altaProducto) 
                    totalCostoCompra = round(totalCostoCompra,2)
                        
                    registroCompra = ComprasGastos(id_productoComprado = ProductosGasto.objects.get(id_producto = idProductoRecienAgregado),
                                                   costo_unitario = costo_compraGasto,
                                                   cantidad_comprada = cantidad_altaProducto,
                                                   total_costoCompra = totalCostoCompra,
                                                   fecha_compra = fechaAlta)
                    registroCompra.save()

                    #ImprimirEtiquetas
                    fechaHoy = date.today()
                    cantidadEtiquetas = int(cantidad_altaProducto)
                    
                    primerDigitoCodigo = codigo[2]
                    segundoDigitoCodigo = codigo[3]
                    tercerDigitoCodigo = codigo[4]
                    cuartoDigitoCodigo = codigo[5]
                    
                    numeroCompletoCodigo = primerDigitoCodigo + segundoDigitoCodigo + tercerDigitoCodigo + cuartoDigitoCodigo
                    codigoCompletoImprimir = str(numeroCompletoCodigo)

                    if tipo_producto:

                        for x in range(cantidadEtiquetas):
                            label = ("^XA~TA000~JSN^LT0^MNW^MTD^PON^PMN^LH0,0^JMA^PR2,2~SD30^JUS^LRN^CI0^XZ^XA^MMT^PW406^LL0203^LS0^FO0,160^GFA,00768,00768,00012,:Z64:eJxjYKAnYD/i3n5/zsfzIDb/u/f3z99tf98AZLOlJd69e/d44gEgm+/d+//n/v17fACs3vf+/TvmBw+A1T/uP7//8UMQm4EtgfGADAMjmM33gPGBHQMzmM3iABLjb4CKA9l89PCXvPzH57bHIWz+/7u/J4J9xcAge/9CeeEdiDjf/d2/baFs+fufy3nPQdX3/37/E6oeCNgZGOFsZgZuOJuB8TzCPsZz1PbBSAUAlzNF0w==:6D8B^FO128,128^GFA,01920,01920,00020,:Z64:eJztkT1Lw0Ach+8uoRdDKR2rtE2wy9mpHQotCCp+gRQaOwmCq0OkVh0KnukgBPETOJx1CefiR2jtUOjuKqGCrgFB3Opd2sGXDuKiQ39wy3MP9/L7AzDPPH8dNINBaFnJqlpNfoRUmvSruj5dv4o5g1nfkc4/XZvEXSOo285LL2xhGAqSIGTIONM54yPWSbi+YKWnyttuj0ILZrOLvczgQrCcu3Kba1PE0VJZO2Wu/JFyVgnWFFqyrXR5sR/uKYIhl7A8onnP14h2x0jk4eLgVaH3di3lpPpBS3oKKnodBDj3SaFsXvnSw4nG5aMCm/XDVaeQ3uhieZ63fE494XHCzBiNmsTpRqY3hra9fRzsP2x2VcnK1wttFwmvMrzxkavLO8JnA8dw0z4yjHF4ghNRByMd6cjjohgGdF2TCA5ALL5j2zUAuwDE05HnAqSZnPjR5DQy9TAMtqoHkaA6Uw/w6b547qRuddL2D+c2y5tnnv+bd/8tZhU=:C773^FO8,97^GB391,0,2^FS^BY2,3,61^FT295,29^BCI,,Y,N^FD>:PG>5"+codigoCompletoImprimir+"^FS^FT398,178^A0I,14,14^FH\^FD"+str(fechaHoy)+"^FS^FT267,120^A0I,17,16^FH\^FD"+nombre_producto+"^FS^PQ1,0,1,Y^XZ")
                            
                            z = Zebra('ZDesigner GC420d')
                            z.output(label)
            

           

               

            if registroProducto:
                    productoAgregado = "El producto "+nombre_producto + "ha sido gregado satisfactoriamente!"
                    return render(request, "6 Productos/altaProductos.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado, "idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado,"estaEnAltaEmpleado":estaEnAltaEmpleado, "sucursales":sucursales, "productoAgregado":productoAgregado,"notificacionRenta":notificacionRenta, "notificacionCita":notificacionCita})
            else:
                    productoNoAgregado = "Error en la base de datos, intentelo más tarde.."
                    return render(request, "6 Productos/altaProductos.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado,"estaEnAltaEmpleado":estaEnAltaEmpleado, "sucursales":sucursales, "productoNoAgregado":productoNoAgregado,"notificacionRenta":notificacionRenta, "notificacionCita":notificacionCita})

        return render(request, "6 Productos/altaProductos.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado,"estaEnAltaEmpleado":estaEnAltaEmpleado, "sucursales":sucursales,"notificacionRenta":notificacionRenta, "notificacionCita":notificacionCita})
    else:
        return render(request,"1 Login/login.html")
    
    

def inventarioProductos(request):

    if "idSesion" in request.session:

        # Variables de sesión
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']
        idPerfil = idEmpleado
        idConfig = idEmpleado
       

        

        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
        
           #notificacionRentas
        notificacionRenta = notificacionRentas(request)

        #notificacionCitas
        notificacionCita = notificacionCitas(request)

        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)

        
        
        
        # contadores
        contadorProductosVentas = 0
        contadorProductosRentas = 0
        contadorProductosGastos = 0
        productosParaVenta = ProductosVenta.objects.all()
        productosParaRenta = ProductosRenta.objects.all()
        productosGasto = ProductosGasto.objects.all()
        
        for productoVentac in productosParaVenta:
            contadorProductosVentas = contadorProductosVentas + 1

        for productoRentac in productosParaRenta:
            contadorProductosRentas = contadorProductosRentas + 1

        for productoGastoc in productosGasto:
            contadorProductosGastos = contadorProductosGastos + 1
        
        # Productos para ventas
        agregadosVentas = []
        sucursalesVentas = []
        stockNecesario = []
        for productoVenta in productosParaVenta:
            id_empleado_agrego = productoVenta.creado_por_id
            id_sucursal = productoVenta.sucursal_id
            stock = productoVenta.stock
            cantidadEnExistencia = productoVenta.cantidad
            
            minimoStock = stock/2
            if cantidadEnExistencia>=minimoStock:
                mensajeStock = "No se necesitan artículos"
            elif cantidadEnExistencia<minimoStock:
                mensajeStock = "Se necesita restock"

            datosEmpleado = Empleados.objects.filter(id_empleado = id_empleado_agrego)
            for dato in datosEmpleado:
                nombres_agregado = dato.nombres
                apellidoPat_agregado = dato.apellido_paterno
            nombreCompletoagregado = nombres_agregado + " " + apellidoPat_agregado

            datosSucursal = Sucursales.objects.filter(id_sucursal = id_sucursal)
            for datoSucursal in datosSucursal:
                nombreSucursal = datoSucursal.nombre

            agregadosVentas.append(nombreCompletoagregado)
            sucursalesVentas.append(nombreSucursal)
            stockNecesario.append(mensajeStock)
            
        listaProductosVenta = zip(productosParaVenta, agregadosVentas, sucursalesVentas,stockNecesario)
        listaProductosVentaEditar = zip(productosParaVenta, agregadosVentas, sucursalesVentas) # Para el modal de editar
        listaProductosVentaEditar2 = zip(productosParaVenta, agregadosVentas, sucursalesVentas) # Para el modal de editar
        
        listaProductosVentaComprar = zip(productosParaVenta, agregadosVentas, sucursalesVentas)
        listaProductosVentaComprar2 = zip(productosParaVenta, agregadosVentas, sucursalesVentas)

        # Productos para rentas
        agregadosRentas = []
        sucursalesRentas = []
        clientesRentas =[]
        for productoRenta in productosParaRenta:
            id_productoR = productoRenta.id_producto
            id_empleado_agrego = productoRenta.creado_por_id
            id_sucursal = productoRenta.sucursal_id
            codigoProductoRenta = productoRenta.codigo_producto

            datosEmpleado = Empleados.objects.filter(id_empleado = id_empleado_agrego)
            for dato in datosEmpleado:
                nombres_agregado = dato.nombres
                apellidoPat_agregado = dato.apellido_paterno
            nombreCompletoagregado = nombres_agregado + " " + apellidoPat_agregado

            datosSucursal = Sucursales.objects.filter(id_sucursal = id_sucursal)
            for datoSucursal in datosSucursal:
                nombreSucursal = datoSucursal.nombre

            agregadosRentas.append(nombreCompletoagregado)
            sucursalesRentas.append(nombreSucursal)
            
            if productoRenta.estado_renta == "En renta":
                enRenta = Rentas.objects.filter(codigos_productos_renta= codigoProductoRenta)
                for ren in enRenta:
                    idCliente = ren.cliente_id
                    
                    cliente = Clientes.objects.filter(id_cliente = idCliente)
                    for cliente_renta in cliente:
                        id = str(cliente_renta.id_cliente)
                        nombre = cliente_renta.nombre_cliente
                        apellidoP = cliente_renta.apellidoPaterno_cliente
                        apellidoM = cliente_renta.apellidoMaterno_cliente
                    completoCliente = id + " " + nombre + " " + apellidoP + " " + apellidoM
                    clientesRentas.append(completoCliente)
            else:
                completoCliente = ""
                clientesRentas.append(completoCliente)
             
        listaProductosRenta = zip(productosParaRenta, agregadosRentas, sucursalesRentas,clientesRentas)
        listaProductosRentaEditar = zip(productosParaRenta, agregadosRentas, sucursalesRentas)

        # Productos para gasto
        agregadosGasto = []
        sucursalesGasto = []
        for productoGasto in productosGasto:
            id_empleado_agrego = productoGasto.creado_por_id
            id_sucursal = productoGasto.sucursal_id

            datosEmpleado = Empleados.objects.filter(id_empleado = id_empleado_agrego)
            for dato in datosEmpleado:
                nombres_agregado = dato.nombres
                apellidoPat_agregado = dato.apellido_paterno
            nombreCompletoagregado = nombres_agregado + " " + apellidoPat_agregado

            datosSucursal = Sucursales.objects.filter(id_sucursal = id_sucursal)
            for datoSucursal in datosSucursal:
                nombreSucursal = datoSucursal.nombre

            agregadosGasto.append(nombreCompletoagregado)
            sucursalesGasto.append(nombreSucursal)
            
        listaProductosGasto = zip(productosGasto, agregadosGasto, sucursalesGasto)
        listaProductosGasto2 = zip(productosGasto, agregadosGasto, sucursalesGasto) 
        listaProductosGastoEditar = zip(productosGasto, agregadosGasto, sucursalesGasto) 
        listaProductosGastoComprar = zip(productosGasto, agregadosGasto, sucursalesGasto) 
        
        listaSucursales = Sucursales.objects.all()
        
        listaSucursalesProductosVenta = Sucursales.objects.all()
        
        #Costos Producto Ventas.
        totalesSucursalesProductosVenta = []
        costoTotalProductosVenta = 0
        for sucursal in listaSucursalesProductosVenta:
            idSucursal = sucursal.id_sucursal
            nombreSucursal = sucursal.nombre
            
            #Consulta a todos los productos
            costoTotalProductosVentaPorSucural = 0
            costoVentaTotalProductosVentaPorSucursal = 0
            numeroProductos = 0 
            consultaModalProductosVenta = ProductosVenta.objects.all()
            for productoVenta in consultaModalProductosVenta:
                idSucursalProducto = productoVenta.sucursal_id
                
                if idSucursal == idSucursalProducto:
                    costoCompra = productoVenta.costo_compra
                    costoVenta = productoVenta.costo_venta
                    existenciaProductosVenta = productoVenta.cantidad
                    
                    costoCompra = float(costoCompra)*float(existenciaProductosVenta)
                    costoVenta = float(costoVenta)*float(existenciaProductosVenta)
                    
                    costoTotalProductosVentaPorSucural = costoTotalProductosVentaPorSucural + costoCompra
                    costoVentaTotalProductosVentaPorSucursal = costoVentaTotalProductosVentaPorSucursal + costoVenta
                    numeroProductos = numeroProductos + existenciaProductosVenta
                    
            totalesSucursalesProductosVenta.append([idSucursal, nombreSucursal, numeroProductos, costoTotalProductosVentaPorSucural, costoVentaTotalProductosVentaPorSucursal])
                
            costoTotalProductosVenta = costoTotalProductosVenta + costoTotalProductosVentaPorSucural
            
        #Costos Productos Rentas
        listaSucursalesProductosRenta = Sucursales.objects.all()
        
        totalesSucursalesProductosRenta = []
        costoTotalProductosRenta = 0
        for sucursal in listaSucursalesProductosRenta:
            idSucursal = sucursal.id_sucursal
            nombreSucursal = sucursal.nombre
            
            costoTotalProductosRentaPorSucursal = 0
            costoRentaTotalProductosRentaPorSucursal = 0
            numeroProductosRenta = 0
            consultaModalProductosRenta = ProductosRenta.objects.all()
            for productoRenta in consultaModalProductosRenta:
                idSucursalProducto = productoRenta.sucursal_id
                
                if idSucursal == idSucursalProducto:
                    costoCompra = productoRenta.costo_de_compra
                    costoRenta = productoRenta.costo_renta
                    cantidad = productoRenta.cantidad
                    
                    costoCompra = float(costoCompra)*float(cantidad)
                    costoRenta = float(costoRenta)*float(cantidad)
                    costoTotalProductosRentaPorSucursal = costoTotalProductosRentaPorSucursal + costoCompra
                    costoRentaTotalProductosRentaPorSucursal = costoRentaTotalProductosRentaPorSucursal + costoRenta
                    numeroProductosRenta = numeroProductosRenta + cantidad
                    
            totalesSucursalesProductosRenta.append([idSucursal,nombreSucursal,numeroProductosRenta,costoTotalProductosRentaPorSucursal,costoRentaTotalProductosRentaPorSucursal])
            costoTotalProductosRenta = costoTotalProductosRenta + costoTotalProductosRentaPorSucursal
                    
        #Costos Productos Gasto
        listaSucursalesProductosGasto = Sucursales.objects.all()
        
        totalesSucursalesProductosGasto = []
        costoTotalProductosGasto = 0
        for sucursal in listaSucursalesProductosGasto:
            idSucursal = sucursal.id_sucursal
            nombreSucursal = sucursal.nombre
            
            costoTotalProductosGastoPorSucursal = 0
            numeroProductosGasto = 0
            consultaModalProductosGasto = ProductosGasto.objects.all()
            for productoGasto in consultaModalProductosGasto:
                idSucursalProducto = productoGasto.sucursal_id
                
                if idSucursal == idSucursalProducto:
                    costoCompra = productoGasto.costo_compra
                    cantidad = productoGasto.cantidad
                    
                    costoCompra = float(costoCompra)*float(cantidad)
                    costoTotalProductosGastoPorSucursal = costoTotalProductosGastoPorSucursal + costoCompra
                    numeroProductosGasto = numeroProductosGasto + cantidad
            
            totalesSucursalesProductosGasto.append([idSucursal,nombreSucursal,numeroProductosGasto,costoTotalProductosGastoPorSucursal])
            costoTotalProductosGasto = costoTotalProductosGasto + costoTotalProductosGastoPorSucursal
        
        if "productoActualizado" in request.session:
            productoActualizado = request.session['productoActualizado']
            del request.session['productoActualizado']
            return render(request, "6 Productos/inventarioProductos.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
            "contadorProductosVentas":contadorProductosVentas,
            "contadorProductosRentas":contadorProductosRentas,
            "contadorProductosGastos":contadorProductosGastos,
            "listaProductosVenta":listaProductosVenta, "listaProductosVentaEditar":listaProductosVentaEditar,"listaProductosVentaEditar2":listaProductosVentaEditar2, "listaProductosVentaComprar":listaProductosVentaComprar, "listaProductosVentaComprar2":listaProductosVentaComprar,
            "listaProductosRenta":listaProductosRenta,
            "listaProductosGasto":listaProductosGasto,
            "listaProductosGasto2":listaProductosGasto2, "listaProductosGastoEditar":listaProductosGastoEditar, "listaProductosGastoComprar":listaProductosGastoComprar, "productoActualizado":productoActualizado,"listaProductosRentaEditar":listaProductosRentaEditar,"notificacionRenta":notificacionRenta, "listaSucursales":listaSucursales,
            "totalesSucursalesProductosVenta":totalesSucursalesProductosVenta, "costoTotalProductosVenta":costoTotalProductosVenta,
            "totalesSucursalesProductosRenta":totalesSucursalesProductosRenta, "costoTotalProductosRenta":costoTotalProductosRenta,
            "totalesSucursalesProductosGasto":totalesSucursalesProductosGasto, "costoTotalProductosGasto":costoTotalProductosGasto, "notificacionCita":notificacionCita})
        
        if "productosActualizados" in request.session:
            productosActualizados = request.session['productosActualizados']
            del request.session['productosActualizados']
            return render(request, "6 Productos/inventarioProductos.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
            "contadorProductosVentas":contadorProductosVentas,
            "contadorProductosRentas":contadorProductosRentas,
            "contadorProductosGastos":contadorProductosGastos,
            "listaProductosVenta":listaProductosVenta, "listaProductosVentaEditar":listaProductosVentaEditar, "listaProductosVentaEditar2":listaProductosVentaEditar2, "listaProductosVentaComprar":listaProductosVentaComprar, "listaProductosVentaComprar2":listaProductosVentaComprar,
            "listaProductosRenta":listaProductosRenta,
            "listaProductosGasto":listaProductosGasto,
            "listaProductosGasto2":listaProductosGasto2, "listaProductosGastoEditar":listaProductosGastoEditar,"listaProductosGastoComprar":listaProductosGastoComprar,"listaProductosRentaEditar":listaProductosRentaEditar, "notificacionRenta":notificacionRenta, "listaSucursales":listaSucursales, "productosActualizados":productosActualizados,
            "totalesSucursalesProductosVenta":totalesSucursalesProductosVenta, "costoTotalProductosVenta":costoTotalProductosVenta,
            "totalesSucursalesProductosRenta":totalesSucursalesProductosRenta, "costoTotalProductosRenta":costoTotalProductosRenta,
            "totalesSucursalesProductosGasto":totalesSucursalesProductosGasto, "costoTotalProductosGasto":costoTotalProductosGasto, "notificacionCita":notificacionCita})
        
        if "errorProductosActualizados" in request.session:
            errorProductosActualizados = request.session['errorProductosActualizados']
            del request.session['errorProductosActualizados']
            return render(request, "6 Productos/inventarioProductos.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
            "contadorProductosVentas":contadorProductosVentas,
            "contadorProductosRentas":contadorProductosRentas,
            "contadorProductosGastos":contadorProductosGastos,
            "listaProductosVenta":listaProductosVenta, "listaProductosVentaEditar":listaProductosVentaEditar, "listaProductosVentaEditar2":listaProductosVentaEditar2, "listaProductosVentaComprar":listaProductosVentaComprar, "listaProductosVentaComprar2":listaProductosVentaComprar,
            "listaProductosRenta":listaProductosRenta,
            "listaProductosGasto":listaProductosGasto,
            "listaProductosGasto2":listaProductosGasto2, "listaProductosGastoEditar":listaProductosGastoEditar,"listaProductosGastoComprar":listaProductosGastoComprar,"listaProductosRentaEditar":listaProductosRentaEditar, "notificacionRenta":notificacionRenta, "listaSucursales":listaSucursales, "errorProductosActualizados":errorProductosActualizados,
            "totalesSucursalesProductosVenta":totalesSucursalesProductosVenta, "costoTotalProductosVenta":costoTotalProductosVenta,
            "totalesSucursalesProductosRenta":totalesSucursalesProductosRenta, "costoTotalProductosRenta":costoTotalProductosRenta,
            "totalesSucursalesProductosGasto":totalesSucursalesProductosGasto, "costoTotalProductosGasto":costoTotalProductosGasto, "notificacionCita":notificacionCita})
        
        if "correoEnviado" in request.session:
            correoEnviado = request.session['correoEnviado']
            del request.session['correoEnviado']
            return render(request, "6 Productos/inventarioProductos.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
            "contadorProductosVentas":contadorProductosVentas,
            "contadorProductosRentas":contadorProductosRentas,
            "contadorProductosGastos":contadorProductosGastos,
            "listaProductosVenta":listaProductosVenta, "listaProductosVentaEditar":listaProductosVentaEditar, "listaProductosVentaEditar2":listaProductosVentaEditar2, "listaProductosVentaComprar":listaProductosVentaComprar, "listaProductosVentaComprar2":listaProductosVentaComprar,
            "listaProductosRenta":listaProductosRenta,
            "listaProductosGasto":listaProductosGasto,
            "listaProductosGasto2":listaProductosGasto2, "listaProductosGastoEditar":listaProductosGastoEditar,"listaProductosGastoComprar":listaProductosGastoComprar,"listaProductosRentaEditar":listaProductosRentaEditar,"notificacionRenta":notificacionRenta, "listaSucursales":listaSucursales, "correoEnviado":correoEnviado,
            "totalesSucursalesProductosVenta":totalesSucursalesProductosVenta, "costoTotalProductosVenta":costoTotalProductosVenta,
            "totalesSucursalesProductosRenta":totalesSucursalesProductosRenta, "costoTotalProductosRenta":costoTotalProductosRenta,
            "totalesSucursalesProductosGasto":totalesSucursalesProductosGasto, "costoTotalProductosGasto":costoTotalProductosGasto, "notificacionCita":notificacionCita})
        
        if "correoNoEnviado" in request.session:
            correoNoEnviado = request.session['correoNoEnviado']
            del request.session['correoNoEnviado']
            return render(request, "6 Productos/inventarioProductos.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
            "contadorProductosVentas":contadorProductosVentas,
            "contadorProductosRentas":contadorProductosRentas,
            "contadorProductosGastos":contadorProductosGastos,
            "listaProductosVenta":listaProductosVenta, "listaProductosVentaEditar":listaProductosVentaEditar, "listaProductosVentaEditar2":listaProductosVentaEditar2, "listaProductosVentaComprar":listaProductosVentaComprar, "listaProductosVentaComprar2":listaProductosVentaComprar,
            "listaProductosRenta":listaProductosRenta,
            "listaProductosGasto":listaProductosGasto,
            "listaProductosGasto2":listaProductosGasto2, "listaProductosGastoEditar":listaProductosGastoEditar,"listaProductosGastoComprar":listaProductosGastoComprar,"listaProductosRentaEditar":listaProductosRentaEditar, "notificacionRenta":notificacionRenta, "listaSucursales":listaSucursales, "correoNoEnviado":correoNoEnviado,
            "totalesSucursalesProductosVenta":totalesSucursalesProductosVenta, "costoTotalProductosVenta":costoTotalProductosVenta,
            "totalesSucursalesProductosRenta":totalesSucursalesProductosRenta, "costoTotalProductosRenta":costoTotalProductosRenta,
            "totalesSucursalesProductosGasto":totalesSucursalesProductosGasto, "costoTotalProductosGasto":costoTotalProductosGasto, "notificacionCita":notificacionCita})
        
        
        
        return render(request, "6 Productos/inventarioProductos.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
        "contadorProductosVentas":contadorProductosVentas,
        "contadorProductosRentas":contadorProductosRentas,
        "contadorProductosGastos":contadorProductosGastos,
        "listaProductosVenta":listaProductosVenta, "listaProductosVentaEditar":listaProductosVentaEditar, "listaProductosVentaEditar2":listaProductosVentaEditar2, "listaProductosVentaComprar":listaProductosVentaComprar, "listaProductosVentaComprar2":listaProductosVentaComprar,
        "listaProductosRenta":listaProductosRenta,
        "listaProductosGasto":listaProductosGasto,
        "listaProductosGasto2":listaProductosGasto2, "listaProductosGastoEditar":listaProductosGastoEditar,"listaProductosGastoComprar":listaProductosGastoComprar,"listaProductosRentaEditar":listaProductosRentaEditar, "notificacionRenta":notificacionRenta, "listaSucursales":listaSucursales,
        "totalesSucursalesProductosVenta":totalesSucursalesProductosVenta, "costoTotalProductosVenta":costoTotalProductosVenta,
        "totalesSucursalesProductosRenta":totalesSucursalesProductosRenta, "costoTotalProductosRenta":costoTotalProductosRenta,
            "totalesSucursalesProductosGasto":totalesSucursalesProductosGasto, "costoTotalProductosGasto":costoTotalProductosGasto, "notificacionCita":notificacionCita})
    else:
        return render(request,"1 Login/login.html")
    
    
    
def actualizarProductoV(request):

    if "idSesion" in request.session:

        if request.method == "POST":
            idProductoVentaEditar = request.POST['idProductoVentaEditar']
            costoGastoActualizado = request.POST['costoGastoActualizado']
            margenActualizado = request.POST['margenActualizado']
            costoVentaActualizado = request.POST['costoVentaActualizado']
            
            consultaProducto = ProductosVenta.objects.filter(id_producto = idProductoVentaEditar)
            
            for dato in consultaProducto:
                nombreProducto = dato.nombre_producto
            
            actualizacionProductoVenta = ProductosVenta.objects.filter(id_producto = idProductoVentaEditar).update(costo_compra = costoGastoActualizado, margen_ganancia_producto = margenActualizado, costo_venta = costoVentaActualizado)
            
            if actualizacionProductoVenta:    
                request.session['productoActualizado'] = "El producto " + nombreProducto + " ha sido actualizado correctamente!"
                return redirect('/inventarioProductos/')      

            
def actualizarProductoVentaCompra(request):

    if "idSesion" in request.session:

        if request.method == "POST":
            idProductoVentaComprar = request.POST['idProductoVentaComprar']
            cantidadComprarProducto = request.POST['cantidadComprarProducto']
            costoGastoActualizado = request.POST['costoGastoActualizado']
            
            consultaProducto = ProductosVenta.objects.filter(id_producto = idProductoVentaComprar)
            
            for dato in consultaProducto:
                nombreProducto = dato.nombre_producto
                cantidadActual = dato.cantidad
                codigoProducto = dato.codigo_producto
                
            cantidadActualInt = int(cantidadActual)
            cantidadActualizada = int(cantidadComprarProducto) + cantidadActualInt
            
            totalCostoDeCompra = float(cantidadComprarProducto) * float(costoGastoActualizado)
            totalCostoCompraRedondeado = round(totalCostoDeCompra,2)
            
            fechaCompra = datetime.today().strftime('%Y-%m-%d')
                
            #Actualizar costo gasto de producto y cantidades
            actualizarProducto = ProductosVenta.objects.filter(id_producto = idProductoVentaComprar).update(costo_compra = costoGastoActualizado, cantidad = cantidadActualizada)
            
            #Generar y guardar compra
            registroCompraProductoVenta = ComprasVentas(
                id_productoComprado = ProductosVenta.objects.get(id_producto = idProductoVentaComprar),
                costo_unitario = costoGastoActualizado,
                cantidad_comprada = cantidadComprarProducto,
                total_costoCompra = totalCostoCompraRedondeado,
                fecha_compra = fechaCompra
            )
            
            registroCompraProductoVenta.save()
            
            if actualizarProducto and registroCompraProductoVenta:    
                request.session['productoActualizado'] = "Se ha realizado una nueva compra del producto " + nombreProducto + " correctamente!"
                #ImprimirEtiquetas
                fechaHoy = date.today()
                letra1 = codigoProducto[0]
                letra2 = codigoProducto[1]
                primerDigitoCodigo = codigoProducto[2]
                segundoDigitoCodigo = codigoProducto[3]
                tercerDigitoCodigo = codigoProducto[4]
                cuartoDigitoCodigo = codigoProducto[5]
                
                numeroCompletoCodigo = primerDigitoCodigo + segundoDigitoCodigo + tercerDigitoCodigo + cuartoDigitoCodigo
                codigoCompletoImprimir = str(numeroCompletoCodigo)
                cantidadComprarProducto = int(cantidadComprarProducto)
                for x in range(cantidadComprarProducto):
                    label = ("^XA~TA000~JSN^LT0^MNW^MTD^PON^PMN^LH0,0^JMA^PR4,4~SD15^JUS^LRN^CI0^XZ^XA^MMT^PW406^LL0203^LS0^FO0,128^GFA,01152,01152,00012,:Z64:eJxjYBgF9AEpxjKygiwFBQVAdr2xvX3/mY4f/4DsYmNGwzlnDvawAdmPN+/fOOPNzx7mBgaGZGNDQxkXwR5msHpj+/5zM36A2C5Ac2bKFBSA2AzGDIwNPAwMTFA2AwsDAxuEDTKC4R9MDZAqoLd/DQUKWQwegNn1xhY/dxl/ALOLDQUkZxhD1CRvnv2zD8Y2FpRkh7Lr7X/MPm0M0esieaHwjAHc9UC/WMDZDIYGCAuVHyDYjAeo6pdRQCsAAK6KM48=:1B1C^FO128,128^GFA,01280,01280,00020,:Z64:eJxjYBgFAwwcGBgEHAgrYwkJEAwICUET5VDAUCggAMTkOoZJCYUryOre+Ec01L2w8ENBDVQs71jGOQ6gzec6Ol6sgordSSmIkWBlETwvy3v2IMxpWQkVEkxMjB2c3BxNUDGZmvIIAVFRRxnJ+aLMMHVrnp1Q4GBo4uBo4mCCqTtz5khBaGj4HIkwGUaomEVHR/MGLSXlGQZWFjB1snPPygPVBZfWfy48DhXj4ujjUFjR0dH0qOEBzF4GySMSKaGhIQwJDIw8MDHrBg4lJaUFDApAN8DEjBtEY0QCQcHHWIAUDg1o9CgYJgAApEY4pg==:6E1D^BY2,3,75^FT291,35^BCI,,Y,N^FD>:"+str(letra1)+str(letra2)+">5"+codigoCompletoImprimir+"^FS^FO16,118^GB373,0,3^FS^FT387,171^A0I,17,16^FH\^FD"+str(fechaHoy)+"^FS^PQ1,0,1,Y^XZ")                        
                    z = Zebra('ZDesigner GC420d')
                    z.output(label)
                return redirect('/inventarioProductos/')      


    
def actualizarProductoGasto(request):

    if "idSesion" in request.session:

        if request.method == "POST":
            idProductoGastoEditar = request.POST['idProductoGastoEditar']
            costoGastoActualizado = request.POST['costoGastoActualizado']
            cantidadActualizado = request.POST['cantidadActualizado']
            
            
            consultaProducto = ProductosGasto.objects.filter(id_producto = idProductoGastoEditar)
            
            for dato in consultaProducto:
                nombreProducto = dato.nombre_producto
            
            actualizacionProductoGasto = ProductosGasto.objects.filter(id_producto = idProductoGastoEditar).update(costo_compra = costoGastoActualizado,cantidad = cantidadActualizado)
            
            if actualizacionProductoGasto:    
                request.session['productoActualizado'] = "El producto " + nombreProducto + " ha sido actualizado correctamente!"
                return redirect('/inventarioProductos/')  
            

            
def actualizarProductoGastoCompra(request):

    if "idSesion" in request.session:

        if request.method == "POST":
            idProductoGastoComprar = request.POST['idProductoGastoComprar']
            cantidadComprarProducto = request.POST['cantidadComprarProducto']
            costoGastoActualizado = request.POST['costoGastoActualizado']
            
            consultaProducto = ProductosGasto.objects.filter(id_producto = idProductoGastoComprar)
            
            for dato in consultaProducto:
                nombreProducto = dato.nombre_producto
                cantidadActual = dato.cantidad
                codigoProducto = dato.codigo_producto
                
            cantidadActualInt = int(cantidadActual)
            cantidadActualizada = int(cantidadComprarProducto) + cantidadActualInt
            
            totalCostoDeCompra = float(cantidadComprarProducto) * float(costoGastoActualizado)
            totalCostoCompraRedondeado = round(totalCostoDeCompra,2)
            
            fechaCompra = datetime.today().strftime('%Y-%m-%d')
                
            #Actualizar costo gasto de producto y cantidades
            actualizarProducto = ProductosGasto.objects.filter(id_producto = idProductoGastoComprar).update(costo_compra = costoGastoActualizado, cantidad = cantidadActualizada)
            
            #Generar y guardar compra
            registroCompraProductoGasto = ComprasGastos(
                id_productoComprado = ProductosGasto.objects.get(id_producto = idProductoGastoComprar),
                costo_unitario = costoGastoActualizado,
                cantidad_comprada = cantidadComprarProducto,
                total_costoCompra = totalCostoCompraRedondeado,
                fecha_compra = fechaCompra
            )
            
            registroCompraProductoGasto.save()
            
            if actualizarProducto and registroCompraProductoGasto:    
                request.session['productoActualizado'] = "Se ha realizado una nueva compra del producto " + nombreProducto + " correctamente!"
                #ImprimirEtiquetas
                fechaHoy = date.today()
                letra1 = codigoProducto[0]
                letra2 = codigoProducto[1]
                primerDigitoCodigo = codigoProducto[2]
                segundoDigitoCodigo = codigoProducto[3]
                tercerDigitoCodigo = codigoProducto[4]
                cuartoDigitoCodigo = codigoProducto[5]
                
                numeroCompletoCodigo = primerDigitoCodigo + segundoDigitoCodigo + tercerDigitoCodigo + cuartoDigitoCodigo
                codigoCompletoImprimir = str(numeroCompletoCodigo)
                cantidadComprarProducto = int(cantidadComprarProducto)
                for x in range(cantidadComprarProducto):
                    label = ("^XA~TA000~JSN^LT0^MNW^MTD^PON^PMN^LH0,0^JMA^PR4,4~SD15^JUS^LRN^CI0^XZ^XA^MMT^PW406^LL0203^LS0^FO0,128^GFA,01152,01152,00012,:Z64:eJxjYBgF9AEpxjKygiwFBQVAdr2xvX3/mY4f/4DsYmNGwzlnDvawAdmPN+/fOOPNzx7mBgaGZGNDQxkXwR5msHpj+/5zM36A2C5Ac2bKFBSA2AzGDIwNPAwMTFA2AwsDAxuEDTKC4R9MDZAqoLd/DQUKWQwegNn1xhY/dxl/ALOLDQUkZxhD1CRvnv2zD8Y2FpRkh7Lr7X/MPm0M0esieaHwjAHc9UC/WMDZDIYGCAuVHyDYjAeo6pdRQCsAAK6KM48=:1B1C^FO128,128^GFA,01280,01280,00020,:Z64:eJxjYBgFAwwcGBgEHAgrYwkJEAwICUET5VDAUCggAMTkOoZJCYUryOre+Ec01L2w8ENBDVQs71jGOQ6gzec6Ol6sgordSSmIkWBlETwvy3v2IMxpWQkVEkxMjB2c3BxNUDGZmvIIAVFRRxnJ+aLMMHVrnp1Q4GBo4uBo4mCCqTtz5khBaGj4HIkwGUaomEVHR/MGLSXlGQZWFjB1snPPygPVBZfWfy48DhXj4ujjUFjR0dH0qOEBzF4GySMSKaGhIQwJDIw8MDHrBg4lJaUFDApAN8DEjBtEY0QCQcHHWIAUDg1o9CgYJgAApEY4pg==:6E1D^BY2,3,75^FT291,35^BCI,,Y,N^FD>:"+str(letra1)+str(letra2)+">5"+codigoCompletoImprimir+"^FS^FO16,118^GB373,0,3^FS^FT387,171^A0I,17,16^FH\^FD"+str(fechaHoy)+"^FS^PQ1,0,1,Y^XZ")                        
                    z = Zebra('ZDesigner GC420d')
                    z.output(label)
                return redirect('/inventarioProductos/')          
    

def actualizarProductoRenta(request):

    if "idSesion" in request.session:

        if request.method == "POST":
            idProductoRentaEditar = request.POST['idProductoRentaEditar']
            costoPrecioCompraActualizado = request.POST['costoPrecioCompraActualizado']
            costoRentaActualizado = request.POST['costoRentaActualizado']
            
            
            consultaProducto = ProductosRenta.objects.filter(id_producto = idProductoRentaEditar)
            
            for dato in consultaProducto:
                nombreProducto = dato.nombre_producto
            
            actualizacionProductoRenta = ProductosRenta.objects.filter(id_producto = idProductoRentaEditar).update(costo_de_compra = costoPrecioCompraActualizado,costo_renta = costoRentaActualizado)
            
            if actualizacionProductoRenta:    
                request.session['productoActualizado'] = "El producto " + nombreProducto + " ha sido actualizado correctamente!"
                return redirect('/inventarioProductos/')  
            


def inventarioCompras(request):

    if "idSesion" in request.session:

        # Variables de sesión
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']
        idPerfil = idEmpleado
        idConfig = idEmpleado
       

        

        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
   #notificacionRentas
        notificacionRenta = notificacionRentas(request)

        #notificacionCitas
        notificacionCita = notificacionCitas(request)

        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)
        
        
        
        # contadores
        contadorComprasVentas = 0
        contadorComprasRentas = 0
        contadorComprasGastos = 0
        comprasParaVenta = ComprasVentas.objects.all()
        comprasParaRenta = ComprasRentas.objects.all()
        comprasParaGasto = ComprasGastos.objects.all()
        
        for compraVentac in comprasParaVenta:
            contadorComprasVentas = contadorComprasVentas + 1

        for compraRentac in comprasParaRenta:
            contadorComprasRentas = contadorComprasRentas + 1

        for compraGastoc in comprasParaGasto:
            contadorComprasGastos = contadorComprasGastos + 1
        
        # compras para ventas
        productosComprasVentas = []
        sucursalesComprasVentas = []
       
        for comprasVenta in comprasParaVenta:
            id_producto_comprado = comprasVenta.id_productoComprado_id
            

            datosProducto = ProductosVenta.objects.filter(id_producto = id_producto_comprado)
            for dato in datosProducto:
                codigo = dato.codigo_producto
                nombre = dato.nombre_producto
                id_sucursal = dato.sucursal_id
            nombreCompletoProductoCompra = codigo + " " + nombre

            datosSucursal = Sucursales.objects.filter(id_sucursal = id_sucursal)
            for datoSucursal in datosSucursal:
                nombreSucursal = datoSucursal.nombre

            productosComprasVentas.append(nombreCompletoProductoCompra)
            sucursalesComprasVentas.append(nombreSucursal)
           
            
        listaComprasProductosVenta = zip(comprasParaVenta, productosComprasVentas, sucursalesComprasVentas)
     
     

        # compras para rentas
        productosComprasRentas = []
        sucursalesComprasRentas = []
        for comprasRenta in comprasParaRenta:
            id_producto_comprado = comprasRenta.id_productoComprado_id
            

            datosProducto = ProductosRenta.objects.filter(id_producto = id_producto_comprado)
            for dato in datosProducto:
                codigo = dato.codigo_producto
                nombre = dato.nombre_producto
                id_sucursal = dato.sucursal_id
            nombreCompletoProductoCompra = codigo + " " + nombre

            datosSucursal = Sucursales.objects.filter(id_sucursal = id_sucursal)
            for datoSucursal in datosSucursal:
                nombreSucursal = datoSucursal.nombre

            productosComprasRentas.append(nombreCompletoProductoCompra)
            sucursalesComprasRentas.append(nombreSucursal)
           
            
        listaComprasProductosRenta = zip(comprasParaRenta, productosComprasRentas, sucursalesComprasRentas)
        

        # compras para gasto
        productosComprasGastos = []
        sucursalesComprasGastos = []
        for comprasGasto in comprasParaGasto:
            id_producto_comprado = comprasGasto.id_productoComprado_id
            

            datosProducto = ProductosGasto.objects.filter(id_producto = id_producto_comprado)
            for dato in datosProducto:
                codigo = dato.codigo_producto
                nombre = dato.nombre_producto
                id_sucursal = dato.sucursal_id
            nombreCompletoProductoCompra = codigo + " " + nombre

            datosSucursal = Sucursales.objects.filter(id_sucursal = id_sucursal)
            for datoSucursal in datosSucursal:
                nombreSucursal = datoSucursal.nombre

            productosComprasGastos.append(nombreCompletoProductoCompra)
            sucursalesComprasGastos.append(nombreSucursal)
           
            
        listaComprasProductosGasto = zip(comprasParaGasto, productosComprasGastos, sucursalesComprasGastos)
        
       
        
       
        
        return render(request, "7 Compras/inventarioCompras.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
        "contadorComprasVentas":contadorComprasVentas,
        "contadorComprasRentas":contadorComprasRentas,
        "contadorComprasGastos":contadorComprasGastos,
        "listaComprasProductosVenta":listaComprasProductosVenta,
        "listaComprasProductosRenta":listaComprasProductosRenta,
        "listaComprasProductosGasto":listaComprasProductosGasto,"notificacionRenta":notificacionRenta, "notificacionCita":notificacionCita})
    else:
        return render(request,"1 Login/login.html")
    
   

def agregarConfiguracionCaja(request):

    if "idSesion" in request.session:

       # Variables de sesión
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']
        idPerfil = idEmpleado
        idConfig = idEmpleado
       

        

        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
        
           #notificacionRentas
        notificacionRenta = notificacionRentas(request)

        #notificacionCitas
        notificacionCita = notificacionCitas(request)
        
        #permisosEmpleado
        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)


        

        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]

        # retornar sucrusales
        sucursales = Sucursales.objects.all()
        if request.method == "POST":
            fondo_caja = request.POST['fondoCaja']  #Requerido
            corte_caja_monto = request.POST['corteCaja']  #Requerido
            fecha_config_caja = datetime.today().strftime('%Y-%m-%d') #Requerido
            sucursal =  request.POST['sucursal']  #Requerido
            #fechaAlta = datetime.now()
            
         
            

            registroConfiguracionCaja = ConfiguracionCaja(fondo = fondo_caja,
                    minimo_corte_caja = corte_caja_monto,
                
                    fecha = fecha_config_caja, 
                   
                    sucursal = Sucursales.objects.get(id_sucursal = sucursal), activo = "N")
               
       

            registroConfiguracionCaja.save()
            
            if registroConfiguracionCaja:
                    request.session['configuracionAgregada'] = "La configuracion de caja de fondo " + fondo_caja +  "con mínimo de corte de caja de " + corte_caja_monto  + " ha sido gregado satisfactoriamente!"

                    return redirect('/configuracionCaja/')
                    
            else:
                    request.session['configuracionNoAgregado'] = "Error en la base de datos, intentelo más tarde!"

                    return redirect('/configuracionCaja/')

            
        return render(request, "8 Caja/agregarConfiguracionCaja.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, "sucursales":sucursales,"notificacionRenta":notificacionRenta, "notificacionCita":notificacionCita
        })
    
    else:
        return render(request,"1 Login/login.html")
    
    
def configuracionCaja(request):

    if "idSesion" in request.session:

       # Variables de sesión
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']
        idPerfil = idEmpleado
        idConfig = idEmpleado
        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
        
           #notificacionRentas
        notificacionRenta = notificacionRentas(request)

        #notificacionCitas
        notificacionCita = notificacionCitas(request)

        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)
        
        sucursales = []
        
        configuracionesTotales = ConfiguracionCaja.objects.all()
        for configuracion in configuracionesTotales:
            id_sucursal = configuracion.sucursal_id
            
            sucursal = Sucursales.objects.filter(id_sucursal = id_sucursal)
            for dato in sucursal:
                nombreSucursal = dato.nombre
            sucursales.append(nombreSucursal)
            
        lista = zip(configuracionesTotales, sucursales)
        
        if 'configuracionAgregada' in request.session:
            configuracionAgregada = request.session['configuracionAgregada']
            del request.session['configuracionAgregada']
            return render(request, "8 Caja/configuracionCaja.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, "lista":lista, "configuracionAgregada":configuracionAgregada,"notificacionRenta":notificacionRenta, "notificacionCita":notificacionCita
            })
        
        if 'configuracionNoAgregado' in request.session:
            configuracionNoAgregado = request.session['configuracionNoAgregado']
            del request.session['configuracionNoAgregado']
            return render(request, "8 Caja/configuracionCaja.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, "lista":lista, "configuracionNoAgregado":configuracionNoAgregado,"notificacionRenta":notificacionRenta, "notificacionCita":notificacionCita
            })

        if 'configuracionActivada' in request.session:
            configuracionActivada = request.session['configuracionActivada']
            del request.session['configuracionActivada']
            return render(request, "8 Caja/configuracionCaja.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, "lista":lista, "configuracionActivada":configuracionActivada,"notificacionRenta":notificacionRenta, "notificacionCita":notificacionCita
            })
            
        return render(request, "8 Caja/configuracionCaja.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, "lista":lista,"notificacionRenta":notificacionRenta, "notificacionCita":notificacionCita
        })
    
    else:
        return render(request,"1 Login/login.html")
   

def agregarMovimientoCaja(request):

    if "idSesion" in request.session:

       # Variables de sesión
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']
        idPerfil = idEmpleado
        idConfig = idEmpleado
       

        

        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
        
           #notificacionRentas
        notificacionRenta = notificacionRentas(request)
        
        #notificacionCitas
        notificacionCita = notificacionCitas(request)
        
        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)

        
        
        # Variable para Menu
        estaEnAltaMovimiento = True

        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]

        # retornar sucrusales
        empleados = Empleados.objects.all()
        sucursales = Sucursales.objects.all()
        if request.method == "POST":
            tipo_movimiento = request.POST['tipoMovimiento']  #Requerido
            monto_movimiento = request.POST['montoMovimiento']  #Requerido
            descripcion_movimiento = request.POST['descripcionMov']  #Requerid    
            sucursal = request.POST['sucursal']  #Requerid 
            fecha_movimiento = datetime.today().strftime('%Y-%m-%d') #Requerido
            hora_movimiento =datetime.now().time()
            #fechaAlta = datetime.now()
            
            if tipo_movimiento == "IN":
                movimiento = "Ingreso"
                tipoMovimiento = "Ingreso"
            elif tipo_movimiento == "RE":
                movimiento = "Retiro"
                tipoMovimiento = "Retiro"
            

            registroMovimiento = MovimientosCaja(fecha = fecha_movimiento, hora= hora_movimiento,
                    tipo = tipo_movimiento,
                    monto = monto_movimiento,
                    descripcion = descripcion_movimiento, 
                    sucursal = Sucursales.objects.get(id_sucursal = sucursal),
                   
                    realizado_por = Empleados.objects.get(id_empleado = idEmpleado))
               
       

            registroMovimiento.save()
            
            if registroMovimiento:
                if movimiento == "Retiro":
                    consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursal)
                    for datoSucursal in consultaSucursal:
                        nombreSucursal = datoSucursal.nombre
                    date = datetime.now()
                    hora = date.time().strftime("%H:%M")
                    
                    idUltimoMovimiento = 0
                    movimientos = MovimientosCaja.objects.all()
                    for movimiento in movimientos:
                        idUltimoMovimiento = movimiento.id_movimiento

                    #Empleado vendedor
                    consultaEmpleadoRetiro = Empleados.objects.filter(id_empleado = idEmpleado)
                    for datoVendedor in consultaEmpleadoRetiro:
                        nombreEmpleado = datoVendedor.nombres
                        apellidoPatEmpleado = datoVendedor.apellido_paterno

                    nombreCompletoEmpleadoRetiro = nombreEmpleado + " "+ apellidoPatEmpleado

                    #Fecha
                    hoy = datetime.now()
                    hoyFormato = hoy.strftime('%Y/%m/%d')

                    

                    #Datos sucurssal
                    consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursal)
                    for datoSucursal in consultaSucursal:
                        nombreSucursal = datoSucursal.nombre
                        telefonoSucursal = datoSucursal.telefono
                        direccionSucursal = datoSucursal.direccion

                #Mensaje por telegram
                    
                    try:
                        tokenTelegram = keysBotCostabella.tokenBotCostabella
                        botCostabella = telepot.Bot(tokenTelegram)

                        idGrupoTelegram = keysBotCostabella.idGrupo
                        
                        mensaje = "Hola \U0001F44B! \nLa empleada "+nombreCompletoEmpleadoRetiro+" ha generado un retiro de efectivo, por un monto de $ "+str(monto_movimiento)+" MXN, en la sucursal de "+nombreSucursal+" a las "+str(hora)+" hrs \U0001F4B5!\nDescripción: "+str(descripcion_movimiento)+"."
                        botCostabella.sendMessage(idGrupoTelegram,mensaje)
                    except:
                        print("An exception occurred")
                #Impresion de tickets
                    

                    # Esto es para obtener las impresoras. No es obligatorio hacerlo siempre que se quiera imprimir
                    impresoras = Conector.ConectorV3.obtenerImpresoras()
                    print(f"Las impresoras son: {impresoras}")

                    contadorTickets = 0
                    for x in range(2):
                        contadorTickets = contadorTickets + 1
                        c = Conector.ConectorV3()
                        c.Iniciar()
                        c.Corte(1)
                        
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        # Recuerda que la imagen debe existir y debe ser legible para el plugin. Si no, comenta las líneas
                        c.CargarImagenLocalEImprimir("C:\\COSTABELLA\\sistemaCostabella\\static\\images\\anegragrande.png", 0, 216)
                        c.EscribirTexto("\n")
                        c.EstablecerTamañoFuente(1, 1)
                        c.EstablecerEnfatizado(True)
                        c.EscribirTexto("Sucursal: "+nombreSucursal+"\n")
                        c.EstablecerEnfatizado(False)
                        c.EscribirTexto("TEL: "+telefonoSucursal+"\n")
                        c.TextoSegunPaginaDeCodigos(2, "cp850", direccionSucursal+"\n")

                        c.EstablecerEnfatizado(True)
                        c.EscribirTexto("================================================\n")
                        c.EstablecerTamañoFuente(2, 2)
                        c.EscribirTexto("MOVIMIENTO #"+str(idUltimoMovimiento)+"\n")
                        c.EstablecerEnfatizado(False)
                        c.EstablecerAlineacion(Conector.ALINEACION_IZQUIERDA)
                        c.EstablecerTamañoFuente(1, 1)
                        c.EscribirTexto("\n")
                        c.EscribirTexto(" "+str(hoyFormato)+" - "+str(hora)+" hrs.\n")
                        c.EscribirTexto("Realizado por: "+nombreCompletoEmpleadoRetiro+".\n")
                        c.EscribirTexto("\n")
                        c.EscribirTexto("\n")
                        c.EstablecerEnfatizado(True)
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        c.EscribirTexto("Retiro de caja por $ "+str(monto_movimiento)+" MXN.\n")
                        c.EscribirTexto("Sucursal: "+nombreSucursal+"\n")
                        c.EstablecerEnfatizado(False)
                        c.TextoSegunPaginaDeCodigos(2, "cp850", "Descripción: "+descripcion_movimiento+"\n")
                        



                        
                        c.EscribirTexto("\n")
                        c.EscribirTexto("\n")
                        
                        

                        c.EscribirTexto("\n")
                        c.EstablecerEnfatizado(True)
                        c.EstablecerTamañoFuente(1, 1)
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        c.EscribirTexto("========= Movimiento realizado =========\n")
                        c.EstablecerTamañoFuente(2, 2)
                        c.EstablecerEnfatizado(True)
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        if contadorTickets == 1:
                            c.EscribirTexto("\n")
                            c.EscribirTexto("COPIA TIENDA.\n")
                        else:
                            c.EscribirTexto("\n")
                            c.EscribirTexto("COPIA CLIENTE.\n")
                        c.EscribirTexto("\n")
                        c.EstablecerTamañoFuente(1, 1)
                        

                        c.Feed(1)
                        c.Corte(1)
                        ##c.abrirCajon()
                        c.Pulso(48, 60, 120)
                        print("Imprimiendo...")
                        # Recuerda cambiar por el nombre de tu impresora
                        respuesta = c.imprimirEn("POS80 Printer")
                        if respuesta == True:
                            print("Impresión correcta")
                        else:
                            print(f"Error. El mensaje es: {respuesta}")
                        
                    movimientoAgregado = "El movimiento de tipo  " + str(tipoMovimiento) +  " de monto " + str(monto_movimiento) + " ha sido gregado satisfactoriamente!"

                   

                    



                if movimiento == "Ingreso":
                    consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursal)
                    for datoSucursal in consultaSucursal:
                        nombreSucursal = datoSucursal.nombre
                    date = datetime.now()
                    hora = date.time().strftime("%H:%M")

                #Impresion de tickets
                    #Fecha
                    hoy = datetime.now()
                    hoyFormato = hoy.strftime('%Y/%m/%d')

                    idUltimoMovimiento = 0
                    movimientos = MovimientosCaja.objects.all()
                    for movimiento in movimientos:
                        idUltimoMovimiento = movimiento.id_movimiento

                    #Empleado vendedor
                    consultaEmpleadoRetiro = Empleados.objects.filter(id_empleado = idEmpleado)
                    for datoVendedor in consultaEmpleadoRetiro:
                        nombreEmpleado = datoVendedor.nombres
                        apellidoPatEmpleado = datoVendedor.apellido_paterno

                    nombreCompletoEmpleadoIngreso = nombreEmpleado + " "+ apellidoPatEmpleado

                    #Datos sucurssal
                    consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursal)
                    for datoSucursal in consultaSucursal:
                        nombreSucursal = datoSucursal.nombre
                        telefonoSucursal = datoSucursal.telefono
                        direccionSucursal = datoSucursal.direccion

                    #Mensaje por telegram
                    
                    try:
                        tokenTelegram = keysBotCostabella.tokenBotCostabella
                        botCostabella = telepot.Bot(tokenTelegram)

                        idGrupoTelegram = keysBotCostabella.idGrupo
                        
                        mensaje = "Hola \U0001F44B! \nLa empleada "+nombreCompletoEmpleadoIngreso+" ha generado un ingreso de efectivo, por un monto de $ "+str(monto_movimiento)+" MXN, en la sucursal de "+nombreSucursal+" a las "+str(hora)+" hrs \U0001F4B5!\nDescripción: "+str(descripcion_movimiento)+"."
                        botCostabella.sendMessage(idGrupoTelegram,mensaje)
                    except:
                        print("An exception occurred")

                    
                    # Esto es para obtener las impresoras. No es obligatorio hacerlo siempre que se quiera imprimir
                    impresoras = Conector.ConectorV3.obtenerImpresoras()
                    print(f"Las impresoras son: {impresoras}")

                    contadorTickets = 0
                    for x in range(2):
                        contadorTickets = contadorTickets + 1
                        c = Conector.ConectorV3()
                        c.Iniciar()
                        c.Corte(1)
                        
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        # Recuerda que la imagen debe existir y debe ser legible para el plugin. Si no, comenta las líneas
                        c.CargarImagenLocalEImprimir("C:\\COSTABELLA\\sistemaCostabella\\static\\images\\anegragrande.png", 0, 216)
                        c.EscribirTexto("\n")
                        c.EstablecerTamañoFuente(1, 1)
                        c.EstablecerEnfatizado(True)
                        c.EscribirTexto("Sucursal: "+nombreSucursal+"\n")
                        c.EstablecerEnfatizado(False)
                        c.EscribirTexto("TEL: "+telefonoSucursal+"\n")
                        c.TextoSegunPaginaDeCodigos(2, "cp850", direccionSucursal+"\n")

                        c.EstablecerEnfatizado(True)
                        c.EscribirTexto("================================================\n")
                        c.EstablecerTamañoFuente(2, 2)
                        c.EscribirTexto("MOVIMIENTO #"+str(idUltimoMovimiento)+"\n")
                        c.EstablecerEnfatizado(False)
                        c.EstablecerAlineacion(Conector.ALINEACION_IZQUIERDA)
                        c.EstablecerTamañoFuente(1, 1)
                        c.EscribirTexto("\n")
                        c.EscribirTexto(" "+str(hoyFormato)+" - "+str(hora)+" hrs.\n")
                        c.EscribirTexto("Realizado por: "+nombreCompletoEmpleadoIngreso+".\n")
                        c.EscribirTexto("\n")
                        c.EscribirTexto("\n")
                        c.EstablecerEnfatizado(True)
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        c.EscribirTexto("Ingreso a caja por $ "+str(monto_movimiento)+" MXN.\n")
                        c.EscribirTexto("Sucursal: "+nombreSucursal+"\n")
                        c.EstablecerEnfatizado(False)
                        c.TextoSegunPaginaDeCodigos(2, "cp850", "Descripción: "+descripcion_movimiento+"\n")



                        
                        c.EscribirTexto("\n")
                        c.EscribirTexto("\n")
                        
                        

                        c.EscribirTexto("\n")
                        c.EstablecerEnfatizado(True)
                        c.EstablecerTamañoFuente(1, 1)
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        c.EscribirTexto("========= Movimiento realizado =========\n")
                        c.EstablecerTamañoFuente(2, 2)
                        c.EstablecerEnfatizado(True)
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        if contadorTickets == 1:
                            c.EscribirTexto("\n")
                            c.EscribirTexto("COPIA TIENDA.\n")
                        else:
                            c.EscribirTexto("\n")
                            c.EscribirTexto("COPIA EMPLEADO.\n")
                        c.EscribirTexto("\n")
                        c.EstablecerTamañoFuente(1, 1)
                        

                        c.Feed(1)
                        c.Corte(1)
                        ##c.abrirCajon()
                        c.Pulso(48, 60, 120)
                        print("Imprimiendo...")
                        # Recuerda cambiar por el nombre de tu impresora
                        respuesta = c.imprimirEn("POS80 Printer")
                        if respuesta == True:
                            print("Impresión correcta")
                        else:
                            print(f"Error. El mensaje es: {respuesta}")

                       
                    movimientoAgregado = "El movimiento de tipo  " + str(tipoMovimiento) +  " de monto " + str(monto_movimiento) + " ha sido gregado satisfactoriamente!"
                    
                    
                
                
                return render(request, "8 Caja/agregarMovimientoCaja.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado, "idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado, "sucursales":sucursales, "tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado,"estaEnAltaMovimiento":estaEnAltaMovimiento, "empleados":empleados, "movimientoAgregado":movimientoAgregado,"notificacionRenta":notificacionRenta, "notificacionCita":notificacionCita})
            else:
                movimientoNoAgregado = "Error en la base de datos, intentelo más tarde.."
                return render(request, "8 Caja/agregarMovimientoCaja.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "sucursales":sucursales, "letra":letra, "puestoEmpleado":puestoEmpleado,"estaEnAltaMovimiento":estaEnAltaMovimiento, "empleados":empleados, "movimientoNoAgregado":movimientoNoAgregado,"notificacionRenta":notificacionRent, "notificacionCita":notificacionCita})

            
        return render(request, "8 Caja/agregarMovimientoCaja.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, "empleados":empleados,"sucursales":sucursales,"notificacionRenta":notificacionRenta, "notificacionCita":notificacionCita
        })
    
    else:
        return render(request,"1 Login/login.html")
    
def movimientosCaja(request):

    if "idSesion" in request.session:

       # Variables de sesión
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']
        idPerfil = idEmpleado
        idConfig = idEmpleado
       

        
        agregados = []
        sucursalesMovimientos =[]
        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
        
           #notificacionRentas
        notificacionRenta = notificacionRentas(request)

        #notificacionCitas
        notificacionCita = notificacionCitas(request)

        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)

        
        totalMovimientos= MovimientosCaja.objects.all()
        for movimiento in totalMovimientos:
            id_persona_realizo = movimiento.realizado_por_id
            id_sucursal  = movimiento.sucursal_id
            
            empleado = Empleados.objects.filter(id_empleado = id_persona_realizo)
            for dato in empleado:
                nombre = dato.nombres
                apellidoPat = dato.apellido_paterno
                apellidoMat = dato.apellido_materno
            nombreCompleto = nombre + " " + apellidoPat + " " + apellidoMat
            agregados.append(nombreCompleto)
            
            sucursales = Sucursales.objects.filter(id_sucursal = id_sucursal)
            for sucursal in sucursales:
                nombreSucursal = sucursal.nombre
                sucursalesMovimientos.append(nombreSucursal)
            
        lista = zip(totalMovimientos,agregados,sucursalesMovimientos)
            
            
            
        
            
        return render(request, "8 Caja/movimientosCaja.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, "lista":lista,"notificacionRenta":notificacionRenta, "notificacionCita":notificacionCita
        })
    
    else:
        return render(request,"1 Login/login.html")

def activarConfiguracionCaja(request):

    if "idSesion" in request.session:

       if request.method == "POST":
            idConfiguracionCajaAActivar = request.POST['idConfiguracionCaja']

            consultaConfiguracion = ConfiguracionCaja.objects.filter(id_configuracion = idConfiguracionCajaAActivar)


            for dato in consultaConfiguracion:
                idSucursal = dato.sucursal_id

                configuracionesSucursal = ConfiguracionCaja.objects.filter(sucursal_id__id_sucursal = idSucursal)

                configuracionActivaEnSucursal = False #Variable para saber si ya hay o si aun no hay una configuracion Activa..

                for configuracion in configuracionesSucursal:
                    if configuracion.activo == "S":
                        configuracionActivaEnSucursal = True

                if configuracionActivaEnSucursal == False: #Si no hay ninguna configuracion activa actualmente en esa sucursal..
                    actualizacionConfiguracionCaja = ConfiguracionCaja.objects.filter(id_configuracion = idConfiguracionCajaAActivar).update(activo = "S")
                elif configuracionActivaEnSucursal == True:
                    for config in configuracionesSucursal:
                        idConfig = config.id_configuracion
                        ponerComoInactivoConfiguracion = ConfiguracionCaja.objects.filter(id_configuracion = idConfig).update(activo = "N")
                    actualizacionConfiguracionCaja = ConfiguracionCaja.objects.filter(id_configuracion = idConfiguracionCajaAActivar).update(activo = "S")

            if actualizacionConfiguracionCaja:
                request.session['configuracionActivada'] = "La configuración ha sido activada satisfactoriamente!"
                return redirect('/configuracionCaja/')
    else:
        return render(request,"1 Login/login.html")


def altaRenta(request):

    if "idSesion" in request.session:

       # Variables de sesión
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']
        idPerfil = idEmpleado
        idConfig = idEmpleado
       

        

        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
     
        #notificacionRentas
        notificacionRenta = notificacionRentas(request)

        #notificacionCitas
        notificacionCita = notificacionCitas(request)
        
        #permisosEmpleado
        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)

  
        if request.method == "POST":
       
               
            sucursal = request.POST['sucursal'] #Sucursal donde se hará la renta
            
            datosSucursalSeleccinoada = Sucursales.objects.filter(id_sucursal =sucursal)
            for sucursalId in datosSucursalSeleccinoada:
                idSeleccionada = sucursalId.id_sucursal
                nombreSucursalSeleccionada = sucursalId.nombre
                
            
            productosRenta = ProductosRenta.objects.filter(sucursal_id__id_sucursal = idSeleccionada, cantidad__gte=1, estado_renta = "Sin rentar") 
            productosRentaJava = ProductosRenta.objects.filter(sucursal_id__id_sucursal = idSeleccionada, cantidad__gte=1, estado_renta = "Sin rentar") 
           
            
            dataProductosRenta = [i.jsonRenta() for i in ProductosRenta.objects.filter(sucursal_id__id_sucursal = idSeleccionada) ]
            clientes = Clientes.objects.all()
            datosVendedor = Empleados.objects.filter(id_empleado =idEmpleado ) 
              
            
           


           

               

            

        return render(request, "9 Rentas/altaRenta.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, "productosRenta":productosRenta,
                                                                "clientes":clientes,"datosVendedor":datosVendedor,"data":json.dumps(dataProductosRenta),"productosRentaJava":productosRentaJava,"sucursal":sucursal,"notificacionRenta":notificacionRenta,"nombreSucursalSeleccionada":nombreSucursalSeleccionada, "notificacionCita":notificacionCita})
    
    else:
        return render(request,"1 Login/login.html")
    
def rentas(request):

    if "idSesion" in request.session:

       # Variables de sesión
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']
        idPerfil = idEmpleado
        idConfig = idEmpleado
       

        
        agregados = []
        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
           #notificacionRentas
        notificacionRenta = notificacionRentas(request)

        #notificacionCitas
        notificacionCita = notificacionCitas(request)
        
        #permisosEmpleado
        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)
        
        
        
        contadorApartadas = 0
        contadorPendientes = 0
        contadorFinalizadasSin = 0
        contadorFinalizadasCon = 0
        rentasApartadas = Rentas.objects.filter(estado_devolucion = "A")
        rentasPendientes = Rentas.objects.filter(estado_devolucion = "P")
        rentasFinalizadasSinCuota = Rentas.objects.filter(estado_devolucion = "F", cuota_retraso ="No")
        rentasFinalizadasCuota = Rentas.objects.filter(estado_devolucion = "F", cuota_retraso ="Si")
        
        for pendiente in rentasPendientes:
            contadorPendientes = contadorPendientes + 1
        for finalizadaSin in rentasFinalizadasSinCuota:
            contadorFinalizadasSin = contadorFinalizadasSin + 1
            
        for finalizadaCon in rentasFinalizadasCuota:
            contadorFinalizadasCon = contadorFinalizadasCon + 1
            
        for apartada in rentasApartadas:
            contadorApartadas = contadorApartadas + 1
            
        #------------------- rentas APARTADAS------------------------------------#
        clientesApartadas =[]
        datosProductosRentaApartados=[]
        encargadosApartados = []
        
        sucursalesApartados = []
     
        for renT in rentasApartadas:
            idCliente = renT.cliente_id
            idsProductos = renT.codigos_productos_renta
            encargado_renta = renT.realizado_por_id
            
            
            datosCliente = Clientes.objects.filter(id_cliente= idCliente)
            for datoC in datosCliente:
                idC = str(datoC.id_cliente)
                nombreC = datoC.nombre_cliente
                apellidoPat = datoC.apellidoPaterno_cliente
                apellidoMat = datoC.apellidoMaterno_cliente
            datosCompletosCliente = idC + " " + nombreC + " " + apellidoPat + " " + apellidoMat
            clientesApartadas.append(datosCompletosCliente)
            
            
            datosEncargado = Empleados.objects.filter(id_empleado = encargado_renta)
            for datoE in datosEncargado:
                nombres = datoE.nombres
                apellidoPaterno = datoE.apellido_paterno
                apellidoMaterno = datoE.apellido_materno
            datosCompletoEncargado = nombres + " " + apellidoPaterno + " " + apellidoMaterno
            encargadosApartados.append(datosCompletoEncargado)
            
            datosProductos = []
            arregloCodigos = idsProductos.split(",")
          
         
            for codigo in arregloCodigos:
                codigoProducto = str(codigo)
               
                consultaProducto = ProductosRenta.objects.filter(codigo_producto = codigoProducto)
                for datoProducto in consultaProducto:
                    nombrePro = datoProducto.nombre_producto
                    imagenProducto = datoProducto.imagen_producto
                    idSucursal = datoProducto.sucursal_id
                 
                    
                datosProductos.append([codigoProducto,nombrePro,imagenProducto])
            datosProductosRentaApartados.append(datosProductos)
            
            sucursal = Sucursales.objects.filter(id_sucursal = idSucursal)
            for dato in sucursal:
                nombreSucursal = dato.nombre
            sucursalesApartados.append(nombreSucursal)
            
        
        listaApartados = zip(rentasApartadas,clientesApartadas,datosProductosRentaApartados,encargadosApartados,sucursalesApartados)
        listaApartadosEntregarAclienteModal = zip(rentasApartadas,clientesApartadas,datosProductosRentaApartados,encargadosApartados,sucursalesApartados)
        listaApartadosEntregarAclienteModalJS = zip(rentasApartadas,clientesApartadas,datosProductosRentaApartados,encargadosApartados,sucursalesApartados)
        
        
        #------------------- rentas PENDIENTES------------------------------------#
        clientesPendientes =[]
        datosProductosRentaPendientes=[]
        encargadosPendientes = []
        
        sucursalesPendientes = []
        idSucursalesPendientes = []
     
        for renT in rentasPendientes:
            idCliente = renT.cliente_id
            idsProductos = renT.codigos_productos_renta
            encargado_renta = renT.realizado_por_id
            
            
            datosCliente = Clientes.objects.filter(id_cliente= idCliente)
            for datoC in datosCliente:
                idC = str(datoC.id_cliente)
                nombreC = datoC.nombre_cliente
                apellidoPat = datoC.apellidoPaterno_cliente
                apellidoMat = datoC.apellidoMaterno_cliente
            datosCompletosCliente = idC + " " + nombreC + " " + apellidoPat + " " + apellidoMat
            clientesPendientes.append(datosCompletosCliente)
            
            
            datosEncargado = Empleados.objects.filter(id_empleado = encargado_renta)
            for datoE in datosEncargado:
                nombres = datoE.nombres
                apellidoPaterno = datoE.apellido_paterno
                apellidoMaterno = datoE.apellido_materno
            datosCompletoEncargado = nombres + " " + apellidoPaterno + " " + apellidoMaterno
            encargadosPendientes.append(datosCompletoEncargado)
            
            datosProductos = []
            arregloCodigos = idsProductos.split(",")
          
         
            for codigo in arregloCodigos:
                codigoProducto = str(codigo)
               
                consultaProducto = ProductosRenta.objects.filter(codigo_producto = codigoProducto)
                for datoProducto in consultaProducto:
                    nombrePro = datoProducto.nombre_producto
                    idSucursal = datoProducto.sucursal_id
                 
                    
                datosProductos.append([codigoProducto,nombrePro])
            datosProductosRentaPendientes.append(datosProductos)
            
            sucursal = Sucursales.objects.filter(id_sucursal = idSucursal)
            for dato in sucursal:
                nombreSucursal = dato.nombre
            idSucursalesPendientes.append(idSucursal)
            sucursalesPendientes.append(nombreSucursal)
            
        
        listaPendientes = zip(rentasPendientes,clientesPendientes,datosProductosRentaPendientes,encargadosPendientes,sucursalesPendientes)
        listaPendientesDevolucionPorClienteModal = zip(rentasPendientes,clientesPendientes,datosProductosRentaPendientes,encargadosPendientes,sucursalesPendientes, idSucursalesPendientes)
        listaPendientesDevolucionPorClienteModal2 = zip(rentasPendientes,clientesPendientes,datosProductosRentaPendientes,encargadosPendientes,sucursalesPendientes)
        listaPendientesDevolucionPorClienteJS = zip(rentasPendientes,clientesPendientes,datosProductosRentaPendientes,encargadosPendientes,sucursalesPendientes)
        
        
        
        
        #------------------- rentas FINALIZADAS sin cuota------------------------------------#
        clientesFinalSinCuota =[]
        datosProductosRentaFinalSinCuota=[]
        encargadosFinalSinCuota = []
        
        sucursalesFinalSinCuota = []
     
        for renT in rentasFinalizadasSinCuota:
            idCliente = renT.cliente_id
            idsProductos = renT.codigos_productos_renta
            encargado_renta = renT.realizado_por_id
            
            
            datosCliente = Clientes.objects.filter(id_cliente= idCliente)
            for datoC in datosCliente:
                idC = str(datoC.id_cliente)
                nombreC = datoC.nombre_cliente
                apellidoPat = datoC.apellidoPaterno_cliente
                apellidoMat = datoC.apellidoMaterno_cliente
            datosCompletosCliente = idC + " " + nombreC + " " + apellidoPat + " " + apellidoMat
            clientesFinalSinCuota.append(datosCompletosCliente)
            
            
            datosEncargado = Empleados.objects.filter(id_empleado = encargado_renta)
            for datoE in datosEncargado:
                nombres = datoE.nombres
                apellidoPaterno = datoE.apellido_paterno
                apellidoMaterno = datoE.apellido_materno
            datosCompletoEncargado = nombres + " " + apellidoPaterno + " " + apellidoMaterno
            encargadosFinalSinCuota.append(datosCompletoEncargado)
            
            datosProductos = []
            arregloCodigos = idsProductos.split(",")
          
         
            for codigo in arregloCodigos:
                codigoProducto = str(codigo)
               
                consultaProducto = ProductosRenta.objects.filter(codigo_producto = codigoProducto)
                for datoProducto in consultaProducto:
                    nombrePro = datoProducto.nombre_producto
                    idSucursal = datoProducto.sucursal_id
                 
                    
                datosProductos.append([codigoProducto,nombrePro])
            datosProductosRentaFinalSinCuota.append(datosProductos)
            
            sucursal = Sucursales.objects.filter(id_sucursal = idSucursal)
            for dato in sucursal:
                nombreSucursal = dato.nombre
            sucursalesFinalSinCuota.append(nombreSucursal)
            
        
        listaFinalizadasSinCuota = zip(rentasFinalizadasSinCuota,clientesFinalSinCuota,datosProductosRentaFinalSinCuota,encargadosFinalSinCuota,sucursalesFinalSinCuota)
        
        
         
        #------------------- rentas FINALIZADAS con cuota------------------------------------#
        clientesFinalCuota =[]
        datosProductosRentaFinalCuota=[]
        encargadosFinalCuota = []
        
        sucursalesFinalCuota = []
     
        for renT in rentasFinalizadasCuota:
            idCliente = renT.cliente_id
            idsProductos = renT.codigos_productos_renta
            encargado_renta = renT.realizado_por_id
            
            
            datosCliente = Clientes.objects.filter(id_cliente= idCliente)
            for datoC in datosCliente:
                idC = str(datoC.id_cliente)
                nombreC = datoC.nombre_cliente
                apellidoPat = datoC.apellidoPaterno_cliente
                apellidoMat = datoC.apellidoMaterno_cliente
            datosCompletosCliente = idC + " " + nombreC + " " + apellidoPat + " " + apellidoMat
            clientesFinalCuota.append(datosCompletosCliente)
            
            
            datosEncargado = Empleados.objects.filter(id_empleado = encargado_renta)
            for datoE in datosEncargado:
                nombres = datoE.nombres
                apellidoPaterno = datoE.apellido_paterno
                apellidoMaterno = datoE.apellido_materno
            datosCompletoEncargado = nombres + " " + apellidoPaterno + " " + apellidoMaterno
            encargadosFinalCuota.append(datosCompletoEncargado)
            
            datosProductos = []
            arregloCodigos = idsProductos.split(",")
          
         
            for codigo in arregloCodigos:
                codigoProducto = str(codigo)
               
                consultaProducto = ProductosRenta.objects.filter(codigo_producto = codigoProducto)
                for datoProducto in consultaProducto:
                    nombrePro = datoProducto.nombre_producto
                    idSucursala = datoProducto.sucursal_id
                 
                    
                datosProductos.append([codigoProducto,nombrePro])
            datosProductosRentaFinalCuota.append(datosProductos)
            
            sucursal = Sucursales.objects.filter(id_sucursal = idSucursala)
            for dato in sucursal:
                nombreSucursal = dato.nombre
            sucursalesFinalCuota.append(nombreSucursal)
            
        
        listaFinalizadasCuota = zip(rentasFinalizadasCuota,clientesFinalCuota,datosProductosRentaFinalCuota,encargadosFinalCuota,sucursalesFinalCuota)
        listaFinalizadasCuotaModal = zip(rentasFinalizadasCuota,clientesFinalCuota,datosProductosRentaFinalCuota,encargadosFinalCuota,sucursalesFinalCuota)
        listaFinalizadasCuotaModalJS = zip(rentasFinalizadasCuota,clientesFinalCuota,datosProductosRentaFinalCuota,encargadosFinalCuota,sucursalesFinalCuota)
       
       
        
            
       
        

            
        if "rentasEnviadas" in request.session:
            rentasEnviadas = request.session['rentasEnviadas']
            del request.session['rentasEnviadas']
            return render(request, "9 Rentas/rentas.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado,
                                                        "contadorApartadas":contadorApartadas,"contadorPendientes":contadorPendientes,"contadorFinalizadasSin":contadorFinalizadasSin,"contadorFinalizadasCon":contadorFinalizadasCon,"listaApartados":listaApartados,"listaPendientes":listaPendientes,
                                                        "listaApartadosEntregarAclienteModal":listaApartadosEntregarAclienteModal,"listaPendientesDevolucionPorClienteModal":listaPendientesDevolucionPorClienteModal,"listaPendientesDevolucionPorClienteModal2":listaPendientesDevolucionPorClienteModal2,
                                                        "listaPendientesDevolucionPorClienteJS":listaPendientesDevolucionPorClienteJS,"listaFinalizadasSinCuota":listaFinalizadasSinCuota,"listaFinalizadasCuota":listaFinalizadasCuota,
                                                        "listaFinalizadasCuotaModal":listaFinalizadasCuotaModal,"notificacionRenta":notificacionRenta, "notificacionCita":notificacionCita, "listaApartadosEntregarAclienteModalJS":listaApartadosEntregarAclienteModalJS, "listaFinalizadasCuotaModalJS":listaFinalizadasCuotaModalJS,
                                                        "rentasEnviadas":rentasEnviadas
                                                    
            })
            
        
            
        return render(request, "9 Rentas/rentas.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado,
                                                        "contadorApartadas":contadorApartadas,"contadorPendientes":contadorPendientes,"contadorFinalizadasSin":contadorFinalizadasSin,"contadorFinalizadasCon":contadorFinalizadasCon,"listaApartados":listaApartados,"listaPendientes":listaPendientes,
                                                        "listaApartadosEntregarAclienteModal":listaApartadosEntregarAclienteModal,"listaPendientesDevolucionPorClienteModal":listaPendientesDevolucionPorClienteModal,"listaPendientesDevolucionPorClienteModal2":listaPendientesDevolucionPorClienteModal2,
                                                        "listaPendientesDevolucionPorClienteJS":listaPendientesDevolucionPorClienteJS,"listaFinalizadasSinCuota":listaFinalizadasSinCuota,"listaFinalizadasCuota":listaFinalizadasCuota,
                                                        "listaFinalizadasCuotaModal":listaFinalizadasCuotaModal,"notificacionRenta":notificacionRenta, "notificacionCita":notificacionCita, "listaApartadosEntregarAclienteModalJS":listaApartadosEntregarAclienteModalJS, "listaFinalizadasCuotaModalJS":listaFinalizadasCuotaModalJS
                                                    
        })
    
    else:
        return render(request,"1 Login/login.html")
    
   
def verCalendarioRentas(request):

    if "idSesion" in request.session:

       # Variables de sesión
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']
        idPerfil = idEmpleado
        idConfig = idEmpleado
       

        
        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
           #notificacionRentas
        notificacionRenta = notificacionRentas(request)

        #notificacionCitas
        notificacionCita = notificacionCitas(request)
        
         #permisosEmpleado
        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)

        fechaMesAnterior = datetime.now()-relativedelta(months =1)
        añoAnterior = fechaMesAnterior.strftime("%Y")
        mesAnterior = fechaMesAnterior.strftime("%m")
        fechaMesAnterior = añoAnterior + "-"+mesAnterior+"-01"
        fechaMesDespues = datetime.now() + relativedelta(months =1)
        añoDespues= fechaMesDespues.strftime("%Y")
        mesDespues = fechaMesDespues.strftime("%m")
        fechaMesDespues = añoDespues + "-"+mesDespues+"-15"
        
        totalRentasCalendarioEntregar= Rentas.objects.filter(fecha_entrega_renta__range=[fechaMesAnterior,fechaMesDespues], fecha_limite_devolucion__range=[fechaMesAnterior,fechaMesDespues], estado_devolucion = "A")

        mensajesBarraEntrega =[]
        descripcionBarraEntrega = []
        fechasEntregaEntrega = []
        claseColorEntrega = []

        for rentaEnregar in totalRentasCalendarioEntregar:
            idRenta = rentaEnregar.id_renta
            cliente = rentaEnregar.cliente_id
            productoRentado = rentaEnregar.codigos_productos_renta
            fechaApartado = rentaEnregar.fecha_apartado
            fechaEntrega = rentaEnregar.fecha_entrega_renta

            #Fechas en texto
            fechaRentaTipoDate = datetime.strftime(fechaEntrega, '%Y-%m-%d')
            
            mesesDic = {
                "01":'Enero',
                "02":'Febrero',
                "03":'Marzo',
                "04":'Abril',
                "05":'Mayo',
                "06":'Junio',
                "07":'Julio',
                "08":'Agosto',
                "09":'Septiembre',
                "10":'Octubre',
                "11":'Noviembre',
                "12":'Diciembre'
            }
            
            mesApartado = datetime.strftime(fechaApartado, '%m')
            diaApartado = datetime.strftime(fechaApartado, '%d')
            añoApartado = datetime.strftime(fechaApartado, '%Y')

            mesEnTexto = mesesDic[str(mesApartado)]
            fechaApartadoMensaje = diaApartado + " de "+mesEnTexto+ " del " + añoApartado

            mesEntrega = datetime.strftime(fechaEntrega, '%m')
            diaEntrega = datetime.strftime(fechaEntrega, '%d')
            añoEntrega = datetime.strftime(fechaEntrega, '%Y')

        
            mesEnTextoFinal = mesesDic[str(mesEntrega)]
            fechaEntregaMensaje = diaEntrega + " de "+mesEnTextoFinal+ " del " + añoEntrega

            #Datos del cliente
            consultaCliente = Clientes.objects.filter(id_cliente = cliente)
            for datoCliente in consultaCliente:
                nombreCliente = datoCliente.nombre_cliente
                apellidoPaterno = datoCliente.apellidoPaterno_cliente
            
            nombreCompletoCliente = nombreCliente + " " + apellidoPaterno

            #Datos de producto rentado
            consultaProductoRentado = ProductosRenta.objects.filter(codigo_producto = productoRentado)
            for datoProducto in consultaProductoRentado:
                codigoProducto = datoProducto.codigo_producto
                nombreProducto = datoProducto.nombre_producto
                idSucursal = datoProducto.sucursal_id
            
            consultaIdSucursal = Sucursales.objects.filter(id_sucursal = idSucursal)
            for datoSucursal in consultaIdSucursal:
                nombreSucursal = datoSucursal.nombre
            
            mensajeBarra = "ID:"+str(idRenta)+" - "+nombreSucursal+" - Entrega de vestido "+codigoProducto+" a "+nombreCompletoCliente+" Cliente N°"+str(cliente)+"."

            colorClase = "fc-event-info"
           
            descripcion = "Entrega pendiente del vestido "+codigoProducto+" "+nombreProducto+", se apartó el día "+fechaApartadoMensaje+" y el cliente deberá recogerlo el dia "+fechaEntregaMensaje+". Estatus = Apartado"
                    

            mensajesBarraEntrega.append(mensajeBarra)
            descripcionBarraEntrega.append(descripcion)
            fechasEntregaEntrega.append(fechaRentaTipoDate)
            claseColorEntrega.append(colorClase)
        
        listaRentasEntregaCalendario = zip(mensajesBarraEntrega, descripcionBarraEntrega, fechasEntregaEntrega, claseColorEntrega)


        totalRentasCalendario= Rentas.objects.filter(fecha_entrega_renta__range=[fechaMesAnterior,fechaMesDespues], fecha_limite_devolucion__range=[fechaMesAnterior,fechaMesDespues], estado_devolucion = "P")

        mensajesBarra =[]
        descripcionBarra = []
        fechasEntrega = []
        fechaFinalPrestamoMasUnDia = []
        claseColor = []

        for renta in totalRentasCalendario:
            idRenta = renta.id_renta
            cliente = renta.cliente_id
            productoRentado = renta.codigos_productos_renta
            fechaRenta = renta.fecha_entrega_renta
            fechaFinal = renta.fecha_limite_devolucion
            fechaFinalMasUno = fechaFinal+ timedelta(days =1)
            
            estado = renta.estado_devolucion
            cuota = renta.cuota_retraso

            #Fechas en texto
            fechaRentaTipoDate = datetime.strftime(fechaRenta, '%Y-%m-%d')
            fechaFinalStrTipoDate = datetime.strftime(fechaFinalMasUno,'%Y-%m-%d')

            mes = datetime.strftime(fechaRenta, '%m')
            dia = datetime.strftime(fechaRenta, '%d')
            año = datetime.strftime(fechaRenta, '%Y')

            mesesDic = {
                "01":'Enero',
                "02":'Febrero',
                "03":'Marzo',
                "04":'Abril',
                "05":'Mayo',
                "06":'Junio',
                "07":'Julio',
                "08":'Agosto',
                "09":'Septiembre',
                "10":'Octubre',
                "11":'Noviembre',
                "12":'Diciembre'
            }

            mesEnTexto = mesesDic[str(mes)]
            fechaRentaMensaje = dia + " de "+mesEnTexto+ " del " + año

            mesFinal = datetime.strftime(fechaFinal, '%m')
            diaFinal = datetime.strftime(fechaFinal, '%d')
            añoFinal = datetime.strftime(fechaFinal, '%Y')

        
            mesEnTextoFinal = mesesDic[str(mesFinal)]
            fechaRentaFinalMensaje = diaFinal + " de "+mesEnTextoFinal+ " del " + añoFinal

            #Datos del cliente
            consultaCliente = Clientes.objects.filter(id_cliente = cliente)
            for datoCliente in consultaCliente:
                nombreCliente = datoCliente.nombre_cliente
                apellidoPaterno = datoCliente.apellidoPaterno_cliente
            
            nombreCompletoCliente = nombreCliente + " " + apellidoPaterno

            #Datos de producto rentado
            consultaProductoRentado = ProductosRenta.objects.filter(codigo_producto = productoRentado)
            for datoProducto in consultaProductoRentado:
                codigoProducto = datoProducto.codigo_producto
                nombreProducto = datoProducto.nombre_producto
                idSucursal = datoProducto.sucursal_id
            
            consultaIdSucursal = Sucursales.objects.filter(id_sucursal = idSucursal)
            for datoSucursal in consultaIdSucursal:
                nombreSucursal = datoSucursal.nombre
            
            mensajeBarra = "ID:"+str(idRenta)+" - "+nombreSucursal+" - Renta de vestido "+codigoProducto+" a "+nombreCompletoCliente+" Cliente N°"+str(cliente)+"."

            colorClase = ""
            if estado == "F": #Finalizada o devuelta
                fechaDevolucion = renta.fecha_devolucion

                mesdev = datetime.strftime(fechaDevolucion, '%m')
                diadev = datetime.strftime(fechaDevolucion, '%d')
                añodev = datetime.strftime(fechaDevolucion, '%Y')

                mesEnTextoDev = mesesDic[str(mesdev)]
                fechaDevMensaje = diadev + " de "+mesEnTextoDev+ " del " + añodev

                

                if cuota == "S":
                    descripcion = "La entrega del vestido "+codigoProducto+" "+nombreProducto+"se realizó el día "+fechaRentaMensaje+" y se devolvió con cuota el dia "+fechaDevMensaje+". Estatus = Devuelto"
                    colorClase = "fc-event-warning"
                else:
                    colorClase = "fc-event-success"
                    descripcion = "La entrega del vestido "+codigoProducto+" "+nombreProducto+"se realizó el día "+fechaRentaMensaje+" y se devolvió sin cuota el dia "+fechaDevMensaje+". Estatus = Devuelto"
            else:#Pendiente de entregar
                descripcion = "La entrega del vestido "+codigoProducto+" "+nombreProducto+"se realizó el día "+fechaRentaMensaje+" y la fecha programada de devolución es el dia "+fechaRentaFinalMensaje+". Estatus = No devuelto"
                colorClase = "fc-event-danger"

            mensajesBarra.append(mensajeBarra)
            descripcionBarra.append(descripcion)
            fechasEntrega.append(fechaRentaTipoDate)
            fechaFinalPrestamoMasUnDia.append(fechaFinalStrTipoDate)
            claseColor.append(colorClase)
        
        listaRentasCalendario = zip(mensajesBarra, descripcionBarra, fechasEntrega, fechaFinalPrestamoMasUnDia, claseColor)


        if "rentaAgregada" in request.session:
            rentaAgregada = request.session['rentaAgregada']
            del request.session['rentaAgregada']
            return render(request, "9 Rentas/verCalendarioRentas.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
                                                    
                                                        "rentaAgregada":rentaAgregada,"notificacionRenta":notificacionRenta, "notificacionCita":notificacionCita
        })
            
        if "rentaNoAgregada" in request.session:
            rentaNoAgregada = request.session['rentaNoAgregada']
            del request.session['rentaNoAgregada']
            return render(request, "9 Rentas/verCalendarioRentas.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
                                                    
                                                        "rentaNoAgregada":rentaNoAgregada,"notificacionRenta":notificacionRenta, "notificacionCita":notificacionCita
        })
        
        
        if "rentaEntregada" in request.session:
            rentaEntregada = request.session['rentaEntregada']
            del request.session['rentaEntregada']
            return render(request, "9 Rentas/verCalendarioRentas.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
                                                    
                                                        "rentaEntregada":rentaEntregada,"notificacionRenta":notificacionRenta, "notificacionCita":notificacionCita
        })
            
        if "recibirRentaPendiente" in request.session:
            recibirRentaPendiente = request.session['recibirRentaPendiente']
            del request.session['recibirRentaPendiente']
            return render(request, "9 Rentas/verCalendarioRentas.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
                                                    
                                                        "recibirRentaPendiente":recibirRentaPendiente,"notificacionRenta":notificacionRenta, "notificacionCita":notificacionCita
        })
            
        if "rentaCuotaPagada" in request.session:
            rentaCuotaPagada = request.session['rentaCuotaPagada']
            del request.session['rentaCuotaPagada']
            return render(request, "9 Rentas/verCalendarioRentas.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
                                                    
                                                        "rentaCuotaPagada":rentaCuotaPagada,"notificacionRenta":notificacionRenta, "notificacionCita":notificacionCita
        })
        
        if "recibirRentaPendienteConCuota" in request.session:
            recibirRentaPendienteConCuota = request.session["recibirRentaPendienteConCuota"]
            del request.session["recibirRentaPendienteConCuota"]
            return render(request, "9 Rentas/verCalendarioRentas.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
                                                    
                                                        "recibirRentaPendienteConCuota":recibirRentaPendienteConCuota,"notificacionRenta":notificacionRenta, "notificacionCita":notificacionCita
        })
        
        

            
            
            
        
            
        return render(request, "9 Rentas/verCalendarioRentas.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, "listaRentasEntregaCalendario":listaRentasEntregaCalendario, "listaRentasCalendario":listaRentasCalendario,"notificacionRenta":notificacionRenta, "notificacionCita":notificacionCita})
    
    else:
        return render(request,"1 Login/login.html")
    

def entregarRentaApartada(request):

    if "idSesion" in request.session:
        idEmpleado = request.session['idSesion']

        if request.method == "POST":
            idRentaEntregaAcliente = request.POST['idRentaEntregaAcliente']
            costoRestanteApagar = request.POST['costoRestanteApagar']
            fechaEntregaAcliente = datetime.now()
            
            fecha = datetime.strptime(str(fechaEntregaAcliente), "%Y-%m-%d %H:%M:%S.%f").date()
            fechas = fecha + timedelta(days=3)
            
            
         
            fechaLimiteDevolucionCuota =fechas +  timedelta(days=7)
            strfechaLimiteDevolucionCuota = str(fechaLimiteDevolucionCuota)
          
            formaPago = request.POST['tipoPago'] #Efectivo,  tarjeta o transferencia
            sucursal = request.POST['idSucursal']
              
                    
            esConEfectivo = False
            esConTarjeta = False
            esConTransferencia = False

            if formaPago == "Efectivo":
                esConEfectivo = True
            elif formaPago == "Tarjeta":
                esConTarjeta = True
                tipo_tarjeta = request.POST['tipoTarjeta']    
                referencia_tarjeta = request.POST['referenciaTarjeta'] 
                        
            elif formaPago == "Transferencia":
                esConTransferencia = True
                clave_transferencia = request.POST['claveRastreoTransferencia']            
            

         

            infoRenta = Rentas.objects.filter(id_renta = idRentaEntregaAcliente)
            
            for dato in infoRenta:
                cliente = dato.cliente_id
                abonado = dato.monto_pago_apartado
              
                idsProductos = dato.codigos_productos_renta
                cantidadesProductos = "1"
                codigoVestido = dato.codigos_productos_renta

                consultaVestido = ProductosRenta.objects.filter(codigo_producto = codigoVestido)
                for datoVestido in consultaVestido:
                    sucursal = datoVestido.sucursal_id
                
            datosCliente = Clientes.objects.filter(id_cliente= cliente)
            for datoC in datosCliente:
                idC = str(datoC.id_cliente)
                nombreC = datoC.nombre_cliente
                apellidoPat = datoC.apellidoPaterno_cliente
                apellidoMat = datoC.apellidoMaterno_cliente
            datosCompletosCliente = idC + " " + nombreC + " " + apellidoPat + " " + apellidoMat
            
         
            pagoFinalRestante = float(abonado) - float(costoRestanteApagar)

          
              
            arregloProductos = idsProductos.split(',')
                
                
            
            
            
            
            
         
            horaVenta= datetime.now().time()
                
            #primerFecha= fechaDevolucion
            #segundaFecha = fechaFinalRenta

            #formato1 = datetime.strptime(primerFecha, '%Y-%m-%d')
            #formato2 = datetime.strptime(str(segundaFecha), '%Y-%m-%d')
            
            #if formato1 > formato2:
                #retraso_renta = "S"
                #actualizacionRenta = Rentas.objects.filter(id_renta = idRentaEditar).update(fecha_devolucion = fechaDevolucion,estado_devolucion = "F",descripcion_devolucion = observacionesDevolucion,cuota_retraso =retraso_renta)
            
                
            #else:
                #retraso_renta ="N"
                #actualizacionRenta = Rentas.objects.filter(id_renta = idRentaEditar).update(fecha_devolucion = fechaDevolucion,estado_devolucion = "F",descripcion_devolucion = observacionesDevolucion,cuota_retraso =retraso_renta)
            
            entregaRenta = Rentas.objects.filter(id_renta = idRentaEntregaAcliente).update(fecha_entrega_renta = fecha,estado_devolucion = "P",
                                                                                           fecha_limite_devolucion =fechas,fecha_limite_devolucion_cuota =strfechaLimiteDevolucionCuota,
                                                                                           monto_pago_apartado=abonado,monto_pago_restante= costoRestanteApagar,monto_restante =pagoFinalRestante,realizado_por =idEmpleado)
            
            if esConEfectivo:
                        
                registroVenta = Ventas(fecha_venta = fecha,  hora_venta =horaVenta,
                tipo_pago = formaPago, 
                empleado_vendedor = Empleados.objects.get(id_empleado = idEmpleado),
                cliente = Clientes.objects.get(id_cliente = cliente),
                ids_productos = idsProductos, cantidades_productos = cantidadesProductos,
                ids_servicios_corporales ="", cantidades_servicios_corporales ="",
                ids_servicios_faciales ="", cantidades_servicios_faciales ="",
                monto_pagar = costoRestanteApagar, credito = "S",
                comentariosVenta = "Se realizo venta por motivo de renta con apartado", sucursal = Sucursales.objects.get(id_sucursal = sucursal))

            if esConTarjeta:
                    
                        
                registroVenta = Ventas(fecha_venta = fecha,  hora_venta =horaVenta,
                tipo_pago = formaPago, tipo_tarjeta = tipo_tarjeta, referencia_pago_tarjeta = referencia_tarjeta,
                empleado_vendedor = Empleados.objects.get(id_empleado = idEmpleado),
                cliente = Clientes.objects.get(id_cliente = cliente),
                ids_productos = idsProductos, cantidades_productos = cantidadesProductos,
                ids_servicios_corporales ="", cantidades_servicios_corporales ="",
                ids_servicios_faciales ="", cantidades_servicios_faciales ="",
                monto_pagar = costoRestanteApagar, credito = "S",
                comentariosVenta = "Se realizo venta por motivo de renta con apartado", sucursal = Sucursales.objects.get(id_sucursal = sucursal))
    

            if esConTransferencia:
            
                registroVenta = Ventas(fecha_venta = fecha,  hora_venta =horaVenta,
                tipo_pago = formaPago, clave_rastreo_transferencia = clave_transferencia,
                empleado_vendedor = Empleados.objects.get(id_empleado = idEmpleado),
                cliente = Clientes.objects.get(id_cliente = cliente),
                ids_productos = idsProductos, cantidades_productos = cantidadesProductos,
                ids_servicios_corporales ="", cantidades_servicios_corporales ="",
                ids_servicios_faciales ="", cantidades_servicios_faciales ="",
                monto_pagar = costoRestanteApagar, credito = "S",comentariosVenta = "Se realizo venta por motivo de renta con apartado", sucursal = Sucursales.objects.get(id_sucursal = sucursal))
                        

            registroVenta.save()
            
            if entregaRenta and registroVenta: 
                
                for productoRenta in arregloProductos:
                        codigo = str(productoRenta)
                        actualizacionEstado = ProductosRenta.objects.filter(codigo_producto = codigo).update(estado_renta = "En renta")  
                
                if esConEfectivo:
                     
                    tipoMovimiento ="IN"
                    montoMovimiento = float(costoRestanteApagar)
                    descripcionMovimiento ="Movimiento por liquidación de renta  " + idRentaEntregaAcliente + " por el cliente " + datosCompletosCliente 
                    fechaMovimiento = datetime.today().strftime('%Y-%m-%d')
                    horaMovimiento = datetime.now().time()
                    ingresarCantidadEfectivoAcaja =MovimientosCaja(fecha =fechaMovimiento,hora = horaMovimiento,tipo=tipoMovimiento,monto =montoMovimiento, descripcion=descripcionMovimiento,sucursal =  Sucursales.objects.get(id_sucursal = sucursal),
                                                                                realizado_por = Empleados.objects.get(id_empleado = idEmpleado))
                    ingresarCantidadEfectivoAcaja.save()
                    if ingresarCantidadEfectivoAcaja:
                        montoLiquidacionCredito = float(costoRestanteApagar)
                        credito = Creditos.objects.filter(renta_id = idRentaEntregaAcliente, cliente_id =idC)
                        if credito:
                            for c in credito:
                                idCredito = c.id_credito
                                abonadoCredito =c.monto_pagado
                            creditoMontoFinal = abonadoCredito - montoLiquidacionCredito
                            saldarCredito = Creditos.objects.filter(renta_id = idRentaEntregaAcliente, cliente_id =idC).update(monto_restante = creditoMontoFinal,estatus ="Finalizado")
                            if saldarCredito:
                                ingresarSegundoPagoCreditoSaldado = PagosCreditos.objects.filter(id_credito_id =idCredito).update(fecha_pago2=fecha,tipo_pago2="Efectivo",monto_pago2=montoLiquidacionCredito)
                            
                if esConTarjeta:
                    
                    montoLiquidacionCredito = float(costoRestanteApagar)
                    credito = Creditos.objects.filter(renta_id = idRentaEntregaAcliente, cliente_id =idC)
                    if credito:
                        for c in credito:
                            idCredito = c.id_credito
                            abonadoCredito =c.monto_pagado
                        creditoMontoFinal = abonadoCredito - montoLiquidacionCredito
                        saldarCredito = Creditos.objects.filter(renta_id = idRentaEntregaAcliente, cliente_id =idC).update(monto_restante = creditoMontoFinal,estatus ="Finalizado")
                        if saldarCredito:
                            ingresarSegundoPagoCreditoSaldado = PagosCreditos.objects.filter(id_credito_id =idCredito).update(fecha_pago2=fecha,tipo_pago2="Tarjeta",tipo_tarjeta2=tipo_tarjeta,referencia_pago_tarjeta2=
                                                                                                                          referencia_tarjeta,monto_pago2=montoLiquidacionCredito)
                        
                if esConTransferencia:
                    
                    montoLiquidacionCredito = float(costoRestanteApagar)
                    credito = Creditos.objects.filter(renta_id = idRentaEntregaAcliente, cliente_id =idC)
                    if credito:
                        for c in credito:
                            idCredito = c.id_credito
                            abonadoCredito =c.monto_pagado
                        creditoMontoFinal = abonadoCredito - montoLiquidacionCredito
                        saldarCredito = Creditos.objects.filter(renta_id = idRentaEntregaAcliente, cliente_id =idC).update(monto_restante = creditoMontoFinal,estatus ="Finalizado")
                        if saldarCredito:
                            ingresarSegundoPagoCreditoSaldado = PagosCreditos.objects.filter(id_credito_id =idCredito).update(fecha_pago2=fecha,tipo_pago2="Transferencia",clave_rastreo_pago_transferencia2=
                                                                                                                          clave_transferencia,monto_pago2=montoLiquidacionCredito)
                    
                
                #IMPRESION DE TICKEEETSSSS
                #Ultimo id de venta
                consultaVentas = Ventas.objects.all()
                ultimoIdVenta = 0
                for venta in consultaVentas:
                    ultimoIdVenta = venta.id_venta

                #ultimo id de renta
                consultaRentas = Rentas.objects.all()
                ultimoIdRenta = 0
                for renta in consultaRentas:
                    ultimoIdRenta = renta.id_renta

                #Fecha
                hoy = datetime.now()
                hoyFormato = hoy.strftime('%Y/%m/%d')

                #Empleado vendedor
                empleadoVendedor = idEmpleado
                consultaEmpleadoVendedor = Empleados.objects.filter(id_empleado = empleadoVendedor)
                for datoVendedor in consultaEmpleadoVendedor:
                    nombreEmpleado = datoVendedor.nombres
                    apellidoPatEmpleado = datoVendedor.apellido_paterno

                nombreCompletoEmpleadoVendedor = nombreEmpleado + " "+ apellidoPatEmpleado

                #Datos sucurssal
                consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursal)
                for datoSucursal in consultaSucursal:
                    nombreSucursal = datoSucursal.nombre
                    telefonoSucursal = datoSucursal.telefono
                    direccionSucursal = datoSucursal.direccion

                #DatosCliente
                
                consultaCliente = Clientes.objects.filter(id_cliente = cliente)
                for datoCliente in consultaCliente:
                    idCienteTicket = datoCliente.id_cliente
                    nombreCliente = datoCliente.nombre_cliente
                    apellidoCliente = datoCliente.apellidoPaterno_cliente

                nombreClienteTicket = nombreCliente + " " + apellidoCliente
                #Hora bien
                horaVenta = horaVenta.strftime("%H:%M:%S")

                # Esto es para obtener las impresoras. No es obligatorio hacerlo siempre que se quiera imprimir
                impresoras = Conector.ConectorV3.obtenerImpresoras()
                print(f"Las impresoras son: {impresoras}")

                contadorTickets = 0
                for x in range(2):
                    contadorTickets = contadorTickets + 1
                    c = Conector.ConectorV3()
                    c.Iniciar()
                    c.Corte(1)
                    
                    c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                    # Recuerda que la imagen debe existir y debe ser legible para el plugin. Si no, comenta las líneas
                    c.CargarImagenLocalEImprimir("C:\\COSTABELLA\\sistemaCostabella\\static\\images\\anegragrande.png", 0, 216)
                    c.EscribirTexto("\n")
                    c.EstablecerTamañoFuente(1, 1)
                    c.EstablecerEnfatizado(True)
                    c.EscribirTexto("Sucursal: "+nombreSucursal+"\n")
                    c.EstablecerEnfatizado(False)
                    c.EscribirTexto("TEL: "+telefonoSucursal+"\n")
                    c.TextoSegunPaginaDeCodigos(2, "cp850", direccionSucursal+"\n")

                    c.EstablecerEnfatizado(True)
                    c.EscribirTexto("================================================\n")
                    c.EstablecerTamañoFuente(2, 2)
                    c.EscribirTexto("RENTA #"+str(ultimoIdRenta)+"\n")
                    c.EscribirTexto("VENTA #"+str(ultimoIdVenta)+"\n")
                    c.EstablecerEnfatizado(False)
                    c.EstablecerAlineacion(Conector.ALINEACION_IZQUIERDA)
                    c.EstablecerTamañoFuente(1, 1)
                    c.EscribirTexto("\n")
                    c.EscribirTexto(str(hoyFormato)+" - "+str(horaVenta)+" hrs.\n")
                    c.EscribirTexto("Atendida por: "+nombreCompletoEmpleadoVendedor+".\n")
                    c.EscribirTexto("\n")

                    #Listado de productos 
                    #Productos venta
                    
                    consultaProductoRenta = ProductosRenta.objects.filter(codigo_producto = codigoVestido)
                    for datoProductoRenta in consultaProductoRenta:
                        nombreProducto = datoProductoRenta.nombre_producto
                        costoIndividualProducto = datoProductoRenta.costo_renta

                    costoIndividualProductoDecimales = str(costoIndividualProducto)

                    costoTotalProductoDivididoEnElPunto = costoIndividualProductoDecimales.split(".")
                    longitudCostoTotal = len(str(costoTotalProductoDivididoEnElPunto[0]))
                    longitudCostoTotal = int(longitudCostoTotal)

                    
                    caracteresProducto = len(nombreProducto)

                    if longitudCostoTotal == 2:
                        espacio = 38
                    if longitudCostoTotal == 2:
                        espacio = 37
                    elif longitudCostoTotal == 3:
                        espacio = 36
                    elif longitudCostoTotal == 4:
                        espacio = 35
                    elif longitudCostoTotal == 5:
                        espacio = 34
                    elif longitudCostoTotal == 6:
                        espacio = 33
                    numeroEspacios = espacio - int(caracteresProducto)
                    
                    espaciosTicket = ""
                    for x in range(numeroEspacios):
                        espacioMini = " "
                        espaciosTicket = espaciosTicket + espacioMini
                    c.EscribirTexto("1 x "+nombreProducto+espaciosTicket+str(costoRestanteApagar)+"\n")


                    

                    
                    c.EscribirTexto("\n")
                    c.EscribirTexto("\n")
                    
                    restantePorPagar = float(costoIndividualProducto) - float(costoRestanteApagar)                               
                    c.EstablecerTamañoFuente(2, 2)
                    c.EstablecerAlineacion(Conector.ALINEACION_DERECHA)
                    c.EscribirTexto("TOTAL PAGADO RESTANTE:  $"+str(costoRestanteApagar)+"\n")
                    c.EstablecerTamañoFuente(1, 1)
                    c.EscribirTexto("TOTAL VESTIDO:  $"+str(costoIndividualProducto)+"\n")
                    c.EscribirTexto("\n")
                    c.EstablecerTamañoFuente(2, 2)
                    c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                    c.EscribirTexto("RECEPCIÓN DEL VESTIDO\n")
                    c.EstablecerTamañoFuente(1, 1)
                    c.EscribirTexto("EL DÍA: "+str(fechas)+"\n")
                    c.EstablecerEnfatizado(True)
                    c.EstablecerTamañoFuente(1, 1)
                    c.EscribirTexto("========== IVA incluido en el precio ==========\n")
                    c.EscribirTexto("\n")
                    c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                    c.TextoSegunPaginaDeCodigos(2, "cp850", "INFORMACION DE PAGO.\n")
                    c.EstablecerEnfatizado(False)
                    c.EscribirTexto("\n")
                    if esConEfectivo:
                        c.EscribirTexto("Pago en efectivo.\n")
                    elif esConTarjeta:
                        c.EscribirTexto("Pago con "+str(tipo_tarjeta)+".\n")
                        c.EscribirTexto("Referencia: "+referencia_tarjeta+".\n")
                    elif esConTransferencia:
                        c.EscribirTexto("Transferencia.\n")
                        c.EscribirTexto("Clave de rastreo: "+str(clave_transferencia)+".\n")
                    c.EscribirTexto("\n")
                    c.EstablecerEnfatizado(True)
                    c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                    c.TextoSegunPaginaDeCodigos(2, "cp850", "INFORMACIÓN DE CLIENTE.\n")

                    
                    c.EstablecerEnfatizado(False)
                    c.EscribirTexto("ID:"+str(idCienteTicket)+" - "+nombreClienteTicket+".\n")
                    c.EscribirTexto("=========== Gracias por su compra!! ===========\n")
                    c.EstablecerTamañoFuente(2, 2)
                    c.EstablecerEnfatizado(True)
                    c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                    if contadorTickets == 1:
                        c.EscribirTexto("\n")
                        c.EscribirTexto("COPIA TIENDA.\n")
                        c.EscribirTexto("\n")
                        c.EstablecerTamañoFuente(1, 1)
                        c.EscribirTexto("________________________________________________\n")
                        c.EscribirTexto("Firma de cliente.\n")
                    else:
                        c.EscribirTexto("\n")
                        c.EscribirTexto("COPIA CLIENTE.\n")
                    c.EscribirTexto("\n")
                    c.EstablecerTamañoFuente(1, 1)
                    

                    c.Feed(1)
                    c.Corte(1)
                    ##c.abrirCajon()
                    c.Pulso(48, 60, 120)
                    print("Imprimiendo...")
                    # Recuerda cambiar por el nombre de tu impresora
                    respuesta = c.imprimirEn("POS80 Printer")
                    if respuesta == True:
                        print("Impresión correcta")
                    else:
                        print(f"Error. El mensaje es: {respuesta}")

               
                #Entregar Renta
                try:
                    tokenTelegram = keysBotCostabella.tokenBotCostabellaRentas
                    botCostabella = telepot.Bot(tokenTelegram)

                    idGrupoTelegram = keysBotCostabella.idGrupo
                    
                    mensaje = " \U0001F457 VESTIDO ENTREGADO \U0001F457 \n El cliente "+nombreClienteTicket+" ha recogido el vestido "+nombreProducto+" el día "+hoyFormato+" en la sucursal "+nombreSucursal+" correspondiente a la renta "+str(ultimoIdRenta)
                    botCostabella.sendMessage(idGrupoTelegram,mensaje)
                except:
                    print("An exception occurred")
                
                request.session['rentaEntregada'] = "La renta número " + idRentaEntregaAcliente  +  " ha sido entregada al cliente " + datosCompletosCliente + "  correctamente!"
            return redirect('/verCalendarioRentas/') 
        

def recibirRentaDevolucionCliente(request):

    if "idSesion" in request.session:
        idEmpleado = request.session['idSesion']

        if request.method == "POST":
            idRentaDevolucionPorcliente = request.POST['idRentaDevolucionPorcliente']
            comentarios = request.POST['comentarios']
          
            sucursal = request.POST['idSucursal']
            fechaDevolucion = request.POST['fechaDevolucionVestido']
            
         
            
            
            datosRenta = Rentas.objects.filter(id_renta = idRentaDevolucionPorcliente)
            for renta in datosRenta:
                fechaDevolucionLimiteCuota = renta.fecha_limite_devolucion_cuota
                retrasada = renta.cuota_retraso
                codigoVestido = renta.codigos_productos_renta
                montoTotal = renta.monto_total_renta
                cliente = renta.cliente_id
                idsProductos = renta.codigos_productos_renta

            montoTotalRentaCodigoBarras = montoTotal

            datosCliente = Clientes.objects.filter(id_cliente = cliente)
            for clienteDatos in datosCliente:
                nombreCliente = clienteDatos.nombre_cliente
                apellidosPaternoCliente = clienteDatos.apellidoPaterno_cliente
            nombreCompletoCliente = nombreCliente+" "+apellidosPaternoCliente
            
                


            datosCodigo = ProductosRenta.objects.filter(codigo_producto = codigoVestido)
            for datos in datosCodigo:
                nombreVestido = datos.nombre_producto
                idSucursal = datos.sucursal_id
            datoSucursal = Sucursales.objects.filter(id_sucursal = idSucursal)
            for sucursalDato in datoSucursal:
                nombreSucursal = sucursalDato.nombre
            

            
            montoCuota = montoTotal * 2    
            
            primerFecha= fechaDevolucion
            segundaFecha = fechaDevolucionLimiteCuota

            formato1 = datetime.strptime(primerFecha, '%Y-%m-%d')  #Fecha de cuando entrego
            formato2 = datetime.strptime(str(segundaFecha), '%Y-%m-%d') #Fecha límite que tenia para entregar..
                        
                    
            if formato1 >= formato2:
                conCuota = "Si"
                recibirRentaPendiente = Rentas.objects.filter(id_renta = idRentaDevolucionPorcliente).update(fecha_devolucion = fechaDevolucion,estado_devolucion = "F",descripcion_devolucion = comentarios,cuota_retraso ="Si",
                                                                                                                   monto_cuota= montoCuota,cuota_saldada="No")
             
            elif formato1 < formato2:
                conCuota = "No"
                
                recibirRentaPendiente = Rentas.objects.filter(id_renta = idRentaDevolucionPorcliente).update(fecha_devolucion = fechaDevolucion,estado_devolucion = "F",descripcion_devolucion = comentarios,cuota_retraso ="No")
                    
         
            #Pago por daño
            nameCheckboxDaño = "checkBoxDanio"+str(idRentaDevolucionPorcliente)
            if request.POST.get(nameCheckboxDaño,False): #checkbox chequeado
                pagoPorDaño = "Si"
            elif request.POST.get(nameCheckboxDaño,True): #checkbox deschequeado
                pagoPorDaño = "No"


            if pagoPorDaño == "Si":
                nivelDaño = 0
                nameSelectTipoDaño = "selectTipoDaño"+str(idRentaDevolucionPorcliente)
                selectTipoDaño = request.POST[nameSelectTipoDaño]

                if selectTipoDaño == "Leve":
                    nivelDaño = 500
                    nivelDañoFloat = float(nivelDaño)
                elif selectTipoDaño == "Grave":
                    nivelDaño = 1000
                    nivelDañoFloat = float(nivelDaño)

                nameTipoPago = "selectTipoPagoDaño"+str(idRentaDevolucionPorcliente)
                tipoPago = request.POST[nameTipoPago]

                esConEfectivo = False
                esConTarjeta = False
                esConTransferencia = False
                if tipoPago == "Efectivo":
                    esConEfectivo = True
                elif tipoPago == "Tarjeta":
                    esConTarjeta = True
                    
                    nameTipoTarjeta = "tipoTarjetaDaño"+str(idRentaDevolucionPorcliente)
                    tipoTarjeta = request.POST[nameTipoTarjeta]
                    nameReferenciaTarjeta = "referenciaTarjetaDaño"+str(idRentaDevolucionPorcliente)
                    referenciaBancaria = request.POST[nameReferenciaTarjeta]

                elif tipoPago == "Transferencia":
                    esConTransferencia = True
                    claveRastreoTransferencia = "claveRastreoTransferencia"+str(idRentaDevolucionPorcliente)
                #Fecha y hora
                fechaVenta = datetime.now() #La fecha con hora
                horaVenta= datetime.now().time()

                empleadoVendedor = idEmpleado

                comentarioDañito = "Pago por daño a vestido en la renta #"+str(idRentaDevolucionPorcliente)


                if esConEfectivo:
                    #Generar venta
                    
                    registroVenta = Ventas(fecha_venta = fechaVenta, hora_venta =horaVenta,
                    tipo_pago = tipoPago, 
                    empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),
                    cliente = Clientes.objects.get(id_cliente = cliente),
                    ids_productos = "", cantidades_productos = "",
                    ids_servicios_corporales ="", cantidades_servicios_corporales ="",
                    ids_servicios_faciales ="", cantidades_servicios_faciales ="",
                    monto_pagar = nivelDañoFloat, credito = "N",
                    comentariosVenta = comentarioDañito, sucursal = Sucursales.objects.get(id_sucursal = sucursal))
                    #Generar movimiento de caja
                    registroVenta.save()

                    ultimoId = 0
                    ventasTotalesEfectivo = Ventas.objects.filter(tipo_pago ="Efectivo")
                    for venta in ventasTotalesEfectivo:
                        ultimoId = venta.id_venta
                    tipoMovimiento ="IN"
                    descripcionMovimiento ="Movimiento por daño a vestido, venta " + str(ultimoId)
                    fechaMovimiento = datetime.today().strftime('%Y-%m-%d')
                    horaMovimiento = datetime.now().time()
                    ingresarCantidadEfectivoAcaja =MovimientosCaja(fecha =fechaMovimiento,hora = horaMovimiento,tipo=tipoMovimiento,monto =nivelDañoFloat, descripcion=descripcionMovimiento,sucursal =  Sucursales.objects.get(id_sucursal = sucursal),
                                                                        realizado_por = Empleados.objects.get(id_empleado = empleadoVendedor))
                    ingresarCantidadEfectivoAcaja.save()

                
                if esConTarjeta:   
                    #Generar venta
                    registroVenta = Ventas(fecha_venta = fechaVenta, hora_venta =horaVenta,
                    tipo_pago = tipoPago, 
                    tipo_tarjeta = tipoTarjeta,
                    referencia_pago_tarjeta = referenciaBancaria,
                    empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),
                    cliente = Clientes.objects.get(id_cliente = cliente),
                    ids_productos = "", cantidades_productos = "",
                    ids_servicios_corporales ="", cantidades_servicios_corporales ="",
                    ids_servicios_faciales ="", cantidades_servicios_faciales ="",
                    monto_pagar = nivelDañoFloat, credito = "N",
                    comentariosVenta = comentarioDañito, sucursal = Sucursales.objects.get(id_sucursal = sucursal))
                    #Generar movimiento de caja
                    registroVenta.save()
                    
                if esConTransferencia:

                    #Generar venta
                    #Generar venta
                    registroVenta = Ventas(fecha_venta = fechaVenta, hora_venta =horaVenta,
                    tipo_pago = tipoPago, 
                    clave_rastreo_transferencia = claveRastreoTransferencia,
                    empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),
                    cliente = Clientes.objects.get(id_cliente = cliente),
                    ids_productos = "", cantidades_productos = "",
                    ids_servicios_corporales ="", cantidades_servicios_corporales ="",
                    ids_servicios_faciales ="", cantidades_servicios_faciales ="",
                    monto_pagar = nivelDañoFloat, credito = "N",
                    comentariosVenta = comentarioDañito, sucursal = Sucursales.objects.get(id_sucursal = sucursal))
                    #Generar movimiento de caja
                    registroVenta.save()
                
            datosCliente = Clientes.objects.filter(id_cliente= cliente)
            for datoC in datosCliente:
                idC = str(datoC.id_cliente)
                nombreC = datoC.nombre_cliente
                apellidoPat = datoC.apellidoPaterno_cliente
                apellidoMat = datoC.apellidoMaterno_cliente
            datosCompletosCliente = idC + " " + nombreC + " " + apellidoPat + " " + apellidoMat
            
            arregloProductos = idsProductos.split(',')
        
            

            if recibirRentaPendiente and pagoPorDaño == "Si":   #Si se recibe la renta pendiente y hay un daño..
                
                for productoRenta in arregloProductos:
                    codigo = str(productoRenta)
                    actualizacionEstado = ProductosRenta.objects.filter(codigo_producto = codigo).update(estado_renta = "Sin rentar")  
                
                #Imprimir ticket..

                #Ultimo id de venta
                consultaVentas = Ventas.objects.all()
                ultimoIdVenta = 0
                for venta in consultaVentas:
                    ultimoIdVenta = venta.id_venta

                #Fecha
                hoy = datetime.now()
                hoyFormato = hoy.strftime('%Y/%m/%d')
                horaVenta= datetime.now().time()

                #Empleado vendedor
                empleadoVendedor = idEmpleado
                consultaEmpleadoVendedor = Empleados.objects.filter(id_empleado = empleadoVendedor)
                for datoVendedor in consultaEmpleadoVendedor:
                    nombreEmpleado = datoVendedor.nombres
                    apellidoPatEmpleado = datoVendedor.apellido_paterno

                nombreCompletoEmpleadoVendedor = nombreEmpleado + " "+ apellidoPatEmpleado

                #Datos sucurssal
                consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursal)
                for datoSucursal in consultaSucursal:
                    nombreSucursal = datoSucursal.nombre
                    telefonoSucursal = datoSucursal.telefono
                    direccionSucursal = datoSucursal.direccion

                #DatosCliente
                
                consultaCliente = Clientes.objects.filter(id_cliente = cliente)
                for datoCliente in consultaCliente:
                    idCienteTicket = datoCliente.id_cliente
                    nombreCliente = datoCliente.nombre_cliente
                    apellidoCliente = datoCliente.apellidoPaterno_cliente

                nombreClienteTicket = nombreCliente + " " + apellidoCliente
                #Hora bien
                horaVenta = horaVenta.strftime("%H:%M:%S")

                # Esto es para obtener las impresoras. No es obligatorio hacerlo siempre que se quiera imprimir
                impresoras = Conector.ConectorV3.obtenerImpresoras()
                print(f"Las impresoras son: {impresoras}")

                contadorTickets = 0
                for x in range(2):
                    contadorTickets = contadorTickets + 1
                    c = Conector.ConectorV3()
                    c.Iniciar()
                    c.Corte(1)
                    
                    c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                    # Recuerda que la imagen debe existir y debe ser legible para el plugin. Si no, comenta las líneas
                    c.CargarImagenLocalEImprimir("C:\\COSTABELLA\\sistemaCostabella\\static\\images\\anegragrande.png", 0, 216)
                    c.EscribirTexto("\n")
                    c.EstablecerTamañoFuente(1, 1)
                    c.EstablecerEnfatizado(True)
                    c.EscribirTexto("Sucursal: "+nombreSucursal+"\n")
                    c.EstablecerEnfatizado(False)
                    c.EscribirTexto("TEL: "+telefonoSucursal+"\n")
                    c.TextoSegunPaginaDeCodigos(2, "cp850", direccionSucursal+"\n")

                    c.EstablecerEnfatizado(True)
                    c.EscribirTexto("================================================\n")
                    c.EstablecerTamañoFuente(2, 2)
                    c.EscribirTexto("RENTA #"+str(idRentaDevolucionPorcliente)+"\n")
                    c.EscribirTexto("CUOTA POR DAÑO "+str(selectTipoDaño)+"\n")
                    c.EscribirTexto("VENTA #"+str(ultimoIdVenta)+"\n")
                    c.EstablecerEnfatizado(False)
                    c.EstablecerAlineacion(Conector.ALINEACION_IZQUIERDA)
                    c.EstablecerTamañoFuente(1, 1)
                    c.EscribirTexto("\n")
                    c.EscribirTexto(str(hoyFormato)+" - "+str(horaVenta)+" hrs.\n")
                    c.EscribirTexto("Atendida por: "+nombreCompletoEmpleadoVendedor+".\n")
                    c.EscribirTexto("\n")

                    #Listado de productos 
                    #Productos venta
                    
                    consultaProductoRenta = ProductosRenta.objects.filter(codigo_producto = codigoVestido)
                    for datoProductoRenta in consultaProductoRenta:
                        nombreProducto = datoProductoRenta.nombre_producto

                    costoIndividualProductoDecimales = str(nivelDañoFloat)

                    costoTotalProductoDivididoEnElPunto = costoIndividualProductoDecimales.split(".")
                    longitudCostoTotal = len(str(costoTotalProductoDivididoEnElPunto[0]))
                    longitudCostoTotal = int(longitudCostoTotal)

                    
                    caracteresProducto = len(nombreProducto)

                    if longitudCostoTotal == 2:
                        espacio = 38
                    if longitudCostoTotal == 2:
                        espacio = 37
                    elif longitudCostoTotal == 3:
                        espacio = 36
                    elif longitudCostoTotal == 4:
                        espacio = 35
                    elif longitudCostoTotal == 5:
                        espacio = 34
                    elif longitudCostoTotal == 6:
                        espacio = 33
                    numeroEspacios = espacio - int(caracteresProducto)
                    
                    espaciosTicket = ""
                    for x in range(numeroEspacios):
                        espacioMini = " "
                        espaciosTicket = espaciosTicket + espacioMini
                    c.EscribirTexto("1 x "+nombreProducto+espaciosTicket+str(costoIndividualProductoDecimales)+"\n")


                    

                    
                    c.EscribirTexto("\n")
                    c.EscribirTexto("\n")
                    c.EscribirTexto("TOTAL PAGADO:  $"+str(nivelDañoFloat)+"\n")
                    c.EscribirTexto("\n")
                    c.EstablecerTamañoFuente(2, 2)
                    c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                    c.EscribirTexto("RECEPCIÓN DEL VESTIDO\n")
                    c.EstablecerEnfatizado(True)
                    c.EstablecerTamañoFuente(1, 1)
                    c.EscribirTexto("========== IVA incluido en el precio ==========\n")
                    c.EscribirTexto("\n")
                    c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                    c.TextoSegunPaginaDeCodigos(2, "cp850", "INFORMACION DE PAGO.\n")
                    c.EstablecerEnfatizado(False)
                    c.EscribirTexto("\n")
                    if esConEfectivo:
                        c.EscribirTexto("Pago en efectivo.\n")
                    elif esConTarjeta:
                        c.EscribirTexto("Pago con "+str(tipoTarjeta)+".\n")
                        c.EscribirTexto("Referencia: "+referenciaBancaria+".\n")
                    elif esConTransferencia:
                        c.EscribirTexto("Transferencia.\n")
                        c.EscribirTexto("Clave de rastreo: "+str(claveRastreoTransferencia)+".\n")
                    c.EscribirTexto("\n")
                    c.EstablecerEnfatizado(True)
                    c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                    c.TextoSegunPaginaDeCodigos(2, "cp850", "INFORMACIÓN DE CLIENTE.\n")

                    
                    c.EstablecerEnfatizado(False)
                    c.EscribirTexto("ID:"+str(idCienteTicket)+" - "+nombreClienteTicket+".\n")
                    c.EscribirTexto("=========== Gracias por su compra!! ===========\n")
                    c.EstablecerTamañoFuente(2, 2)
                    c.EstablecerEnfatizado(True)
                    c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                    if contadorTickets == 1:
                        c.EscribirTexto("\n")
                        c.EscribirTexto("COPIA TIENDA.\n")
                        c.EscribirTexto("\n")
                        c.EstablecerTamañoFuente(1, 1)
                        c.EscribirTexto("________________________________________________\n")
                        c.EscribirTexto("Firma de cliente.\n")
                    else:
                        c.EscribirTexto("\n")
                        c.EscribirTexto("COPIA CLIENTE.\n")
                    c.EscribirTexto("\n")
                    c.EstablecerTamañoFuente(1, 1)
                    

                    c.Feed(1)
                    c.Corte(1)
                    #c.abrirCajon()
                    c.Pulso(48, 60, 120)
                    print("Imprimiendo...")
                    # Recuerda cambiar por el nombre de tu impresora
                    respuesta = c.imprimirEn("POS80 Printer")
                    if respuesta == True:
                        print("Impresión correcta")
                    else:
                        print(f"Error. El mensaje es: {respuesta}")


                


                #recibir el vestido con daños
                if conCuota == "Si":
                    #recibido a destiempo con daño
                    try:
                        tokenTelegram = keysBotCostabella.tokenBotCostabellaRentas
                        botCostabella = telepot.Bot(tokenTelegram)

                        idGrupoTelegram = keysBotCostabella.idGrupo
                        
                        mensaje = " \U0001F457 RENTA RECIBIDA CON RETRASO Y DAÑO \U0001F457 \n El cliente "+nombreClienteTicket+" ha entregado el vestido "+nombreProducto+" con daño, después de la fecha límite en la sucursal "+nombreSucursal
                        botCostabella.sendMessage(idGrupoTelegram,mensaje)
                    except:
                        print("An exception occurred")
                    request.session['recibirRentaPendienteConCuota'] = "La renta número " + idRentaDevolucionPorcliente  +  " del cliente " + datosCompletosCliente + "  ha sido recibida correctamente! Aplica cuota!, Pago por daño recibido!"
                else:
                    #recibido a tiempo con daño
                    try:
                        tokenTelegram = keysBotCostabella.tokenBotCostabellaRentas
                        botCostabella = telepot.Bot(tokenTelegram)

                        idGrupoTelegram = keysBotCostabella.idGrupo
                        
                        mensaje = " \U0001F457 RENTA RECIBIDA A TIEMPO Y CON DAÑO \U0001F457 \n El cliente "+nombreClienteTicket+" ha entregado el vestido "+nombreProducto+" con daño a tiempo en la sucursal "+nombreSucursal
                        botCostabella.sendMessage(idGrupoTelegram,mensaje)
                    except:
                        print("An exception occurred")
                    request.session['recibirRentaPendiente'] = "La renta número " + idRentaDevolucionPorcliente  +  " del cliente " + datosCompletosCliente + "  ha sido recibida correctamente! Pago por daño recibido!"


            #Recibir vestido sin daños
            if recibirRentaPendiente:

                for productoRenta in arregloProductos:
                    codigo = str(productoRenta)
                    actualizacionEstado = ProductosRenta.objects.filter(codigo_producto = codigo).update(estado_renta = "Sin rentar")  
                
                
                #recibir vestido después de la fecha limite
                if conCuota == "Si":
                    try:
                        tokenTelegram = keysBotCostabella.tokenBotCostabellaRentas
                        botCostabella = telepot.Bot(tokenTelegram)

                        idGrupoTelegram = keysBotCostabella.idGrupo
                        
                        mensaje = " \U0001F457 RENTA RECIBIDA CON RETRASO \U0001F457 \n El cliente "+nombreCompletoCliente+" ha entregado el vestido "+nombreVestido+" después de la fecha límite en la sucursal "+nombreSucursal
                        botCostabella.sendMessage(idGrupoTelegram,mensaje)
                    except:
                        print("An exception occurred")
                    request.session['recibirRentaPendienteConCuota'] = "La renta número " + idRentaDevolucionPorcliente  +  " del cliente " + datosCompletosCliente + "  ha sido recibida correctamente! Aplica cuota!"
                else:
                    #recibir el vestido a tiempo
                    try:
                        tokenTelegram = keysBotCostabella.tokenBotCostabellaRentas
                        botCostabella = telepot.Bot(tokenTelegram)

                        idGrupoTelegram = keysBotCostabella.idGrupo
                        
                        mensaje = " \U0001F457 RENTA ENTREGADA A TIEMPO \U0001F457 \n El cliente "+nombreCompletoCliente+" ha entregado el vestido "+nombreVestido+" a tiempo en la sucursal "+nombreSucursal
                        botCostabella.sendMessage(idGrupoTelegram,mensaje)
                    except:
                        print("An exception occurred")
                    request.session['recibirRentaPendiente'] = "La renta número " + idRentaDevolucionPorcliente  +  " del cliente " + datosCompletosCliente + "  ha sido recibida correctamente!"
            
            #ImprimirEtiquetas
            fechaHoy = date.today()
            cantidadEtiquetas = int(1)
            
            primerDigitoCodigo = codigoVestido[2]
            segundoDigitoCodigo = codigoVestido[3]
            tercerDigitoCodigo = codigoVestido[4]
            cuartoDigitoCodigo = codigoVestido[5]
            
            numeroCompletoCodigo = primerDigitoCodigo + segundoDigitoCodigo + tercerDigitoCodigo + cuartoDigitoCodigo
            codigoCompletoImprimir = str(numeroCompletoCodigo)

            for x in range(cantidadEtiquetas):
                label = ("^XA~TA000~JSN^LT0^MNW^MTD^PON^PMN^LH0,0^JMA^PR2,2~SD30^JUS^LRN^CI0^XZ^XA^MMT^PW406^LL0203^LS0^FO0,160^GFA,00768,00768,00012,:Z64:eJxjYKAnYD/i3n5/zsfzIDb/u/f3z99tf98AZLOlJd69e/d44gEgm+/d+//n/v17fACs3vf+/TvmBw+A1T/uP7//8UMQm4EtgfGADAMjmM33gPGBHQMzmM3iABLjb4CKA9l89PCXvPzH57bHIWz+/7u/J4J9xcAge/9CeeEdiDjf/d2/baFs+fufy3nPQdX3/37/E6oeCNgZGOFsZgZuOJuB8TzCPsZz1PbBSAUAlzNF0w==:6D8B^FO128,128^GFA,01920,01920,00020,:Z64:eJztkT1Lw0Ach+8uoRdDKR2rtE2wy9mpHQotCCp+gRQaOwmCq0OkVh0KnukgBPETOJx1CefiR2jtUOjuKqGCrgFB3Opd2sGXDuKiQ39wy3MP9/L7AzDPPH8dNINBaFnJqlpNfoRUmvSruj5dv4o5g1nfkc4/XZvEXSOo285LL2xhGAqSIGTIONM54yPWSbi+YKWnyttuj0ILZrOLvczgQrCcu3Kba1PE0VJZO2Wu/JFyVgnWFFqyrXR5sR/uKYIhl7A8onnP14h2x0jk4eLgVaH3di3lpPpBS3oKKnodBDj3SaFsXvnSw4nG5aMCm/XDVaeQ3uhieZ63fE494XHCzBiNmsTpRqY3hra9fRzsP2x2VcnK1wttFwmvMrzxkavLO8JnA8dw0z4yjHF4ghNRByMd6cjjohgGdF2TCA5ALL5j2zUAuwDE05HnAqSZnPjR5DQy9TAMtqoHkaA6Uw/w6b547qRuddL2D+c2y5tnnv+bd/8tZhU=:C773^FO8,97^GB391,0,2^FS^BY2,3,61^FT295,29^BCI,,Y,N^FD>:PR>5"+codigoCompletoImprimir+"^FS^FT398,178^A0I,14,14^FH\^FD"+str(fechaHoy)+"^FS^FT236,119^A0I,14,14^FH\^FD"+nombreVestido+"^FS^FT237,143^A0I,11,12^FH\^FDNombre vestido:^FS^FT376,143^A0I,17,16^FH\^FDCosto de renta^FS^FT376,110^A0I,28,28^FH\^FD$ "+str(montoTotalRentaCodigoBarras)+" ^FS^PQ1,0,1,Y^XZ")
                
                zz = Zebra('ZDesigner GC420d')
                z.output(label)
            
            return redirect('/verCalendarioRentas/') 
        
        
    
    else:
        return render(request,"1 Login/login.html")
    

def recibirPagoCuota(request):

    if "idSesion" in request.session:
        idEmpleado = request.session['idSesion']

        if request.method == "POST":
            idRentaPagoCuota = request.POST['idRentaPagoCuota']

            consultaRenta = Rentas.objects.filter(id_renta = idRentaPagoCuota)
            for datosRenta in consultaRenta:
                codigoProducto = datosRenta.codigos_productos_renta
            
            consultaProducto = ProductosRenta.objects.filter(codigo_producto = codigoProducto)
            for datoProducto in consultaProducto:
                sucursal = datoProducto.sucursal_id
         
          
          
            formaPagoCuota = request.POST['tipoPago'] #Efectivo,  tarjeta o transferencia
            montoCuota =request.POST['montoCuota']
           
            
            fechaPagoCuota = datetime.today().strftime('%Y-%m-%d')
            horaPago = datetime.now().time()
            
          
                    
            esConEfectivo = False
            esConTarjeta = False
            esConTransferencia = False

            if formaPagoCuota == "Efectivo":
                esConEfectivo = True
            elif formaPagoCuota == "Tarjeta":
                esConTarjeta = True
                tipo_tarjeta = request.POST['tipoTarjetaCuota']    
                referencia_tarjeta = request.POST['referenciaTarjeta'] 
                        
            elif formaPagoCuota == "Transferencia":
                esConTransferencia = True
                clave_transferencia = request.POST['claveRastreoTransferencia']            
            

         

            infoRenta = Rentas.objects.filter(id_renta = idRentaPagoCuota)
            
            for dato in infoRenta:
                cliente = dato.cliente_id
                abonado = dato.monto_pago_apartado
              
                idsProductos = dato.codigos_productos_renta
                
            datosCliente = Clientes.objects.filter(id_cliente= cliente)
            for datoC in datosCliente:
                idC = str(datoC.id_cliente)
                nombreC = datoC.nombre_cliente
                apellidoPat = datoC.apellidoPaterno_cliente
                apellidoMat = datoC.apellidoMaterno_cliente
            datosCompletosCliente = idC + " " + nombreC + " " + apellidoPat + " " + apellidoMat
            
         
            
                
                
             
            pagoCuotaRenta = Rentas.objects.filter(id_renta = idRentaPagoCuota).update(monto_cuota = montoCuota,cuota_saldada = "Si",
                                                                                           realizado_por =idEmpleado)
            
            arregloProductos = idsProductos.split(',')
            productosVenta = []
            cantidadesProductosVenta = [1]
        
                    
                    
            for pro_ser in arregloProductos:
                stringVenta = str(pro_ser)
                
                intCantidad =int(1)
                if "PR" in stringVenta:
                    productosVenta.append(stringVenta)
                    cantidadesProductosVenta.append(intCantidad)
                    
                        
            listaProductosVenta =""
            cantidadesListaProductosVenta =""
                
                    
            lProductos =zip(productosVenta,cantidadesProductosVenta)
            lProductos2 = zip(productosVenta,cantidadesProductosVenta)
            
            contadorProductos = 0
            for p,c in lProductos:
                stringProducto =str(p)
                stringCantidad =str(c)
                contadorProductos =contadorProductos +1
                if contadorProductos == 1:
                    listaProductosVenta=stringProducto
                    cantidadesListaProductosVenta =stringCantidad
                else:
                    listaProductosVenta += "," + stringProducto 
                    cantidadesListaProductosVenta += "," + stringCantidad
            
            
            
            if pagoCuotaRenta: 
                
               
                
                if esConEfectivo:
                    
                    registroVenta = Ventas(fecha_venta = fechaPagoCuota, hora_venta =horaPago,
                            tipo_pago = formaPagoCuota, 
                            empleado_vendedor = Empleados.objects.get(id_empleado = idEmpleado), cliente = Clientes.objects.get(id_cliente = cliente),
                            ids_productos = listaProductosVenta, cantidades_productos = cantidadesListaProductosVenta,
                            ids_servicios_corporales ="", cantidades_servicios_corporales ="",
                            ids_servicios_faciales ="", cantidades_servicios_faciales ="",
                            monto_pagar = montoCuota, credito = "N",cuota="S",
                            comentariosVenta = "Se ingreso efectivo por motivo de cuota de renta " + idRentaPagoCuota, sucursal = Sucursales.objects.get(id_sucursal = sucursal))
                    registroVenta.save()
                    if registroVenta:
                        tipoMovimiento ="IN"
                        montoMovimiento = float(montoCuota)
                        descripcionMovimiento ="Movimiento por cuota de renta  " + idRentaPagoCuota + " por el cliente " + datosCompletosCliente 
                        fechaMovimiento = datetime.today().strftime('%Y-%m-%d')
                        horaMovimiento = datetime.now().time()
                        ingresarCantidadEfectivoAcaja =MovimientosCaja(fecha =fechaMovimiento,hora = horaMovimiento,tipo=tipoMovimiento,monto =montoMovimiento, descripcion=descripcionMovimiento,sucursal =  Sucursales.objects.get(id_sucursal = sucursal),
                                                                                    realizado_por = Empleados.objects.get(id_empleado = idEmpleado))
                        ingresarCantidadEfectivoAcaja.save()
                 
                            
                if esConTarjeta:
                    registroVenta = Ventas(fecha_venta = fechaPagoCuota,  hora_venta =horaPago,
                            tipo_pago = formaPagoCuota, tipo_tarjeta = tipo_tarjeta, referencia_pago_tarjeta = referencia_tarjeta,
                            empleado_vendedor = Empleados.objects.get(id_empleado = idEmpleado),
                            cliente = Clientes.objects.get(id_cliente = cliente),
                            ids_productos = listaProductosVenta, cantidades_productos = cantidadesListaProductosVenta,
                            ids_servicios_corporales ="", cantidades_servicios_corporales ="",
                            ids_servicios_faciales ="", cantidades_servicios_faciales ="",
                            monto_pagar = montoCuota, credito = "N",cuota="S",
                            comentariosVenta = "Se ingreso efectivo por motivo de cuota de renta " + idRentaPagoCuota, sucursal = Sucursales.objects.get(id_sucursal = sucursal))
                    registroVenta.save()
                    
                 
                        
                if esConTransferencia:
                    registroVenta = Ventas(fecha_venta = fechaPagoCuota,  hora_venta =horaPago,
                            tipo_pago = formaPagoCuota, clave_rastreo_transferencia = clave_transferencia,
                            empleado_vendedor = Empleados.objects.get(id_empleado = idEmpleado),
                            cliente = Clientes.objects.get(id_cliente = cliente),
                            ids_productos = listaProductosVenta, cantidades_productos = cantidadesListaProductosVenta,
                            ids_servicios_corporales ="", cantidades_servicios_corporales ="",
                            ids_servicios_faciales ="", cantidades_servicios_faciales ="",
                            monto_pagar = montoCuota, credito = "N",cuota="S",comentariosVenta = "Se ingreso efectivo por motivo de cuota de renta " + idRentaPagoCuota, sucursal = Sucursales.objects.get(id_sucursal = sucursal))
                    
                    registroVenta.save()
                    
                
                if registroVenta:
                    #IMPRESION DE TICKEEETSSSS
                    #Ultimo id de venta
                    consultaVentas = Ventas.objects.all()
                    ultimoIdVenta = 0
                    for venta in consultaVentas:
                        ultimoIdVenta = venta.id_venta

                    
                    #Fecha
                    hoy = datetime.now()
                    hoyFormato = hoy.strftime('%Y/%m/%d')

                    #Empleado vendedor
                    empleadoVendedor = idEmpleado
                    consultaEmpleadoVendedor = Empleados.objects.filter(id_empleado = empleadoVendedor)
                    for datoVendedor in consultaEmpleadoVendedor:
                        nombreEmpleado = datoVendedor.nombres
                        apellidoPatEmpleado = datoVendedor.apellido_paterno

                    nombreCompletoEmpleadoVendedor = nombreEmpleado + " "+ apellidoPatEmpleado

                    #Datos sucurssal
                    consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursal)
                    for datoSucursal in consultaSucursal:
                        nombreSucursal = datoSucursal.nombre
                        telefonoSucursal = datoSucursal.telefono
                        direccionSucursal = datoSucursal.direccion

                    #DatosCliente
                    
                    consultaCliente = Clientes.objects.filter(id_cliente = cliente)
                    for datoCliente in consultaCliente:
                        idCienteTicket = datoCliente.id_cliente
                        nombreCliente = datoCliente.nombre_cliente
                        apellidoCliente = datoCliente.apellidoPaterno_cliente

                    nombreClienteTicket = nombreCliente + " " + apellidoCliente
                    #Hora bien
                    horaVenta= datetime.now().time()
                    horaVenta = horaVenta.strftime("%H:%M:%S")

                    # Esto es para obtener las impresoras. No es obligatorio hacerlo siempre que se quiera imprimir
                    impresoras = Conector.ConectorV3.obtenerImpresoras()
                    print(f"Las impresoras son: {impresoras}")

                    contadorTickets = 0
                    for x in range(2):
                        contadorTickets = contadorTickets + 1
                        c = Conector.ConectorV3()
                        c.Iniciar()
                        c.Corte(1)
                        
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        # Recuerda que la imagen debe existir y debe ser legible para el plugin. Si no, comenta las líneas
                        c.CargarImagenLocalEImprimir("C:\\COSTABELLA\\sistemaCostabella\\static\\images\\anegragrande.png", 0, 216)
                        c.EscribirTexto("\n")
                        c.EstablecerTamañoFuente(1, 1)
                        c.EstablecerEnfatizado(True)
                        c.EscribirTexto("Sucursal: "+nombreSucursal+"\n")
                        c.EstablecerEnfatizado(False)
                        c.EscribirTexto("TEL: "+telefonoSucursal+"\n")
                        c.TextoSegunPaginaDeCodigos(2, "cp850", direccionSucursal+"\n")

                        c.EstablecerEnfatizado(True)
                        c.EscribirTexto("================================================\n")
                        c.EstablecerTamañoFuente(2, 2)
                        c.EscribirTexto("CUOTA DE RENTA #"+str(idRentaPagoCuota)+" \n")
                        c.EscribirTexto("VENTA #"+str(ultimoIdVenta)+"\n")
                        c.EstablecerEnfatizado(False)
                        c.EstablecerAlineacion(Conector.ALINEACION_IZQUIERDA)
                        c.EstablecerTamañoFuente(1, 1)
                        c.EscribirTexto("\n")
                        c.EscribirTexto(str(hoyFormato)+" - "+str(horaVenta)+" hrs.\n")
                        c.EscribirTexto("Atendida por: "+nombreCompletoEmpleadoVendedor+".\n")
                        c.EscribirTexto("\n")

                        #Listado de productos 
                        #Productos venta
                        
                        consultaProductoRenta = ProductosRenta.objects.filter(codigo_producto = codigoProducto)
                        for datoProductoRenta in consultaProductoRenta:
                            nombreProducto = datoProductoRenta.nombre_producto
                            costoIndividualProducto = datoProductoRenta.costo_renta

                        costoIndividualProductoDecimales = str(costoIndividualProducto)

                        costoTotalProductoDivididoEnElPunto = costoIndividualProductoDecimales.split(".")
                        longitudCostoTotal = len(str(costoTotalProductoDivididoEnElPunto[0]))
                        longitudCostoTotal = int(longitudCostoTotal)

                        
                        caracteresProducto = len(nombreProducto)

                        if longitudCostoTotal == 2:
                            espacio = 38
                        if longitudCostoTotal == 2:
                            espacio = 37
                        elif longitudCostoTotal == 3:
                            espacio = 36
                        elif longitudCostoTotal == 4:
                            espacio = 35
                        elif longitudCostoTotal == 5:
                            espacio = 34
                        elif longitudCostoTotal == 6:
                            espacio = 33
                        numeroEspacios = espacio - int(caracteresProducto)
                        
                        espaciosTicket = ""
                        for x in range(numeroEspacios):
                            espacioMini = " "
                            espaciosTicket = espaciosTicket + espacioMini
                        c.EscribirTexto("1 x "+nombreProducto+espaciosTicket+str(montoCuota)+"\n")


                        

                        
                        c.EscribirTexto("\n")
                        c.EscribirTexto("\n")
                        
                        restantePorPagar = float(costoIndividualProducto) - float(montoCuota)                               
                        c.EstablecerTamañoFuente(2, 2)
                        c.EstablecerAlineacion(Conector.ALINEACION_DERECHA)
                        c.EscribirTexto("TOTAL DE CUOTA:  $"+str(montoCuota)+"\n")
                        c.EstablecerTamañoFuente(1, 1)
                        c.EscribirTexto("TOTAL VESTIDO:  $"+str(costoIndividualProducto)+"\n")
                        c.EscribirTexto("\n")
                        c.EstablecerTamañoFuente(2, 2)
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        c.EstablecerEnfatizado(True)
                        c.EstablecerTamañoFuente(1, 1)
                        c.EscribirTexto("========== IVA incluido en el precio ==========\n")
                        c.EscribirTexto("\n")
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        c.TextoSegunPaginaDeCodigos(2, "cp850", "INFORMACION DE PAGO.\n")
                        c.EstablecerEnfatizado(False)
                        c.EscribirTexto("\n")
                        if esConEfectivo:
                            c.EscribirTexto("Pago en efectivo.\n")
                        elif esConTarjeta:
                            c.EscribirTexto("Pago con "+str(tipo_tarjeta)+".\n")
                            c.EscribirTexto("Referencia: "+referencia_tarjeta+".\n")
                        elif esConTransferencia:
                            c.EscribirTexto("Transferencia.\n")
                            c.EscribirTexto("Clave de rastreo: "+str(clave_transferencia)+".\n")
                        c.EscribirTexto("\n")
                        c.EstablecerEnfatizado(True)
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        c.TextoSegunPaginaDeCodigos(2, "cp850", "INFORMACIÓN DE CLIENTE.\n")

                        
                        c.EstablecerEnfatizado(False)
                        c.EscribirTexto("ID:"+str(idCienteTicket)+" - "+nombreClienteTicket+".\n")
                        c.EscribirTexto("=========== Gracias por su compra!! ===========\n")
                        c.EstablecerTamañoFuente(2, 2)
                        c.EstablecerEnfatizado(True)
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        if contadorTickets == 1:
                            c.EscribirTexto("\n")
                            c.EscribirTexto("COPIA TIENDA.\n")
                            c.EscribirTexto("\n")
                            c.EstablecerTamañoFuente(1, 1)
                            c.EscribirTexto("________________________________________________\n")
                            c.EscribirTexto("Firma de cliente.\n")
                        else:
                            c.EscribirTexto("\n")
                            c.EscribirTexto("COPIA CLIENTE.\n")
                        c.EscribirTexto("\n")
                        c.EstablecerTamañoFuente(1, 1)
                        

                        c.Feed(1)
                        c.Corte(1)
                        #c.abrirCajon()
                        c.Pulso(48, 60, 120)
                        print("Imprimiendo...")
                        # Recuerda cambiar por el nombre de tu impresora
                        respuesta = c.imprimirEn("POS80 Printer")
                        if respuesta == True:
                            print("Impresión correcta")
                        else:
                            print(f"Error. El mensaje es: {respuesta}")
               
                
                request.session['rentaCuotaPagada'] = "La cuota de la renta número " + idRentaPagoCuota  +  " ha sido saldada por el  " + datosCompletosCliente + "  correctamente!"
            return redirect('/verCalendarioRentas/') 
        
     
    
    else:
        return render(request,"1 Login/login.html")
    
        
        

def altaServicios(request):

    if "idSesion" in request.session:

       # Variables de sesión
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']
        idPerfil = idEmpleado
        idConfig = idEmpleado
       

        

        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
           #notificacionRentas
        notificacionRenta = notificacionRentas(request)

        #notificacionCitas
        notificacionCita = notificacionCitas(request)
        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)
        

        # retornar sucrusales
        sucursales = Sucursales.objects.all()
        if request.method == "POST":
            
            tipo_Servicio = request.POST['tipoServicio']  #Requerido
            nombre_Servicio = request.POST['nombreServicio']  #Requerido
            
            
            descripcion_servicio = request.POST['descripcion']  #Requerido
            costo_servicio = request.POST['costoServicio']  #Requerido
            tiempo_minimo = request.POST['tiempoMinimo']  #Requerido
            tiempo_maximo= request.POST['tiempoMaximo']  #Requerido
            complementos= request.POST['complementos']  #Requerido
            
            listaSucursales = request.POST.getlist('sucursales')
            #fechaAlta = datetime.now()
            if tipo_Servicio == "Corporal":
                tipo = "Corporales"
            elif tipo_Servicio == "Facial":
                tipo= "Faciales"
         
            
            if "Todas" in listaSucursales:
                #El servicio se dara de alta en todas las sucursales
                sucursales = Sucursales.objects.all()
                for sucursal in sucursales:
                    idSucursal = sucursal.id_sucursal
                    registroServicio = Servicios(tipo_servicio = tipo_Servicio,
                    nombre_servicio = nombre_Servicio,
                    descripcion_servicio = descripcion_servicio, 
                    tiempo_minimo = tiempo_minimo, 
                    tiempo_maximo = tiempo_maximo, 
                    precio_venta = costo_servicio, 
                    complementos_servicio=complementos,
                    sucursal = Sucursales.objects.get(id_sucursal = idSucursal))

                    registroServicio.save()
            else:
                for sucursal in listaSucursales:
                    idSucursal = int(sucursal)
                    registroServicio = Servicios(tipo_servicio = tipo_Servicio,
                    nombre_servicio = nombre_Servicio,
                    descripcion_servicio = descripcion_servicio, 
                    tiempo_minimo = tiempo_minimo, 
                    tiempo_maximo = tiempo_maximo, 
                    precio_venta = costo_servicio, 
                    complementos_servicio=complementos,
                    sucursal = Sucursales.objects.get(id_sucursal = idSucursal))
                    registroServicio.save()


            if registroServicio:
                    servicioAgregado = "El servicio " + nombre_Servicio +  "  de tipo " + tipo  + "  ha sido gregado satisfactoriamente!"
                    return render(request, "10 Servicios/altaServicios.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado, "idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, "sucursales":sucursales, "servicioAgregado":servicioAgregado,"notificacionRenta":notificacionRenta, "notificacionCita":notificacionCita})
            else:
                    servicioNoAgregado = "Error en la base de datos, intentelo más tarde.."
                    return render(request, "10 Servicios/altaServicios.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, "sucursales":sucursales, "servicioNoAgregado":servicioNoAgregado,"notificacionRenta":notificacionRenta, "notificacionCita":notificacionCita})

            
        return render(request, "10 Servicios/altaServicios.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, "sucursales":sucursales,"notificacionRenta":notificacionRenta, "notificacionCita":notificacionCita
        })
    
    else:
        return render(request,"1 Login/login.html")
    
    
def inventarioServicios(request):

    if "idSesion" in request.session:

       # Variables de sesión
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']
        idPerfil = idEmpleado
        idConfig = idEmpleado
        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
           #notificacionRentas
        notificacionRenta = notificacionRentas(request)

        #notificacionCitas
        notificacionCita = notificacionCitas(request)
        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)
        
        if request.method == "POST":

            sucursalServicios = request.POST['sucursalServicios']

            

            # Arreglo para tabla y modal editar
            sucursales = []
            sucursalesE = []

            if sucursalServicios == "todasLasSucursales":
                nombreSucursalServicios = "Todas las sucursales"
                
            else:
                consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursalServicios)

                for datoSucursal in consultaSucursal:
                    nombreSucursalServicios = datoSucursal.nombre
                



            #------------servicios tipo corporales -------------
            productosVentasSucursalCoorporal = []
            productosGastoSucursalCoorporal = []

            yaTienePaqueteCorporal = []
            paqueteDeProductosServiciosCorporales = []
            if sucursalServicios == "todasLasSucursales":
                serviciosCorporales = Servicios.objects.filter(tipo_servicio ="Corporal")
            else:
                serviciosCorporales = Servicios.objects.filter(tipo_servicio ="Corporal", sucursal_id__id_sucursal = sucursalServicios)

                

            for servicio in serviciosCorporales:
                
                arregloProductosVentaSucursal = []
                arregloProductosGastoSucursal = []

                id_sucursal = servicio.sucursal_id
                
                sucursal = Sucursales.objects.filter(id_sucursal = id_sucursal)
                for dato in sucursal:
                    idSucursal = dato.id_sucursal
                    nombreSucursal = dato.nombre
                sucursales.append(nombreSucursal)
                sucursalesE.append([idSucursal,nombreSucursal])
                
                #Verificar si ya tiene un paquete
                idServicio = servicio.id_servicio
                servicioCorporalYaTienePaquete = False
                paquetesServicios = ServiciosProductosGasto.objects.all()
                productosServicio = []
                for productoUtilizado in paquetesServicios:
                    servicioUtilizado = productoUtilizado.servicio_id
                    
                    if servicioUtilizado == idServicio:
                        servicioCorporalYaTienePaquete = True
                        
                        #Ya tiene productos asignados... Sacar todos los productos y mandarlos a un arreglo de ese servicio.
                        idProductoGastoUtilizado = productoUtilizado.producto_gasto_id
                        cantidadUtilizada = productoUtilizado.cantidad
                        datosProducto = ProductosGasto.objects.filter(id_producto = idProductoGastoUtilizado)
                        for dato in datosProducto:
                            codigo = dato.codigo_producto
                            idProducto = dato.id_producto
                            sku = dato.sku_producto
                            nombre = dato.nombre_producto
                            cantidad_existencias = dato.cantidad
                            
                        productosServicio.append([idProducto,codigo,sku,nombre,cantidadUtilizada,cantidad_existencias])
                    
                if servicioCorporalYaTienePaquete:
                    paqueteDeProductosServiciosCorporales.append(productosServicio)
                else:
                    paqueteDeProductosServiciosCorporales.append("nada")
                
                    
                
                        
                        
                        
                    
                yaTienePaqueteCorporal.append(servicioCorporalYaTienePaquete)

                #Productos para venta sucursal
                productosVentas = ProductosVenta.objects.filter(sucursal = idSucursal)
                for productoV in productosVentas:
                    idPventa = productoV.id_producto
                    codigoPventa = productoV.codigo_producto
                    nombrePventa = productoV.nombre_producto
                    arregloProductosVentaSucursal.append([idPventa,codigoPventa,nombrePventa])

                productosVentasSucursalCoorporal.append(arregloProductosVentaSucursal)

                #Productos gasto sucursal
                productosGastos = ProductosGasto.objects.filter(sucursal = idSucursal)
                for productoG in productosGastos:
                    idPgasto = productoG.id_producto
                    codigoPgasto = productoG.codigo_producto
                    nombrePgasto = productoG.nombre_producto
                    arregloProductosGastoSucursal.append([idPgasto,codigoPgasto,nombrePgasto]) 
                productosGastoSucursalCoorporal.append(arregloProductosGastoSucursal)
                
                
                
                
            listaCorporales = zip(serviciosCorporales, sucursales, yaTienePaqueteCorporal, paqueteDeProductosServiciosCorporales)
            listaCorporales2 = zip(serviciosCorporales, sucursales, yaTienePaqueteCorporal, paqueteDeProductosServiciosCorporales)
            listaCorporalesEditar = zip(serviciosCorporales, sucursalesE)
            listaCorporalesProductosVenta = zip(serviciosCorporales, productosVentasSucursalCoorporal,productosGastoSucursalCoorporal)
            
            sucursalesTotalesEditat=[]
            sucursalesTotales = Sucursales.objects.all()
            for suc in sucursalesTotales:
                idSucTotal = suc.id_sucursal
                nombreSucTotal = suc.nombre
                sucursalesTotalesEditat.append([idSucTotal,nombreSucTotal])
            
            #sucursalesTotalesEditat.pop(idSucursal -1)
            
            
            
            
            #---paquetes de servicio
            
            
            
            
        
            
        
            
        
            
            
            
            
            #------------servicios tipo faciales -------------
            yaTienePaqueteFacial = []
            paqueteDeProductosServiciosFaciales = []
            if sucursalServicios == "todasLasSucursales":
                serviciosFaciales = Servicios.objects.filter(tipo_servicio ="Facial")
            else:
                serviciosFaciales = Servicios.objects.filter(tipo_servicio ="Facial", sucursal_id__id_sucursal = sucursalServicios)
            for servicio in serviciosFaciales:
                id_sucursal = servicio.sucursal_id
                
                sucursal = Sucursales.objects.filter(id_sucursal = id_sucursal)
                for dato in sucursal:
                    idSucursalF = dato.id_sucursal
                    nombreSucursalF = dato.nombre
                sucursales.append(nombreSucursalF)
                sucursalesE.append([idSucursalF,nombreSucursalF])
                
                #Verificar si ya tiene un paquete
                idServicio = servicio.id_servicio
                servicioFacialYaTienePaquete = False
                paquetesServicios = ServiciosProductosGasto.objects.all()
                
                productosServicioFacial = []
                for productoUtilizado in paquetesServicios:
                    servicioUtilizado = productoUtilizado.servicio_id
                    
                    if servicioUtilizado == idServicio:
                        servicioFacialYaTienePaquete = True
                        #Ya tiene productos asignados... Sacar todos los productos y mandarlos a un arreglo de ese servicio.asdfasdfasdfasdfadsfasdf
                        idProductoGastoUtilizado = productoUtilizado.producto_gasto_id
                        cantidadUtilizada = productoUtilizado.cantidad
                        datosProducto = ProductosGasto.objects.filter(id_producto = idProductoGastoUtilizado)
                        for dato in datosProducto:
                            codigo = dato.codigo_producto
                            idProducto = dato.id_producto
                            sku = dato.sku_producto
                            nombre = dato.nombre_producto
                            cantidad_existencias = dato.cantidad
                            
                        productosServicioFacial.append([idProducto,codigo,sku,nombre,cantidadUtilizada,cantidad_existencias])
                    
                if servicioFacialYaTienePaquete:
                    paqueteDeProductosServiciosFaciales.append(productosServicioFacial)
                else:
                    paqueteDeProductosServiciosFaciales.append("nada")
                    
                #alsdkfjnlaksdjfkljaslkdfjlajsdklfkajsdfklalfjdlajfdlkj
                
                        
                yaTienePaqueteFacial.append(servicioFacialYaTienePaquete)
                
                
            listaFaciales = zip(serviciosFaciales, sucursales, yaTienePaqueteFacial, paqueteDeProductosServiciosFaciales)
            listaFaciales2 = zip(serviciosFaciales, sucursales, yaTienePaqueteFacial, paqueteDeProductosServiciosFaciales)
            listaFacialesEditar = zip(serviciosFaciales, sucursalesE)
            
            return render(request, "10 Servicios/inventarioServicios.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
                                                                         "listaCorporales":listaCorporales,"listaFaciales":listaFaciales,"listaCorporalesEditar":listaCorporalesEditar,
                                                                         "listaFacialesEditar":listaFacialesEditar,"serviciosCorporales":serviciosCorporales,
                                                                        "listaCorporalesProductosVenta":listaCorporalesProductosVenta,"notificacionRenta":notificacionRenta, "listaCorporales2":listaCorporales2, "listaFaciales2":listaFaciales2, "notificacionCita":notificacionCita, "nombreSucursalServicios":nombreSucursalServicios
            })
        #Else seleccionar sucursal
        else:
            if tipoUsuario == "esAdmin":
                sucursales = Sucursales.objects.all()

                if "servicioCorporalActualizado" in request.session:
                    servicioCorporalActualizado = request.session['servicioCorporalActualizado']
                    del request.session['servicioCorporalActualizado']
                
                    return render(request, "10 Servicios/seleccionarSucursalServicios.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
                                                                                 "notificacionCita":notificacionCita, "notificacionRenta":notificacionRenta, "servicioCorporalActualizado":servicioCorporalActualizado, "sucursales":sucursales})
                    
                if "servicioFacialActualizado" in request.session:
                
                    servicioFacialActualizado = request.session['servicioFacialActualizado']
                    del request.session['servicioFacialActualizado']
                    return render(request, "10 Servicios/seleccionarSucursalServicios.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
                                                                                 "notificacionCita":notificacionCita, "notificacionRenta":notificacionRenta, "servicioFacialActualizado":servicioFacialActualizado, "sucursales":sucursales})

                if "registroPaquete" in request.session:
                
                    paquetecreado = request.session['registroPaquete']
                    del request.session['registroPaquete']
                    return render(request, "10 Servicios/seleccionarSucursalServicios.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
                                                                                 "notificacionCita":notificacionCita, "notificacionRenta":notificacionRenta, "paquetecreado":paquetecreado, "sucursales":sucursales})
                
                if "paqueteProductoActualizado" in request.session:
                    paqueteProductoActualizado = request.session["paqueteProductoActualizado"]
                    del request.session["paqueteProductoActualizado"]
                    return render(request, "10 Servicios/seleccionarSucursalServicios.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
                                                                                 "notificacionCita":notificacionCita, "notificacionRenta":notificacionRenta, "paqueteProductoActualizado":paqueteProductoActualizado, "sucursales":sucursales})
                
                return render(request, "10 Servicios/seleccionarSucursalServicios.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
                                                                                 "notificacionCita":notificacionCita, "notificacionRenta":notificacionRenta,"sucursales":sucursales})


            else:
                consultaEmpleado = Empleados.objects.filter(id_empleado = idEmpleado)
                for datoEmpleado in consultaEmpleado:
                    sucursalEmpleado = datoEmpleado.id_sucursal_id
                sucursales = Sucursales.objects.filter(id_sucursal = sucursalEmpleado)

                if "servicioCorporalActualizado" in request.session:
                    servicioCorporalActualizado = request.session['servicioCorporalActualizado']
                    del request.session['servicioCorporalActualizado']
                
                    return render(request, "10 Servicios/seleccionarSucursalServicios.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
                                                                                 "notificacionCita":notificacionCita, "notificacionRenta":notificacionRenta, "servicioCorporalActualizado":servicioCorporalActualizado, "sucursales":sucursales})
                    
                if "servicioFacialActualizado" in request.session:
                
                    servicioFacialActualizado = request.session['servicioFacialActualizado']
                    del request.session['servicioFacialActualizado']
                    return render(request, "10 Servicios/seleccionarSucursalServicios.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
                                                                                 "notificacionCita":notificacionCita, "notificacionRenta":notificacionRenta, "servicioFacialActualizado":servicioFacialActualizado, "sucursales":sucursales})

                if "registroPaquete" in request.session:
                
                    paquetecreado = request.session['registroPaquete']
                    del request.session['registroPaquete']
                    return render(request, "10 Servicios/seleccionarSucursalServicios.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
                                                                                 "notificacionCita":notificacionCita, "notificacionRenta":notificacionRenta, "paquetecreado":paquetecreado, "sucursales":sucursales})
                
                if "paqueteProductoActualizado" in request.session:
                    paqueteProductoActualizado = request.session["paqueteProductoActualizado"]
                    del request.session["paqueteProductoActualizado"]
                    return render(request, "10 Servicios/seleccionarSucursalServicios.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
                                                                                 "notificacionCita":notificacionCita, "notificacionRenta":notificacionRenta, "paqueteProductoActualizado":paqueteProductoActualizado, "sucursales":sucursales})

                return render(request, "10 Servicios/seleccionarSucursalServicios.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
                                                                                 "notificacionCita":notificacionCita, "notificacionRenta":notificacionRenta, "sucursales":sucursales})
    
        
        
        
        
        
        
            
            
        
    else:
        return render(request,"1 Login/login.html")


def actualizarServiciosCoporales(request):

    if "idSesion" in request.session:

        if request.method == "POST":
            idServicioCEditar = request.POST['idServicioCorporalEditar']
            nombreEditar = request.POST['nombreActualizado']
            descripcion = request.POST['descripcionActualizado']
            precio_ventaEditar = request.POST['precioActualizado']
            minimo_Editar = request.POST['minimoActualizado']
            maximo_Editar = request.POST['maximoActualizado']
            sucursal_Editar = request.POST['idSucursal']
            
            
            
            
           
            actualizacionServicioCorporal = Servicios.objects.filter(id_servicio = idServicioCEditar).update(nombre_servicio = nombreEditar,descripcion_servicio = descripcion,tiempo_minimo = minimo_Editar,tiempo_maximo =maximo_Editar,
                                                                                                             precio_venta=precio_ventaEditar,sucursal=sucursal_Editar)
            

            if actualizacionServicioCorporal: 
               
             
                request.session['servicioCorporalActualizado'] = "El servicio corporal " + idServicioCEditar  +" "+  nombreEditar + " ha sido actualizado correctamente!"
            return redirect('/inventarioServicios/')
        

def actualizarServiciosFaciales(request):

    if "idSesion" in request.session:

        if request.method == "POST":
            idServicioFEditar = request.POST['idServicioFacialEditar']
            nombreEditar = request.POST['nombreActualizado']
            descripcion = request.POST['descripcionActualizado']
            precio_ventaEditar = request.POST['precioActualizado']
            minimo_Editar = request.POST['minimoActualizado']
            maximo_Editar = request.POST['maximoActualizado']
            sucursal_Editar = request.POST['idSucursal']
            
            
            
            
           
            actualizacionServicioFacial = Servicios.objects.filter(id_servicio = idServicioFEditar).update(nombre_servicio = nombreEditar,descripcion_servicio = descripcion,tiempo_minimo = minimo_Editar,tiempo_maximo =maximo_Editar,
                                                                                                             precio_venta=precio_ventaEditar,sucursal=sucursal_Editar)
            

            if actualizacionServicioFacial: 
               
             
                request.session['servicioFacialActualizado'] = "El servicio facial " + idServicioFEditar  +" "+  nombreEditar + " ha sido actualizado correctamente!"
            return redirect('/inventarioServicios/')
        
        

def crearPaqueteServicios(request):

    
    if "idSesion" in request.session:

       # Variables de sesión
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']
        idPerfil = idEmpleado
        idConfig = idEmpleado
       

        

        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
        
           #notificacionRentas
        notificacionRenta = notificacionRentas(request)

        #notificacionCitas
        notificacionCita = notificacionCitas(request)
        
         #permisosEmpleado
        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)

        
        if request.method == "POST":
            
            idServicio= request.POST['idServicioPaquete'] 
            intServicio = int(idServicio)
            datosServicios = Servicios.objects.filter(id_servicio = intServicio)
            infoServicio = []
         
            for dato in datosServicios:
                nombre = dato.nombre_servicio
                descripcion = dato.descripcion_servicio
                if dato.complementos_servicio == None:
                    complementos = "Ninguno"
                else:
                    complementos = dato.complementos_servicio
                tiempo_min = dato.tiempo_minimo
                tiempo_max = dato.tiempo_maximo
                precio = dato.precio_venta
                
                idSucursal = dato.sucursal_id
                
                datosSucursal = Sucursales.objects.filter(id_sucursal = idSucursal)
                for suc in datosSucursal:
                    nombreSucursal = suc.nombre
            
                infoServicio.append([nombre,descripcion,complementos,tiempo_min,tiempo_max,precio,nombreSucursal])
            data = [i.json() for i in ProductosGasto.objects.filter(sucursal_id__id_sucursal = idSucursal)]
            
            
            #----------------
            productos_totales = ProductosGasto.objects.filter(sucursal_id__id_sucursal = idSucursal)
            productos_ids = []
                
            for prod in productos_totales:
                productos_ids.append(prod.id_producto)
            
            productosServicios = ServiciosProductosGasto.objects.filter(servicio_id__id_servicio = idServicio)
            productosServicio = []
            for productoServicio in productosServicios:
                ids_producto_gasto = productoServicio.producto_gasto_id
            
                for dato in productos_ids:
                    if dato  == ids_producto_gasto:
                        productos_ids.remove(dato)
                
                  
                  
            datos_productos_no_paquete = []
                
            for id in productos_ids:
                datos = ProductosGasto.objects.filter(id_producto = id)
                for dato in datos:
                    id_producto = dato.id_producto
                    codigo_producto = dato.codigo_producto
                    sku = dato.sku_producto
                    nombreProd = dato.nombre_producto
                    existencias = dato.cantidad
                    descripcionP = dato.descripcion
                    imagen = dato.imagen_producto
                    fecha_alta = dato.fecha_alta
                    
                datos_productos_no_paquete.append([id_producto,codigo_producto,sku,nombreProd,existencias,descripcionP,imagen,fecha_alta])   
            
            
            
            
        #----------------------
            
      
                
       
           
                    
            
            
            
            
            
            productosVenta = ProductosGasto.objects.filter(sucursal_id__id_sucursal = idSucursal)
            productosVentaJavaScript = ProductosGasto.objects.filter(sucursal_id__id_sucursal = idSucursal)
            
        
            return render(request, "11 PaquetesServicios/crearPaqueteServicios.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado,
                                                                                       "infoServicio":infoServicio,"idServicio":idServicio,"productosVenta":productosVenta,"productosVentaJson":json.dumps(data),"productosVentaJavaScript":productosVentaJavaScript,
                                                                                       "datos_productos_no_paquete":datos_productos_no_paquete,"notificacionRenta":notificacionRenta, "notificacionCita":notificacionCita})
            
            
         

       

            
            
        return render(request, "11 PaquetesServicios/crearPaqueteServicios.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado,"notificacionRenta":notificacionRenta, "notificacionCita":notificacionCita
                                                                                   
                                                                                 
                                                                                   
        })
    
    else:
        return render(request,"1 Login/login.html")
        


def guardarPaquete(request):

    
    if "idSesion" in request.session:
     

      
        
        if request.method == "POST":
            
            idServicio = request.POST['idServicio']
            productosSolicitados = request.POST['cantidadesProductosVenta']
            listaProductosSolicitados = productosSolicitados.split(",")
  
            listaCantidadesSolicitadas = []
           
            for idProducto in listaProductosSolicitados:
               
                nameCantidadProducto = "cantidadUsar" + str(idProducto)
                cantidadSolicitadaMandada = request.POST[nameCantidadProducto]
                listaCantidadesSolicitadas.append(cantidadSolicitadaMandada)
            
            lista = zip(listaProductosSolicitados,listaCantidadesSolicitadas)
            
            for producto, cantidad in lista:
                idProductoBD = producto
                cantidadProductoBD = cantidad
                
                registroProducto = ServiciosProductosGasto(servicio = Servicios.objects.get(id_servicio=idServicio),producto_gasto=ProductosGasto.objects.get(id_producto =idProductoBD),cantidad=cantidadProductoBD)
                
                registroProducto.save()
                
            if registroProducto:
                    
                request.session['registroPaquete'] = "El paquete ha sido gregado satisfactoriamente!"
                return redirect('/inventarioServicios/')
                
                
            else:
                request.session['registroPaquete'] = "Error en la base de datos, intentelo más tarde.."
                return redirect('/inventarioServicios/')

            
            
            
            
            
            
            
    
    
    else:
        return render(request,"1 Login/login.html")
        


        

def crearPaqueteServicioConProductosVenta(request):

    
    if "idSesion" in request.session:

       # Variables de sesión
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']
        idPerfil = idEmpleado
        idConfig = idEmpleado
       

        

        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
           #notificacionRentas
        notificacionRenta = notificacionRentas(request)

        #notificacionCitas
        notificacionCita = notificacionCitas(request)
        

        
        if request.method == "POST":
            
            idServicio= request.POST['idServicioPaqueteConProductosVenta'] 
            intServicio = int(idServicio)
            datosServicios = Servicios.objects.filter(id_servicio = intServicio)
            infoServicio = []
         
            for dato in datosServicios:
                nombreServicio = dato.nombre_servicio
                descripcion = dato.descripcion_servicio
                if dato.complementos_servicio == None:
                    complementos = "Ninguno"
                else:
                    complementos = dato.complementos_servicio
                tiempo_min = dato.tiempo_minimo
                tiempo_max = dato.tiempo_maximo
                precio = dato.precio_venta
                
                idSucursal = dato.sucursal_id
                
                datosSucursal = Sucursales.objects.filter(id_sucursal = idSucursal)
                for suc in datosSucursal:
                    nombreSucursal = suc.nombre
                    
            
                productosServicios = ServiciosProductosGasto.objects.filter(servicio_id__id_servicio = intServicio)
                productosServicio = []
                for productoServicio in productosServicios:
                    ids_producto_gasto = productoServicio.producto_gasto_id
                    
                    cantidad = productoServicio.cantidad
                    datosProducto = ProductosGasto.objects.filter(id_producto = ids_producto_gasto)
                    for dato in datosProducto:
                        codigo = dato.codigo_producto
                        idProducto = dato.id_producto
                        sku = dato.sku_producto
                        nombre = dato.nombre_producto
                        imagen = dato.imagen_producto
                        cantidad_existencia = dato.cantidad
                        productosServicio.append([idProducto,codigo,sku,nombre,imagen,cantidad,cantidad_existencia])
                    
                
                    
                    
                    
                    
                    
                    
                    
            
                infoServicio.append([nombreServicio,descripcion,complementos,tiempo_min,tiempo_max,precio,nombreSucursal])
            
            data = [i.json() for i in ProductosVenta.objects.filter(sucursal_id__id_sucursal = idSucursal)]
            productosVenta = ProductosVenta.objects.filter(sucursal_id__id_sucursal = idSucursal)
            productosVentaJavaScript = ProductosVenta.objects.filter(sucursal_id__id_sucursal = idSucursal)
            
        
            return render(request, "11 PaquetesServicios/editarPaqueteServicio.html", {"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado,
                                                                                       "infoServicio":infoServicio,"idServicio":idServicio,"productosVenta":productosVenta,"productosVentaJson":json.dumps(data),"productosVentaJavaScript":productosVentaJavaScript,
                                                                                       "productosServicio":productosServicio,"notificacionRenta":notificacionRenta, "notificacionCita":notificacionCita})
            
            
         

       

            
            
        return render(request, "11 PaquetesServicios/editarPaqueteServicio.html", {"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado,"notificacionRenta":notificacionRenta, "notificacionCita":notificacionCita
                                                                                
                                                                                   
                                                                                 
                                                                                   
        })
    
    else:
        return render(request,"1 Login/login.html")


def guardarPaqueteEditadoProductosVenta(request):

    if "idSesion" in request.session:

        
        
       
        if request.method == "POST":
            
            idServicio = request.POST['idServicio']
            productosSolicitados = request.POST['cantidadesProductosVenta']
            listaProductosSolicitados = productosSolicitados.split(",")
  
            listaCantidadesSolicitadas = []
           
            for idProducto in listaProductosSolicitados:
               
                nameCantidadProducto = "cantidadUsar" + str(idProducto)
                cantidadSolicitadaMandada = request.POST[nameCantidadProducto]
                listaCantidadesSolicitadas.append(cantidadSolicitadaMandada)
            
            lista = zip(listaProductosSolicitados,listaCantidadesSolicitadas)
            
            for producto, cantidad in lista:
                idProductoBD = producto
                cantidadProductoBD = cantidad
                
                registroProducto = ServiciosProductosGasto(servicio = Servicios.objects.get(id_servicio=idServicio),producto_gasto=ProductosGasto.objects.get(id_producto =idProductoBD),cantidad=cantidadProductoBD)
                
                registroProducto.save()
                
            if registroProducto:
                    
                request.session['registroPaquete'] = "El paquete ha sido gregado satisfactoriamente!"
                return redirect('/inventarioServicios/')
                
                
            else:
                request.session['registroPaquete'] = "Error en la base de datos, intentelo más tarde.."
                return redirect('/inventarioServicios/')


    
    else:
        return render(request,"1 Login/login.html")
        

        
def verProductoDePaqueteCorporalEditar(request):

    if "idSesion" in request.session:
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']
        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
        #notificacionRentas
        notificacionRenta = notificacionRentas(request)
        #notificacionCitas
        notificacionCita = notificacionCitas(request)
         #permisosEmpleado
        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)
        
        if request.method == "POST":
            
            idServicioCorporalEditar = request.POST['idServicioCorporalEditar']
            consultaDatosServicios = Servicios.objects.filter(id_servicio = idServicioCorporalEditar)
            consultaDeProductos = ServiciosProductosGasto.objects.filter(servicio__id_servicio = idServicioCorporalEditar)
            
            productosElegidos = []
            
            for producto in consultaDeProductos:
                idProducto = producto.producto_gasto_id
                cantidadUtilizadaDeProducto = producto.cantidad
                
                consultaProducto = ProductosGasto.objects.filter(id_producto = idProducto)
                for dato in consultaProducto:
                    codigoProducto = dato.codigo_producto
                    nombreProducto = dato.nombre_producto
                    imagenProducto = dato.imagen_producto
                    skuProducto = dato.sku_producto
                    
                productosElegidos.append([idProducto,cantidadUtilizadaDeProducto,
                                          codigoProducto,
                                          nombreProducto,
                                          imagenProducto,
                                          skuProducto])
                
                
            #Sucursal de servicio
            for datoServicio in consultaDatosServicios:
                sucursal = datoServicio.sucursal_id
                
                consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursal)
                for datoSucursal in consultaSucursal:
                    nombreSucursal = datoSucursal.nombre
             
            #Lista de productos a elegir para agregar más al servicio.
            todosLosProductosGasto = ProductosGasto.objects.filter(sucursal_id__id_sucursal = sucursal)
            arrayProductosGastoNoEnServicio = []
            
            
            consultaProductosUtilizados = ServiciosProductosGasto.objects.filter(servicio__id_servicio = idServicioCorporalEditar)
            idsProductosYaUtilizados = []
            
            for productoServ in consultaProductosUtilizados:
                idProducto = productoServ.producto_gasto_id
                idsProductosYaUtilizados.append(idProducto)
                
            for producto in todosLosProductosGasto:
                idProducto = producto.id_producto
                productoYaEstaEnServicio = False
                for productoEnServicio in idsProductosYaUtilizados:
                    idProductoEnServicio = productoEnServicio
                    
                    if idProducto == idProductoEnServicio:
                        productoYaEstaEnServicio = True
                
                if productoYaEstaEnServicio == False:
                    consultaProducto = ProductosGasto.objects.filter(id_producto = idProducto)
                    for dato in consultaProducto:
                        codigoProducto = dato.codigo_producto
                        skuProducto = dato.sku_producto
                        nombreProducto = dato.nombre_producto
                        existenciasProducto = dato.cantidad
                        descripcionProducto = dato.descripcion
                        imagenProducto = dato.imagen_producto
                        fechaAgregadoProducto = dato.fecha_alta
                    
                    arrayProductosGastoNoEnServicio.append([idProducto,codigoProducto, skuProducto, nombreProducto,
                                                     existenciasProducto, descripcionProducto, imagenProducto, fechaAgregadoProducto])
                    
                    
            
            
            #Lista de productos en formato JSON.
            data = [i.json() for i in ProductosGasto.objects.filter(sucursal_id__id_sucursal = sucursal)]
            
        
        
            return render(request, "11 PaquetesServicios/actualizarPaquete.html", {"consultaPermisos":consultaPermisos,"nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado,"notificacionRenta":notificacionRenta, "consultaDatosServicios":consultaDatosServicios, "productosElegidos":productosElegidos, "nombreSucursal":nombreSucursal, "arrayProductosGastoNoEnServicio":arrayProductosGastoNoEnServicio, "productosVentaJson":json.dumps(data),
                                                                                   "todosLosProductosGasto":todosLosProductosGasto, "notificacionCita":notificacionCita})
            

            
        return render(request, "11 PaquetesServicios/actualizarPaquete.html", {"consultaPermisos":consultaPermisos,"nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado,"notificacionRenta":notificacionRenta, "consultaDatosServicios":consultaDatosServicios, "productosElegidos":productosElegidos, "nombreSucursal":nombreSucursal, "notificacionCita":notificacionCita})
    
    else:
        return render(request,"1 Login/login.html")
    
    
def verProductoDePaqueteFacialEditar(request):

    if "idSesion" in request.session:


   #notificacionRentas
        notificacionRenta = notificacionRentas(request)
        if request.method == "POST":
            
            
            idProducto= request.POST['idProductoEditarPaqueteFacial'] 
            cantidadEnPaquete = request.POST['cantidadEnPaqueteFacial']
            datos = ProductosGasto.objects.filter(id_producto = idProducto)
            for x in datos :
                idP = x.id_producto
             

        
            return render(request, "11 PaquetesServicios/actualizarPaquete.html", {"idP":idP,"datos":datos,"cantidadEnPaquete":cantidadEnPaquete,"notificacionRenta":notificacionRenta})
            

            
        return render(request, "11 PaquetesServicios/actualizarPaquete.html", {"idP":idP,"datos":datos,"cantidadEnPaquete":cantidadEnPaquete,"notificacionRenta":notificacionRenta
                                                                                   
                                                                                 
                                                                                   
        })
    
    else:
        return render(request,"1 Login/login.html")
    

def actualizarPaquete(request):

    if "idSesion" in request.session:

        if request.method == "POST":
            idProductoPaqueteEditar = request.POST['idServicioEditar']
            
            #Nombre de servicio
            consultaServicio = Servicios.objects.filter(id_servicio = idProductoPaqueteEditar)
            for datoServicio in consultaServicio:
                nombreServicio = datoServicio.nombre_servicio
            
            nameInputEliminar = "eliminarProducto"
            nameInputCantidad = "cantidadProducto"
            
            consultaProductosServicio = ServiciosProductosGasto.objects.filter(servicio_id__id_servicio = idProductoPaqueteEditar)
            
            for producto in consultaProductosServicio:
                idProductoUtilizado = producto.producto_gasto_id
                
                nameInputPorProductoEliminar = nameInputEliminar+str(idProductoUtilizado)
                nameInputCantidadProductoEditar = nameInputCantidad+str(idProductoUtilizado)
                
                
            
                if request.POST.get(nameInputPorProductoEliminar, False): #Checkeado Eliminar producto
                    borrado = ServiciosProductosGasto.objects.get(producto_gasto_id = idProductoUtilizado, servicio_id__id_servicio = idProductoPaqueteEditar)
                    borrado.delete()
                    
                elif request.POST.get(nameInputPorProductoEliminar, True): #No checkeado, actualizar producto
                    cantidadProductoActualizar = request.POST[nameInputCantidadProductoEditar]
                    actualizacionProductoPaquete = ServiciosProductosGasto.objects.filter(producto_gasto_id = idProductoUtilizado).update(cantidad = cantidadProductoActualizar)
                
                
            #Agregar más productos.
            
            
            masProductos = request.POST['masProductos']
            if masProductos == "noMasProductos":
                
                if actualizacionProductoPaquete or borrado: 
                    request.session['paqueteProductoActualizado'] = "El paquete del servicio "+nombreServicio+" ha sido actualizado correctamente!"
                    return redirect('/inventarioServicios/')
            elif masProductos == "masProductos":
                productosAgregar = request.POST['idsProductosGastoServicio']
                listaProductosAgregar = productosAgregar.split(",")
                
                listaCantidadesSolicitadas = []
                
                for idProducto in listaProductosAgregar:
                    nameCantidadProducto = "cantidadUsar"+str(idProducto)
                    cantidadSolicitadaMandada = request.POST[nameCantidadProducto]
                    listaCantidadesSolicitadas.append(cantidadSolicitadaMandada)
                lista = zip(listaProductosAgregar,listaCantidadesSolicitadas)
                
                
                for producto, cantidad in lista:
                    idProductoBD = producto
                    cantidadProductoBD = cantidad
                    
                    registroProducto = ServiciosProductosGasto(servicio = Servicios.objects.get(id_servicio=idProductoPaqueteEditar),producto_gasto=ProductosGasto.objects.get(id_producto =idProductoBD),cantidad=cantidadProductoBD)
                    registroProducto.save()
                
                if actualizacionProductoPaquete or borrado or registroProducto: 
                    request.session['paqueteProductoActualizado'] = "El paquete del servicio "+nombreServicio+" ha sido actualizado correctamente!"
                    return redirect('/inventarioServicios/')
                

def actualizarPaqueteFacial(request):

    if "idSesion" in request.session:

        if request.method == "POST":
            idProductoPaqueteEditar = request.POST['idProducto']
            cantidadProductoEditar = request.POST['idProductoPaqueteEditar']
            nameInput = "eliminarProducto"
            
            if request.POST.get(nameInput, True): #Checkeado
                eliminarProducto = True
                borrado = ServiciosProductosGasto.objects.get(producto_gasto_id = idProductoPaqueteEditar)
                borrado.delete()
                
                return redirect('/inventarioPaqueteServicios/')
                      
            elif request.POST.get(nameInput, False): #No checkeado
                eliminarProducto = False
           
                actualizacionProductoPaquete = ServiciosProductosGasto.objects.filter(producto_gasto_id = idProductoPaqueteEditar).update(cantidad = cantidadProductoEditar)
                

                if actualizacionProductoPaquete: 
                    request.session['paqueteProductoActualizado'] = "El producto del paquete ha sido actualizado correctamente!"
                
                
               
           
                
                return redirect('/inventarioPaqueteServicios/')       
           


def inventarioPaqueteServicios(request):

    if "idSesion" in request.session:

       # Variables de sesión
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']
        idPerfil = idEmpleado
        idConfig = idEmpleado
        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
        
           #notificacionRentas
        notificacionRenta = notificacionRentas(request)

        #notificacionCitas
        notificacionCita = notificacionCitas(request)
        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)
      
        #------------servicios tipo corporales -------------
        
        productosPorServicio = []
        sucursalesPorServicio = []
        serviciosCorporales = Servicios.objects.filter(tipo_servicio="Corporal")
        for servicioCorporal in serviciosCorporales:
            idservicio_corporal = servicioCorporal.id_servicio
            id_sucursal = servicioCorporal.sucursal_id
            sucursales = Sucursales.objects.filter(id_sucursal = id_sucursal)
          
            for sucursal in sucursales:
                nombreSucursal = sucursal.nombre
            
                
            productosServicios = ServiciosProductosGasto.objects.filter(servicio_id__id_servicio = idservicio_corporal)
            productosServicio = []
            for productoServicio in productosServicios:
                ids_producto_gasto = productoServicio.producto_gasto_id
                ids_servicios = productoServicio.servicio_id
                cantidad = productoServicio.cantidad
                datosProducto = ProductosGasto.objects.filter(id_producto = ids_producto_gasto)
                for dato in datosProducto:
                    codigo = dato.codigo_producto
                    idProducto = dato.id_producto
                    sku = dato.sku_producto
                    nombre = dato.nombre_producto
                    cantidad_existencias = dato.cantidad
                productosServicio.append([idProducto,codigo,sku,nombre,cantidad,cantidad_existencias])
            
            productosPorServicio.append(productosServicio)
            sucursalesPorServicio.append(nombreSucursal)
            
                
       
      
            
        
  
        lista = zip(serviciosCorporales,productosPorServicio,sucursalesPorServicio)
        listaModal = zip(serviciosCorporales,productosPorServicio,sucursalesPorServicio)
        
        listaModalEditarCorporal = zip(serviciosCorporales,productosPorServicio,sucursalesPorServicio)
        
        listaModalJavaScript = zip(serviciosCorporales,productosPorServicio,sucursalesPorServicio)
            

        
        #------------servicios tipo faciales -------------
        
        productosPorServicio = []
        sucursalesPorServicio = []
        serviciosFaciales = Servicios.objects.filter(tipo_servicio="Facial")
        for servicioFacial in serviciosFaciales:
            idservicio_facial = servicioFacial.id_servicio
            id_sucursal = servicioFacial.sucursal_id
            sucursales = Sucursales.objects.filter(id_sucursal = id_sucursal)
          
            for sucursal in sucursales:
                nombreSucursal = sucursal.nombre
            
                
            productosServicios = ServiciosProductosGasto.objects.filter(servicio_id__id_servicio = idservicio_facial)
            productosServicio = []
            productosServicioJS =[]
            for productoServicio in productosServicios:
                ids_producto_gasto = productoServicio.producto_gasto_id
               
                cantidad = productoServicio.cantidad
                datosProducto = ProductosGasto.objects.filter(id_producto = ids_producto_gasto)
                for dato in datosProducto:
                    codigo = dato.codigo_producto
                    idProducto = dato.id_producto
                    sku = dato.sku_producto
                    nombre = dato.nombre_producto
                productosServicio.append([idProducto,codigo,sku,nombre,cantidad])
                productosServicioJS.append([idProducto,codigo,sku,nombre,cantidad])
            
            productosPorServicio.append(productosServicio)
            sucursalesPorServicio.append(nombreSucursal)
            
                
       
      
            
        
  
        listaFaciales = zip(serviciosFaciales,productosPorServicio,sucursalesPorServicio)
        listaModalFaciales = zip(serviciosFaciales,productosPorServicio,sucursalesPorServicio)
        
    
        if "paqueteProductoActualizado" in request.session:
            paqueteProductoActualizado = request.session['paqueteProductoActualizado']
            del request.session['paqueteProductoActualizado']
          
            return render(request, "11 PaquetesServicios/inventarioPaqueteServicios.html",  {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
                                                                         
                                                                    "productosPorServicio":productosPorServicio,"lista":lista,"serviciosCorporales":serviciosCorporales,"productosServicio":productosServicio,"listaModal":listaModal,"listaFaciales":listaFaciales,
                                                                    "listaModalFaciales":listaModalFaciales,"listaModalEditarCorporal":listaModalEditarCorporal,"listaModalJavaScript":listaModalJavaScript,"productosServicioJS":productosServicioJS,
                                                                    "paqueteProductoActualizado":paqueteProductoActualizado,"notificacionRenta":notificacionRenta, "notificacionCita":notificacionCita
        })

        if "productoBorrado" in request.session:
            paqueteProductoBorrado = request.session['productoBorrado']
            del request.session['productoBorrado']
          
            return render(request, "11 PaquetesServicios/inventarioPaqueteServicios.html",  {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
                                                                         
                                                                    "productosPorServicio":productosPorServicio,"lista":lista,"serviciosCorporales":serviciosCorporales,"productosServicio":productosServicio,"listaModal":listaModal,"listaFaciales":listaFaciales,
                                                                    "listaModalFaciales":listaModalFaciales,"listaModalEditarCorporal":listaModalEditarCorporal,"listaModalJavaScript":listaModalJavaScript,"productosServicioJS":productosServicioJS,
                                                                    "paqueteProductoBorrado":paqueteProductoBorrado,"notificacionRenta":notificacionRenta, "notificacionCita":notificacionCita
        })

        
        
        
        
       
        
        
            
        return render(request, "11 PaquetesServicios/inventarioPaqueteServicios.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
                                                                         
                                                                    "productosPorServicio":productosPorServicio,"lista":lista,"serviciosCorporales":serviciosCorporales,"productosServicio":productosServicio,"listaModal":listaModal,"listaFaciales":listaFaciales,
                                                                    "listaModalFaciales":listaModalFaciales,"listaModalEditarCorporal":listaModalEditarCorporal,"listaModalJavaScript":listaModalJavaScript,"productosServicioJS":productosServicioJS,"notificacionRenta":notificacionRenta, "notificacionCita":notificacionCita
        })
    
    else:
        return render(request,"1 Login/login.html")
    



def altaDescuentos(request):

    if "idSesion" in request.session:

        # Variables de sesión
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        idPerfil = idEmpleado
        idConfig = idEmpleado
    
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']

        # Variable para Menu
        estaEnAltaEmpleado = True

        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
        
           #notificacionRentas
        notificacionRenta = notificacionRentas(request)
        
        #notificacionCitas
        notificacionCita = notificacionCitas(request)
        
         #permisosEmpleado
        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)


        if request.method == "POST":
            nombre_descuento = request.POST['nombreDescuento']  #Requerido
            porcentaje = request.POST['porcentajeDescuento']  #Requerido
            descripcion_descuento= request.POST['descripcion']  #Requerido
            fechaAlta = datetime.today().strftime('%Y-%m-%d') #Requerido
            #fechaAlta = datetime.now()
            
    
                
             

            registroDescuento = Descuentos(nombre_descuento = nombre_descuento,
                    porcentaje = porcentaje,
                    fecha_agregado = fechaAlta,
                    descripcion_descuento = descripcion_descuento)
      
   
            registroDescuento.save()
           

            if registroDescuento:
                request.session["descuentoAgregado"] = "El descuento "+nombre_descuento + "ha sido gregado satisfactoriamente!"
                return redirect("/descuentos/")


                    
           
                    

        return render(request, "12 Descuentos/altaDescuentos.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado,"estaEnAltaEmpleado":estaEnAltaEmpleado,"notificacionRenta":notificacionRenta, "notificacionCita":notificacionCita})
    else:
        return render(request,"1 Login/login.html")


   
def descuentos(request):

    if "idSesion" in request.session:

       # Variables de sesión
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']
        idPerfil = idEmpleado
        idConfig = idEmpleado
        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
           #notificacionRentas
        notificacionRenta = notificacionRentas(request)

        #notificacionCitas
        notificacionCita = notificacionCitas(request)


        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)
        

        descuentos_totales = Descuentos.objects.all()
        descuentos_totales_modal_editar = Descuentos.objects.all()
        
        if "porcentajeActualizado" in request.session:
            porcentajeActualizado = request.session['porcentajeActualizado']
            del request.session['porcentajeActualizado']
          
            return render(request, "12 Descuentos/descuentos.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado,"descuentos_totales":descuentos_totales,"descuentos_totales_modal_editar":descuentos_totales_modal_editar,
                                                                     "porcentajeActualizado":porcentajeActualizado,"notificacionRenta":notificacionRenta,"notificacionCita":notificacionCita
                                                                        
        })

        if "descuentoAgregado" in request.session:
            descuentoAgregado = request.session['descuentoAgregado']
            del request.session['descuentoAgregado']
          
            return render(request, "12 Descuentos/descuentos.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado,"descuentos_totales":descuentos_totales,"descuentos_totales_modal_editar":descuentos_totales_modal_editar,
                                                                     "descuentoAgregado":descuentoAgregado,"notificacionRenta":notificacionRenta,"notificacionCita":notificacionCita
                                                                        
        })
    


            
        return render(request, "12 Descuentos/descuentos.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado,"descuentos_totales":descuentos_totales,"descuentos_totales_modal_editar":descuentos_totales_modal_editar,"notificacionRenta":notificacionRenta, "notificacionCita":notificacionCita
                                                                        
        })
    
    else:
        return render(request,"1 Login/login.html")


      
    
def actualizarDescuentos(request):

    if "idSesion" in request.session:

        
       

        if request.method == "POST":
            idDescuentoActualizado = request.POST['idDescuentoEditar']
            porcentaje_actualizado = request.POST['porcentajeDescuentoEditar']
            descripcion_actualizado = request.POST['descripcion']
            
            if descripcion_actualizado == "":
                
                actualizarDescuento = Descuentos.objects.filter(id_descuento = idDescuentoActualizado).update(porcentaje=porcentaje_actualizado)
                
                if actualizarDescuento:
                
                    request.session['porcentajeActualizado'] = "El descuento ha sido actualizado con el porcentaje " + porcentaje_actualizado + "%" + " " + "de manera satisfactoria."
                    return redirect('/descuentos/')
                
            else:
                actualizarDescuento = Descuentos.objects.filter(id_descuento = idDescuentoActualizado).update(porcentaje=porcentaje_actualizado,descripcion_descuento=descripcion_actualizado)
                
                if actualizarDescuento:
                
                    request.session['porcentajeActualizado'] = "El descuento ha sido actualizado de manera satisfactoria."
                    return redirect('/descuentos/')
            
        return redirect('/descuentos/')
    else:
        return render(request,"1 Login/login.html")
    



def seleccionarSucursalVentas(request):

    if "idSesion" in request.session:

        # Variables de sesión
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        idPerfil = idEmpleado
        idConfig = idEmpleado
    
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']

        # Variable para Menu
        estaEnAltaEmpleado = True

        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
           #notificacionRentas
        notificacionRenta = notificacionRentas(request)

        #notificacionCitas
        notificacionCita = notificacionCitas(request)


        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)

        sucursales = []
        if tipoUsuario == "esAdmin":
        # retornar sucursales
            listsucursales = Sucursales.objects.all()
            for dato in listsucursales:
                idSucursal =dato.id_sucursal
                nombreSucursal = dato.nombre
                direccionSucursal = dato.direccion
                sucursales.append([idSucursal,nombreSucursal, direccionSucursal])

        else:
          
            empleado = Empleados.objects.filter(id_empleado =idEmpleado)
            for sucursal in empleado:
                idSucursal =sucursal.id_sucursal_id
                
            datoSucursal = Sucursales.objects.filter(id_sucursal = idSucursal)
            for dato in datoSucursal:
                nombreSucursal = dato.nombre
                direccionSucursal = dato.direccion
            sucursales.append([idSucursal, nombreSucursal, direccionSucursal])
        
        datosVendedor = Empleados.objects.filter(id_empleado =idEmpleado )
        
        
      

        return render(request, "13 Ventas/seleccionarSucursalVentas.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado,"estaEnAltaEmpleado":estaEnAltaEmpleado, "sucursales":sucursales,
                                                                            "datosVendedor":datosVendedor,"notificacionRenta":notificacionRenta, "notificacionCita":notificacionCita})
    else:
        return render(request,"1 Login/login.html")
    
    




def realizarVenta(request):

    if "idSesion" in request.session:

        # Variables de sesión
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        idPerfil = idEmpleado
        idConfig = idEmpleado
    
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']

        # Variable para Menu
        estaEnAltaEmpleado = True

        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
           #notificacionRentas
        notificacionRenta = notificacionRentas(request)

        #notificacionCitas
        notificacionCita = notificacionCitas(request)

        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)


        
        # retornar productos
        productosVentas = ProductosVenta.objects.all()
        
        if request.method == "POST":
        
            
                
            sucursal = request.POST['sucursal'] #Requerido
            fechaAlta = datetime.today().strftime('%Y-%m-%d') #Requerido
            #fechaAlta = datetime.now()
            
            datosSucursalSeleccinoada = Sucursales.objects.filter(id_sucursal =sucursal)
            for sucursalId in datosSucursalSeleccinoada:
                idSeleccionada = sucursalId.id_sucursal
                nombreSucursalSeleccionada = sucursalId.nombre
                
            
            productosVenta = ProductosVenta.objects.filter(sucursal_id__id_sucursal = idSeleccionada, cantidad__gte=1)
            productosVentaJava = ProductosVenta.objects.filter(sucursal_id__id_sucursal = idSeleccionada)
           
            concepto =""
            
            data = [i.json() for i in ProductosVenta.objects.filter(sucursal_id__id_sucursal = idSeleccionada)]
            clientes = Clientes.objects.filter(estado ="A")
            datosVendedor = Empleados.objects.filter(id_empleado =idEmpleado ) 
              
            descuentos = Descuentos.objects.all() 
           
            dataServicios = [i.jsonServicios() for i in Servicios.objects.filter(sucursal_id__id_sucursal = idSeleccionada)]
            serviciosVenta = Servicios.objects.filter(sucursal_id__id_sucursal = idSeleccionada)

            datosServiciosQueSePuedenVender = []
            datosServiciosQueSePuedenVenderJava = []
            productosXServicio = []
            for servicio in serviciosVenta:
                idServicio = servicio.id_servicio
                tipo = servicio.tipo_servicio
                nombre = servicio.nombre_servicio
                precio_venta = servicio.precio_venta


                consultaProductosQueUtilizaElServicio = ServiciosProductosGasto.objects.filter(servicio = idServicio) #2 pos. 


                servicioSePuedeVender = False
                productosQueUtiliza = []
                cuantosCaben = []
                for producto in consultaProductosQueUtilizaElServicio:
                    idProducto = producto.producto_gasto_id
                    cantidadQueSeUtilizaAlVender = producto.cantidad #Si se vende, se utiliza 1 producto
                    consultaDatosProducto = ProductosGasto.objects.filter(id_producto = idProducto)
                    for datoProducto in consultaDatosProducto:
                        cantidadEnExistencia = datoProducto.cantidad # 4 unidades
                        nombreProducto = datoProducto.nombre_producto
                        codigo = datoProducto.codigo_producto
                    if cantidadEnExistencia >= cantidadQueSeUtilizaAlVender:
                        division = cantidadEnExistencia/cantidadQueSeUtilizaAlVender
                        divisionRedondeada = round(division)
                        cuantosCaben.append(divisionRedondeada)
                        #Si se puede vendeeeeerr... 
                        servicioSePuedeVender = True
                        #Guardar los productos
                        productosQueUtiliza.append([codigo,nombreProducto,cantidadQueSeUtilizaAlVender])
                    else:
                        #No se puede venderrrrr.... 
                        servicioSePuedeVender = False
                
                if servicioSePuedeVender == True:
                    menor = cuantosCaben[0]
                    for dato in cuantosCaben:
                        if dato < menor:
                            menor = dato
                        
                    
                    datosServiciosQueSePuedenVender.append([idServicio,tipo, nombre, precio_venta,menor])
                    datosServiciosQueSePuedenVenderJava.append([idServicio,tipo, nombre, precio_venta,menor])
                    productosXServicio.append(productosQueUtiliza)
                    

            listaZipeada = zip(datosServiciosQueSePuedenVender, productosXServicio)
            
            limiteCreditoSucursal = ConfiguracionCredito.objects.filter(sucursal_id__id_sucursal = idSeleccionada)
            montoLimite =0
           
            montoLimiteStr =""
            for limite in limiteCreditoSucursal:
                if limite.activo == "S":
                    montoLimite = float(limite.limite_credito)
              
                    montoLimiteStr =str(limite.limite_credito)
            limitesClientes = []
            for cliente in clientes:
                idCliente = cliente.id_cliente
                consultaCreditosPendientes = Creditos.objects.filter(cliente_id__id_cliente = idCliente, estatus ="Pendiente")
                creditoFaltantePorPagar= 0
                creditoLibre = 0
                creditoSolicitado =0
                creditoPagado = 0
                for credito in consultaCreditosPendientes:
                    montoTotal = credito.monto_pagar
                    montoPagado = credito.monto_pagado
                    montoRestante = credito.monto_restante
                    
                    creditoSolicitado = creditoSolicitado + montoTotal
                    creditoPagado = creditoPagado + montoPagado
                    creditoFaltantePorPagar = creditoFaltantePorPagar + montoRestante
                
                creditoLibre = montoLimite - creditoFaltantePorPagar
                limitesClientes.append([creditoLibre,creditoFaltantePorPagar])

            
            listaLimites = zip (clientes,limitesClientes)
                


           

               

            

        return render(request, "13 Ventas/realizarVenta.html", {"consultaPermisos":consultaPermisos,"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado,"estaEnAltaEmpleado":estaEnAltaEmpleado, "productosVenta":productosVenta,
                                                                "serviciosVenta":serviciosVenta,"clientes":clientes,"datosVendedor":datosVendedor,"data":json.dumps(data),"productosVentaJava":productosVentaJava,"descuentos":descuentos, "dataServicios":json.dumps(dataServicios), "listaZipeada":listaZipeada,
                                                                "datosServiciosQueSePuedenVenderJava":datosServiciosQueSePuedenVenderJava, "sucursal":sucursal,"listaLimites":listaLimites,"montoLimiteStr":montoLimiteStr,
                                                                "notificacionRenta":notificacionRenta, "nombreSucursalSeleccionada":nombreSucursalSeleccionada, "notificacionCita":notificacionCita})
    else:
        return render(request,"1 Login/login.html")
    
    
    

def ventas(request):

    if "idSesion" in request.session:

        # Variables de sesión
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']
        idPerfil = idEmpleado
        idConfig = idEmpleado
        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
           #notificacionRentas
        notificacionRenta = notificacionRentas(request)

        #notificacionCitas
        notificacionCita = notificacionCitas(request)

        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)
        
        contadorVentasEfectivo = 0
        contadorVentasTarjeta = 0
        contadorVentasTransferencia = 0
        listaVentasEnEfectivoContador = Ventas.objects.filter(tipo_pago = "Efectivo")
        for contador in listaVentasEnEfectivoContador:
            contadorVentasEfectivo = contadorVentasEfectivo +1
            
            
        listaVentasEnTarjetaContador = Ventas.objects.filter(tipo_pago = "Tarjeta")
        for contador in listaVentasEnTarjetaContador:
            contadorVentasTarjeta = contadorVentasTarjeta +1
            
        listaVentasEnTransferenciaContador = Ventas.objects.filter(tipo_pago = "Transferencia")
        for contador in listaVentasEnTransferenciaContador:
            contadorVentasTransferencia = contadorVentasTransferencia +1
        
        #Consultas Todas las ventas.
        
        listaventasTotales = Ventas.objects.all()   #WTF AQUI xD
        quienVendio = [] #id, nombre y sucursal del empleado
        clientes = [] #Nombre
        sucursales = []
        #Descuentos
        booleanDescuento = []
        totalesSinDescuento = []
        descuentos = []
        datosDescuentos = []
        #Productos
        boolProductosVenta = []
        datosProductosVenta = []
        #Servicios Faciales
        boolServiciosCoorporales = []
        datosServiciosCoorporales = []
        #Servicios Corporales
        boolServiciosFaciales = []
        datosServiciosFaciales = []

        #Tratamientos
        boolTratamientos = []
        datosTratamientos = []

        #Paquetes tratamientos
        boolPaquetesTratamientos = []
        datosPaquetesTratamientos = []
        
        #Creditos 
        boolCredito = []
        idsCreditos = []
        boolPagado = []
        
        concepto = []
        contadorVenta = 0
        for venta in listaventasTotales:
            contadorVenta = contadorVenta+1
            idVenta = venta.id_venta
            empleado_vendedor = venta.empleado_vendedor_id
            cliente = venta.cliente_id
            sucursal = venta.sucursal_id
            descuento = venta.descuento_id
            monto_total_pagado = venta.monto_pagar
            codigosProductos = venta.ids_productos
            serviciosCorporales = venta.ids_servicios_corporales
            serviciosFaciales = venta.ids_servicios_faciales
            idTratamiento = venta.id_tratamiento_vendido_id
            idPaquete = venta.id_paquete_promo_vendido_id
            
            credito = venta.credito
            if credito == "N":
                boolCredito.append("Sin credito")
                idsCreditos.append("Sin credito")
                boolPagado.append("Sin credito")
            else:
                boolCredito.append("Si")
                consultaCredito = Creditos.objects.filter(venta_id__id_venta = idVenta)
                if consultaCredito:
                    for datoCredito in consultaCredito:
                        idCredito = datoCredito.id_credito
                        restante = datoCredito.monto_restante
                    idsCreditos.append(idCredito)
                    if restante == 0:
                        boolPagado.append("Si")
                    else:
                        boolPagado.append("No")
                else:
                    idsCreditos.append("error")
                    boolPagado.append("error")
                
            

            #Datos empleado vendedor
            consultaEmpleadoVendedor = Empleados.objects.filter(id_empleado = empleado_vendedor)
            for datoEmpleadoVendedor in consultaEmpleadoVendedor:
                idEmpleado = datoEmpleadoVendedor.id_empleado
                nombreEmpleado = datoEmpleadoVendedor.nombres
                
            quienVendio.append([idEmpleado, nombreEmpleado])

            #Datos cliente
            if cliente == None:
                clientes.append("Cliente Momentaneo")
            else:
                consultaCliente = Clientes.objects.filter(id_cliente = cliente)
                for datoCliente in consultaCliente:
                    nombreCliente = datoCliente.nombre_cliente
                    apellidoCliente = datoCliente.apellidoPaterno_cliente

                    nombreCompletoCliente = nombreCliente + " "+ apellidoCliente
                    clientes.append(nombreCompletoCliente)
                    
            #Datos sucursal 
            consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursal)
            for datoSucursal in consultaSucursal:
                nombreSucursal = datoSucursal.nombre
            sucursales.append(nombreSucursal)
            
            #Datos descuento
            if descuento == None:
                booleanDescuento.append("Sin descuento")
                totalesSinDescuento.append("Total normal")
                descuentos.append("jeje")
                datosDescuentos.append("sin datos")
            else:
                booleanDescuento.append("Con descuento")
                consultaDescuento = Descuentos.objects.filter(id_descuento = descuento)
                
                for datoDescuento in consultaDescuento:
                    porcentaje = datoDescuento.porcentaje
                    nombreDescuento = datoDescuento.nombre_descuento
                datosDescuentos.append([porcentaje,nombreDescuento])

                intPorcentaje = int(porcentaje)
                    
                restaParaSaberCuantoSePago = 100 - intPorcentaje  #85
                
                restaConPunto = "."+str(restaParaSaberCuantoSePago) #.85
                
                costoReal = monto_total_pagado/float(restaConPunto) #376.470588
                
                costoRealRedondeado = round(costoReal)
                totalesSinDescuento.append(costoRealRedondeado)
                
                porcentajeDescuento = "."+str(intPorcentaje) #.15
                descuento = costoReal*float(porcentajeDescuento)
                
                descuentoRedondeado = round(descuento)
                descuentos.append(descuentoRedondeado)
                
             #Datos Productos comprados
            #if codigosProductos == "":
            if not codigosProductos:  # Verifica si codigosProductos es None o una cadena vacía    
                boolProductosVenta.append("Sin productos comprados")
                datosProductosVenta.append("Sin productos")
                concepto.append("Sin concepto")
            else:
                boolProductosVenta.append("Productos Comprados")
                cantidadesProductos = venta.cantidades_productos
                
                datosProductos = []
                arregloCodigos = codigosProductos.split(",")
                arregloCantidades = cantidadesProductos.split(",")
                listaProductosEfectivo = zip(arregloCodigos, arregloCantidades)
                for codigo, cantidad in listaProductosEfectivo:
                    codigoProducto = str(codigo)
                    cantidadProducto = str(cantidad)
                    if "PV" in codigoProducto:
                        concepto.append("Venta")
                        consultaProducto = ProductosVenta.objects.filter(codigo_producto = codigoProducto)
                    else:
                        concepto.append("Renta")
                        consultaProducto = ProductosRenta.objects.filter(codigo_producto = codigoProducto)
                    for datoProducto in consultaProducto:
                        nombrePro = datoProducto.nombre_producto
                        
                    consultaProducto= ProductosRenta.objects.filter(codigo_producto = codigoProducto)
                    for datoProducto in consultaProducto:
                        nombrePro = datoProducto.nombre_producto
                    
                    
                    datosProductos.append([codigoProducto,nombrePro,cantidadProducto])
                datosProductosVenta.append(datosProductos)

                
            #Datos Servicios Coorporales
            if not serviciosCorporales:
                boolServiciosCoorporales.append("Sin servicios coorporales")
                datosServiciosCoorporales.append("Sin productos")
            else:
                boolServiciosCoorporales.append("Servicios coorporales Comprados")
                cantidadesServiciosCorporales = venta.cantidades_servicios_corporales
                
                datosServiciosCorp = []
                arregloIdsServiciosCorporales = serviciosCorporales.split(",")
                arregloCantidadesServiciosCorporales = cantidadesServiciosCorporales.split(",")
                listaServiciosCorporalesEfectivo = zip(arregloIdsServiciosCorporales, arregloCantidadesServiciosCorporales)
                for idd, cantidad in listaServiciosCorporalesEfectivo:
                    intIdProducto = int(idd)
                    strIdProducto = str(idd)
                    cantidadProducto = str(cantidad)
                    consultaServicio = Servicios.objects.filter(id_servicio = intIdProducto)
                    for datoServicio in consultaServicio:
                        nombreServicio = datoServicio.nombre_servicio
                    
                    datosServiciosCorp.append([strIdProducto,nombreServicio,cantidadProducto])
                datosServiciosCoorporales.append(datosServiciosCorp)
                
            #Datos Servicios Faciales
            if not serviciosFaciales:
                boolServiciosFaciales.append("Sin servicios faciales")
                datosServiciosFaciales.append("Sin servicios")
            else:
                
                boolServiciosFaciales.append("Servicios coorporales Comprados")
                cantidadesServiciosFacialesEfectivo = venta.cantidades_servicios_faciales
                
                datosServicios = []
                arregloIdsServiciosFaciales = serviciosFaciales.split(",")
                arregloCantidadesServiciosFaciales = cantidadesServiciosFacialesEfectivo.split(",")
                listaServiciosFacialesEfectivo = zip(arregloIdsServiciosFaciales, arregloCantidadesServiciosFaciales)
                for idd, cantidad in listaServiciosFacialesEfectivo:
                    intIdProducto = int(idd)
                    strIdProducto = str(idd)
                    cantidadProducto = str(cantidad)
                    consultaServicio = Servicios.objects.filter(id_servicio = intIdProducto)
                    for datoServicio in consultaServicio:
                        nombreServicio = datoServicio.nombre_servicio
                    
                    datosServicios.append([strIdProducto,nombreServicio,cantidadProducto])
                datosServiciosFaciales.append(datosServicios)

            #DATOS TRATAMIENTO  
            if idTratamiento == None:
                boolTratamientos.append("Sin tratamiento")
                datosTratamientos.append("Sin tratamientos")
            else:
                boolTratamientos.append("Tratamiento comprado")
                consultaTratamiento = Tratamientos.objects.filter(id_tratamiento = idTratamiento)

                datosTratamiento1 = []
                for datoTratamiento in consultaTratamiento:
                    codigoTratamiento = datoTratamiento.codigo_tratamiento
                    tipoTratamiento = datoTratamiento.tipo_tratamiento
                    nombreTratamiento = datoTratamiento.nombre_tratamiento
                    datosTratamiento1.append([codigoTratamiento, tipoTratamiento, nombreTratamiento])
                datosTratamientos.append(datosTratamiento1)

            #datos paquete
            if idPaquete == None:
                boolPaquetesTratamientos.append("Sin paquete de tratamientos")
                datosPaquetesTratamientos.append("Sin paquete de tratamientos")
            else:
                boolPaquetesTratamientos.append("Paquete comprado")
                consultaPaquete = PaquetesPromocionTratamientos.objects.filter(id_paquete_tratamiento = idPaquete)

                datosPaquete = []
                for datoPaquete in consultaPaquete:
                    nombrePaquete = datoPaquete.nombre_paquete
                    sesionesPaquete = datoPaquete.numero_sesiones
                    precioPaquete = datoPaquete.precio_por_paquete 
                    datosPaquete.append([nombrePaquete, sesionesPaquete,precioPaquete])
                datosPaquetesTratamientos.append(datosPaquete)


        listaVentas = zip(listaventasTotales, quienVendio, clientes, sucursales, booleanDescuento,totalesSinDescuento, descuentos,datosDescuentos, boolProductosVenta,
         datosProductosVenta, boolServiciosCoorporales, datosServiciosCoorporales, boolServiciosFaciales, datosServiciosFaciales, boolCredito, idsCreditos,boolPagado,
          concepto,boolTratamientos,datosTratamientos, boolPaquetesTratamientos, datosPaquetesTratamientos)
        
       
       
        
        

        
        
        
        #Consultas EFECTIVOOOO 
        
        listaVentasEnEfectivo = Ventas.objects.filter(tipo_pago = "Efectivo")
        quienVendioEfectivo = [] #id, nombre y sucursal del empleado
        clienteEfectivo = [] #Nombre
        sucursalesEfectivo = []
        #Descuentos
        booleanDescuentoEfectivo = []
        totalesSinDescuentoEfectivo = []
        descuentosEfectivo = []
        datosDescuentosEfectivo = []
        #Productos
        boolProductosVentaEfectivo = []
        datosProductosVentaEfectivo = []
        #Servicios Faciales
        boolServiciosCoorporalesEfectivo = []
        datosServiciosCoorporalesEfectivo = []
        #Servicios Corporales
        boolServiciosFacialesEfectivo = []
        datosServiciosFacialesEfectivo = []
        #Tratamientos
        boolTratamientosEfectivo = []
        datosTratamientosEfectivo = []

        #PaquetesTratamientos
        boolPaquetesTratamientosEfectivo = []
        datosPaquetesTratamientosEfectivo = []
        
        #Creditos 
        boolCreditoEfectivo = []
        idsCreditosEfectivo = []
        boolPagadoEfectivo = []
        
        for ventaEfectivo in listaVentasEnEfectivo:
            idVenta = ventaEfectivo.id_venta
            empleado_vendedor = ventaEfectivo.empleado_vendedor_id
            cliente = ventaEfectivo.cliente_id
            sucursal = ventaEfectivo.sucursal_id
            descuento = ventaEfectivo.descuento_id
            monto_total_pagado = ventaEfectivo.monto_pagar
            codigosProductos = ventaEfectivo.ids_productos
            serviciosCorporales = ventaEfectivo.ids_servicios_corporales
            serviciosFaciales = ventaEfectivo.ids_servicios_faciales
            idTratamiento = ventaEfectivo.id_tratamiento_vendido_id
            idPaquete = ventaEfectivo.id_paquete_promo_vendido_id

            
            credito = ventaEfectivo.credito
            if credito == "N":
                boolCreditoEfectivo.append("Sin credito")
                idsCreditosEfectivo.append("Sin credito")
                boolPagadoEfectivo.append("Sin credito")
            else:
                boolCreditoEfectivo.append("Si")
                consultaCredito = Creditos.objects.filter(venta_id__id_venta = idVenta)
                if consultaCredito:
                    for datoCredito in consultaCredito:
                        idCredito = datoCredito.id_credito
                        restante = datoCredito.monto_restante
                    idsCreditosEfectivo.append(idCredito)
                    if restante == 0:
                        boolPagadoEfectivo.append("Si")
                    else:
                        boolPagadoEfectivo.append("No")
                else:
                    idsCreditosEfectivo.append("error")
                
            

            #Datos empleado vendedor
            consultaEmpleadoVendedor = Empleados.objects.filter(id_empleado = empleado_vendedor)
            for datoEmpleadoVendedor in consultaEmpleadoVendedor:
                idEmpleado = datoEmpleadoVendedor.id_empleado
                nombreEmpleado = datoEmpleadoVendedor.nombres
                
            quienVendioEfectivo.append([idEmpleado, nombreEmpleado])

            #Datos cliente
            if cliente == None:
                clienteEfectivo.append("Cliente Momentaneo")
            else:
                consultaCliente = Clientes.objects.filter(id_cliente = cliente)
                for datoCliente in consultaCliente:
                    nombreCliente = datoCliente.nombre_cliente
                    apellidoCliente = datoCliente.apellidoPaterno_cliente

                    nombreCompletoCliente = nombreCliente + " "+ apellidoCliente
                    clienteEfectivo.append(nombreCompletoCliente)
                    
            #Datos sucursal 
            consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursal)
            for datoSucursal in consultaSucursal:
                nombreSucursal = datoSucursal.nombre
            sucursalesEfectivo.append(nombreSucursal)
            
            #Datos descuento
            if descuento == None:
                booleanDescuentoEfectivo.append("Sin descuento")
                totalesSinDescuentoEfectivo.append("Total normal")
                descuentosEfectivo.append("jeje")
                datosDescuentosEfectivo.append("sin datos")
            else:
                booleanDescuentoEfectivo.append("Con descuento")
                consultaDescuento = Descuentos.objects.filter(id_descuento = descuento)
                
                for datoDescuento in consultaDescuento:
                    porcentaje = datoDescuento.porcentaje
                    nombreDescuento = datoDescuento.nombre_descuento
                datosDescuentosEfectivo.append([porcentaje,nombreDescuento])

                intPorcentaje = int(porcentaje)
                    
                restaParaSaberCuantoSePago = 100 - intPorcentaje  #85
                
                restaConPunto = "."+str(restaParaSaberCuantoSePago) #.85
                
                costoReal = monto_total_pagado/float(restaConPunto) #376.470588
                
                costoRealRedondeado = round(costoReal)
                totalesSinDescuentoEfectivo.append(costoRealRedondeado)
                
                porcentajeDescuento = "."+str(intPorcentaje) #.15
                descuento = costoReal*float(porcentajeDescuento)
                
                descuentoRedondeado = round(descuento)
                descuentosEfectivo.append(descuentoRedondeado)
                
            #Datos Productos comprados
            if not codigosProductos:
                boolProductosVentaEfectivo.append("Sin productos comprados")
                datosProductosVentaEfectivo.append("Sin productos")
            else:
                boolProductosVentaEfectivo.append("Productos Comprados")
                cantidadesProductos = ventaEfectivo.cantidades_productos
                
                datosProductos = []
                arregloCodigos = codigosProductos.split(",")
                arregloCantidades = cantidadesProductos.split(",")
                listaProductosEfectivo = zip(arregloCodigos, arregloCantidades)
                for codigo, cantidad in listaProductosEfectivo:
                    codigoProducto = str(codigo)
                    cantidadProducto = str(cantidad)
                    consultaProducto = ProductosVenta.objects.filter(codigo_producto = codigoProducto)
                    for datoProducto in consultaProducto:
                        nombrePro = datoProducto.nombre_producto
                        
                    consultaProducto= ProductosRenta.objects.filter(codigo_producto = codigoProducto)
                    for datoProducto in consultaProducto:
                        nombrePro = datoProducto.nombre_producto
                    
                    
                    datosProductos.append([codigoProducto,nombrePro,cantidadProducto])
                datosProductosVentaEfectivo.append(datosProductos)
                
            #Datos Servicios Coorporales
            if  not serviciosCorporales:
                boolServiciosCoorporalesEfectivo.append("Sin servicios coorporales")
                datosServiciosCoorporalesEfectivo.append("Sin productos")
            else:
                boolServiciosCoorporalesEfectivo.append("Servicios coorporales Comprados")
                cantidadesServiciosCorporales = ventaEfectivo.cantidades_servicios_corporales
                
                datosServicios = []
                arregloIdsServiciosCorporales = serviciosCorporales.split(",")
                arregloCantidadesServiciosCorporales = cantidadesServiciosCorporales.split(",")
                listaServiciosCorporalesEfectivo = zip(arregloIdsServiciosCorporales, arregloCantidadesServiciosCorporales)
                for idd, cantidad in listaServiciosCorporalesEfectivo:
                    intIdProducto = int(idd)
                    strIdProducto = str(idd)
                    cantidadProducto = str(cantidad)
                    consultaServicio = Servicios.objects.filter(id_servicio = intIdProducto)
                    for datoServicio in consultaServicio:
                        nombreServicio = datoServicio.nombre_servicio
                    
                    datosServicios.append([strIdProducto,nombreServicio,cantidadProducto])
                datosServiciosCoorporalesEfectivo.append(datosServicios)
                
            #Datos Servicios Faciales
            if not serviciosFaciales:
                boolServiciosFacialesEfectivo.append("Sin servicios faciales")
                datosServiciosFacialesEfectivo.append("Sin servicios")
            else:
                boolServiciosFacialesEfectivo.append("Servicios coorporales Comprados")
                cantidadesServiciosFacialesEfectivo = ventaEfectivo.cantidades_servicios_faciales
                
                datosServicios = []
                arregloIdsServiciosFaciales = serviciosFaciales.split(",")
                arregloCantidadesServiciosFaciales = cantidadesServiciosFacialesEfectivo.split(",")
                listaServiciosFacialesEfectivo = zip(arregloIdsServiciosCorporales, arregloCantidadesServiciosCorporales)
                for idd, cantidad in listaServiciosFacialesEfectivo:
                    intIdProducto = int(idd)
                    strIdProducto = str(idd)
                    cantidadProducto = str(cantidad)
                    consultaServicio = Servicios.objects.filter(id_servicio = intIdProducto)
                    for datoServicio in consultaServicio:
                        nombreServicio = datoServicio.nombre_servicio
                    
                    datosServicios.append([strIdProducto,nombreServicio,cantidadProducto])
                datosServiciosFacialesEfectivo.append(datosServicios)
            
            #DATOS TRATAMIENTO  
            if idTratamiento == None:
                boolTratamientosEfectivo.append("Sin tratamiento")
                datosTratamientosEfectivo.append("Sin tratamientos")
            else:
                boolTratamientosEfectivo.append("Tratamiento comprado")
                consultaTratamiento = Tratamientos.objects.filter(id_tratamiento = idTratamiento)

                datosTratamiento1 = []
                for datoTratamiento in consultaTratamiento:
                    codigoTratamiento = datoTratamiento.codigo_tratamiento
                    tipoTratamiento = datoTratamiento.tipo_tratamiento
                    nombreTratamiento = datoTratamiento.nombre_tratamiento
                    datosTratamiento1.append([codigoTratamiento, tipoTratamiento, nombreTratamiento])
                datosTratamientosEfectivo.append(datosTratamiento1)

            #datos paquete
            if idPaquete == None:
                boolPaquetesTratamientosEfectivo.append("Sin paquete de tratamientos")
                datosPaquetesTratamientosEfectivo.append("Sin paquete de tratamientos")
            else:
                boolPaquetesTratamientosEfectivo.append("Paquete comprado")
                consultaPaquete = PaquetesPromocionTratamientos.objects.filter(id_paquete_tratamiento = idPaquete)

                datosPaquete = []
                for datoPaquete in consultaPaquete:
                    nombrePaquete = datoPaquete.nombre_paquete
                    sesionesPaquete = datoPaquete.numero_sesiones
                    precioPaquete = datoPaquete.precio_por_paquete 
                    datosPaquete.append([nombrePaquete, sesionesPaquete,precioPaquete])
                datosPaquetesTratamientosEfectivo.append(datosPaquete)


        listaEfectivo = zip(listaVentasEnEfectivo, quienVendioEfectivo, clienteEfectivo, sucursalesEfectivo, booleanDescuentoEfectivo,totalesSinDescuentoEfectivo, descuentosEfectivo,datosDescuentosEfectivo, boolProductosVentaEfectivo, datosProductosVentaEfectivo, boolServiciosCoorporalesEfectivo, datosServiciosCoorporalesEfectivo, boolServiciosFacialesEfectivo, datosServiciosFacialesEfectivo,
        boolTratamientosEfectivo,datosTratamientosEfectivo,boolPaquetesTratamientosEfectivo,datosPaquetesTratamientosEfectivo)
            

        #Consultas TARJETA
        
        listaVentasConTarjeta = Ventas.objects.filter(tipo_pago = "Tarjeta")
        quienVendioTarjeta = [] #id, nombre y sucursal del empleado
        listaClientesTarjeta = [] #Nombre
        sucursalesTarjeta = []
        tiposTarjetas = []
        referencias = []
        #Descuentos
        booleanDescuentoTarjeta = []
        totalesSinDescuentoTarjeta = []
        descuentosTarjeta = []
        datosDescuentosTarjeta= []
        #Productos
        boolProductosVentaTarjeta = []
        datosProductosVentaTarjeta = []
        #Servicios Faciales
        boolServiciosCoorporalesTarjeta = []
        datosServiciosCoorporalesTarjeta = []
        #Servicios Corporales
        boolServiciosFacialesTarjeta = []
        datosServiciosFacialesTarjeta = []
        #Tratamientos
        boolTratamientosTarjeta = []
        datosTratamientosTarjeta = []

        #PaquetesTratamientos
        boolPaquetesTratamientosTarjeta = []
        datosPaquetesTratamientosTarjeta = []
        
        for ventaTarjeta in listaVentasConTarjeta:
            empleado_vendedorTarjeta = ventaTarjeta.empleado_vendedor_id
            clienteTarjeta = ventaTarjeta.cliente_id
            sucursalTarjeta  = ventaTarjeta.sucursal_id
            tipoTarjeta = ventaTarjeta.tipo_tarjeta
            referenciaTarjeta = ventaTarjeta.referencia_pago_tarjeta
            descuentoTarjeta  = ventaTarjeta.descuento_id
            monto_total_pagadoTarjeta  = ventaTarjeta.monto_pagar
            codigosProductosTarjeta  = ventaTarjeta.ids_productos
            serviciosCorporalesTarjeta  = ventaTarjeta.ids_servicios_corporales
            serviciosFacialesTarjeta  = ventaTarjeta.ids_servicios_faciales
            idTratamiento = ventaTarjeta.id_tratamiento_vendido_id
            idPaquete = ventaTarjeta.id_paquete_promo_vendido_id
            

            #Datos empleado vendedor
            consultaEmpleadoVendedor = Empleados.objects.filter(id_empleado = empleado_vendedorTarjeta)
            for datoEmpleadoVendedor in consultaEmpleadoVendedor:
                idEmpleado = datoEmpleadoVendedor.id_empleado
                nombreEmpleado = datoEmpleadoVendedor.nombres
                
            quienVendioTarjeta.append([idEmpleado, nombreEmpleado])
            
            tiposTarjetas.append(tipoTarjeta)
            referencias.append(referenciaTarjeta)
            

            #Datos cliente
            if clienteTarjeta == None:
                listaClientesTarjeta.append("Cliente Momentaneo")
            else:
                consultaCliente = Clientes.objects.filter(id_cliente = clienteTarjeta)
                for datoCliente in consultaCliente:
                    nombreCliente = datoCliente.nombre_cliente
                    apellidoCliente = datoCliente.apellidoPaterno_cliente

                    nombreCompletoCliente = nombreCliente + " "+ apellidoCliente
                    listaClientesTarjeta.append(nombreCompletoCliente)
                    
            #Datos sucursal 
            consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursalTarjeta)
            for datoSucursal in consultaSucursal:
                nombreSucursal = datoSucursal.nombre
            sucursalesTarjeta.append(nombreSucursal)
            
            #Datos descuento
            if descuentoTarjeta == None:
                booleanDescuentoTarjeta.append("Sin descuento")
                totalesSinDescuentoTarjeta.append("Total normal")
                descuentosTarjeta.append("jeje")
                datosDescuentosTarjeta.append("nada")
            else:
                booleanDescuentoTarjeta.append("Con descuento")
                consultaDescuento = Descuentos.objects.filter(id_descuento = descuentoTarjeta)
                
                for datoDescuento in consultaDescuento:
                    porcentaje = datoDescuento.porcentaje
                    nombreDescuento = datoDescuento.nombre_descuento
                datosDescuentosTarjeta.append([porcentaje,nombreDescuento])
                intPorcentaje = int(porcentaje)
                    
                restaParaSaberCuantoSePago = 100 - intPorcentaje  #85
                
                restaConPunto = "."+str(restaParaSaberCuantoSePago) #.85
                
                costoReal = monto_total_pagadoTarjeta/float(restaConPunto) #376.470588
                
                costoRealRedondeado = round(costoReal)
                totalesSinDescuentoTarjeta.append(costoRealRedondeado)
                
                porcentajeDescuento = "."+str(intPorcentaje) #.15
                descuento = costoReal*float(porcentajeDescuento)
                
                descuentoRedondeado = round(descuento)
                descuentosTarjeta.append(descuentoRedondeado)
                
            #Datos Productos comprados
            if codigosProductosTarjeta == "":
                boolProductosVentaTarjeta.append("Sin productos comprados")
                datosProductosVentaTarjeta.append("Sin productos")
            else:
                boolProductosVentaTarjeta.append("Productos Comprados")
                cantidadesProductos = ventaTarjeta.cantidades_productos
                
                datosProductosTarjeta = []
                arregloCodigosTarjetas = codigosProductosTarjeta.split(",")
                arregloCantidadestarjetas = cantidadesProductos.split(",")
                listaProductosTarjeta = zip(arregloCodigosTarjetas, arregloCantidadestarjetas)
                for codigoT, cantidadT in listaProductosTarjeta:
                    codigoProductoTarjeta = str(codigoT)
                    cantidadProductoTarjeta = str(cantidadT)
                    consultaProductotarjeta = ProductosVenta.objects.filter(codigo_producto = codigoProductoTarjeta)
                    for datoProducto in consultaProductotarjeta:
                        nombreProTarjeta = datoProducto.nombre_producto
                        
                    consultaProductotarjeta = ProductosRenta.objects.filter(codigo_producto = codigoProductoTarjeta)
                    for datoProducto in consultaProductotarjeta:
                        nombreProTarjeta = datoProducto.nombre_producto
                    
                    datosProductosTarjeta.append([codigoProductoTarjeta,nombreProTarjeta,cantidadProductoTarjeta])
                datosProductosVentaTarjeta.append(datosProductosTarjeta)
                
            #Datos Servicios Coorporales
            if serviciosCorporalesTarjeta == "":
                boolServiciosCoorporalesTarjeta.append("Sin servicios coorporales")
                datosServiciosCoorporalesTarjeta.append("Sin productos")
            else:
                boolServiciosCoorporalesTarjeta.append("Servicios coorporales Comprados")
                cantidadesServiciosCorporales = ventaTarjeta.cantidades_servicios_corporales
                
                datosServicios = []
                arregloIdsServiciosCorporales = serviciosCorporalesTarjeta.split(",")
                arregloCantidadesServiciosCorporales = cantidadesServiciosCorporales.split(",")
                listaServiciosCorporalesTarjeta = zip(arregloIdsServiciosCorporales, arregloCantidadesServiciosCorporales)
                for idd, cantidad in listaServiciosCorporalesTarjeta:
                    intIdProducto = int(idd)
                    strIdProducto = str(idd)
                    cantidadProducto = str(cantidad)
                    consultaServicio = Servicios.objects.filter(id_servicio = intIdProducto)
                    for datoServicio in consultaServicio:
                        nombreServicio = datoServicio.nombre_servicio
                    
                    datosServicios.append([strIdProducto,nombreServicio,cantidadProducto])
                datosServiciosCoorporalesTarjeta.append(datosServicios)
                
            #Datos Servicios Faciales
            if serviciosFacialesTarjeta == "":
                boolServiciosFacialesTarjeta.append("Sin servicios faciales")
                datosServiciosFacialesTarjeta.append("Sin servicios")
            else:
                boolServiciosFacialesTarjeta.append("Servicios coorporales Comprados")
                cantidadesServiciosFaciales = ventaTarjeta.cantidades_servicios_faciales
                
                datosServicios = []
                arregloIdsServiciosFaciales = serviciosFacialesTarjeta.split(",")
                arregloCantidadesServiciosFaciales = cantidadesServiciosFaciales.split(",")
                listaServiciosFacialesTarjeta = zip(arregloIdsServiciosFaciales, arregloCantidadesServiciosFaciales)
                for idd, cantidad in listaServiciosFacialesTarjeta:
                    intIdProducto = int(idd)
                    strIdProducto = str(idd)
                    cantidadProducto = str(cantidad)
                    consultaServicio = Servicios.objects.filter(id_servicio = intIdProducto)
                    for datoServicio in consultaServicio:
                        nombreServicio = datoServicio.nombre_servicio
                    
                    datosServicios.append([strIdProducto,nombreServicio,cantidadProducto])
                datosServiciosFacialesTarjeta.append(datosServicios)
                
            #DATOS TRATAMIENTO  
            if idTratamiento == None:
                boolTratamientosTarjeta.append("Sin tratamiento")
                datosTratamientosTarjeta.append("Sin tratamientos")
            else:
                boolTratamientosTarjeta.append("Tratamiento comprado")
                consultaTratamiento = Tratamientos.objects.filter(id_tratamiento = idTratamiento)

                datosTratamiento1 = []
                for datoTratamiento in consultaTratamiento:
                    codigoTratamiento = datoTratamiento.codigo_tratamiento
                    tipoTratamiento = datoTratamiento.tipo_tratamiento
                    nombreTratamiento = datoTratamiento.nombre_tratamiento
                    datosTratamiento1.append([codigoTratamiento, tipoTratamiento, nombreTratamiento])
                datosTratamientosTarjeta.append(datosTratamiento1)

            #datos paquete
            if idPaquete == None:
                boolPaquetesTratamientosTarjeta.append("Sin paquete de tratamientos")
                datosPaquetesTratamientosTarjeta.append("Sin paquete de tratamientos")
            else:
                boolPaquetesTratamientosTarjeta.append("Paquete comprado")
                consultaPaquete = PaquetesPromocionTratamientos.objects.filter(id_paquete_tratamiento = idPaquete)

                datosPaquete = []
                for datoPaquete in consultaPaquete:
                    nombrePaquete = datoPaquete.nombre_paquete
                    sesionesPaquete = datoPaquete.numero_sesiones
                    precioPaquete = datoPaquete.precio_por_paquete 
                    datosPaquete.append([nombrePaquete, sesionesPaquete,precioPaquete])
                datosPaquetesTratamientosTarjeta.append(datosPaquete)


        listatarjeta = zip(listaVentasConTarjeta, quienVendioTarjeta, listaClientesTarjeta, sucursalesTarjeta,tiposTarjetas,referencias,booleanDescuentoTarjeta, totalesSinDescuentoTarjeta, descuentosTarjeta,datosDescuentosTarjeta, boolProductosVentaTarjeta, datosProductosVentaTarjeta, boolServiciosCoorporalesTarjeta, datosServiciosCoorporalesTarjeta, boolServiciosFacialesTarjeta, datosServiciosFacialesTarjeta,
        boolTratamientosTarjeta, datosTratamientosTarjeta, boolPaquetesTratamientosTarjeta, datosPaquetesTratamientosTarjeta)

        #Consultas TRANSFERENCIA
        
        listaVentasConTransferencia = Ventas.objects.filter(tipo_pago = "Transferencia")
        quienVendioTransferencia = [] #id, nombre y sucursal del empleado
        listaClientesTransferencia = [] #Nombre
        sucursalesTransferencia = []
        
        clavesRastreo = []
        #Descuentos
        booleanDescuentoTransferencia = []
        totalesSinDescuentoTransferencia = []
        descuentosTransferencia = []
        datosDescuentosTransferencia = []
        #Productos
        boolProductosVentaTransferencia = []
        datosProductosVentaTransferencia = []
        #Servicios Faciales
        boolServiciosCoorporalesTransferencia = []
        datosServiciosCoorporalesTransferencia = []
        #Servicios Corporales
        boolServiciosFacialesTransferencia = []
        datosServiciosFacialesTransferencia = []
        #Tratamientos
        boolTratamientosTransferencia = []
        datosTratamientosTransferencia = []

        #PaquetesTratamientos
        boolPaquetesTratamientosTransferencia = []
        datosPaquetesTratamientosTransferencia = []

        
        for ventaTransferencia in listaVentasConTransferencia:
            empleado_vendedorTransferencia = ventaTransferencia.empleado_vendedor_id
            clienteTransferencia = ventaTransferencia.cliente_id
            sucursalTransferencia  = ventaTransferencia.sucursal_id
           
            claveRastreoTransferencia = ventaTransferencia.clave_rastreo_transferencia
            descuentoTransferencia  = ventaTransferencia.descuento_id
            monto_total_pagadoTransferencia  = ventaTransferencia.monto_pagar
            codigosProductosTransferencia  = ventaTransferencia.ids_productos
            serviciosCorporalesTransferencia  = ventaTransferencia.ids_servicios_corporales
            serviciosFacialesTransferencia  = ventaTransferencia.ids_servicios_faciales
            idTratamiento = ventaTransferencia.id_tratamiento_vendido_id
            idPaquete = ventaTransferencia.id_paquete_promo_vendido_id
            

            #Datos empleado vendedor
            consultaEmpleadoVendedor = Empleados.objects.filter(id_empleado = empleado_vendedorTransferencia)
            for datoEmpleadoVendedor in consultaEmpleadoVendedor:
                idEmpleado = datoEmpleadoVendedor.id_empleado
                nombreEmpleado = datoEmpleadoVendedor.nombres
                
            quienVendioTransferencia.append([idEmpleado, nombreEmpleado])
            
         
            clavesRastreo.append(claveRastreoTransferencia)
            

            #Datos cliente
            if clienteTransferencia == None:
                listaClientesTransferencia.append("Cliente Momentaneo")
            else:
                consultaCliente = Clientes.objects.filter(id_cliente = clienteTransferencia)
                for datoCliente in consultaCliente:
                    nombreCliente = datoCliente.nombre_cliente
                    apellidoCliente = datoCliente.apellidoPaterno_cliente

                    nombreCompletoCliente = nombreCliente + " "+ apellidoCliente
                    listaClientesTransferencia.append(nombreCompletoCliente)
                    
            #Datos sucursal 
            consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursalTransferencia)
            for datoSucursal in consultaSucursal:
                nombreSucursal = datoSucursal.nombre
            sucursalesTransferencia.append(nombreSucursal)
            
            #Datos descuento
            if descuentoTransferencia == None:
                booleanDescuentoTransferencia.append("Sin descuento")
                totalesSinDescuentoTransferencia.append("Total normal")
                descuentosTransferencia.append("jeje")
                datosDescuentosTransferencia.append("nada")
            else:
                booleanDescuentoTransferencia.append("Con descuento")
                consultaDescuento = Descuentos.objects.filter(id_descuento = descuentoTransferencia)
                
                for datoDescuento in consultaDescuento:
                    porcentaje = datoDescuento.porcentaje
                    nombreDescuento = datoDescuento.nombre_descuento
                datosDescuentosTransferencia.append([porcentaje,nombreDescuento])
                intPorcentaje = int(porcentaje)
                    
                restaParaSaberCuantoSePago = 100 - intPorcentaje  #85
                
                restaConPunto = "."+str(restaParaSaberCuantoSePago) #.85
                
                costoReal = monto_total_pagadoTarjeta/float(restaConPunto) #376.470588
                
                costoRealRedondeado = round(costoReal)
                totalesSinDescuentoTransferencia.append(costoRealRedondeado)
                
                porcentajeDescuento = "."+str(intPorcentaje) #.15
                descuento = costoReal*float(porcentajeDescuento)
                
                descuentoRedondeado = round(descuento)
                descuentosTransferencia.append(descuentoRedondeado)
                
            #Datos Productos comprados
            if codigosProductosTransferencia == "":
                boolProductosVentaTransferencia.append("Sin productos comprados")
                datosProductosVentaTransferencia.append("Sin productos")
            else:
                boolProductosVentaTransferencia.append("Productos Comprados")
                cantidadesProductosTransferencia = ventaTransferencia.cantidades_productos
                
                datosProductosTransferencia = []
                arregloCodigosTransferencia = codigosProductosTransferencia.split(",")
                arregloCantidadesTransferencia = cantidadesProductosTransferencia.split(",")
                listaProductosTransferencia = zip(arregloCodigosTransferencia, arregloCantidadesTransferencia)
                for codigoTr, cantidadTr in listaProductosTransferencia:
                    codigoProductoTransferencia = str(codigoTr)
                    cantidadProductoTransferencia = str(cantidadTr)
                    consultaProductoTransferencia = ProductosVenta.objects.filter(codigo_producto = codigoProductoTransferencia)
                    for datoProducto in consultaProductoTransferencia:
                        nombreProTransferencia = datoProducto.nombre_producto
                        
                    consultaProductoTransferencia = ProductosRenta.objects.filter(codigo_producto = codigoProductoTransferencia)
                    for datoProducto in consultaProductoTransferencia:
                        nombreProTransferencia = datoProducto.nombre_producto
                    
                    datosProductosTransferencia.append([codigoProductoTransferencia,nombreProTransferencia,cantidadProductoTransferencia])
                datosProductosVentaTransferencia.append(datosProductosTransferencia)
                
            #Datos Servicios Coorporales
            if serviciosCorporalesTransferencia == "":
                boolServiciosCoorporalesTransferencia.append("Sin servicios coorporales")
                datosServiciosCoorporalesTransferencia.append("Sin productos")
            else:
                boolServiciosCoorporalesTransferencia.append("Servicios coorporales Comprados")
                cantidadesServiciosCorporales = ventaTransferencia.cantidades_servicios_corporales
                
                datosServicios = []
                arregloIdsServiciosCorporales = serviciosCorporalesTransferencia.split(",")
                arregloCantidadesServiciosCorporales = cantidadesServiciosCorporales.split(",")
                listaServiciosCorporalesTransferencia = zip(arregloIdsServiciosCorporales, arregloCantidadesServiciosCorporales)
                for idd, cantidad in listaServiciosCorporalesTransferencia:
                    intIdProducto = int(idd)
                    strIdProducto = str(idd)
                    cantidadProducto = str(cantidad)
                    consultaServicio = Servicios.objects.filter(id_servicio = intIdProducto)
                    for datoServicio in consultaServicio:
                        nombreServicio = datoServicio.nombre_servicio
                    
                    datosServicios.append([strIdProducto,nombreServicio,cantidadProducto])
                datosServiciosCoorporalesTransferencia.append(datosServicios)
                
            #Datos Servicios Faciales
            if serviciosFacialesTransferencia == "":
                boolServiciosFacialesTransferencia.append("Sin servicios faciales")
                datosServiciosFacialesTransferencia.append("Sin servicios")
            else:
                boolServiciosFacialesTransferencia.append("Servicios coorporales Comprados")
                cantidadesServiciosFaciales = ventaTransferencia.cantidades_servicios_faciales
                
                datosServicios = []
                arregloIdsServiciosFaciales = serviciosFacialesTransferencia.split(",")
                arregloCantidadesServiciosFaciales = cantidadesServiciosFaciales.split(",")
                listaServiciosFacialesTransferencia = zip(arregloIdsServiciosFaciales, arregloCantidadesServiciosFaciales)
                for idd, cantidad in listaServiciosFacialesTransferencia:
                    intIdProducto = int(idd)
                    strIdProducto = str(idd)
                    cantidadProducto = str(cantidad)
                    consultaServicio = Servicios.objects.filter(id_servicio = intIdProducto)
                    for datoServicio in consultaServicio:
                        nombreServicio = datoServicio.nombre_servicio
                    
                    datosServicios.append([strIdProducto,nombreServicio,cantidadProducto])
                datosServiciosFacialesTransferencia.append(datosServicios)
            
            #DATOS TRATAMIENTO  
            if idTratamiento == None:
                boolTratamientosTransferencia.append("Sin tratamiento")
                datosTratamientosTransferencia.append("Sin tratamientos")
            else:
                boolTratamientosTransferencia.append("Tratamiento comprado")
                consultaTratamiento = Tratamientos.objects.filter(id_tratamiento = idTratamiento)

                datosTratamiento1 = []
                for datoTratamiento in consultaTratamiento:
                    codigoTratamiento = datoTratamiento.codigo_tratamiento
                    tipoTratamiento = datoTratamiento.tipo_tratamiento
                    nombreTratamiento = datoTratamiento.nombre_tratamiento
                    datosTratamiento1.append([codigoTratamiento, tipoTratamiento, nombreTratamiento])
                datosTratamientosTransferencia.append(datosTratamiento1)

            #datos paquete
            if idPaquete == None:
                boolPaquetesTratamientosTransferencia.append("Sin paquete de tratamientos")
                datosPaquetesTratamientosTransferencia.append("Sin paquete de tratamientos")
            else:
                boolPaquetesTratamientosTransferencia.append("Paquete comprado")
                consultaPaquete = PaquetesPromocionTratamientos.objects.filter(id_paquete_tratamiento = idPaquete)

                datosPaquete = []
                for datoPaquete in consultaPaquete:
                    nombrePaquete = datoPaquete.nombre_paquete
                    sesionesPaquete = datoPaquete.numero_sesiones
                    precioPaquete = datoPaquete.precio_por_paquete 
                    datosPaquete.append([nombrePaquete, sesionesPaquete,precioPaquete])
                datosPaquetesTratamientosTransferencia.append(datosPaquete)
        
        listaTransferencia = zip(listaVentasConTransferencia, quienVendioTransferencia, listaClientesTransferencia, sucursalesTransferencia,clavesRastreo,booleanDescuentoTransferencia, totalesSinDescuentoTransferencia, descuentosTransferencia,datosDescuentosTransferencia, boolProductosVentaTransferencia, datosProductosVentaTransferencia, boolServiciosCoorporalesTransferencia, datosServiciosCoorporalesTransferencia, boolServiciosFacialesTransferencia, datosServiciosFacialesTransferencia,
        boolTratamientosTransferencia,datosTratamientosTransferencia,boolPaquetesTratamientosTransferencia,datosPaquetesTratamientosTransferencia)



        
        
        if "ventaAgregada" in request.session:
            ventaAgregada = request.session['ventaAgregada']
            del request.session['ventaAgregada']
            return render(request, "13 Ventas/ventas.html", {"ventaAgregada":ventaAgregada,"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, "listaVentas":listaVentas,
         "listaEfectivo":listaEfectivo, "listatarjeta":listatarjeta, "notificacionRenta":notificacionRenta,"listaTransferencia":listaTransferencia,"datosProductosVentaEfectivo":datosProductosVentaEfectivo,"contadorVentasEfectivo":contadorVentasEfectivo,"contadorVentasTarjeta":contadorVentasTarjeta,"contadorVentasTransferencia":contadorVentasTarjeta, "notificacionCita":notificacionCita})
        if "ventaNoAgregada" in request.session:
            ventaNoAgregada = request.session['ventaNoAgregada']
            del request.session['ventaNoAgregada']
            return render(request, "13 Ventas/ventas.html", {"ventaNoAgregada":ventaNoAgregada,"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, "listaVentas":listaVentas,
         "listaEfectivo":listaEfectivo, "listatarjeta":listatarjeta, "notificacionRenta":notificacionRenta,"listaTransferencia":listaTransferencia,"datosProductosVentaEfectivo":datosProductosVentaEfectivo,"contadorVentasEfectivo":contadorVentasEfectivo,"contadorVentasTarjeta":contadorVentasTarjeta,"contadorVentasTransferencia":contadorVentasTarjeta, "notificacionCita":notificacionCita})
        
        if "ventaCancelacionCita" in request.session:
            ventaCancelacionCita = request.session["ventaCancelacionCita"]
            del request.session["ventaCancelacionCita"]
            return render(request, "13 Ventas/ventas.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, "listaVentas":listaVentas,
            "listaEfectivo":listaEfectivo, "listatarjeta":listatarjeta, "notificacionRenta":notificacionRenta,"listaTransferencia":listaTransferencia,"datosProductosVentaEfectivo":datosProductosVentaEfectivo,"contadorVentasEfectivo":contadorVentasEfectivo,"contadorVentasTarjeta":contadorVentasTarjeta,"contadorVentasTransferencia":contadorVentasTarjeta, "notificacionCita":notificacionCita, "ventaCancelacionCita":ventaCancelacionCita})

        

        return render(request, "13 Ventas/ventas.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, "listaVentas":listaVentas,
         "listaEfectivo":listaEfectivo, "listatarjeta":listatarjeta, "notificacionRenta":notificacionRenta,"listaTransferencia":listaTransferencia,"datosProductosVentaEfectivo":datosProductosVentaEfectivo,"contadorVentasEfectivo":contadorVentasEfectivo,"contadorVentasTarjeta":contadorVentasTarjeta,"contadorVentasTransferencia":contadorVentasTarjeta, "notificacionCita":notificacionCita})
        
    else:
        return render(request,"1 Login/login.html")
    
def agregarConfiguracionCredito(request):

    if "idSesion" in request.session:

       # Variables de sesión
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']
        idPerfil = idEmpleado
        idConfig = idEmpleado
       

        

        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
        

        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
        
           #notificacionRentas
        notificacionRenta = notificacionRentas(request)

        #notificacionCitas
        notificacionCita = notificacionCitas(request)
        
         #permisosEmpleado
        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)

        # retornar sucrusales
        sucursales = Sucursales.objects.all()
        if request.method == "POST":
            limite_credito = request.POST['limiteCredito']  #Requerido
            
            fecha_config_credito = datetime.today().strftime('%Y-%m-%d') #Requerido
            sucursal =  request.POST['sucursal']  #Requerido
            #fechaAlta = datetime.now()
            
         
            

            registroConfiguracionCredito = ConfiguracionCredito(limite_credito = limite_credito,
                    fecha = fecha_config_credito, 
                    sucursal = Sucursales.objects.get(id_sucursal = sucursal), activo = "N")
               
       

            registroConfiguracionCredito.save()
            
            if registroConfiguracionCredito:
                    request.session['configuracionCreditoAgregada'] = "La configuracion de límite de crédito de $" + str(limite_credito) +  " por cliente ha sido gregado satisfactoriamente!"

                    return redirect('/configuracionCredito/')
                    
            else:
                    request.session['configuracionCreditoNoAgregado'] = "Error en la base de datos, intentelo más tarde!"

                    return redirect('/configuracionCredito/')

            
        return render(request, "14 Creditos/agregarConfiguracionCredito.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "notificacionRenta":notificacionRenta,"nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, "sucursales":sucursales, "notificacionCita":notificacionCita
        })
    
    else:
        return render(request,"1 Login/login.html")



def configuracionCredito(request):

    if "idSesion" in request.session:

       # Variables de sesión
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']
        idPerfil = idEmpleado
        idConfig = idEmpleado
        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
        
           #notificacionRentas
        notificacionRenta = notificacionRentas(request)

        #notificacionCitas
        notificacionCita = notificacionCitas(request)


        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)
        
        
        
        sucursales = []
        
        configuracionesTotales = ConfiguracionCredito.objects.all()
        for configuracion in configuracionesTotales:
            id_sucursal = configuracion.sucursal_id
            
            sucursal = Sucursales.objects.filter(id_sucursal = id_sucursal)
            for dato in sucursal:
                nombreSucursal = dato.nombre
            sucursales.append(nombreSucursal)
            
        lista = zip(configuracionesTotales, sucursales)
        
        if 'configuracionCreditoAgregada' in request.session:
            configuracionAgregada = request.session['configuracionCreditoAgregada']
            del request.session['configuracionCreditoAgregada']
            return render(request, "14 Creditos/configuracionCredito.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "notificacionRenta":notificacionRenta,"idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, "lista":lista, "configuracionAgregada":configuracionAgregada, "notificacionCita":notificacionCita
            })
        
        if 'configuracionCreditoNoAgregado' in request.session:
            configuracionNoAgregado = request.session['configuracionCreditoNoAgregado']
            del request.session['configuracionCreditoNoAgregado']
            return render(request, "14 Creditos/configuracionCredito.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "notificacionRenta":notificacionRenta,"idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, "lista":lista, "configuracionNoAgregado":configuracionNoAgregado, "notificacionCita":notificacionCita
            })

        if 'configuracionActivada' in request.session:
            configuracionActivada = request.session['configuracionActivada']
            del request.session['configuracionActivada']
            return render(request, "14 Creditos/configuracionCredito.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "notificacionRenta":notificacionRenta,"idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, "lista":lista, "configuracionActivada":configuracionActivada, "notificacionCita":notificacionCita
            })
            
        return render(request, "14 Creditos/configuracionCredito.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "notificacionRenta":notificacionRenta,"idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, "lista":lista, "notificacionCita":notificacionCita
        })
    
    else:
        return render(request,"1 Login/login.html")


def verCreditosClientes(request):

    if "idSesion" in request.session:

       # Variables de sesión
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']
        idPerfil = idEmpleado
        idConfig = idEmpleado
       
        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
        
           #notificacionRentas
        notificacionRenta = notificacionRentas(request)

        #notificacionCitas
        notificacionCita = notificacionCitas(request)
        
        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)
        
        #------ Creditos pendientes
        agregados = []
        sucursalesCreditos =[]
        clientesCreditos =[]
        fechasCreditosPendientes = []
        estatusPago =[]
        fechasPago = []
        productosPendientes = []
        serviciosCorporalesPendientes = []
        serviciosFacialesPendientes = []
        tratamientosPendientes = []
        paquetesPendientes = []
        
        contadorPendientes = 0
        totalCreditosPendientes= Creditos.objects.filter(estatus="Pendiente")
        if totalCreditosPendientes:
            for pendiente in totalCreditosPendientes:
                contadorPendientes = contadorPendientes+1
                id_persona_realizo = pendiente.empleado_vendedor_id
                id_sucursal  = pendiente.sucursal_id
                id_cliente =pendiente.cliente_id
                id_credito = pendiente.id_credito
                
                empleado = Empleados.objects.filter(id_empleado = id_persona_realizo)
                for dato in empleado:
                    nombre = dato.nombres
                    apellidoPat = dato.apellido_paterno
                    apellidoMat = dato.apellido_materno
                nombreCompleto = nombre + " " + apellidoPat + " " + apellidoMat
                agregados.append(nombreCompleto)
                
                sucursales = Sucursales.objects.filter(id_sucursal = id_sucursal)
                for sucursal in sucursales:
                    nombreSucursal = sucursal.nombre
                    sucursalesCreditos.append(nombreSucursal)
                    
                clientes = Clientes.objects.filter(id_cliente = id_cliente)
                for cliente in clientes:
                    idCliente = cliente.id_cliente
                    nombreCliente = cliente.nombre_cliente
                    apellidoP = cliente.apellidoPaterno_cliente
                    apellidoM = cliente.apellidoPaterno_cliente
                clienteCompleto= str(idCliente) + " - " + nombreCliente + " " + apellidoP + " " + apellidoM
                clientesCreditos.append(clienteCompleto)
                
                fechaAltaCredito = pendiente.fecha_venta_credito
                fechaPrimerPago = fechaAltaCredito + timedelta(days = 15)
                fechaSegundoPago =fechaAltaCredito + timedelta(days = 30)
                fechaTercerPago =fechaAltaCredito + timedelta(days = 45)
                fechaCuartoPago =fechaAltaCredito + timedelta(days = 60)
                
                fechasCreditosPendientes.append([fechaPrimerPago,fechaSegundoPago,fechaTercerPago,fechaCuartoPago])
                
                datosPagos = PagosCreditos.objects.filter(id_credito__id_credito = id_credito)
                for pago in datosPagos:
                    pago1 = pago.monto_pago1
                    
                    pago2 = pago.monto_pago2
                
                    pago3 = pago.monto_pago3
                    
                    pago4 = pago.monto_pago4
                    
                    
                    estatusPago1=""
                    estatusPago2=""
                    estatusPago3=""
                    estatusPago4=""
                    if pago1 == None:
                        estatusPago1 = "Pendiente"
                        fechaPago1 = "Sin fecha"
                    else:
                        fechaPago1 = pago.fecha_pago1
                        estatusPago1 = "Se pagaron $ "  + str(pago1) + "MXN el día "
                        
                        
                        
                    if pago2 == None:
                        estatusPago2 = "Pendiente"
                        fechaPago2 = "Sin fecha"
                    else:
                        fechaPago2 = pago.fecha_pago2
                        estatusPago2 = "Se pagaron $ "  + str(pago2) + "MXN el día "+str(fechaPago2)
                        
                        
                    if pago3 == None:
                        estatusPago3 = "Pendiente"
                        fechaPago3 = "Sin fecha"
                    else:
                        fechaPago3 = pago.fecha_pago3
                        estatusPago3 = "Se pagaron $ "  + str(pago3) + "MXN el día "+str(fechaPago3)
                        
                        
                        
                    if pago4 == None:
                        estatusPago4 = "Pendiente"
                        fechaPago4 = "Sin fecha"
                    else:
                        fechaPago4 = pago.fecha_pago4
                        estatusPago4 = "Se pagaron $ "  + str(pago4) + "MXN el día "+str(fechaPago4)
                        
                        
                    estatusPago.append([estatusPago1,estatusPago2,estatusPago3,estatusPago4])
                    fechasPago.append([fechaPago1,fechaPago2,fechaPago3,fechaPago4])
                    
                #SACAR LO QUE COMPRO EN LA VENTA o renta...
                
                venta = pendiente.venta_id
                consultaVenta = Ventas.objects.filter(id_venta = venta)
                for datoVenta in consultaVenta:
                    codigosProductos = datoVenta.ids_productos
                    cantidadesProductos = datoVenta.cantidades_productos
                    serviciosCorporales = datoVenta.ids_servicios_corporales
                    cantidadesSC = datoVenta.cantidades_servicios_corporales
                    serviciosFaciales = datoVenta.ids_servicios_faciales
                    cantidadesSF = datoVenta.cantidades_servicios_faciales
                    idTratamiento = datoVenta.id_tratamiento_vendido_id
                    idPaquete = datoVenta.id_paquete_promo_vendido_id
                
                hayProductos = False
                haySC = False
                haySF = False
                hayTratamiento = False
                hayPquete = False
                
                if codigosProductos == "":
                    hayProductos = False
                else:
                    hayProductos = True
                    arregloCodigosProductos = codigosProductos.split(",")
                    arregloCantidadesProductos = cantidadesProductos.split(",")
                    listaProductos = zip(arregloCodigosProductos, arregloCantidadesProductos)
                
                if serviciosCorporales == "":
                    haySC = False
                else:  
                    haySC = True
                    arregloidsSC = serviciosCorporales.split(",")
                    arregloCantidadesSC = cantidadesSC.split(",")
                    listaServiciosCorporales = zip(arregloidsSC,arregloCantidadesSC)
                
                if serviciosFaciales == "":
                    haySF = False
                else:
                    haySF = True
                    arregloidsSF = serviciosFaciales.split(",")
                    arregloCantidadesSF = cantidadesSF.split(",")
                    listaServiciosFaciales = zip(arregloidsSF, arregloCantidadesSF)
                
                if idTratamiento == None:
                    hayTratamiento = False
                else:
                    hayTratamiento = True
                
                if idPaquete == None:
                    hayPaquete = False
                else:
                    hayPaquete = True

            
                
                miniProductos = []
                if hayProductos:
                    for codigo, cantidadProducto in listaProductos:
                        codigoProducto = str(codigo)
                        strCantidadProducto = str(cantidadProducto)
                        if "PV" in codigoProducto:
                            consultaProducto = ProductosVenta.objects.filter(codigo_producto = codigoProducto)
                        else:
                            consultaProducto = ProductosRenta.objects.filter(codigo_producto = codigoProducto)
                        for datoProducto in consultaProducto:
                            nombreProducto = datoProducto.nombre_producto
                        miniProductos.append([codigoProducto,nombreProducto,strCantidadProducto])
            
                
                miniSC = []
                if haySC:
                    for idSC, cantidadSC in listaServiciosCorporales:
                        idServicio = int(idSC)
                        strCantidadServicio = str(cantidadSC)
                        consultarServicio = Servicios.objects.filter(id_servicio = idServicio)
                        for datoServicio in consultarServicio:
                            nombreServicio = datoServicio.nombre_servicio
                        miniSC.append([idServicio,nombreServicio,strCantidadServicio])
                    
                miniSF = []
                if haySF:
                    for idSF, cantidadSF in listaServiciosFaciales:
                        idServicio = int(idSF)
                        strCantidadServicio = str(cantidadSF)
                        consultarServicio = Servicios.objects.filter(id_servicio = idServicio)
                        for datoServicio in consultarServicio:
                            nombreServicio = datoServicio.nombre_servicio
                        miniSF.append([idServicio,nombreServicio,strCantidadServicio])
                
                miniTrata = []
                if hayTratamiento:
                    consultaTratamiento = Tratamientos.objects.filter(id_tratamiento = idTratamiento)
                    for datoTratamiento in consultaTratamiento:
                        codigoTratamiento = datoTratamiento.codigo_tratamiento
                        nombreTratamiento = datoTratamiento.nombre_tratamiento
                    miniTrata.append([codigoTratamiento, nombreTratamiento])

                miniPaquete = []
                if hayPaquete:
                    consultaPaquete = PaquetesPromocionTratamientos.objects.filter(id_paquete_tratamiento = idPaquete)
                    for datoPaquete in consultaPaquete:
                        nombre_paquete = datoPaquete.nombre_paquete
                        numero_sesiones = datoPaquete.numero_sesiones
                    miniPaquete.append([nombre_paquete,numero_sesiones])


                
                
                productosPendientes.append(miniProductos)
                serviciosCorporalesPendientes.append(miniSC)
                serviciosFacialesPendientes.append(miniSF)


                tratamientosPendientes.append(miniTrata)
                paquetesPendientes.append(miniPaquete)
                
            listaCreditosPendientes = zip(totalCreditosPendientes,clientesCreditos,agregados,sucursalesCreditos,fechasCreditosPendientes, estatusPago,fechasPago, productosPendientes, serviciosCorporalesPendientes, serviciosFacialesPendientes,
            tratamientosPendientes, paquetesPendientes)
        else:
            listaCreditosPendientes = None
        #------ Creditos finalizados
        
        agregadosFinalizados = []
        sucursalesCreditosFinalizados =[]
        clientesCreditosFinalizados =[]
        fechasDePago = []
        
        productosFinalizados = []
        serviciosCorporalesFinalizados = []
        serviciosFacialesFinalizados = []
        
        contadorFinalizado = 0
        totalCreditosFinalizados= Creditos.objects.filter(estatus="Finalizado")
        for finalizado in totalCreditosFinalizados:
            idCreditoFinalizado = finalizado.id_credito
            contadorFinalizado = contadorFinalizado + 1
            id_persona_realizo = finalizado.empleado_vendedor_id
            id_sucursal  = finalizado.sucursal_id
            id_cliente =finalizado.cliente_id
            
            empleado = Empleados.objects.filter(id_empleado = id_persona_realizo)
            for dato in empleado:
                nombre = dato.nombres
                apellidoPat = dato.apellido_paterno
                apellidoMat = dato.apellido_materno
            nombreCompleto = nombre + " " + apellidoPat + " " + apellidoMat
            agregadosFinalizados.append(nombreCompleto)
            
            sucursales = Sucursales.objects.filter(id_sucursal = id_sucursal)
            for sucursal in sucursales:
                nombreSucursal = sucursal.nombre
                sucursalesCreditosFinalizados.append(nombreSucursal)
                
            clientes = Clientes.objects.filter(id_cliente = id_cliente)
            for cliente in clientes:
                idCliente = cliente.id_cliente
                nombreCliente = cliente.nombre_cliente
                apellidoP = cliente.apellidoPaterno_cliente
                apellidoM = cliente.apellidoPaterno_cliente
            clienteCompleto= str(idCliente) + " - " + nombreCliente + " " + apellidoP + " " + apellidoM
            clientesCreditosFinalizados.append(clienteCompleto)
            
            #Fechas de cuando pago..
            consultaPagos = PagosCreditos.objects.filter(id_credito_id__id_credito = idCreditoFinalizado)
            paguitos = []
            for datosPago in consultaPagos:
                fechaPago1 = datosPago.fecha_pago1
                fechaPago2 = datosPago.fecha_pago2
                fechaPago3 = datosPago.fecha_pago3
                fechaPago4 = datosPago.fecha_pago4
                
                if fechaPago1 != None:#Si hay una fecha del pago
                    monto_pago1 = datosPago.monto_pago1
                    paguitos.append(["Pago 1",fechaPago1,monto_pago1])
                if fechaPago2 != None:#Si hay una fecha del pago
                    monto_pago2 = datosPago.monto_pago2
                    paguitos.append(["Pago 2",fechaPago2,monto_pago2])
                if fechaPago3 != None:#Si hay una fecha del pago
                    monto_pago3 = datosPago.monto_pago3
                    paguitos.append(["Pago 3",fechaPago3,monto_pago3])
                if fechaPago4 != None:#Si hay una fecha del pago
                    monto_pago4 = datosPago.monto_pago4
                    paguitos.append(["Pago 4",fechaPago4,monto_pago4])
            fechasDePago.append(paguitos)    
                
            #SACAR LO QUE COMPRO EN LA VENTA...
            
            venta = finalizado.venta_id
            consultaVenta = Ventas.objects.filter(id_venta = venta)
            for datoVenta in consultaVenta:
                codigosProductos = datoVenta.ids_productos
                cantidadesProductos = datoVenta.cantidades_productos
                serviciosCorporales = datoVenta.ids_servicios_corporales
                cantidadesSC = datoVenta.cantidades_servicios_corporales
                serviciosFaciales = datoVenta.ids_servicios_faciales
                cantidadesSF = datoVenta.cantidades_servicios_faciales
            
            hayProductos = False
            haySC = False
            haySF = False
            
            if codigosProductos == "":
                hayProductos = False
            else:
                hayProductos = True
                arregloCodigosProductos = codigosProductos.split(",")
                arregloCantidadesProductos = cantidadesProductos.split(",")
                listaProductos = zip(arregloCodigosProductos, arregloCantidadesProductos)
            
            if serviciosCorporales == "":
                haySC = False
            else:  
                haySC = True
                arregloidsSC = serviciosCorporales.split(",")
                arregloCantidadesSC = cantidadesSC.split(",")
                listaServiciosCorporales = zip(arregloidsSC,arregloCantidadesSC)
            
            if serviciosFaciales == "":
                haySF = False
            else:
                haySF = True
                arregloidsSF = serviciosFaciales.split(",")
                arregloCantidadesSF = cantidadesSF.split(",")
                listaServiciosFaciales = zip(arregloidsSF, arregloCantidadesSF)
           
            
            miniProductos = []
            if hayProductos:
                for codigo, cantidadProducto in listaProductos:
                    codigoProducto = str(codigo)
                    strCantidadProducto = str(cantidadProducto)
                    if "PV" in codigoProducto:
                        consultaProducto = ProductosVenta.objects.filter(codigo_producto = codigoProducto)
                    else:
                        consultaProducto = ProductosRenta.objects.filter(codigo_producto = codigoProducto)
                    for datoProducto in consultaProducto:
                        nombreProducto = datoProducto.nombre_producto
                    miniProductos.append([codigoProducto,nombreProducto,strCantidadProducto])
        
            
            miniSC = []
            if haySC:
                for idSC, cantidadSC in listaServiciosCorporales:
                    idServicio = int(idSC)
                    strCantidadServicio = str(cantidadSC)
                    consultarServicio = Servicios.objects.filter(id_servicio = idServicio)
                    for datoServicio in consultarServicio:
                        nombreServicio = datoServicio.nombre_servicio
                    miniSC.append([idServicio,nombreServicio,strCantidadServicio])
                
            miniSF = []
            if haySF:
                for idSF, cantidadSF in listaServiciosFaciales:
                    idServicio = int(idSF)
                    strCantidadServicio = str(cantidadSF)
                    consultarServicio = Servicios.objects.filter(id_servicio = idServicio)
                    for datoServicio in consultarServicio:
                        nombreServicio = datoServicio.nombre_servicio
                    miniSF.append([idServicio,nombreServicio,strCantidadServicio])
            
            
            
            productosFinalizados.append(miniProductos)
            serviciosCorporalesFinalizados.append(miniSC)
            serviciosFacialesFinalizados.append(miniSF)
            
        listaCreditosFinalizados = zip(totalCreditosFinalizados,clientesCreditosFinalizados,agregadosFinalizados,sucursalesCreditosFinalizados, fechasDePago, productosFinalizados, serviciosCorporalesFinalizados, serviciosFacialesFinalizados)
        
        #Balance de credito de costabella
        todasLasSucursales = Sucursales.objects.all()
        balanceSucursales = []
        montoPagadoTodasLasSucursales = 0
        montoPendienteTodasLasSucursales = 0
        montoTotalTodasLasSucursales = 0
        for sucursal in todasLasSucursales:
            idSucursal = sucursal.id_sucursal
            nombreSucursal = sucursal.nombre
            consultaCreditosDeSucursal = Creditos.objects.filter(sucursal_id__id_sucursal = idSucursal, estatus="Pendiente")
            montoPagado = 0
            montoPendiente = 0
            montoTotal = 0
            for credito in consultaCreditosDeSucursal:
                montoPagadoCredito = credito.monto_pagado
                montoPendienteCredito = credito.monto_restante
                montoTotalCredito = credito.monto_pagar

                montoPagado = montoPagado + montoPagadoCredito
                montoPendiente = montoPendiente + montoPendienteCredito
                montoTotal = montoTotal + montoTotalCredito
            
            #Agregar a array
            balanceSucursales.append([idSucursal, nombreSucursal,montoPagado, montoPendiente, montoTotal])

            montoPagadoTodasLasSucursales = montoPagadoTodasLasSucursales + montoPagado
            montoPendienteTodasLasSucursales = montoPendienteTodasLasSucursales + montoPendiente
            montoTotalTodasLasSucursales = montoTotalTodasLasSucursales + montoTotal




            
            
        if "pago1Agregado" in request.session:
            pago1Agregado = True
            mensaje = request.session['pago1Agregado']
            del request.session['pago1Agregado']
            return render(request, "14 Creditos/verCreditosClientes.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "notificacionRenta":notificacionRenta,"idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, "listaCreditosPendientes":listaCreditosPendientes,
                                                                        "listaCreditosFinalizados":listaCreditosFinalizados, "pago1Agregado":pago1Agregado, "mensaje":mensaje, "contadorPendientes":contadorPendientes, "contadorFinalizado":contadorFinalizado, "notificacionCita":notificacionCita,
                                                                        "balanceSucursales":balanceSucursales, "montoPagadoTodasLasSucursales":montoPagadoTodasLasSucursales, "montoPendienteTodasLasSucursales":montoPendienteTodasLasSucursales, "montoTotalTodasLasSucursales":montoTotalTodasLasSucursales
            })
        
        if "pago1NoAgregado" in request.session:
            pago1NoAgregado = True
            mensaje = request.session['pago1Agregado']
            del request.session['pago1Agregado']
            return render(request, "14 Creditos/verCreditosClientes.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "notificacionRenta":notificacionRenta,"idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, "listaCreditosPendientes":listaCreditosPendientes,
                                                                        "listaCreditosFinalizados":listaCreditosFinalizados, "pago1NoAgregado":pago1NoAgregado, "mensaje":mensaje, "contadorPendientes":contadorPendientes, "contadorFinalizado":contadorFinalizado, "notificacionCita":notificacionCita,
                                                                        "balanceSucursales":balanceSucursales, "montoPagadoTodasLasSucursales":montoPagadoTodasLasSucursales, "montoPendienteTodasLasSucursales":montoPendienteTodasLasSucursales, "montoTotalTodasLasSucursales":montoTotalTodasLasSucursales
            })
            
        if "pago2Agregado" in request.session:
            pago2Agregado = True
            mensaje = request.session['pago2Agregado']
            del request.session['pago2Agregado']
            return render(request, "14 Creditos/verCreditosClientes.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "notificacionRenta":notificacionRenta,"idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, "listaCreditosPendientes":listaCreditosPendientes,
                                                                        "listaCreditosFinalizados":listaCreditosFinalizados, "pago2Agregado":pago2Agregado, "mensaje":mensaje, "contadorPendientes":contadorPendientes, "contadorFinalizado":contadorFinalizado, "notificacionCita":notificacionCita,
                                                                        "balanceSucursales":balanceSucursales, "montoPagadoTodasLasSucursales":montoPagadoTodasLasSucursales, "montoPendienteTodasLasSucursales":montoPendienteTodasLasSucursales, "montoTotalTodasLasSucursales":montoTotalTodasLasSucursales
            })
        
        if "pago2NoAgregado" in request.session:
            pago2NoAgregado = True
            mensaje = request.session['pago2NoAgregado']
            del request.session['pago2NoAgregado']
            return render(request, "14 Creditos/verCreditosClientes.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "notificacionRenta":notificacionRenta,"idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, "listaCreditosPendientes":listaCreditosPendientes,
                                                                        "listaCreditosFinalizados":listaCreditosFinalizados, "pago2NoAgregado":pago2NoAgregado, "mensaje":mensaje, "contadorPendientes":contadorPendientes, "contadorFinalizado":contadorFinalizado, "notificacionCita":notificacionCita,
                                                                        "balanceSucursales":balanceSucursales, "montoPagadoTodasLasSucursales":montoPagadoTodasLasSucursales, "montoPendienteTodasLasSucursales":montoPendienteTodasLasSucursales, "montoTotalTodasLasSucursales":montoTotalTodasLasSucursales
            })
            
        if "pago3Agregado" in request.session:
            pago3Agregado = True
            mensaje = request.session['pago3Agregado']
            del request.session['pago3Agregado']
            return render(request, "14 Creditos/verCreditosClientes.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "notificacionRenta":notificacionRenta,"idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, "listaCreditosPendientes":listaCreditosPendientes,
                                                                        "listaCreditosFinalizados":listaCreditosFinalizados, "pago3Agregado":pago3Agregado, "mensaje":mensaje, "contadorPendientes":contadorPendientes, "contadorFinalizado":contadorFinalizado, "notificacionCita":notificacionCita,
                                                                        "balanceSucursales":balanceSucursales, "montoPagadoTodasLasSucursales":montoPagadoTodasLasSucursales, "montoPendienteTodasLasSucursales":montoPendienteTodasLasSucursales, "montoTotalTodasLasSucursales":montoTotalTodasLasSucursales
            })
        
        if "pago3NoAgregado" in request.session:
            pago3NoAgregado = True
            mensaje = request.session['pago3NoAgregado']
            del request.session['pago3NoAgregado']
            return render(request, "14 Creditos/verCreditosClientes.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "notificacionRenta":notificacionRenta,"idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, "listaCreditosPendientes":listaCreditosPendientes,
                                                                        "listaCreditosFinalizados":listaCreditosFinalizados, "pago3NoAgregado":pago3NoAgregado, "mensaje":mensaje, "contadorPendientes":contadorPendientes, "contadorFinalizado":contadorFinalizado, "notificacionCita":notificacionCita,
                                                                        "balanceSucursales":balanceSucursales, "montoPagadoTodasLasSucursales":montoPagadoTodasLasSucursales, "montoPendienteTodasLasSucursales":montoPendienteTodasLasSucursales, "montoTotalTodasLasSucursales":montoTotalTodasLasSucursales
            })
            
        if "pago4Agregado" in request.session:
            pago4Agregado = True
            mensaje = request.session['pago4Agregado']
            del request.session['pago4Agregado']
            return render(request, "14 Creditos/verCreditosClientes.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "notificacionRenta":notificacionRenta,"idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, "listaCreditosPendientes":listaCreditosPendientes,
                                                                        "listaCreditosFinalizados":listaCreditosFinalizados, "pago4Agregado":pago4Agregado, "mensaje":mensaje, "contadorPendientes":contadorPendientes, "contadorFinalizado":contadorFinalizado, "notificacionCita":notificacionCita,
                                                                        "balanceSucursales":balanceSucursales, "montoPagadoTodasLasSucursales":montoPagadoTodasLasSucursales, "montoPendienteTodasLasSucursales":montoPendienteTodasLasSucursales, "montoTotalTodasLasSucursales":montoTotalTodasLasSucursales
            })
        
        if "pago4NoAgregado" in request.session:
            pago4NoAgregado = True
            mensaje = request.session['pago4NoAgregado']
            del request.session['pago4NoAgregado']
            return render(request, "14 Creditos/verCreditosClientes.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "notificacionRenta":notificacionRenta,"idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, "listaCreditosPendientes":listaCreditosPendientes,
                                                                        "listaCreditosFinalizados":listaCreditosFinalizados, "pago4NoAgregado":pago4NoAgregado, "mensaje":mensaje, "contadorPendientes":contadorPendientes, "contadorFinalizado":contadorFinalizado, "notificacionCita":notificacionCita,
                                                                        "balanceSucursales":balanceSucursales, "montoPagadoTodasLasSucursales":montoPagadoTodasLasSucursales, "montoPendienteTodasLasSucursales":montoPendienteTodasLasSucursales, "montoTotalTodasLasSucursales":montoTotalTodasLasSucursales
            })
            
        

        return render(request, "14 Creditos/verCreditosClientes.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "notificacionRenta":notificacionRenta,"idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, "listaCreditosPendientes":listaCreditosPendientes,
                                                                        "listaCreditosFinalizados":listaCreditosFinalizados, "contadorPendientes":contadorPendientes, "contadorFinalizado":contadorFinalizado, "notificacionCita":notificacionCita,
                                                                        "balanceSucursales":balanceSucursales, "montoPagadoTodasLasSucursales":montoPagadoTodasLasSucursales, "montoPendienteTodasLasSucursales":montoPendienteTodasLasSucursales, "montoTotalTodasLasSucursales":montoTotalTodasLasSucursales
        })
        
        
        
    
    else:
        return render(request,"1 Login/login.html")
    

def pagosCreditosClientes(request):

    if "idSesion" in request.session:

       # Variables de sesión
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']
        idPerfil = idEmpleado
        idConfig = idEmpleado
       

        
     
      
        clientesCreditos =[]
        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
        
           #notificacionRentas
        notificacionRenta = notificacionRentas(request)

        #notificacionCitas
        notificacionCita = notificacionCitas(request)
        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)
        
        
        creditos =[]
        montosRestantes = []
        pagosQuincenales = []
        montosTotales = []
        sumasPagados = []
        
        totalYaPagado = []
        totalTotal = []
        
       
        
        totalCreditosPendientes= Creditos.objects.filter(estatus="Pendiente",concepto_credito ="Venta")
        contadorCreditosPendientes = 0
        for pendiente in totalCreditosPendientes:
            contadorCreditosPendientes = contadorCreditosPendientes +1
            idCreditoPendiente = pendiente.id_credito
            
            montoPagado = pendiente.monto_pagado
            montoTotal = pendiente.monto_pagar
         
            id_cliente =pendiente.cliente_id
            
            monto_pagar_total = pendiente.monto_pagar
       
                
            clientes = Clientes.objects.filter(id_cliente = id_cliente)
            for cliente in clientes:
                idCliente = cliente.id_cliente
                nombreCliente = cliente.nombre_cliente
                apellidoP = cliente.apellidoPaterno_cliente
                apellidoM = cliente.apellidoPaterno_cliente
            clienteCompleto= str(idCliente) + " - " + nombreCliente + " " + apellidoP + " " + apellidoM
            clientesCreditos.append(clienteCompleto)
            
            pagosCreditos = PagosCreditos.objects.filter(id_credito_id__id_credito = idCreditoPendiente)
            for x in pagosCreditos:
                idPago = x.id_historialCredito                           #0
                idC = x.id_credito_id                                    
                fechaPago1 = x.fecha_pago1
                tipoPago1 = x.tipo_pago1
                tipoTarjetaPago1 =x.tipo_tarjeta1
                referenciaPago1 =x.referencia_pago_tarjeta1
                clavePago1 =x.clave_rastreo_pago_transferencia1
                montoPago1 = x.monto_pago1
                
                fechaPago2 = x.fecha_pago2
                tipoPago2 = x.tipo_pago2
                tipoTarjetaPago2 =x.tipo_tarjeta2
                referenciaPago2 =x.referencia_pago_tarjeta2
                clavePago2 =x.clave_rastreo_pago_transferencia2
                montoPago2 = x.monto_pago2
                
                fechaPago3 = x.fecha_pago3
                tipoPago3 = x.tipo_pago3
                tipoTarjetaPago3 =x.tipo_tarjeta3
                referenciaPago3 =x.referencia_pago_tarjeta3
                clavePago3 =x.clave_rastreo_pago_transferencia3
                montoPago3 = x.monto_pago3
                
                fechaPago4 = x.fecha_pago4
                tipoPago4 = x.tipo_pago4
                tipoTarjetaPago4 =x.tipo_tarjeta4
                referenciaPago4 =x.referencia_pago_tarjeta4
                clavePago4 =x.clave_rastreo_pago_transferencia4
                montoPago4 = x.monto_pago4
                
                if montoPago1 == None and montoPago2 == None and montoPago3 == None and montoPago4 == None:
                    sumaPagados = 0
                    restante = monto_pagar_total
                    
                
                elif montoPago1 and montoPago2 == None and montoPago3 == None and montoPago4 == None:
                    sumaPagados = montoPago1
                    restante = monto_pagar_total - montoPago1
                    
                    
                elif montoPago1 and montoPago2  and montoPago3 == None and montoPago4 == None:
                    sumaPagados = montoPago1 + montoPago2
                    restante = monto_pagar_total - sumaPagados
                elif montoPago1 and montoPago2  and montoPago3  and montoPago4 == None:
                    sumaPagados = montoPago1 + montoPago2 + montoPago3
                    restante = monto_pagar_total - sumaPagados
                elif montoPago1 and montoPago2  and montoPago3  and montoPago4:
                    sumaPagados = montoPago1 + montoPago2 + montoPago3 + montoPago4
                    restante = monto_pagar_total - sumaPagados
                    
                #los pagos son a 4 quincenas
                pago_por_quincena = monto_pagar_total / 4
                
                    
            sumasPagados.append(sumaPagados)
            montosTotales.append(monto_pagar_total)
            pagosQuincenales.append(pago_por_quincena)
            montosRestantes.append(restante)
            totalYaPagado.append(montoPagado)
            totalTotal.append(montoTotal)
            creditos.append([idPago,idC,fechaPago1,tipoPago1,tipoTarjetaPago1,referenciaPago1,clavePago1,montoPago1,fechaPago2,tipoPago2,tipoTarjetaPago2,referenciaPago2,clavePago2,montoPago2,
                             fechaPago3,tipoPago3,tipoTarjetaPago3, referenciaPago3,clavePago3,montoPago3,fechaPago4,tipoPago4,tipoTarjetaPago4,referenciaPago4,clavePago4,montoPago4])
            
        
            
            
            
            
            
        listaCreditosPago1 = zip(creditos,clientesCreditos, pagosQuincenales,montosRestantes,montosTotales,sumasPagados, totalYaPagado,totalTotal)
        
        listaCreditosPago1Modal = zip(creditos,clientesCreditos, pagosQuincenales,montosRestantes,montosTotales,sumasPagados, totalYaPagado,totalTotal)
        listaCreditosPago2Modal = zip(creditos,clientesCreditos,pagosQuincenales, montosRestantes,montosTotales,sumasPagados,totalYaPagado,totalTotal)
        listaCreditosPago3Modal = zip(creditos,clientesCreditos,pagosQuincenales, montosRestantes,montosTotales,sumasPagados,totalYaPagado,totalTotal)
        listaCreditosPago4Modal = zip(creditos,clientesCreditos,pagosQuincenales, montosRestantes,montosTotales,sumasPagados,totalYaPagado,totalTotal)
        
        
        listaCreditosPago1JS = zip(creditos,clientesCreditos,pagosQuincenales, montosRestantes,montosTotales,sumasPagados)
        listaCreditosPago2JS = zip(creditos,clientesCreditos,pagosQuincenales, montosRestantes,montosTotales,sumasPagados)
        listaCreditosPago3JS = zip(creditos,clientesCreditos,pagosQuincenales, montosRestantes,montosTotales,sumasPagados)
        listaCreditosPago4JS = zip(creditos,clientesCreditos,pagosQuincenales, montosRestantes,montosTotales,sumasPagados)
        
      
        
        
            
            
            
        
            
        return render(request, "14 Creditos/pagosCreditos.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "notificacionRenta":notificacionRenta,"idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, "listaCreditosPago1":listaCreditosPago1,
                                                                        "creditos":creditos,"listaCreditosPago1Modal":listaCreditosPago1Modal,"listaCreditosPago2Modal":listaCreditosPago2Modal,
                                                                        "listaCreditosPago3Modal":listaCreditosPago3Modal,"listaCreditosPago4Modal":listaCreditosPago4Modal,"listaCreditosPago1JS":listaCreditosPago1JS,
                                                                        "listaCreditosPago2JS":listaCreditosPago2JS,"listaCreditosPago3JS":listaCreditosPago3JS,"listaCreditosPago4JS":listaCreditosPago4JS, "contadorCreditosPendientes":contadorCreditosPendientes, "notificacionCita":notificacionCita
                                                                        
        })
    
    else:
        return render(request,"1 Login/login.html")   



def activarConfiguracionCredito(request):

    if "idSesion" in request.session:

       if request.method == "POST":
            idConfiguracionCreditoAActivar = request.POST['idConfiguracionCredito']

            consultaConfiguracion = ConfiguracionCredito.objects.filter(id_configuracion_credito = idConfiguracionCreditoAActivar)


            for dato in consultaConfiguracion:
                idSucursal = dato.sucursal_id

                configuracionesSucursal = ConfiguracionCredito.objects.filter(sucursal_id__id_sucursal = idSucursal)

                configuracionActivaEnSucursal = False #Variable para saber si ya hay o si aun no hay una configuracion Activa..

                for configuracion in configuracionesSucursal:
                    if configuracion.activo == "S":
                        configuracionActivaEnSucursal = True

                if configuracionActivaEnSucursal == False: #Si no hay ninguna configuracion activa actualmente en esa sucursal..
                    actualizacionConfiguracionCredito = ConfiguracionCredito.objects.filter(id_configuracion_credito = idConfiguracionCreditoAActivar).update(activo = "S")
                elif configuracionActivaEnSucursal == True:
                    for config in configuracionesSucursal:
                        idConfig = config.id_configuracion_credito
                        ponerComoInactivoConfiguracion = ConfiguracionCredito.objects.filter(id_configuracion_credito = idConfig).update(activo = "N")
                    actualizacionConfiguracionCredito = ConfiguracionCredito.objects.filter(id_configuracion_credito = idConfiguracionCreditoAActivar).update(activo = "S")

            if actualizacionConfiguracionCredito:
                request.session['configuracionActivada'] = "La configuración de limite ha sido activada satisfactoriamente!"
                return redirect('/configuracionCredito/')
    else:
        return render(request,"1 Login/login.html")



def guardarVenta(request):
    if "idSesion" in request.session:
      
        idEmpleado = request.session['idSesion']
        if request.method == "POST":
            
            

            nameInput = "checkboxCredito"
            ventaEnCredito = False
            if request.POST.get(nameInput, False): #Credito Checkeado
                ventaEnCredito = True
            elif request.POST.get(nameInput, True): #Credito No checkeado
                ventaEnCredito = False

            esConEfectivo = False
            esConTarjeta = False
            esConTransferencia = False

            comentariosExtras = request.POST['comentarios']

            descuento = request.POST['descuento'] 

            if ventaEnCredito == False:  #No es una venta a credito, venta normal..

                fechaVenta = datetime.now() #La fecha con hora
                horaVenta= datetime.now().time()
                
                formaPago = request.POST['tipoPago'] #Efectivo,  tarjeta o transferencia
                sucursal = request.POST['idSucursal']
                if comentariosExtras == "":
                    comentarios = "Sin comentarios"
                else:
                    comentarios = comentariosExtras
                
                

                if formaPago == "Efectivo":
                    esConEfectivo = True
                elif formaPago == "Tarjeta":
                    esConTarjeta = True
                    tipo_tarjeta = request.POST['tipoTarjeta']    
                    referencia_tarjeta = request.POST['referenciaTarjeta'] 
                    
                elif formaPago == "Transferencia":
                    esConTransferencia = True
                    clave_transferencia = request.POST['claveRastreoTransferencia'] 

                empleadoVendedor = idEmpleado
               
                clienteMandado = request.POST['clienteSeleccionado'] #Puede ser un id de cliente o puede ser clienteMomentaneo
                if clienteMandado == "clienteMomentaneo":
                    cliente= "clienteMomentaneo"
                else:
                    arregloCliente = clienteMandado.split("-")
                    cliente = int(arregloCliente[0])
                 
                stringCodigosProductos = request.POST['codigosProductosVenta']
                stringCantidadedsProductos = request.POST['cantidadesProductosVenta']
                arregloProductosServiciosMandados = stringCodigosProductos.split(',')
                arregloCantidadesProductosServiciosMandados = stringCantidadedsProductos.split(',')
                productosVenta = []
                cantidadesProductosVenta = []
                serviciosCoporales =[]
                cantidadesServiciosCorporales = []
                serviciosFaciales = []
                cantidadesServiciosFaciales =[]
                
                lista = zip(arregloProductosServiciosMandados,arregloCantidadesProductosServiciosMandados)
                for pro_ser , cantidad in lista:
                    stringVenta = str(pro_ser)
               
                    intCantidad =int(cantidad)
                    if "PV" in stringVenta:
                        productosVenta.append(stringVenta)
                        cantidadesProductosVenta.append(intCantidad)
                    else:
                        intVenta = int(pro_ser)
                        datosServicios = Servicios.objects.filter(id_servicio = intVenta)
                        for dato in datosServicios:
                            tipoServicio = dato.tipo_servicio
                        if tipoServicio == "Facial":
                            serviciosFaciales.append(stringVenta)
                            cantidadesServiciosFaciales.append(intCantidad)
                        elif tipoServicio == "Corporal":
                            serviciosCoporales.append(stringVenta)
                            cantidadesServiciosCorporales.append(intCantidad)
                    
                listaProductosVenta =""
                cantidadesListaProductosVenta =""
                listaServiciosCorporales =""
                cantidadesListaServiciosCorporales =""
                listaServiciosFaciales =""
                cantidadesListaServiciosFaciales =""
                
                lProductos =zip(productosVenta,cantidadesProductosVenta)
                lProductos2 = zip(productosVenta,cantidadesProductosVenta)
                lProductos4 = zip(productosVenta,cantidadesProductosVenta)
                lServiciosCorporales =zip(serviciosCoporales,cantidadesServiciosCorporales)
                lServiciosCorporales2 = zip(serviciosCoporales,cantidadesServiciosCorporales)
                lServiciosFaciales =zip(serviciosFaciales,cantidadesServiciosFaciales)
                lServiciosFaciales2 =zip(serviciosFaciales,cantidadesServiciosFaciales)
                
                contadorProductos = 0
                for p,c in lProductos:
                    stringProducto =str(p)
                    stringCantidad =str(c)
                    contadorProductos =contadorProductos +1
                    if contadorProductos == 1:
                        listaProductosVenta=stringProducto
                        cantidadesListaProductosVenta =stringCantidad
                    else:
                        listaProductosVenta += "," + stringProducto 
                        cantidadesListaProductosVenta += "," + stringCantidad
                        
                contadorSerCorporal = 0
                for sCor, c in lServiciosCorporales:
                    stringServicioCorporal =str(sCor)
                    stringCantidadSerCorporal =str(c)
                    contadorSerCorporal = contadorSerCorporal +1
                    if contadorSerCorporal == 1:
                        listaServiciosCorporales=stringServicioCorporal
                        cantidadesListaServiciosCorporales =stringCantidadSerCorporal
                    else:
                        listaServiciosCorporales += "," + stringServicioCorporal
                        cantidadesListaServiciosCorporales += "," + stringCantidadSerCorporal
                
                contadorSerFacial = 0
                for sFac,c in lServiciosFaciales:
                    stringServicioFacial = str(sFac)
                    stringCantidadSerFacial = str(c)
                    contadorSerFacial = contadorSerFacial + 1
                    if contadorSerFacial == 1:
                        listaServiciosFaciales =stringServicioFacial
                        cantidadesListaServiciosFaciales =stringCantidadSerFacial
                    else:
                        listaServiciosFaciales += "," + stringServicioFacial
                        cantidadesListaServiciosFaciales += "," + stringCantidadSerFacial
                        
                    
                        
                        

                costoTotalAPagar = request.POST['costoTotalAPagar']

                #VAMOS A GUARDAR QUE NO EN CRÉDITO Y DEJAR NULO EL ID DEL CREDITO QUE ES FOREIGN KEY


                

                if descuento == "SinDescuento":
                    elCostoEsElMismo = True
                else:
                    consultaDescuento = Descuentos.objects.filter(porcentaje = descuento)
                    valorDescuento = 0
                    for datoDescuento in consultaDescuento:
                        valorDescuento = datoDescuento.porcentaje
                    stringDescuento = "."+str(valorDescuento)
                    floatDescuento = float(stringDescuento) #.15

                    multiplicacionResta = float(costoTotalAPagar) * floatDescuento
                    multiplicacionRestaConDosDecimales = round(multiplicacionResta, 2)
                    redondeoMulti = round(multiplicacionRestaConDosDecimales)

                    restaDescuento = float(costoTotalAPagar) - redondeoMulti
                    restaDescuentoDosDecimales = round(restaDescuento, 2)
                    redondeoRestaFinal = round(restaDescuentoDosDecimales)


                    costoTotalAPagar = redondeoRestaFinal

                #RegistrarProducto

                if esConEfectivo:
                    if cliente == "clienteMomentaneo":
                        if descuento == "SinDescuento":
                            registroVenta = Ventas(fecha_venta = fechaVenta, hora_venta =horaVenta,
                            tipo_pago = formaPago, 
                            empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),
                            ids_productos = listaProductosVenta, cantidades_productos = cantidadesListaProductosVenta,
                            ids_servicios_corporales =listaServiciosCorporales, cantidades_servicios_corporales =cantidadesListaServiciosCorporales,
                            ids_servicios_faciales =listaServiciosFaciales, cantidades_servicios_faciales =cantidadesListaServiciosFaciales,
                            monto_pagar = costoTotalAPagar, credito = "N",
                            comentariosVenta = comentarios, sucursal = Sucursales.objects.get(id_sucursal = sucursal))
                        else:
                            registroVenta = Ventas(fecha_venta = fechaVenta,  hora_venta =horaVenta,
                            tipo_pago = formaPago, 
                            empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),
                            ids_productos = listaProductosVenta, cantidades_productos = cantidadesListaProductosVenta,
                            ids_servicios_corporales =listaServiciosCorporales, cantidades_servicios_corporales =cantidadesListaServiciosCorporales,
                            ids_servicios_faciales =listaServiciosFaciales, cantidades_servicios_faciales =cantidadesListaServiciosFaciales,
                            monto_pagar = costoTotalAPagar, credito = "N", 
                            descuento = Descuentos.objects.get(porcentaje = descuento),
                            comentariosVenta = comentarios, sucursal = Sucursales.objects.get(id_sucursal = sucursal))
                    else:
                        if descuento == "SinDescuento":
                            registroVenta = Ventas(fecha_venta = fechaVenta,  hora_venta =horaVenta,
                            tipo_pago = formaPago, 
                            empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),
                            cliente = Clientes.objects.get(id_cliente = cliente),
                            ids_productos = listaProductosVenta, cantidades_productos = cantidadesListaProductosVenta,
                            ids_servicios_corporales =listaServiciosCorporales, cantidades_servicios_corporales =cantidadesListaServiciosCorporales,
                            ids_servicios_faciales =listaServiciosFaciales, cantidades_servicios_faciales =cantidadesListaServiciosFaciales,
                            monto_pagar = costoTotalAPagar, credito = "N",
                            comentariosVenta = comentarios, sucursal = Sucursales.objects.get(id_sucursal = sucursal))
                        else:
                            registroVenta = Ventas(fecha_venta = fechaVenta,  hora_venta =horaVenta,
                            tipo_pago = formaPago, 
                            empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),
                            cliente = Clientes.objects.get(id_cliente = cliente),
                            ids_productos = listaProductosVenta, cantidades_productos = cantidadesListaProductosVenta,
                            ids_servicios_corporales =listaServiciosCorporales, cantidades_servicios_corporales =cantidadesListaServiciosCorporales,
                            ids_servicios_faciales =listaServiciosFaciales, cantidades_servicios_faciales =cantidadesListaServiciosFaciales,
                            monto_pagar = costoTotalAPagar, credito = "N",
                            descuento = Descuentos.objects.get(porcentaje = descuento),
                            comentariosVenta = comentarios, sucursal = Sucursales.objects.get(id_sucursal = sucursal))

                    #registrar movimiento en caja
                  
                   


                if esConTarjeta:
                    if cliente == "clienteMomentaneo":
                        if descuento == "SinDescuento":
                            registroVenta = Ventas(fecha_venta = fechaVenta,  hora_venta =horaVenta,
                            tipo_pago = formaPago, tipo_tarjeta = tipo_tarjeta, referencia_pago_tarjeta = referencia_tarjeta,
                            empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),
                            ids_productos = listaProductosVenta, cantidades_productos = cantidadesListaProductosVenta,
                            ids_servicios_corporales =listaServiciosCorporales, cantidades_servicios_corporales =cantidadesListaServiciosCorporales,
                            ids_servicios_faciales =listaServiciosFaciales, cantidades_servicios_faciales =cantidadesListaServiciosFaciales,
                            monto_pagar = costoTotalAPagar, credito = "N",
                            comentariosVenta = comentarios, sucursal = Sucursales.objects.get(id_sucursal = sucursal))
                        else:
                            registroVenta = Ventas(fecha_venta = fechaVenta,  hora_venta =horaVenta,
                            tipo_pago = formaPago, tipo_tarjeta = tipo_tarjeta, referencia_pago_tarjeta = referencia_tarjeta,
                            empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),
                            ids_productos = listaProductosVenta, cantidades_productos = cantidadesListaProductosVenta,
                            ids_servicios_corporales =listaServiciosCorporales, cantidades_servicios_corporales =cantidadesListaServiciosCorporales,
                            ids_servicios_faciales =listaServiciosFaciales, cantidades_servicios_faciales =cantidadesListaServiciosFaciales,
                            monto_pagar = costoTotalAPagar, credito = "N",
                            descuento = Descuentos.objects.get(porcentaje = descuento),
                            comentariosVenta = comentarios, sucursal = Sucursales.objects.get(id_sucursal = sucursal))
                    else:
                        if descuento == "SinDescuento":
                            registroVenta = Ventas(fecha_venta = fechaVenta,  hora_venta =horaVenta,
                            tipo_pago = formaPago, tipo_tarjeta = tipo_tarjeta, referencia_pago_tarjeta = referencia_tarjeta,
                            empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),
                            cliente = Clientes.objects.get(id_cliente = cliente),
                            ids_productos = listaProductosVenta, cantidades_productos = cantidadesListaProductosVenta,
                            ids_servicios_corporales =listaServiciosCorporales, cantidades_servicios_corporales =cantidadesListaServiciosCorporales,
                            ids_servicios_faciales =listaServiciosFaciales, cantidades_servicios_faciales =cantidadesListaServiciosFaciales,
                            monto_pagar = costoTotalAPagar, credito = "N",
                            comentariosVenta = comentarios, sucursal = Sucursales.objects.get(id_sucursal = sucursal))
                        else:
                            registroVenta = Ventas(fecha_venta = fechaVenta,  hora_venta =horaVenta,
                            tipo_pago = formaPago, tipo_tarjeta = tipo_tarjeta, referencia_pago_tarjeta = referencia_tarjeta,
                            empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),
                            cliente = Clientes.objects.get(id_cliente = cliente),
                            ids_productos = listaProductosVenta, cantidades_productos = cantidadesListaProductosVenta,
                            ids_servicios_corporales =listaServiciosCorporales, cantidades_servicios_corporales =cantidadesListaServiciosCorporales,
                            ids_servicios_faciales =listaServiciosFaciales, cantidades_servicios_faciales =cantidadesListaServiciosFaciales,
                            monto_pagar = costoTotalAPagar, credito = "N",
                            descuento = Descuentos.objects.get(porcentaje = descuento),
                            comentariosVenta = comentarios, sucursal = Sucursales.objects.get(id_sucursal = sucursal))
                            
                        
                    


                if esConTransferencia:
                    if cliente == "clienteMomentaneo":
                        if descuento == "SinDescuento":
                            registroVenta = Ventas(fecha_venta = fechaVenta,  hora_venta =horaVenta,
                            tipo_pago = formaPago, clave_rastreo_transferencia = clave_transferencia,
                            empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),
                            ids_productos = listaProductosVenta, cantidades_productos = cantidadesListaProductosVenta,
                            ids_servicios_corporales =listaServiciosCorporales, cantidades_servicios_corporales =cantidadesListaServiciosCorporales,
                            ids_servicios_faciales =listaServiciosFaciales, cantidades_servicios_faciales =cantidadesListaServiciosFaciales,
                            monto_pagar = costoTotalAPagar, credito = "N")
                        else:
                            registroVenta = Ventas(fecha_venta = fechaVenta,  hora_venta =horaVenta,
                            tipo_pago = formaPago, clave_rastreo_transferencia = clave_transferencia,
                            empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),
                            ids_productos = listaProductosVenta, cantidades_productos = cantidadesListaProductosVenta,
                            ids_servicios_corporales =listaServiciosCorporales, cantidades_servicios_corporales =cantidadesListaServiciosCorporales,
                            ids_servicios_faciales =listaServiciosFaciales, cantidades_servicios_faciales =cantidadesListaServiciosFaciales,
                            monto_pagar = costoTotalAPagar, credito = "N",
                            descuento = Descuentos.objects.get(porcentaje = descuento))
                        
                    else:
                        if descuento == "SinDescuento":
                            registroVenta = Ventas(fecha_venta = fechaVenta,  hora_venta =horaVenta,
                            tipo_pago = formaPago, clave_rastreo_transferencia = clave_transferencia,
                            empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),
                            cliente = Clientes.objects.get(id_cliente = cliente),
                            ids_productos = listaProductosVenta, cantidades_productos = cantidadesListaProductosVenta,
                            ids_servicios_corporales =listaServiciosCorporales, cantidades_servicios_corporales =cantidadesListaServiciosCorporales,
                            ids_servicios_faciales =listaServiciosFaciales, cantidades_servicios_faciales =cantidadesListaServiciosFaciales,
                            monto_pagar = costoTotalAPagar, credito = "N")
                        else:
                            registroVenta = Ventas(fecha_venta = fechaVenta,  hora_venta =horaVenta,
                            tipo_pago = formaPago, clave_rastreo_transferencia = clave_transferencia,
                            empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),
                            cliente = Clientes.objects.get(id_cliente = cliente),
                            ids_productos = listaProductosVenta, cantidades_productos = cantidadesListaProductosVenta,
                            ids_servicios_corporales =listaServiciosCorporales, cantidades_servicios_corporales =cantidadesListaServiciosCorporales,
                            ids_servicios_faciales =listaServiciosFaciales, cantidades_servicios_faciales =cantidadesListaServiciosFaciales,
                            monto_pagar = costoTotalAPagar, credito = "N",
                            descuento = Descuentos.objects.get(porcentaje = descuento))
                        

                
                registroVenta.save()
                
            elif ventaEnCredito == True: #Venta a credito..
                
                fechaVenta = datetime.now() #La fecha con hora
                horaVenta= datetime.now().time()
               
                sucursal = request.POST['idSucursal']
                comentariosExtras = request.POST['comentarios']
                
                if comentariosExtras == "":
                    comentarios = "Sin comentarios"
                else:
                    comentarios = comentariosExtras
                 

                empleadoVendedor = idEmpleado
               
                clienteMandado = request.POST['clienteSeleccionado'] #Puede ser un id de cliente o puede ser clienteMomentaneo
                arregloCliente = clienteMandado.split("-")
                cliente = int(arregloCliente[0])
                 
                stringCodigosProductos = request.POST['codigosProductosVenta']# String "PV1000,1"
                stringCantidadedsProductos = request.POST['cantidadesProductosVenta']
                
                arregloProductosServiciosMandados = stringCodigosProductos.split(',')
                arregloCantidadesProductosServiciosMandados = stringCantidadedsProductos.split(',')
                productosVenta = []
                cantidadesProductosVenta = []
                serviciosCoporales =[]
                cantidadesServiciosCorporales = []
                serviciosFaciales = []
                cantidadesServiciosFaciales =[]
                
                lista = zip(arregloProductosServiciosMandados,arregloCantidadesProductosServiciosMandados)
                for pro_ser , cantidad in lista:
                    stringVenta = str(pro_ser)
               
                    intCantidad =int(cantidad)
                    if "PV" in stringVenta:
                        productosVenta.append(stringVenta)
                        cantidadesProductosVenta.append(intCantidad)
                    else:
                        intVenta = int(pro_ser)
                        datosServicios = Servicios.objects.filter(id_servicio = intVenta)
                        for dato in datosServicios:
                            tipoServicio = dato.tipo_servicio
                        if tipoServicio == "Facial":
                            serviciosFaciales.append(stringVenta)
                            cantidadesServiciosFaciales.append(intCantidad)
                        elif tipoServicio == "Corporal":
                            serviciosCoporales.append(stringVenta)
                            cantidadesServiciosCorporales.append(intCantidad)
                    
                listaProductosVenta =""
                cantidadesListaProductosVenta =""
                listaServiciosCorporales =""
                cantidadesListaServiciosCorporales =""
                listaServiciosFaciales =""
                cantidadesListaServiciosFaciales =""
                
                lProductos =zip(productosVenta,cantidadesProductosVenta)
                lProductos2 = zip(productosVenta,cantidadesProductosVenta)
                lProductos3 = zip(productosVenta,cantidadesProductosVenta)
                lProductos4 = zip(productosVenta,cantidadesProductosVenta)
                lServiciosCorporales =zip(serviciosCoporales,cantidadesServiciosCorporales)
                lServiciosCorporales2 = zip(serviciosCoporales,cantidadesServiciosCorporales)
                lServiciosFaciales =zip(serviciosFaciales,cantidadesServiciosFaciales)
                lServiciosFaciales2 =zip(serviciosFaciales,cantidadesServiciosFaciales)
                
                contadorProductos = 0
                for p,c in lProductos:
                    stringProducto =str(p)
                    stringCantidad =str(c)
                    contadorProductos =contadorProductos +1
                    if contadorProductos == 1:
                        listaProductosVenta=stringProducto
                        cantidadesListaProductosVenta =stringCantidad
                    else:
                        listaProductosVenta += "," + stringProducto 
                        cantidadesListaProductosVenta += "," + stringCantidad
                        
                contadorSerCorporal = 0
                for sCor, c in lServiciosCorporales:
                    stringServicioCorporal =str(sCor)
                    stringCantidadSerCorporal =str(c)
                    contadorSerCorporal = contadorSerCorporal +1
                    if contadorSerCorporal == 1:
                        listaServiciosCorporales=stringServicioCorporal
                        cantidadesListaServiciosCorporales =stringCantidadSerCorporal
                    else:
                        listaServiciosCorporales += "," + stringServicioCorporal
                        cantidadesListaServiciosCorporales += "," + stringCantidadSerCorporal
                
                contadorSerFacial = 0
                for sFac,c in lServiciosFaciales:
                    stringServicioFacial = str(sFac)
                    stringCantidadSerFacial = str(c)
                    contadorSerFacial = contadorSerFacial + 1
                    if contadorSerFacial == 1:
                        listaServiciosFaciales =stringServicioFacial
                        cantidadesListaServiciosFaciales =stringCantidadSerFacial
                    else:
                        listaServiciosFaciales += "," + stringServicioFacial
                        cantidadesListaServiciosFaciales += "," + stringCantidadSerFacial
                        
                    
                        
                        

                costoTotalAPagar = request.POST['costoTotalAPagar']
                #COSTO TOTAL ES 88

                #VAMOS A GUARDAR QUE NO EN CRÉDITO Y DEJAR NULO EL ID DEL CREDITO QUE ES FOREIGN KEY


                descuento = request.POST['descuento'] 

                if descuento == "SinDescuento":
                    elCostoEsElMismo = True
                    #Se suma el 20% del total
                else:
                    consultaDescuento = Descuentos.objects.filter(porcentaje = descuento)
                    valorDescuento = 0
                    for datoDescuento in consultaDescuento:
                        valorDescuento = datoDescuento.porcentaje
                    stringDescuento = "."+str(valorDescuento)
                    floatDescuento = float(stringDescuento) #.15

                    multiplicacionResta = float(costoTotalAPagar) * floatDescuento
                    multiplicacionRestaConDosDecimales = round(multiplicacionResta, 2)
                    redondeoMulti = round(multiplicacionRestaConDosDecimales)

                    restaDescuento = float(costoTotalAPagar) - redondeoMulti
                    restaDescuentoDosDecimales = round(restaDescuento, 2)
                    redondeoRestaFinal = round(restaDescuentoDosDecimales)


                    costoTotalAPagar = redondeoRestaFinal

                #RegistrarProducto
                costoTotalAPagarConElVeinte = float(costoTotalAPagar) * 1.20
                costoTotalAPagarConElVeinteRedondeado = round(costoTotalAPagarConElVeinte)

                
                if cliente == "clienteMomentaneo":
                    if descuento == "SinDescuento":

                        registroVenta = Ventas(fecha_venta = fechaVenta, hora_venta =horaVenta,
                        empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),
                        ids_productos = listaProductosVenta, cantidades_productos = cantidadesListaProductosVenta,
                        ids_servicios_corporales =listaServiciosCorporales, cantidades_servicios_corporales =cantidadesListaServiciosCorporales,
                        ids_servicios_faciales =listaServiciosFaciales, cantidades_servicios_faciales =cantidadesListaServiciosFaciales,
                        monto_pagar = costoTotalAPagar, credito = "S",
                        comentariosVenta = comentarios, sucursal = Sucursales.objects.get(id_sucursal = sucursal))

                        esACredito = True
                    else:
                        registroVenta = Ventas(fecha_venta = fechaVenta,  hora_venta =horaVenta,
                        empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),
                        ids_productos = listaProductosVenta, cantidades_productos = cantidadesListaProductosVenta,
                        ids_servicios_corporales =listaServiciosCorporales, cantidades_servicios_corporales =cantidadesListaServiciosCorporales,
                        ids_servicios_faciales =listaServiciosFaciales, cantidades_servicios_faciales =cantidadesListaServiciosFaciales,
                        monto_pagar = costoTotalAPagar, credito = "S", 
                        descuento = Descuentos.objects.get(porcentaje = descuento),
                        comentariosVenta = comentarios, sucursal = Sucursales.objects.get(id_sucursal = sucursal))
                    
                        esACredito = True
                else:
                   
                    if descuento == "SinDescuento":

                        registroVenta = Ventas(fecha_venta = fechaVenta, hora_venta =horaVenta,
                        empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),
                        ids_productos = listaProductosVenta, cantidades_productos = cantidadesListaProductosVenta,
                        ids_servicios_corporales =listaServiciosCorporales, cantidades_servicios_corporales =cantidadesListaServiciosCorporales,
                        ids_servicios_faciales =listaServiciosFaciales, cantidades_servicios_faciales =cantidadesListaServiciosFaciales,
                        monto_pagar = costoTotalAPagarConElVeinteRedondeado, credito = "S",
                        cliente = Clientes.objects.get(id_cliente = cliente),
                        comentariosVenta = comentarios, sucursal = Sucursales.objects.get(id_sucursal = sucursal))

                        ventaEnCredito = True
                    else:
                        registroVenta = Ventas(fecha_venta = fechaVenta,  hora_venta =horaVenta,
                        empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),
                        ids_productos = listaProductosVenta, cantidades_productos = cantidadesListaProductosVenta,
                        ids_servicios_corporales =listaServiciosCorporales, cantidades_servicios_corporales =cantidadesListaServiciosCorporales,
                        ids_servicios_faciales =listaServiciosFaciales, cantidades_servicios_faciales =cantidadesListaServiciosFaciales,
                        monto_pagar = costoTotalAPagarConElVeinteRedondeado, credito = "S",
                        cliente = Clientes.objects.get(id_cliente = cliente),
                        descuento = Descuentos.objects.get(porcentaje = descuento),
                        comentariosVenta = comentarios, sucursal = Sucursales.objects.get(id_sucursal = sucursal))
                    
                        esACredito = True
                  
                   

                        

                
                registroVenta.save()

                
                

                
            

            if registroVenta and esConEfectivo:
                ultimoId = 0
                ventasTotalesEfectivo = Ventas.objects.filter(tipo_pago ="Efectivo")
                for venta in ventasTotalesEfectivo:
                    ultimoId = venta.id_venta
                tipoMovimiento ="IN"
                montoMovimiento = float(costoTotalAPagar)
                descripcionMovimiento ="Movimiento por venta " + str(ultimoId)
                fechaMovimiento = datetime.today().strftime('%Y-%m-%d')
                horaMovimiento = datetime.now().time()
                ingresarCantidadEfectivoAcaja =MovimientosCaja(fecha =fechaMovimiento,hora = horaMovimiento,tipo=tipoMovimiento,monto =montoMovimiento, descripcion=descripcionMovimiento,sucursal =  Sucursales.objects.get(id_sucursal = sucursal),
                                                                       realizado_por = Empleados.objects.get(id_empleado = empleadoVendedor))
                ingresarCantidadEfectivoAcaja.save()

                request.session['ventaAgregada'] = "La venta ha sido agregada satisfactoriamente!"

                #Descontar los proudctos..
                if listaProductosVenta == "":
                    sinProductos = True
                else:
                    for codigo, cantidad in lProductos2:
                        strCodigo = str(codigo)
                        intCantidad = int(cantidad)

                        consultaProducto = ProductosVenta.objects.filter(codigo_producto = strCodigo)
                        for dato in consultaProducto:
                            cantidadActualEnExistencia = dato.cantidad
                        actualizacionCantidad = cantidadActualEnExistencia - intCantidad

                        actualizarProducto = ProductosVenta.objects.filter(codigo_producto = strCodigo).update(cantidad = actualizacionCantidad)
                
                if listaServiciosCorporales == "":
                    sinServiciosCorporales = True
                else:
                    for idd, cantidad in lServiciosCorporales2:
                        intid = int(idd)
                        intCantidad = int(cantidad)

                        consultaServicioProductos = ServiciosProductosGasto.objects.filter(servicio_id__id_servicio = intid)
                        if consultaServicioProductos:
                            sinProductos = False

                            idsProductosQueUtilizaElServicio = []
                            for producto in consultaServicioProductos:
                                idProducto = producto.producto_gasto_id
                                cantidadUtilizada = producto.cantidad

                                idsProductosQueUtilizaElServicio.append([idProducto, cantidadUtilizada])

                            for productoCorporal in idsProductosQueUtilizaElServicio:
                                idProductoSC = int(productoCorporal[0])
                                cantidadPSC = int(productoCorporal[1])

                                consultaProducto = ProductosGasto.objects.filter(id_producto = idProductoSC)
                                for dato in consultaProducto:
                                    cantidadActualEnExistencia = dato.cantidad
                                    cuantificable = dato.contenido_cuantificable  #N O S
                                
                                if cuantificable == "S":
                                    cantidadARestar = intCantidad * cantidadPSC
                                    actualizacionCantidad = cantidadActualEnExistencia - cantidadARestar

                                    actualizarProducto = ProductosGasto.objects.filter(id_producto = idProductoSC).update(cantidad = actualizacionCantidad)
                        else:
                            sinProductos = True

                        

                if listaServiciosFaciales == "":
                    sinServiciosFaciales = True
                else:
                    for idFacial, cantidadFacial in lServiciosFaciales2:
                        intidFacial = int(idFacial)
                        intCantidadFacial = int(cantidadFacial)

                        consultaServicioProductos = ServiciosProductosGasto.objects.filter(servicio_id__id_servicio = intidFacial)
                        if consultaServicioProductos:
                            sinProductos = False

                            idsProductosQueUtilizaElServicio = []
                            for producto in consultaServicioProductos:
                                idProducto = producto.producto_gasto_id
                                cantidadUtilizada = producto.cantidad

                                idsProductosQueUtilizaElServicio.append([idProducto, cantidadUtilizada])

                            for productoFacial in idsProductosQueUtilizaElServicio:
                                idProductoSF = int(productoFacial[0])
                                cantidadPSF = int(productoFacial[1])

                                consultaProducto = ProductosGasto.objects.filter(id_producto = idProductoSF)
                                for dato in consultaProducto:
                                    cantidadActualEnExistencia = dato.cantidad
                                    cuantificable = dato.contenido_cuantificable  #N O S
                                
                                if cuantificable == "S":
                                    cantidadARestar = intCantidadFacial * cantidadPSF
                                    actualizacionCantidad = cantidadActualEnExistencia - cantidadARestar

                                    actualizarProducto = ProductosGasto.objects.filter(id_producto = idProductoSF).update(cantidad = actualizacionCantidad)
                        else:
                            sinProductos = True

                
                #IMPRESION DE TICKEEETSSSS
                #Ultimo id de venta
                consultaVentas = Ventas.objects.all()
                ultimoIdVenta = 0
                for venta in consultaVentas:
                    ultimoIdVenta = venta.id_venta

                #Fecha
                hoy = datetime.now()
                hoyFormato = hoy.strftime('%Y/%m/%d')

                #Empleado vendedor
                consultaEmpleadoVendedor = Empleados.objects.filter(id_empleado = empleadoVendedor)
                for datoVendedor in consultaEmpleadoVendedor:
                    nombreEmpleado = datoVendedor.nombres
                    apellidoPatEmpleado = datoVendedor.apellido_paterno

                nombreCompletoEmpleadoVendedor = nombreEmpleado + " "+ apellidoPatEmpleado

                #Datos sucurssal
                consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursal)
                for datoSucursal in consultaSucursal:
                    nombreSucursal = datoSucursal.nombre
                    telefonoSucursal = datoSucursal.telefono
                    direccionSucursal = datoSucursal.direccion

                #DatosCliente
                if cliente == "clienteMomentaneo":
                    nombreClienteTicket = "Momentaneo"

                else:
                    consultaCliente = Clientes.objects.filter(id_cliente = cliente)
                    for datoCliente in consultaCliente:
                        idCienteTicket = datoCliente.id_cliente
                        nombreCliente = datoCliente.nombre_cliente
                        apellidoCliente = datoCliente.apellidoPaterno_cliente

                    nombreClienteTicket = nombreCliente + " " + apellidoCliente
                #Hora bien
                horaVenta = horaVenta.strftime("%H:%M:%S")

                # Esto es para obtener las impresoras. No es obligatorio hacerlo siempre que se quiera imprimir
                impresoras = Conector.ConectorV3.obtenerImpresoras()
                print(f"Las impresoras son: {impresoras}")

                contadorTickets = 0
                for x in range(2):
                    contadorTickets = contadorTickets + 1
                    c = Conector.ConectorV3()
                    c.Iniciar()
                    c.Corte(1)
                    
                    c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                    # Recuerda que la imagen debe existir y debe ser legible para el plugin. Si no, comenta las líneas
                    c.CargarImagenLocalEImprimir("C:\\COSTABELLA\\sistemaCostabella\\static\\images\\anegragrande.png", 0, 216)
                    c.EscribirTexto("\n")
                    c.EstablecerTamañoFuente(1, 1)
                    c.EstablecerEnfatizado(True)
                    c.EscribirTexto("Sucursal: "+nombreSucursal+"\n")
                    c.EstablecerEnfatizado(False)
                    c.EscribirTexto("TEL: "+telefonoSucursal+"\n")
                    c.TextoSegunPaginaDeCodigos(2, "cp850", direccionSucursal+"\n")

                    c.EstablecerEnfatizado(True)
                    c.EscribirTexto("================================================\n")
                    c.EstablecerTamañoFuente(2, 2)
                    c.EscribirTexto("VENTA #"+str(ultimoIdVenta)+"\n")
                    c.EstablecerEnfatizado(False)
                    c.EstablecerAlineacion(Conector.ALINEACION_IZQUIERDA)
                    c.EstablecerTamañoFuente(1, 1)
                    c.EscribirTexto("\n")
                    c.EscribirTexto(" "+str(hoyFormato)+" - "+str(horaVenta)+" hrs.\n")
                    c.EscribirTexto("Atendida por: "+nombreCompletoEmpleadoVendedor+".\n")
                    c.EscribirTexto("\n")

                    #Listado de productos 
                    #Productos venta
                    lProductos3 = zip(productosVenta,cantidadesProductosVenta)
                    
                    lServiciosFaciales3 =zip(serviciosFaciales,cantidadesServiciosFaciales)
                    for codigo, cantidad in lProductos3:
                        strCodigo = str(codigo)
                        strCantidad = str(cantidad)
                        consultaProductoVenta = ProductosVenta.objects.filter(codigo_producto = strCodigo)
                        for datoProductoVenta in consultaProductoVenta:
                            nombreProducto = datoProductoVenta.nombre_producto
                            costoIndividualProducto = datoProductoVenta.costo_venta

                        floatCantidad = float(cantidad)
                        costototalProducto = costoIndividualProducto * floatCantidad
                        costototalProductoDosDecimales = round(costototalProducto, 2)
                        costototalProductoDosDecimales = str(costototalProductoDosDecimales)

                        costoTotalProductoDivididoEnElPunto = costototalProductoDosDecimales.split(".")
                        longitudCostoTotal = len(str(costoTotalProductoDivididoEnElPunto[0]))
                        longitudCostoTotal = int(longitudCostoTotal)

                        
                        caracteresProducto = len(nombreProducto)

                        if longitudCostoTotal == 1:
                            espacio = 38
                        elif longitudCostoTotal == 2:
                            espacio = 37
                        elif longitudCostoTotal == 3:
                            espacio = 36
                        elif longitudCostoTotal == 4:
                            espacio = 35
                        elif longitudCostoTotal == 5:
                            espacio = 34
                        elif longitudCostoTotal == 6:
                            espacio = 33
                        numeroEspacios = espacio - int(caracteresProducto)
                        
                        espaciosTicket = ""
                        for x in range(numeroEspacios):
                            espacioMini = " "
                            espaciosTicket = espaciosTicket + espacioMini
                        c.EscribirTexto(strCantidad+" x "+nombreProducto+espaciosTicket+str(costototalProductoDosDecimales)+"\n")


                    #Servicios Corporales
                    lServiciosCorporales3 = zip(serviciosCoporales,cantidadesServiciosCorporales)
                    for idd, cantidad in lServiciosCorporales3:
                        idServicioCorporal = int(idd)
                        strCantidad = str(cantidad)
                        consultaServicio = Servicios.objects.filter(id_servicio = idServicioCorporal)
                        for datoServicio in consultaServicio:
                            nombreServicio = datoServicio.nombre_servicio
                            costoIndividual = datoServicio.precio_venta

                        floatCantidad = float(cantidad)
                        costototalProducto = costoIndividual * floatCantidad
                        costototalProductoDosDecimales = round(costototalProducto, 2)
                        costototalProductoDosDecimales = str(costototalProductoDosDecimales)

                        costoTotalProductoDivididoEnElPunto = costototalProductoDosDecimales.split(".")
                        longitudCostoTotal = len(str(costoTotalProductoDivididoEnElPunto[0]))
                        longitudCostoTotal = int(longitudCostoTotal)

                        
                        caracteresProducto = len(nombreServicio)

                        if longitudCostoTotal == 2:
                            espacio = 38
                        if longitudCostoTotal == 2:
                            espacio = 37
                        elif longitudCostoTotal == 3:
                            espacio = 36
                        elif longitudCostoTotal == 4:
                            espacio = 35
                        elif longitudCostoTotal == 5:
                            espacio = 34
                        elif longitudCostoTotal == 6:
                            espacio = 33
                        numeroEspacios = espacio - int(caracteresProducto)
                        
                        espaciosTicket = ""
                        for x in range(numeroEspacios):
                            espacioMini = " "
                            espaciosTicket = espaciosTicket + espacioMini
                        c.EscribirTexto(strCantidad+" x "+nombreServicio+espaciosTicket+str(costototalProductoDosDecimales)+"\n")

                    #Servicios Faciales
                    lServiciosFaciales3 = zip(serviciosFaciales,cantidadesServiciosFaciales)
                    for idd, cantidad in lServiciosFaciales3:
                        idServicioFacial = int(idd)
                        strCantidad = str(cantidad)
                        consultaServicio = Servicios.objects.filter(id_servicio = idServicioFacial)
                        for datoServicio in consultaServicio:
                            nombreServicio = datoServicio.nombre_servicio
                            costoIndividual = datoServicio.precio_venta

                        floatCantidad = float(cantidad)
                        costototalProducto = costoIndividual * floatCantidad
                        costototalProductoDosDecimales = round(costototalProducto, 2)
                        costototalProductoDosDecimales = str(costototalProductoDosDecimales)

                        costoTotalProductoDivididoEnElPunto = costototalProductoDosDecimales.split(".")
                        longitudCostoTotal = len(str(costoTotalProductoDivididoEnElPunto[0]))
                        longitudCostoTotal = int(longitudCostoTotal)

                        
                        caracteresProducto = len(nombreServicio)

                        if longitudCostoTotal == 1:
                            espacio = 39
                        if longitudCostoTotal == 2:
                            espacio = 38
                        elif longitudCostoTotal == 3:
                            espacio = 37
                        elif longitudCostoTotal == 4:
                            espacio = 36
                        elif longitudCostoTotal == 5:
                            espacio = 33
                        elif longitudCostoTotal == 6:
                            espacio = 32
                        numeroEspacios = espacio - int(caracteresProducto)
                        
                        espaciosTicket = ""
                        for x in range(numeroEspacios):
                            espacioMini = " "
                            espaciosTicket = espaciosTicket + espacioMini
                        c.EscribirTexto(strCantidad+" x "+nombreServicio+espaciosTicket+str(costototalProductoDosDecimales)+"\n")



                    
                    c.EscribirTexto("\n")
                    c.EscribirTexto("\n")
                    
                    if descuento == "SinDescuento":
                        c.EstablecerTamañoFuente(2, 2)
                        c.EstablecerAlineacion(Conector.ALINEACION_DERECHA)
                        c.EscribirTexto("TOTAL:  $"+str(costoTotalAPagar)+"\n")
                    else:
                        intDescuento = int(descuento)
                        consultaDescuentos = Descuentos.objects.filter(porcentaje = intDescuento)
                        for datoDescuento in consultaDescuentos:
                            nombreDescuento = datoDescuento.nombre_descuento
                            porcentajeDescuento = datoDescuento.porcentaje

                        porcentajePagado = 100 - porcentajeDescuento #85
                        totalSinDescuento1 = 100 * costoTotalAPagar
                        totalSinDescuento2 = totalSinDescuento1/porcentajePagado
                        totalSinDescuento2 = round(totalSinDescuento2)

                        primerMulti = porcentajeDescuento * float(totalSinDescuento2)
                        primerDivision = primerMulti/100
                        resultadoDescuento = round(primerDivision)
                        
                        costoTotalAPagarConDescuento = totalSinDescuento2 - resultadoDescuento

                        c.EstablecerTamañoFuente(1, 1)
                        c.EstablecerAlineacion(Conector.ALINEACION_DERECHA)
                        c.EscribirTexto("Subtotal:  $"+str(totalSinDescuento2)+"\n")
                        c.EscribirTexto("Descuento:  $"+str(resultadoDescuento)+"\n")
                        c.EstablecerTamañoFuente(2, 2)
                        c.EscribirTexto("TOTAL:  $"+str(costoTotalAPagarConDescuento)+"\n")
                        c.EstablecerTamañoFuente(1, 1)
                        c.EscribirTexto("Descuento aplicado: -"+str(porcentajeDescuento)+"%- "+str(nombreDescuento)+"\n")

                    c.EscribirTexto("\n")
                    c.EstablecerEnfatizado(True)
                    c.EstablecerTamañoFuente(1, 1)
                    c.EscribirTexto("========== IVA incluido en el precio ==========\n")
                    c.EscribirTexto("\n")
                    c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                    c.TextoSegunPaginaDeCodigos(2, "cp850", "INFORMACION DE PAGO.\n")
                    c.EstablecerEnfatizado(False)
                    c.EscribirTexto("\n")
                    if esConEfectivo:
                        c.EscribirTexto("Pago en efectivo.\n")
                    elif esConTarjeta:
                        c.EscribirTexto("Pago con "+str(tipo_tarjeta)+".\n")
                        c.EscribirTexto("Referencia: "+referencia_tarjeta+".\n")
                    elif esConTransferencia:
                        c.EscribirTexto("Transferencia.\n")
                        c.EscribirTexto("Clave de rastreo: "+str(clave_transferencia)+".\n")
                    c.EscribirTexto("\n")
                    c.EstablecerEnfatizado(True)
                    c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                    c.TextoSegunPaginaDeCodigos(2, "cp850", "INFORMACIÓN DE CLIENTE.\n")

                    if nombreClienteTicket == "Momentaneo":
                        c.EstablecerEnfatizado(False)
                        c.EscribirTexto("Cliente momentaneo.\n")
                    else:
                        c.EstablecerEnfatizado(False)
                        c.EscribirTexto("ID:"+str(idCienteTicket)+" - "+nombreClienteTicket+".\n")
                    c.EscribirTexto("=========== Gracias por su compra!! ===========\n")
                    c.EstablecerTamañoFuente(2, 2)
                    c.EstablecerEnfatizado(True)
                    c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                    if contadorTickets == 1:
                        c.EscribirTexto("\n")
                        c.EscribirTexto("COPIA TIENDA.\n")
                    else:
                        c.EscribirTexto("\n")
                        c.EscribirTexto("COPIA CLIENTE.\n")
                    c.EscribirTexto("\n")
                    c.EstablecerTamañoFuente(1, 1)
                    

                    c.Feed(1)
                    c.Corte(1)
                    #c.abrirCajon()
                    c.Pulso(48, 60, 120)
                    print("Imprimiendo...")
                    # Recuerda cambiar por el nombre de tu impresora
                    respuesta = c.imprimirEn("POS80 Printer")
                    if respuesta == True:
                        print("Impresión correcta")
                    else:
                        print(f"Error. El mensaje es: {respuesta}")
                    

                #Verificar si el nombre de producto existe en los productos para renta, y en caso de que si, cambiar el estatus
                for producto, cantidad in lProductos4:
                    codigoProducto = str(producto)
                    consultaProducto = ProductosVenta.objects.filter(codigo_producto = codigoProducto)
                    for datoProducto in consultaProducto:
                        nombreProducto = datoProducto.nombre_producto

                    #Consulta a ver si algun producto renta tiene ese mismo nombre, y cambiarle el estatus
                    consultaProductoRenta = ProductosRenta.objects.filter(nombre_producto = nombreProducto)
                    if consultaProductoRenta:
                        actualizacionVestido = ProductosRenta.objects.filter(nombre_producto = nombreProducto).update(estado_renta = "Vendido")

                return redirect('/ventas/')
                
            if registroVenta:
                            
                request.session['ventaAgregada'] = "La venta ha sido agregada satisfactoriamente!"

                #Descontar los proudctos..
                if listaProductosVenta == "":
                    sinProductos = True
                else:
                    for codigo, cantidad in lProductos2:
                        strCodigo = str(codigo)
                        intCantidad = int(cantidad)

                        consultaProducto = ProductosVenta.objects.filter(codigo_producto = strCodigo)
                        for dato in consultaProducto:
                            cantidadActualEnExistencia = dato.cantidad
                        actualizacionCantidad = cantidadActualEnExistencia - intCantidad

                        actualizarProducto = ProductosVenta.objects.filter(codigo_producto = strCodigo).update(cantidad = actualizacionCantidad)
                
                if listaServiciosCorporales == "":
                    sinServiciosCorporales = True
                else:
                    for idd, cantidad in lServiciosCorporales2:
                        intid = int(idd)
                        intCantidad = int(cantidad)

                        consultaServicioProductos = ServiciosProductosGasto.objects.filter(servicio_id__id_servicio = intid)
                        if consultaServicioProductos:
                            sinProductos = False

                            idsProductosQueUtilizaElServicio = []
                            for producto in consultaServicioProductos:
                                idProducto = producto.producto_gasto_id
                                cantidadUtilizada = producto.cantidad

                                idsProductosQueUtilizaElServicio.append([idProducto, cantidadUtilizada])

                            for productoCorporal in idsProductosQueUtilizaElServicio:
                                idProductoSC = int(productoCorporal[0])
                                cantidadPSC = int(productoCorporal[1])

                                consultaProducto = ProductosGasto.objects.filter(id_producto = idProductoSC)
                                for dato in consultaProducto:
                                    cantidadActualEnExistencia = dato.cantidad
                                    cuantificable = dato.contenido_cuantificable  #N O S
                                
                                if cuantificable == "S":
                                    cantidadARestar = intCantidad * cantidadPSC
                                    actualizacionCantidad = cantidadActualEnExistencia - cantidadARestar

                                    actualizarProducto = ProductosGasto.objects.filter(id_producto = idProductoSC).update(cantidad = actualizacionCantidad)
                        else:
                            sinProductos = True

                        

                if listaServiciosFaciales == "":
                    sinServiciosFaciales = True
                else:
                    for idFacial, cantidadFacial in lServiciosFaciales2:
                        intidFacial = int(idFacial)
                        intCantidadFacial = int(cantidadFacial)

                        consultaServicioProductos = ServiciosProductosGasto.objects.filter(servicio_id__id_servicio = intidFacial)
                        if consultaServicioProductos:
                            sinProductos = False

                            idsProductosQueUtilizaElServicio = []
                            for producto in consultaServicioProductos:
                                idProducto = producto.producto_gasto_id
                                cantidadUtilizada = producto.cantidad

                                idsProductosQueUtilizaElServicio.append([idProducto, cantidadUtilizada])

                            for productoFacial in idsProductosQueUtilizaElServicio:
                                idProductoSF = int(productoFacial[0])
                                cantidadPSF = int(productoFacial[1])

                                consultaProducto = ProductosGasto.objects.filter(id_producto = idProductoSF)
                                for dato in consultaProducto:
                                    cantidadActualEnExistencia = dato.cantidad
                                    cuantificable = dato.contenido_cuantificable  #N O S
                                
                                if cuantificable == "S":
                                    cantidadARestar = intCantidadFacial * cantidadPSF
                                    actualizacionCantidad = cantidadActualEnExistencia - cantidadARestar

                                    actualizarProducto = ProductosGasto.objects.filter(id_producto = idProductoSF).update(cantidad = actualizacionCantidad)
                        else:
                            sinProductos = True

                if ventaEnCredito: #Guardar el registro del crédito

                     
                    ultimoidVenta = 0
                    totalesVentas = Ventas.objects.all()
                    for venta in totalesVentas:
                        ultimoidVenta = venta.id_venta

                    registroCredito = Creditos(fecha_venta_credito = fechaVenta,
                    empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),
                    cliente = Clientes.objects.get(id_cliente = cliente),
                    concepto_credito = "Venta",
                    descripcion_credito = comentarios,
                    monto_pagar = costoTotalAPagarConElVeinteRedondeado,
                    monto_pagado = 0,
                    monto_restante = costoTotalAPagarConElVeinteRedondeado,
                    estatus = "Pendiente",
                    sucursal = Sucursales.objects.get(id_sucursal = sucursal),
                    venta = Ventas.objects.get(id_venta = ultimoidVenta))

                    registroCredito.save()

                    if registroCredito:
                        ultimoCredito = 0
                        consultaCreditos = Creditos.objects.filter(estatus="Pendiente")
                        for credito in consultaCreditos:
                            ultimoCredito = credito.id_credito
                        guardarPagosCredito = PagosCreditos(id_credito = Creditos.objects.get(id_credito = ultimoCredito))
                        guardarPagosCredito.save()

                    request.session['ventaAgregada'] = "La venta con crédito ha sido agregada satisfactoriamente!"
                    

                    #IMPRESION DE TICKEEETSSSS
                    #Ultimo id de venta
                    consultaVentas = Ventas.objects.all()
                    ultimoIdVenta = 0
                    for venta in consultaVentas:
                        ultimoIdVenta = venta.id_venta

                    #Fecha
                    hoy = datetime.now()
                    hoyFormato = hoy.strftime('%Y/%m/%d')

                    #Empleado vendedor
                    consultaEmpleadoVendedor = Empleados.objects.filter(id_empleado = empleadoVendedor)
                    for datoVendedor in consultaEmpleadoVendedor:
                        nombreEmpleado = datoVendedor.nombres
                        apellidoPatEmpleado = datoVendedor.apellido_paterno

                    nombreCompletoEmpleadoVendedor = nombreEmpleado + " "+ apellidoPatEmpleado

                    #Datos sucurssal
                    consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursal)
                    for datoSucursal in consultaSucursal:
                        nombreSucursal = datoSucursal.nombre
                        telefonoSucursal = datoSucursal.telefono
                        direccionSucursal = datoSucursal.direccion

                    #DatosCliente
                    if cliente == "clienteMomentaneo":
                        nombreClienteTicket = "Momentaneo"

                    else:
                        consultaCliente = Clientes.objects.filter(id_cliente = cliente)
                        for datoCliente in consultaCliente:
                            idCienteTicket = datoCliente.id_cliente
                            nombreCliente = datoCliente.nombre_cliente
                            apellidoCliente = datoCliente.apellidoPaterno_cliente

                        nombreClienteTicket = nombreCliente + " " + apellidoCliente
                    #Hora bien
                    horaVenta = horaVenta.strftime("%H:%M:%S")

                    # Esto es para obtener las impresoras. No es obligatorio hacerlo siempre que se quiera imprimir
                    impresoras = Conector.ConectorV3.obtenerImpresoras()
                    print(f"Las impresoras son: {impresoras}")
                    
                    contadorTickets = 0
                    for x in range(2):
                        contadorTickets = contadorTickets + 1

                        
                        c = Conector.ConectorV3()
                        c.Iniciar()
                        c.Corte(1)
                        
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        # Recuerda que la imagen debe existir y debe ser legible para el plugin. Si no, comenta las líneas
                        c.CargarImagenLocalEImprimir("C:\\COSTABELLA\\sistemaCostabella\\static\\images\\anegragrande.png", 0, 216)
                        c.EscribirTexto("\n")
                        c.EstablecerTamañoFuente(1, 1)
                        c.EstablecerEnfatizado(True)
                        c.EscribirTexto("Sucursal: "+nombreSucursal+"\n")
                        c.EstablecerEnfatizado(False)
                        c.EscribirTexto("TEL: "+telefonoSucursal+"\n")
                        c.TextoSegunPaginaDeCodigos(2, "cp850", direccionSucursal+"\n")

                        c.EstablecerEnfatizado(True)
                        c.EscribirTexto("================================================\n")
                        c.EstablecerTamañoFuente(2, 2)
                        c.EscribirTexto("VENTA A CRÉDITO #"+str(ultimoIdVenta)+"\n")
                        c.EscribirTexto("CRÉDITO #"+str(ultimoCredito)+"\n")
                        c.EstablecerEnfatizado(False)
                        c.EstablecerAlineacion(Conector.ALINEACION_IZQUIERDA)
                        c.EstablecerTamañoFuente(1, 1)
                        c.EscribirTexto("\n")
                        c.EscribirTexto(" "+str(hoyFormato)+" - "+str(horaVenta)+" hrs.\n")
                        c.EscribirTexto("Atendida por: "+nombreCompletoEmpleadoVendedor+".\n")
                        c.EscribirTexto("\n")

                        #Listado de productos 
                        #Productos venta
                        lProductos3 = zip(productosVenta,cantidadesProductosVenta)
                        
                        lServiciosFaciales3 =zip(serviciosFaciales,cantidadesServiciosFaciales)
                        for codigo, cantidad in lProductos3:
                            strCodigo = str(codigo)
                            strCantidad = str(cantidad)
                            consultaProductoVenta = ProductosVenta.objects.filter(codigo_producto = strCodigo)
                            for datoProductoVenta in consultaProductoVenta:
                                nombreProducto = datoProductoVenta.nombre_producto
                                costoIndividualProducto = datoProductoVenta.costo_venta

                            floatCantidad = float(cantidad)
                            costototalProducto = costoIndividualProducto * floatCantidad
                            costototalProductoDosDecimales = round(costototalProducto, 2)
                            costototalProductoDosDecimalesConElVeinte = costototalProductoDosDecimales * 1.20
                            costototalProductoDosDecimalesConElVeinteRedondeada = round(costototalProductoDosDecimalesConElVeinte)
                            costototalProductoDosDecimales = str(costototalProductoDosDecimalesConElVeinteRedondeada)

                            costoTotalProductoDivididoEnElPunto = costototalProductoDosDecimales.split(".")
                            longitudCostoTotal = len(str(costoTotalProductoDivididoEnElPunto[0]))
                            longitudCostoTotal = int(longitudCostoTotal)

                            
                            caracteresProducto = len(nombreProducto)

                            if longitudCostoTotal == 2:
                                espacio = 38
                            if longitudCostoTotal == 2:
                                espacio = 37
                            elif longitudCostoTotal == 3:
                                espacio = 36
                            elif longitudCostoTotal == 4:
                                espacio = 35
                            elif longitudCostoTotal == 5:
                                espacio = 34
                            elif longitudCostoTotal == 6:
                                espacio = 33
                            numeroEspacios = espacio - int(caracteresProducto)
                            
                            espaciosTicket = ""
                            for x in range(numeroEspacios):
                                espacioMini = " "
                                espaciosTicket = espaciosTicket + espacioMini
                            c.EscribirTexto(strCantidad+" x "+nombreProducto+espaciosTicket+str(costototalProductoDosDecimales)+"\n")


                        #Servicios Corporales
                        lServiciosCorporales3 = zip(serviciosCoporales,cantidadesServiciosCorporales)
                        for idd, cantidad in lServiciosCorporales3:
                            idServicioCorporal = int(idd)
                            strCantidad = str(cantidad)
                            consultaServicio = Servicios.objects.filter(id_servicio = idServicioCorporal)
                            for datoServicio in consultaServicio:
                                nombreServicio = datoServicio.nombre_servicio
                                costoIndividual = datoServicio.precio_venta

                            floatCantidad = float(cantidad)
                            costototalProducto = costoIndividual * floatCantidad
                            costototalProductoDosDecimales = round(costototalProducto, 2)
                            costototalProductoDosDecimalesConElVeinte = costototalProductoDosDecimales * 1.20 
                            costototalProductoDosDecimalesConElVeinteRedondeada = round(costototalProductoDosDecimalesConElVeinte)
                            costototalProductoDosDecimales = str(costototalProductoDosDecimalesConElVeinteRedondeada)

                            costoTotalProductoDivididoEnElPunto = costototalProductoDosDecimales.split(".")
                            longitudCostoTotal = len(str(costoTotalProductoDivididoEnElPunto[0]))
                            longitudCostoTotal = int(longitudCostoTotal)

                            
                            caracteresProducto = len(nombreServicio)

                            if longitudCostoTotal == 2:
                                espacio = 38
                            if longitudCostoTotal == 2:
                                espacio = 37
                            elif longitudCostoTotal == 3:
                                espacio = 36
                            elif longitudCostoTotal == 4:
                                espacio = 35
                            elif longitudCostoTotal == 5:
                                espacio = 34
                            elif longitudCostoTotal == 6:
                                espacio = 33
                            numeroEspacios = espacio - int(caracteresProducto)
                            
                            espaciosTicket = ""
                            for x in range(numeroEspacios):
                                espacioMini = " "
                                espaciosTicket = espaciosTicket + espacioMini
                            c.EscribirTexto(strCantidad+" x "+nombreServicio+espaciosTicket+str(costototalProductoDosDecimales)+"\n")

                        #Servicios Faciales
                        lServiciosFaciales3 = zip(serviciosFaciales,cantidadesServiciosFaciales)
                        for idd, cantidad in lServiciosFaciales3:
                            idServicioFacial = int(idd)
                            strCantidad = str(cantidad)
                            consultaServicio = Servicios.objects.filter(id_servicio = idServicioFacial)
                            for datoServicio in consultaServicio:
                                nombreServicio = datoServicio.nombre_servicio
                                costoIndividual = datoServicio.precio_venta

                            floatCantidad = float(cantidad)
                            costototalProducto = costoIndividual * floatCantidad
                            costototalProductoDosDecimales = round(costototalProducto, 2)
                            costototalProductoDosDecimalesConElVeinte = costototalProductoDosDecimales * 1.20
                            costototalProductoDosDecimalesConElVeinteRedondeada = round(costototalProductoDosDecimales)

                            costototalProductoDosDecimales = str(costototalProductoDosDecimalesConElVeinteRedondeada)

                            costoTotalProductoDivididoEnElPunto = costototalProductoDosDecimales.split(".")
                            longitudCostoTotal = len(str(costoTotalProductoDivididoEnElPunto[0]))
                            longitudCostoTotal = int(longitudCostoTotal)

                            
                            caracteresProducto = len(nombreServicio)

                            if longitudCostoTotal == 1:
                                espacio = 39
                            if longitudCostoTotal == 2:
                                espacio = 38
                            elif longitudCostoTotal == 3:
                                espacio = 37
                            elif longitudCostoTotal == 4:
                                espacio = 36
                            elif longitudCostoTotal == 5:
                                espacio = 33
                            elif longitudCostoTotal == 6:
                                espacio = 32
                            numeroEspacios = espacio - int(caracteresProducto)
                            
                            espaciosTicket = ""
                            for x in range(numeroEspacios):
                                espacioMini = " "
                                espaciosTicket = espaciosTicket + espacioMini
                            c.EscribirTexto(strCantidad+" x "+nombreServicio+espaciosTicket+str(costototalProductoDosDecimales)+"\n")



                        
                        c.EscribirTexto("\n")
                        c.EscribirTexto("\n")

                        if descuento == "SinDescuento":
                            c.EstablecerTamañoFuente(2, 2)
                            c.EstablecerAlineacion(Conector.ALINEACION_DERECHA)
                            c.EscribirTexto("TOTAL:  $"+str(costoTotalAPagarConElVeinteRedondeado)+"\n")
                            costoTotalPagarCredito = costoTotalAPagarConElVeinteRedondeado
                        else:
                            intDescuento = int(descuento)
                            consultaDescuentos = Descuentos.objects.filter(porcentaje = intDescuento)
                            for datoDescuento in consultaDescuentos:
                                nombreDescuento = datoDescuento.nombre_descuento
                                porcentajeDescuento = datoDescuento.porcentaje

                            porcentajePagado = 100 - porcentajeDescuento #85
                            totalSinDescuento1 = 100 * costoTotalAPagarConElVeinteRedondeado
                            totalSinDescuento2 = totalSinDescuento1/porcentajePagado
                            totalSinDescuento2 = round(totalSinDescuento2)

                            primerMulti = porcentajeDescuento * float(totalSinDescuento2)
                            primerDivision = primerMulti/100
                            resultadoDescuento = round(primerDivision)
                            
                            costoTotalAPagarConDescuento = totalSinDescuento2 - resultadoDescuento

                            c.EstablecerTamañoFuente(1, 1)
                            c.EstablecerAlineacion(Conector.ALINEACION_DERECHA)
                            c.EscribirTexto("Subtotal:  $"+str(totalSinDescuento2)+"\n")
                            c.EscribirTexto("Descuento:  $"+str(resultadoDescuento)+"\n")
                            c.EstablecerTamañoFuente(2, 2)
                            c.EscribirTexto("TOTAL:  $"+str(costoTotalAPagarConDescuento)+"\n")
                            c.EstablecerTamañoFuente(1, 1)
                            c.EscribirTexto("Descuento aplicado: -"+str(porcentajeDescuento)+"%- "+str(nombreDescuento)+"\n")
                            costoTotalPagarCredito = costoTotalAPagarConDescuento

                        c.EscribirTexto("\n")
                        c.EstablecerEnfatizado(True)
                        c.EstablecerTamañoFuente(1, 1)
                        c.EscribirTexto("========== IVA incluido en el precio ==========\n")
                        c.EscribirTexto("\n")
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        c.TextoSegunPaginaDeCodigos(2, "cp850", "INFORMACION DE PAGO.\n")
                        c.EstablecerEnfatizado(False)
                        c.EscribirTexto("\n")
                        c.EstablecerEnfatizado(True)
                        c.EscribirTexto("Pago a crédito 4 quincenas.\n")
                        c.EstablecerEnfatizado(False)
                        abono = float(costoTotalPagarCredito)/4
                        c.EscribirTexto("Abonos de: $"+str(abono)+" MXN.\n")
                        ahora = datetime.now()
                        fechaPrimerPago = ahora + timedelta(days=15)
                        fechaPrimerPago = fechaPrimerPago.strftime('%Y-%m-%d')
                        c.EscribirTexto("Primer pago el día: "+str(fechaPrimerPago)+".\n")
                        
                       
                        c.EscribirTexto("\n")
                        c.EstablecerEnfatizado(True)
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        c.TextoSegunPaginaDeCodigos(2, "cp850", "INFORMACIÓN DE CLIENTE.\n")

                        if nombreClienteTicket == "Momentaneo":
                            c.EstablecerEnfatizado(False)
                            c.EscribirTexto("Cliente momentaneo.\n")
                        else:
                            c.EstablecerEnfatizado(False)
                            c.EscribirTexto("ID:"+str(idCienteTicket)+" - "+nombreClienteTicket+".\n")
                        c.EscribirTexto("=========== Gracias por su compra!! ===========\n")
                        c.EstablecerTamañoFuente(2, 2)
                        c.EstablecerEnfatizado(True)
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        if contadorTickets == 1:
                            c.EscribirTexto("\n")
                            c.EscribirTexto("COPIA TIENDA.\n")
                        else:
                            c.EscribirTexto("\n")
                            c.EscribirTexto("COPIA CLIENTE.\n")
                        c.EscribirTexto("\n")
                        c.EstablecerTamañoFuente(1, 1)
                        

                        c.Feed(1)
                        c.Corte(1)
                        #c.abrirCajon()
                        c.Pulso(48, 60, 120)
                        print("Imprimiendo...")
                        # Recuerda cambiar por el nombre de tu impresora
                        respuesta = c.imprimirEn("POS80 Printer")
                        if respuesta == True:
                            print("Impresión correcta")
                        else:
                            print(f"Error. El mensaje es: {respuesta}")

                else:
                    #IMPRESION DE TICKEEETSSSS
                    #Ultimo id de venta
                    consultaVentas = Ventas.objects.all()
                    ultimoIdVenta = 0
                    for venta in consultaVentas:
                        ultimoIdVenta = venta.id_venta

                    #Fecha
                    hoy = datetime.now()
                    hoyFormato = hoy.strftime('%Y/%m/%d')

                    #Empleado vendedor
                    consultaEmpleadoVendedor = Empleados.objects.filter(id_empleado = empleadoVendedor)
                    for datoVendedor in consultaEmpleadoVendedor:
                        nombreEmpleado = datoVendedor.nombres
                        apellidoPatEmpleado = datoVendedor.apellido_paterno

                    nombreCompletoEmpleadoVendedor = nombreEmpleado + " "+ apellidoPatEmpleado

                    #Datos sucurssal
                    consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursal)
                    for datoSucursal in consultaSucursal:
                        nombreSucursal = datoSucursal.nombre
                        telefonoSucursal = datoSucursal.telefono
                        direccionSucursal = datoSucursal.direccion

                    #DatosCliente
                    if cliente == "clienteMomentaneo":
                        nombreClienteTicket = "Momentaneo"

                    else:
                        consultaCliente = Clientes.objects.filter(id_cliente = cliente)
                        for datoCliente in consultaCliente:
                            idCienteTicket = datoCliente.id_cliente
                            nombreCliente = datoCliente.nombre_cliente
                            apellidoCliente = datoCliente.apellidoPaterno_cliente

                        nombreClienteTicket = nombreCliente + " " + apellidoCliente
                    #Hora bien
                    horaVenta = horaVenta.strftime("%H:%M:%S")

                    # Esto es para obtener las impresoras. No es obligatorio hacerlo siempre que se quiera imprimir
                    impresoras = Conector.ConectorV3.obtenerImpresoras()
                    print(f"Las impresoras son: {impresoras}")
                    
                    contadorTickets = 0
                    for x in range(2):
                        contadorTickets = contadorTickets + 1

                        
                        c = Conector.ConectorV3()
                        c.Iniciar()
                        c.Corte(1)
                        
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        # Recuerda que la imagen debe existir y debe ser legible para el plugin. Si no, comenta las líneas
                        c.CargarImagenLocalEImprimir("C:\\COSTABELLA\\sistemaCostabella\\static\\images\\anegragrande.png", 0, 216)
                        c.EscribirTexto("\n")
                        c.EstablecerTamañoFuente(1, 1)
                        c.EstablecerEnfatizado(True)
                        c.EscribirTexto("Sucursal: "+nombreSucursal+"\n")
                        c.EstablecerEnfatizado(False)
                        c.EscribirTexto("TEL: "+telefonoSucursal+"\n")
                        c.TextoSegunPaginaDeCodigos(2, "cp850", direccionSucursal+"\n")

                        c.EstablecerEnfatizado(True)
                        c.EscribirTexto("================================================\n")
                        c.EstablecerTamañoFuente(2, 2)
                        c.EscribirTexto("VENTA #"+str(ultimoIdVenta)+"\n")
                        c.EstablecerEnfatizado(False)
                        c.EstablecerAlineacion(Conector.ALINEACION_IZQUIERDA)
                        c.EstablecerTamañoFuente(1, 1)
                        c.EscribirTexto("\n")
                        c.EscribirTexto(" "+str(hoyFormato)+" - "+str(horaVenta)+" hrs.\n")
                        c.EscribirTexto("Atendida por: "+nombreCompletoEmpleadoVendedor+".\n")
                        c.EscribirTexto("\n")

                        #Listado de productos 
                        #Productos venta
                        lProductos3 = zip(productosVenta,cantidadesProductosVenta)
                        
                        lServiciosFaciales3 =zip(serviciosFaciales,cantidadesServiciosFaciales)
                        for codigo, cantidad in lProductos3:
                            strCodigo = str(codigo)
                            strCantidad = str(cantidad)
                            consultaProductoVenta = ProductosVenta.objects.filter(codigo_producto = strCodigo)
                            for datoProductoVenta in consultaProductoVenta:
                                nombreProducto = datoProductoVenta.nombre_producto
                                costoIndividualProducto = datoProductoVenta.costo_venta

                            floatCantidad = float(cantidad)
                            costototalProducto = costoIndividualProducto * floatCantidad
                            costototalProductoDosDecimales = round(costototalProducto, 2)
                            costototalProductoDosDecimales = str(costototalProductoDosDecimales)

                            costoTotalProductoDivididoEnElPunto = costototalProductoDosDecimales.split(".")
                            longitudCostoTotal = len(str(costoTotalProductoDivididoEnElPunto[0]))
                            longitudCostoTotal = int(longitudCostoTotal)

                            
                            caracteresProducto = len(nombreProducto)

                            if longitudCostoTotal == 2:
                                espacio = 38
                            if longitudCostoTotal == 2:
                                espacio = 37
                            elif longitudCostoTotal == 3:
                                espacio = 36
                            elif longitudCostoTotal == 4:
                                espacio = 35
                            elif longitudCostoTotal == 5:
                                espacio = 34
                            elif longitudCostoTotal == 6:
                                espacio = 33
                            numeroEspacios = espacio - int(caracteresProducto)
                            
                            espaciosTicket = ""
                            for x in range(numeroEspacios):
                                espacioMini = " "
                                espaciosTicket = espaciosTicket + espacioMini
                            c.EscribirTexto(strCantidad+" x "+nombreProducto+espaciosTicket+str(costototalProductoDosDecimales)+"\n")


                        #Servicios Corporales
                        lServiciosCorporales3 = zip(serviciosCoporales,cantidadesServiciosCorporales)
                        for idd, cantidad in lServiciosCorporales3:
                            idServicioCorporal = int(idd)
                            strCantidad = str(cantidad)
                            consultaServicio = Servicios.objects.filter(id_servicio = idServicioCorporal)
                            for datoServicio in consultaServicio:
                                nombreServicio = datoServicio.nombre_servicio
                                costoIndividual = datoServicio.precio_venta

                            floatCantidad = float(cantidad)
                            costototalProducto = costoIndividual * floatCantidad
                            costototalProductoDosDecimales = round(costototalProducto, 2)
                            costototalProductoDosDecimales = str(costototalProductoDosDecimales)

                            costoTotalProductoDivididoEnElPunto = costototalProductoDosDecimales.split(".")
                            longitudCostoTotal = len(str(costoTotalProductoDivididoEnElPunto[0]))
                            longitudCostoTotal = int(longitudCostoTotal)

                            
                            caracteresProducto = len(nombreServicio)

                            if longitudCostoTotal == 2:
                                espacio = 38
                            if longitudCostoTotal == 2:
                                espacio = 37
                            elif longitudCostoTotal == 3:
                                espacio = 36
                            elif longitudCostoTotal == 4:
                                espacio = 35
                            elif longitudCostoTotal == 5:
                                espacio = 34
                            elif longitudCostoTotal == 6:
                                espacio = 33
                            numeroEspacios = espacio - int(caracteresProducto)
                            
                            espaciosTicket = ""
                            for x in range(numeroEspacios):
                                espacioMini = " "
                                espaciosTicket = espaciosTicket + espacioMini
                            c.EscribirTexto(strCantidad+" x "+nombreServicio+espaciosTicket+str(costototalProductoDosDecimales)+"\n")

                        #Servicios Faciales
                        lServiciosFaciales3 = zip(serviciosFaciales,cantidadesServiciosFaciales)
                        for idd, cantidad in lServiciosFaciales3:
                            idServicioFacial = int(idd)
                            strCantidad = str(cantidad)
                            consultaServicio = Servicios.objects.filter(id_servicio = idServicioFacial)
                            for datoServicio in consultaServicio:
                                nombreServicio = datoServicio.nombre_servicio
                                costoIndividual = datoServicio.precio_venta

                            floatCantidad = float(cantidad)
                            costototalProducto = costoIndividual * floatCantidad
                            costototalProductoDosDecimales = round(costototalProducto, 2)
                            costototalProductoDosDecimales = str(costototalProductoDosDecimales)

                            costoTotalProductoDivididoEnElPunto = costototalProductoDosDecimales.split(".")
                            longitudCostoTotal = len(str(costoTotalProductoDivididoEnElPunto[0]))
                            longitudCostoTotal = int(longitudCostoTotal)

                            
                            caracteresProducto = len(nombreServicio)

                            if longitudCostoTotal == 1:
                                espacio = 39
                            if longitudCostoTotal == 2:
                                espacio = 38
                            elif longitudCostoTotal == 3:
                                espacio = 37
                            elif longitudCostoTotal == 4:
                                espacio = 36
                            elif longitudCostoTotal == 5:
                                espacio = 33
                            elif longitudCostoTotal == 6:
                                espacio = 32
                            numeroEspacios = espacio - int(caracteresProducto)
                            
                            espaciosTicket = ""
                            for x in range(numeroEspacios):
                                espacioMini = " "
                                espaciosTicket = espaciosTicket + espacioMini
                            c.EscribirTexto(strCantidad+" x "+nombreServicio+espaciosTicket+str(costototalProductoDosDecimales)+"\n")



                        
                        c.EscribirTexto("\n")
                        c.EscribirTexto("\n")

                        if descuento == "SinDescuento":
                            c.EstablecerTamañoFuente(2, 2)
                            c.EstablecerAlineacion(Conector.ALINEACION_DERECHA)
                            c.EscribirTexto("TOTAL:  $"+str(costoTotalAPagar)+"\n")
                        else:
                            intDescuento = int(descuento)
                            consultaDescuentos = Descuentos.objects.filter(porcentaje = intDescuento)
                            for datoDescuento in consultaDescuentos:
                                nombreDescuento = datoDescuento.nombre_descuento
                                porcentajeDescuento = datoDescuento.porcentaje

                            porcentajePagado = 100 - porcentajeDescuento #85
                            totalSinDescuento1 = 100 * costoTotalAPagar
                            totalSinDescuento2 = totalSinDescuento1/porcentajePagado
                            totalSinDescuento2 = round(totalSinDescuento2)

                            primerMulti = porcentajeDescuento * float(totalSinDescuento2)
                            primerDivision = primerMulti/100
                            resultadoDescuento = round(primerDivision)
                            
                            costoTotalAPagarConDescuento = totalSinDescuento2 - resultadoDescuento

                            c.EstablecerTamañoFuente(1, 1)
                            c.EstablecerAlineacion(Conector.ALINEACION_DERECHA)
                            c.EscribirTexto("Subtotal:  $"+str(totalSinDescuento2)+"\n")
                            c.EscribirTexto("Descuento:  $"+str(resultadoDescuento)+"\n")
                            c.EstablecerTamañoFuente(2, 2)
                            c.EscribirTexto("TOTAL:  $"+str(costoTotalAPagarConDescuento)+"\n")
                            c.EstablecerTamañoFuente(1, 1)
                            c.EscribirTexto("Descuento aplicado: -"+str(porcentajeDescuento)+"%- "+str(nombreDescuento)+"\n")


                        c.EscribirTexto("\n")
                        c.EstablecerEnfatizado(True)
                        c.EstablecerTamañoFuente(1, 1)
                        c.EscribirTexto("========== IVA incluido en el precio ==========\n")
                        c.EscribirTexto("\n")
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        c.TextoSegunPaginaDeCodigos(2, "cp850", "INFORMACION DE PAGO.\n")
                        c.EstablecerEnfatizado(False)
                        c.EscribirTexto("\n")
                        if esConEfectivo:
                            c.EscribirTexto("Pago en efectivo.\n")
                        elif esConTarjeta:
                            c.EscribirTexto("Pago con "+str(tipo_tarjeta)+".\n")
                            c.EscribirTexto("Referencia: "+referencia_tarjeta+".\n")
                        elif esConTransferencia:
                            c.EscribirTexto("Transferencia.\n")
                            c.EscribirTexto("Clave de rastreo: "+str(clave_transferencia)+".\n")
                        c.EscribirTexto("\n")
                        c.EstablecerEnfatizado(True)
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        c.TextoSegunPaginaDeCodigos(2, "cp850", "INFORMACIÓN DE CLIENTE.\n")

                        if nombreClienteTicket == "Momentaneo":
                            c.EstablecerEnfatizado(False)
                            c.EscribirTexto("Cliente momentaneo.\n")
                        else:
                            c.EstablecerEnfatizado(False)
                            c.EscribirTexto("ID:"+str(idCienteTicket)+" - "+nombreClienteTicket+".\n")
                        c.EscribirTexto("=========== Gracias por su compra!! ===========\n")
                        c.EstablecerTamañoFuente(2, 2)
                        c.EstablecerEnfatizado(True)
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        if contadorTickets == 1:
                            c.EscribirTexto("\n")
                            c.EscribirTexto("COPIA TIENDA.\n")
                        else:
                            c.EscribirTexto("\n")
                            c.EscribirTexto("COPIA CLIENTE.\n")
                        c.EscribirTexto("\n")
                        c.EstablecerTamañoFuente(1, 1)
                        

                        c.Feed(1)
                        c.Corte(1)
                        #c.abrirCajon()
                        c.Pulso(48, 60, 120)
                        print("Imprimiendo...")
                        # Recuerda cambiar por el nombre de tu impresora
                        respuesta = c.imprimirEn("POS80 Printer")
                        if respuesta == True:
                            print("Impresión correcta")
                        else:
                            print(f"Error. El mensaje es: {respuesta}")


                #Verificar si el nombre de producto existe en los productos para renta, y en caso de que si, cambiar el estatus
                for producto, cantidad in lProductos4:
                    codigoProducto = str(producto)
                    consultaProducto = ProductosVenta.objects.filter(codigo_producto = codigoProducto)
                    for datoProducto in consultaProducto:
                        nombreProducto = datoProducto.nombre_producto

                    #Consulta a ver si algun producto renta tiene ese mismo nombre, y cambiarle el estatus
                    consultaProductoRenta = ProductosRenta.objects.filter(nombre_producto = nombreProducto)
                    if consultaProductoRenta:
                        actualizacionVestido = ProductosRenta.objects.filter(nombre_producto = nombreProducto).update(estado_renta = "Vendido")


                return redirect('/ventas/')
                        
                        
            else:
                request.session['ventaNoAgregada'] = "Error en la base de datos, intentelo más tarde.."
                return redirect('/ventas/')

    else:
        return render(request,"1 Login/login.html")



def seleccionarSucursalMovimientosDia(request):

    if "idSesion" in request.session:

        # Variables de sesión
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        idPerfil = idEmpleado
        idConfig = idEmpleado
    
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']

        # Variable para Menu
        estaEnAltaEmpleado = True

        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
        
           #notificacionRentas
        notificacionRenta = notificacionRentas(request)

        #notificacionCitas
        notificacionCita = notificacionCitas(request)

        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)

        sucursales = []
        if tipoUsuario == "esAdmin":
        # retornar sucursales
            listsucursales = Sucursales.objects.all()
            for dato in listsucursales:
                idSucursal =dato.id_sucursal
                nombreSucursal = dato.nombre
                direccion = dato.direccion
                sucursales.append([idSucursal,nombreSucursal, direccion])

        else:
          
            empleado = Empleados.objects.filter(id_empleado =idEmpleado)
            for sucursal in empleado:
                idSucursal =sucursal.id_sucursal_id
                
            datoSucursal = Sucursales.objects.filter(id_sucursal = idSucursal)
            for dato in datoSucursal:
                nombreSucursal = dato.nombre
                direccion = dato.direccion
            sucursales.append([idSucursal, nombreSucursal, direccion])
        
        datosVendedor = Empleados.objects.filter(id_empleado =idEmpleado )
        
        if "corteRealizado" in request.session:
            corteRealizado = request.session["corteRealizado"]
            del request.session["corteRealizado"]
            return render(request, "8 Caja/seleccionarSucursalMovimientosDia.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado,"estaEnAltaEmpleado":estaEnAltaEmpleado, "sucursales":sucursales,
                                                                            "datosVendedor":datosVendedor,"notificacionRenta":notificacionRenta,"notificacionCita":notificacionCita, "corteRealizado":corteRealizado})
        if "sinConfiguracionDeCaja" in request.session:

            sinConfiguracionDeCaja = request.session["sinConfiguracionDeCaja"]
            del request.session["sinConfiguracionDeCaja"]

            return render(request, "8 Caja/seleccionarSucursalMovimientosDia.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado,"estaEnAltaEmpleado":estaEnAltaEmpleado, "sucursales":sucursales,
                                                                            "datosVendedor":datosVendedor,"notificacionRenta":notificacionRenta,"notificacionCita":notificacionCita, "sinConfiguracionDeCaja":sinConfiguracionDeCaja})
        return render(request, "8 Caja/seleccionarSucursalMovimientosDia.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado,"estaEnAltaEmpleado":estaEnAltaEmpleado, "sucursales":sucursales,
                                                                            "datosVendedor":datosVendedor,"notificacionRenta":notificacionRenta,"notificacionCita":notificacionCita})
    else:
        return render(request,"1 Login/login.html")
    
    
def verSucursalMovimientosDia(request):
    
    if "idSesion" in request.session:

        # Variables de sesión
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']
        idPerfil = idEmpleado
        idConfig = idEmpleado

        
        
        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
        
        #notificacionRentas
        notificacionRenta = notificacionRentas(request)

        #notificacionCitas
        notificacionCita = notificacionCitas(request)

        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)
        
        if request.method == "POST":
        
            
            agregados = []
            
            sucursal = request.POST['sucursal'] #Requerido
            fechaActual = datetime.today().strftime('%Y-%m-%d') #Requerido
            diaActual = datetime.today().isoweekday() #4 jueves
            print(diaActual)
            print(fechaActual)
            intdiaActual = int(diaActual)
            diaLunes = intdiaActual-1 #3 dias para el lunes
            print(diaLunes)
            diaSabado = 6-intdiaActual # 2 dias para el sabado
            print(diaSabado)
            fechaLunes = datetime.now()-timedelta(days =diaLunes)
            fechaSabado = datetime.now() + timedelta(days =diaSabado)
            
            consultaCortesDeCaja = CortesDeCaja.objects.all()

            if consultaCortesDeCaja:
                for corte in consultaCortesDeCaja:
                    fechaDelUltimoCorteDeCaja = corte.fecha_corte
                
                totalMovimientosPorSucursal= MovimientosCaja.objects.filter(sucursal_id__id_sucursal = sucursal, fecha__range=[fechaDelUltimoCorteDeCaja,fechaDelUltimoCorteDeCaja]) 
            else: #No se ha hecho ningún corte de caja aún
                totalMovimientosPorSucursal= MovimientosCaja.objects.filter(sucursal_id__id_sucursal = sucursal) #, fecha__range=[fechaLunes,fechaSabado]
            totalIngresosEfectivoVenta = 0
            totalIngresosEfectivo = 0
            totalRetirosEfectivo = 0
            totalEnCaja = 0
            contadorIngresosEfectivoVenta = 0
            contadorIngresosEfectivo = 0
            contadorRetirosEfectivo = 0
            
            for movimiento in totalMovimientosPorSucursal:
                id_persona_realizo = movimiento.realizado_por_id
                monto = movimiento.monto
               
                
                empleado = Empleados.objects.filter(id_empleado = id_persona_realizo)
                for dato in empleado:
                    nombre = dato.nombres
                    apellidoPat = dato.apellido_paterno
                    apellidoMat = dato.apellido_materno
                nombreCompleto = nombre + " " + apellidoPat + " " + apellidoMat
                agregados.append(nombreCompleto)
                
                if movimiento.tipo == "IN":
                    descripcion = movimiento.descripcion
                    if "venta" in descripcion:
                        totalIngresosEfectivoVenta = totalIngresosEfectivoVenta + monto
                        contadorIngresosEfectivoVenta = contadorIngresosEfectivoVenta +1
                    else:
                        totalIngresosEfectivo = totalIngresosEfectivo + monto
                        contadorIngresosEfectivo = contadorIngresosEfectivo +1
                        
                elif movimiento.tipo== "RE":
                    totalRetirosEfectivo = totalRetirosEfectivo + monto
                    contadorRetirosEfectivo = contadorRetirosEfectivo + 1
             
            totalIngresos = totalIngresosEfectivoVenta + totalIngresosEfectivo 
            totalEnCaja = totalIngresos - totalRetirosEfectivo
            totalContadorIngresos = contadorIngresosEfectivoVenta + contadorIngresosEfectivo
            
            lista = zip(totalMovimientosPorSucursal,agregados)
            
            botonCortedeCajaBloqueado = True

            consultaConfiguracionCaja= ConfiguracionCaja.objects.filter(sucursal_id__id_sucursal = sucursal, activo="S")
            if consultaConfiguracionCaja:
                hayConfiguracion = "Si hay"
                for datoConfigCaja in consultaConfiguracionCaja:
                    fondoCaja = datoConfigCaja.fondo
                    minimoCorte = datoConfigCaja.minimo_corte_caja
                    minimoCorte = float(minimoCorte)
            else:
                hayConfiguracion = "No hay configuración de caja aún."

            
                
            corteMenorQueElMinimo = True
            
            
            horaMovimiento =datetime.now().time() #"15:49"
            print(horaMovimiento)
            strHoraMovimiento = str(horaMovimiento)
            if intdiaActual == 6:  #Aqui debe ser 6
                #Es sabado

                separacionHoraMinutos = strHoraMovimiento.split(":") #[15,49]
                hora = separacionHoraMinutos[0]  #15
                minutos = separacionHoraMinutos[1]  #49

               
                horaInt = int(hora)

                if horaInt >= 13: #Aqui debe ser 13
                    if totalEnCaja > minimoCorte:
                        corteMenorQueElMinimo = False
                        botonCortedeCajaBloqueado = False
                    else:
                        corteMenorQueElMinimo = True
                        botonCortedeCajaBloqueado = True
                    
                    
                else:
                    botonCortedeCajaBloqueado = True
                    corteMenorQueElMinimo = False

                
            else:
                botonCortedeCajaBloqueado = True
                corteMenorQueElMinimo = False


            
            
            
            
        
        
        if hayConfiguracion == "Si hay":


            return render(request, "8 Caja/verSucursalMovimientosDia.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "notificacionRenta":notificacionRenta,"idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, "lista":lista,
                                                                            "totalIngresos":totalIngresos,"totalEnCaja":totalEnCaja,"totalContadorIngresos":totalContadorIngresos,"totalIngresosEfectivoVenta":totalIngresosEfectivoVenta,"totalIngresosEfectivo":totalIngresosEfectivo,
                                                                            "totalRetirosEfectivo":totalRetirosEfectivo,"contadorIngresosEfectivoVenta":contadorIngresosEfectivoVenta,"contadorIngresosEfectivo":contadorIngresosEfectivo,"contadorRetirosEfectivo":contadorRetirosEfectivo, "botonCortedeCajaBloqueado":botonCortedeCajaBloqueado,
                                                                            "fondoCaja":fondoCaja, "corteMenorQueElMinimo":corteMenorQueElMinimo, "minimoCorte":minimoCorte, "notificacionCita":notificacionCita, "sucursal":sucursal
                                                                            
                                                                            
            })
        else:
            request.session["sinConfiguracionDeCaja"] = "Aún no se ha configurado la caja chica ni el fondo de caja!!"
            return redirect("/seleccionarSucursalMovimientosDia/")

    
    else:
        return render(request,"1 Login/login.html")
    
    

def seleccionarSucursalRentas(request):

    if "idSesion" in request.session:

        # Variables de sesión
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        idPerfil = idEmpleado
        idConfig = idEmpleado
    
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']

        # Variable para Menu
        estaEnAltaEmpleado = True

        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
        
           #notificacionRentas
        notificacionRenta = notificacionRentas(request)

        #notificacionCitas
        notificacionCita = notificacionCitas(request)
        
         #permisosEmpleado
        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)
        
        sucursales = []
        if tipoUsuario == "esAdmin":
        # retornar sucursales
            listsucursales = Sucursales.objects.all()
            for dato in listsucursales:
                idSucursal =dato.id_sucursal
                nombreSucursal = dato.nombre
                direccionSucursal = dato.direccion
                sucursales.append([idSucursal,nombreSucursal, direccionSucursal])

        else:
          
            empleado = Empleados.objects.filter(id_empleado =idEmpleado)
            for sucursal in empleado:
                idSucursal =sucursal.id_sucursal_id
                
            datoSucursal = Sucursales.objects.filter(id_sucursal = idSucursal)
            for dato in datoSucursal:
                nombreSucursal = dato.nombre
                direccionSucursal = dato.direccion
            sucursales.append([idSucursal, nombreSucursal, direccionSucursal])
        
        datosVendedor = Empleados.objects.filter(id_empleado =idEmpleado )
        
        
      

        return render(request, "9 Rentas/seleccionarSucursalRentas.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado,"estaEnAltaEmpleado":estaEnAltaEmpleado, "sucursales":sucursales,
                                                                            "datosVendedor":datosVendedor,"notificacionRenta":notificacionRenta, "notificacionCita":notificacionCita})
    else:
        return render(request,"1 Login/login.html")


def guardarRentas(request):
    if "idSesion" in request.session:
        # Variables de sesión
        idEmpleado = request.session['idSesion']
        if request.method == "POST":
            
            

            nameInput = "checkboxApartado"
            rentaApartada = False
            if request.POST.get(nameInput, False): #Apartado Checkeado
                rentaApartada = True
            elif request.POST.get(nameInput, True): #Apartado No checkeado
                rentaApartada = False

            cliente = request.POST['clienteSeleccionado'] #Puede ser un id de cliente o puede ser clienteMomentaneo
            stringCodigosProductos = request.POST['codigosProductosRenta']# String "PV1000,1"
            arregloProductos = stringCodigosProductos.split(',')

            fechaApartado = datetime.now()
            horaVenta= datetime.now().time()
            fechaEntregaVestido = request.POST['fechaEntregaVestido']
            fecha = datetime.strptime(fechaEntregaVestido, "%Y-%m-%d").date()
            fechas = fecha + timedelta(days=3)
            
            comentariosExtras = request.POST['comentarios']
                
            if comentariosExtras == "":
                comentarios = "Sin comentarios"
            else:
                comentarios = comentariosExtras
            
            
            #limiteDev = timedelta(days=3)
            #fechaLimiteDevolucion = int(fechaEntregaVestido)+int(limiteDev)
            #limiteDevCuota = timedelta(days=7)
            fechaLimiteDevolucionCuota =fechas +  timedelta(days=7)
            strfechaLimiteDevolucionCuota = str(fechaLimiteDevolucionCuota)

         

            costoTotalRenta = 0
            for productoRenta in arregloProductos:
                codigo = str(productoRenta)
                consultaProducto = ProductosRenta.objects.filter(codigo_producto = codigo)   
                for datoProducto in consultaProducto:
                    costoRenta = datoProducto.costo_renta
                costoTotalRenta = costoTotalRenta + costoRenta


             
             
            empleadoVendedor = idEmpleado
            minimo = costoTotalRenta/2
            if rentaApartada == True: 
                montoAbono = request.POST['cantidadAbono']
                montoRestante = costoTotalRenta - float(montoAbono)
                
                
         
                    
                        
                registroRenta = Rentas(cliente = Clientes.objects.get(id_cliente = cliente), codigos_productos_renta = stringCodigosProductos,
                fecha_apartado = fechaApartado, fecha_entrega_renta = fechaEntregaVestido, fecha_limite_devolucion = fechas,fecha_limite_devolucion_cuota = strfechaLimiteDevolucionCuota
                , estado_devolucion = "A", cuota_retraso = "N", monto_total_renta=costoTotalRenta, monto_min_apartado = minimo, monto_pago_apartado = montoAbono, 
                monto_restante = montoRestante,monto_pago_restante = 0,comentarios_renta =comentarios, realizado_por = Empleados.objects.get(id_empleado = empleadoVendedor))
                registroRenta.save()

                if registroRenta:
                    for productoRenta in arregloProductos:
                        codigo = str(productoRenta)
                        actualizacionEstado = ProductosRenta.objects.filter(codigo_producto = codigo).update(estado_renta = "Apartado")  
                            
                            
                    formaPago = request.POST['tipoPago'] #Efectivo,  tarjeta o transferencia
                    sucursal = request.POST['idSucursal']
              
                    
                    esConEfectivo = False
                    esConTarjeta = False
                    esConTransferencia = False

                    if formaPago == "Efectivo":
                        esConEfectivo = True
                    elif formaPago == "Tarjeta":
                        esConTarjeta = True
                        tipo_tarjeta = request.POST['tipoTarjeta']    
                        referencia_tarjeta = request.POST['referenciaTarjeta'] 
                        
                    elif formaPago == "Transferencia":
                        esConTransferencia = True
                        clave_transferencia = request.POST['claveRastreoTransferencia'] 

                    
                
                
                    
                    arregloProductos = stringCodigosProductos.split(',')
                    productosVenta = []
                    cantidadesProductosVenta = [1]
        
                    
                    
                    for pro_ser in arregloProductos:
                        stringVenta = str(pro_ser)
                
                        intCantidad =int(1)
                        if "PR" in stringVenta:
                            productosVenta.append(stringVenta)
                            cantidadesProductosVenta.append(intCantidad)
                    
                        
                    listaProductosVenta =""
                    cantidadesListaProductosVenta =""
                
                    
                    lProductos =zip(productosVenta,cantidadesProductosVenta)
                    lProductos2 = zip(productosVenta,cantidadesProductosVenta)
            
                    contadorProductos = 0
                    for p,c in lProductos:
                        stringProducto =str(p)
                        stringCantidad =str(c)
                        contadorProductos =contadorProductos +1
                        if contadorProductos == 1:
                            listaProductosVenta=stringProducto
                            cantidadesListaProductosVenta =stringCantidad
                        else:
                            listaProductosVenta += "," + stringProducto 
                            cantidadesListaProductosVenta += "," + stringCantidad
                

                    #RegistrarProducto

                    if esConEfectivo:
                        
                                registroVenta = Ventas(fecha_venta = fechaApartado,  hora_venta =horaVenta,
                                tipo_pago = formaPago, 
                                empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),
                                cliente = Clientes.objects.get(id_cliente = cliente),
                                ids_productos = listaProductosVenta, cantidades_productos = cantidadesListaProductosVenta,
                                ids_servicios_corporales ="", cantidades_servicios_corporales ="",
                                ids_servicios_faciales ="", cantidades_servicios_faciales ="",
                                monto_pagar = montoAbono, credito = "S",
                                comentariosVenta = "Se realizo venta por motivo de renta con apartado", sucursal = Sucursales.objects.get(id_sucursal = sucursal))

                    if esConTarjeta:
                    
                        
                                registroVenta = Ventas(fecha_venta = fechaApartado,  hora_venta =horaVenta,
                                tipo_pago = formaPago, tipo_tarjeta = tipo_tarjeta, referencia_pago_tarjeta = referencia_tarjeta,
                                empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),
                                cliente = Clientes.objects.get(id_cliente = cliente),
                                ids_productos = listaProductosVenta, cantidades_productos = cantidadesListaProductosVenta,
                                ids_servicios_corporales ="", cantidades_servicios_corporales ="",
                                ids_servicios_faciales ="", cantidades_servicios_faciales ="",
                                monto_pagar = montoAbono, credito = "S",
                                comentariosVenta = "Se realizo venta por motivo de renta con apartado", sucursal = Sucursales.objects.get(id_sucursal = sucursal))
                    

                    if esConTransferencia:
            
                                registroVenta = Ventas(fecha_venta = fechaApartado,  hora_venta =horaVenta,
                                tipo_pago = formaPago, clave_rastreo_transferencia = clave_transferencia,
                                empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),
                                cliente = Clientes.objects.get(id_cliente = cliente),
                                ids_productos = listaProductosVenta, cantidades_productos = cantidadesListaProductosVenta,
                                ids_servicios_corporales ="", cantidades_servicios_corporales ="",
                                ids_servicios_faciales ="", cantidades_servicios_faciales ="",
                                monto_pagar = montoAbono, credito = "S",comentariosVenta = "Se realizo venta por motivo de renta con apartado", sucursal = Sucursales.objects.get(id_sucursal = sucursal))
                        

                    registroVenta.save()
                    
                    if registroVenta:
                        if esConEfectivo:
                            ultimoId = 0
                            ventasTotalesEfectivo = Ventas.objects.filter(tipo_pago ="Efectivo")
                            for venta in ventasTotalesEfectivo:
                                ultimoId = venta.id_venta
                            tipoMovimiento ="IN"
                            montoMovimiento = float(montoAbono)
                            descripcionMovimiento ="Movimiento por venta " + str(ultimoId) + " de renta con abono"
                            fechaMovimiento = datetime.today().strftime('%Y-%m-%d')
                            horaMovimiento = datetime.now().time()
                            ingresarCantidadEfectivoAcaja =MovimientosCaja(fecha =fechaMovimiento,hora = horaMovimiento,tipo=tipoMovimiento,monto =montoMovimiento, descripcion=descripcionMovimiento,sucursal =  Sucursales.objects.get(id_sucursal = sucursal),
                                                                                realizado_por = Empleados.objects.get(id_empleado = empleadoVendedor))
                            ingresarCantidadEfectivoAcaja.save()
                            
                            ultimoIdRenta = 0
                            rentasTotales = Rentas.objects.filter(estado_devolucion ="A",cliente =Clientes.objects.get(id_cliente = cliente))
                            for renta in rentasTotales:
                                ultimoIdRenta = renta.id_renta
                            
                            ventaApartadaCredito = Creditos(fecha_venta_credito=fechaApartado,empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),cliente =Clientes.objects.get(id_cliente = cliente),
                                                            
                                                            renta =Rentas.objects.get(id_renta = ultimoIdRenta),venta = Ventas.objects.get(id_venta = ultimoId),monto_pagar=costoTotalRenta,monto_pagado=montoAbono,monto_restante =montoRestante,concepto_credito="Renta",descripcion_credito="Crédito por renta " + str(ultimoIdRenta) ,estatus="Pendiente",
                                                            sucursal = Sucursales.objects.get(id_sucursal = sucursal))
                            ventaApartadaCredito.save()
                            if ventaApartadaCredito:
                                ultimoIdCredito = 0
                                creditosTotales = Creditos.objects.filter(cliente =Clientes.objects.get(id_cliente = cliente))
                                for credito in creditosTotales:
                                    ultimoIdCredito = credito.id_credito
                                ingresarPrimerPago = PagosCreditos(id_credito=Creditos.objects.get(id_credito = ultimoIdCredito),fecha_pago1 =fechaApartado,tipo_pago1 ="Efectivo",monto_pago1=montoAbono)
                                ingresarPrimerPago.save()
                            
                            #IMPRESION DE TICKEEETSSSS
                            #Ultimo id de venta
                            consultaVentas = Ventas.objects.all()
                            ultimoIdVenta = 0
                            for venta in consultaVentas:
                                ultimoIdVenta = venta.id_venta

                            #ultimo id de renta
                            consultaRentas = Rentas.objects.all()
                            ultimoIdRenta = 0
                            for renta in consultaRentas:
                                ultimoIdRenta = renta.id_renta

                            #Fecha
                            hoy = datetime.now()
                            hoyFormato = hoy.strftime('%Y/%m/%d')

                            #Empleado vendedor
                            consultaEmpleadoVendedor = Empleados.objects.filter(id_empleado = empleadoVendedor)
                            for datoVendedor in consultaEmpleadoVendedor:
                                nombreEmpleado = datoVendedor.nombres
                                apellidoPatEmpleado = datoVendedor.apellido_paterno

                            nombreCompletoEmpleadoVendedor = nombreEmpleado + " "+ apellidoPatEmpleado

                            #Datos sucurssal
                            consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursal)
                            for datoSucursal in consultaSucursal:
                                nombreSucursal = datoSucursal.nombre
                                telefonoSucursal = datoSucursal.telefono
                                direccionSucursal = datoSucursal.direccion

                            #DatosCliente
                            
                            consultaCliente = Clientes.objects.filter(id_cliente = cliente)
                            for datoCliente in consultaCliente:
                                idCienteTicket = datoCliente.id_cliente
                                nombreCliente = datoCliente.nombre_cliente
                                apellidoCliente = datoCliente.apellidoPaterno_cliente

                            nombreClienteTicket = nombreCliente + " " + apellidoCliente
                            #Hora bien
                            horaVenta = horaVenta.strftime("%H:%M:%S")

                            # Esto es para obtener las impresoras. No es obligatorio hacerlo siempre que se quiera imprimir
                            impresoras = Conector.ConectorV3.obtenerImpresoras()
                            print(f"Las impresoras son: {impresoras}")

                            contadorTickets = 0
                            for x in range(2):
                                contadorTickets = contadorTickets + 1
                                c = Conector.ConectorV3()
                                c.Iniciar()
                                c.Corte(1)
                                
                                c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                                # Recuerda que la imagen debe existir y debe ser legible para el plugin. Si no, comenta las líneas
                                c.CargarImagenLocalEImprimir("C:\\COSTABELLA\\sistemaCostabella\\static\\images\\anegragrande.png", 0, 216)
                                c.EscribirTexto("\n")
                                c.EstablecerTamañoFuente(1, 1)
                                c.EstablecerEnfatizado(True)
                                c.EscribirTexto("Sucursal: "+nombreSucursal+"\n")
                                c.EstablecerEnfatizado(False)
                                c.EscribirTexto("TEL: "+telefonoSucursal+"\n")
                                c.TextoSegunPaginaDeCodigos(2, "cp850", direccionSucursal+"\n")

                                c.EstablecerEnfatizado(True)
                                c.EscribirTexto("================================================\n")
                                c.EstablecerTamañoFuente(2, 2)
                                c.EscribirTexto("RENTA #"+str(ultimoIdRenta)+"\n")
                                c.EscribirTexto("VENTA #"+str(ultimoIdVenta)+"\n")
                                c.EstablecerEnfatizado(False)
                                c.EstablecerAlineacion(Conector.ALINEACION_IZQUIERDA)
                                c.EstablecerTamañoFuente(1, 1)
                                c.EscribirTexto("\n")
                                c.EscribirTexto(str(hoyFormato)+" - "+str(horaVenta)+" hrs.\n")
                                c.EscribirTexto("Atendida por: "+nombreCompletoEmpleadoVendedor+".\n")
                                c.EscribirTexto("\n")

                                #Listado de productos 
                                #Productos venta
                                
                                consultaProductoRenta = ProductosRenta.objects.filter(codigo_producto = stringCodigosProductos)
                                for datoProductoRenta in consultaProductoRenta:
                                    nombreProducto = datoProductoRenta.nombre_producto
                                    costoIndividualProducto = datoProductoRenta.costo_renta

                                costoIndividualProductoDecimales = str(costoIndividualProducto)

                                costoTotalProductoDivididoEnElPunto = costoIndividualProductoDecimales.split(".")
                                longitudCostoTotal = len(str(costoTotalProductoDivididoEnElPunto[0]))
                                longitudCostoTotal = int(longitudCostoTotal)

                                
                                caracteresProducto = len(nombreProducto)

                                if longitudCostoTotal == 2:
                                    espacio = 38
                                if longitudCostoTotal == 2:
                                    espacio = 37
                                elif longitudCostoTotal == 3:
                                    espacio = 36
                                elif longitudCostoTotal == 4:
                                    espacio = 35
                                elif longitudCostoTotal == 5:
                                    espacio = 34
                                elif longitudCostoTotal == 6:
                                    espacio = 33
                                numeroEspacios = espacio - int(caracteresProducto)
                                
                                espaciosTicket = ""
                                for x in range(numeroEspacios):
                                    espacioMini = " "
                                    espaciosTicket = espaciosTicket + espacioMini
                                c.EscribirTexto("1 x "+nombreProducto+espaciosTicket+str(montoAbono)+"\n")


                                

                                
                                c.EscribirTexto("\n")
                                c.EscribirTexto("\n")
                                
                                restantePorPagar = float(costoIndividualProducto) - float(montoAbono)                               
                                c.EstablecerTamañoFuente(2, 2)
                                c.EstablecerAlineacion(Conector.ALINEACION_DERECHA)
                                c.EscribirTexto("TOTAL ABONADO:  $"+str(montoAbono)+"\n")
                                c.EstablecerTamañoFuente(1, 1)
                                c.EscribirTexto("TOTAL VESTIDO:  $"+str(costoIndividualProducto)+"\n")
                                c.EscribirTexto("TOTAL RESTANTE:  $"+str(restantePorPagar)+"\n")
                                c.EscribirTexto("\n")
                                c.EstablecerTamañoFuente(2, 2)
                                c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                                c.EscribirTexto("ENTREGA DEL VESTIDO\n")
                                c.EstablecerTamañoFuente(1, 1)
                                c.EscribirTexto("EL DÍA: "+str(fechaEntregaVestido)+"\n")
                                c.EstablecerEnfatizado(True)
                                c.EstablecerTamañoFuente(1, 1)
                                c.EscribirTexto("========== IVA incluido en el precio ==========\n")
                                c.EscribirTexto("\n")
                                c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                                c.TextoSegunPaginaDeCodigos(2, "cp850", "INFORMACION DE PAGO.\n")
                                c.EstablecerEnfatizado(False)
                                c.EscribirTexto("\n")
                                c.EscribirTexto("Pago en efectivo.\n")
                                c.EscribirTexto("\n")
                                c.EstablecerEnfatizado(True)
                                c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                                c.TextoSegunPaginaDeCodigos(2, "cp850", "INFORMACIÓN DE CLIENTE.\n")

                                
                                c.EstablecerEnfatizado(False)
                                c.EscribirTexto("ID:"+str(idCienteTicket)+" - "+nombreClienteTicket+".\n")
                                c.EscribirTexto("=========== Gracias por su compra!! ===========\n")
                                c.EstablecerTamañoFuente(2, 2)
                                c.EstablecerEnfatizado(True)
                                c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                                if contadorTickets == 1:
                                    c.EscribirTexto("\n")
                                    c.EscribirTexto("COPIA TIENDA.\n")
                                    c.EscribirTexto("\n")
                                    c.EstablecerTamañoFuente(1, 1)
                                    c.EscribirTexto("________________________________________________\n")
                                    c.EscribirTexto("Firma de cliente.\n")
                                else:
                                    c.EscribirTexto("\n")
                                    c.EscribirTexto("COPIA CLIENTE.\n")
                                c.EscribirTexto("\n")
                                c.EstablecerTamañoFuente(1, 1)
                                

                                c.Feed(1)
                                c.Corte(1)
                                #c.abrirCajon()
                                c.Pulso(48, 60, 120)
                                print("Imprimiendo...")
                                # Recuerda cambiar por el nombre de tu impresora
                                respuesta = c.imprimirEn("POS80 Printer")
                                if respuesta == True:
                                    print("Impresión correcta")
                                else:
                                    print(f"Error. El mensaje es: {respuesta}")

                            
                            #Renta Apartada Efectivo

                            
                            #Mandar Mensaje Por Telegram

                            try:
                                tokenTelegram = keysBotCostabella.tokenBotCostabellaRentas
                                botCostabella = telepot.Bot(tokenTelegram)

                                idGrupoTelegram = keysBotCostabella.idGrupo
                                
                                mensaje = " \U0001F457 RENTA APARTADA \U0001F457 \n El cliente "+nombreClienteTicket+" ha apartado el vestido "+nombreProducto+" para entregarlo el día "+fechaEntregaVestido+" en la sucursal "+nombreSucursal
                                botCostabella.sendMessage(idGrupoTelegram,mensaje)
                            except:
                                print("An exception occurred")

                                
                            request.session['rentaAgregada'] = "Renta Agregada Satisfactoriamente!"
                            return redirect('/verCalendarioRentas/')
                                
                        if esConTarjeta:
                            ultimoId = 0
                            ventasTotalesEfectivo = Ventas.objects.filter(tipo_pago ="Tarjeta")
                            for venta in ventasTotalesEfectivo:
                                ultimoId = venta.id_venta

                            ultimoIdRenta = 0
                            rentasTotales = Rentas.objects.filter(estado_devolucion ="A",cliente =Clientes.objects.get(id_cliente = cliente))
                            for renta in rentasTotales:
                                ultimoIdRenta = renta.id_renta
                            
                            ventaApartadaCredito = Creditos(fecha_venta_credito=fechaApartado,empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),cliente =Clientes.objects.get(id_cliente = cliente),
                                                              renta =Rentas.objects.get(id_renta = ultimoIdRenta),venta = Ventas.objects.get(id_venta = ultimoId),monto_pagar=costoTotalRenta,monto_pagado=montoAbono,monto_restante =montoRestante,concepto_credito="Renta",descripcion_credito="Crédito por renta " + str(ultimoIdRenta) ,estatus="Pendiente",
                                                            sucursal = Sucursales.objects.get(id_sucursal = sucursal))
                            ventaApartadaCredito.save()
                            if ventaApartadaCredito:
                                ultimoIdCredito = 0
                                creditosTotales = Creditos.objects.filter(cliente =Clientes.objects.get(id_cliente = cliente))
                                for credito in creditosTotales:
                                    ultimoIdCredito = credito.id_credito
                                ingresarPrimerPago = PagosCreditos(id_credito=Creditos.objects.get(id_credito = ultimoIdCredito),fecha_pago1 =fechaApartado,tipo_pago1 ="Tarjeta",tipo_tarjeta1 =tipo_tarjeta,referencia_pago_tarjeta1=referencia_tarjeta,monto_pago1=montoAbono)
                                ingresarPrimerPago.save()

                            #IMPRESION DE TICKEEETSSSS
                            #Ultimo id de venta
                            consultaVentas = Ventas.objects.all()
                            ultimoIdVenta = 0
                            for venta in consultaVentas:
                                ultimoIdVenta = venta.id_venta

                            consultaRentas = Rentas.objects.all()
                            ultimoIdRenta = 0
                            for renta in consultaRentas:
                                ultimoIdRenta = renta.id_renta

                            #Fecha
                            hoy = datetime.now()
                            hoyFormato = hoy.strftime('%Y/%m/%d')

                            #Empleado vendedor
                            consultaEmpleadoVendedor = Empleados.objects.filter(id_empleado = empleadoVendedor)
                            for datoVendedor in consultaEmpleadoVendedor:
                                nombreEmpleado = datoVendedor.nombres
                                apellidoPatEmpleado = datoVendedor.apellido_paterno

                            nombreCompletoEmpleadoVendedor = nombreEmpleado + " "+ apellidoPatEmpleado

                            #Datos sucurssal
                            consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursal)
                            for datoSucursal in consultaSucursal:
                                nombreSucursal = datoSucursal.nombre
                                telefonoSucursal = datoSucursal.telefono
                                direccionSucursal = datoSucursal.direccion

                            #DatosCliente
                            
                            consultaCliente = Clientes.objects.filter(id_cliente = cliente)
                            for datoCliente in consultaCliente:
                                idCienteTicket = datoCliente.id_cliente
                                nombreCliente = datoCliente.nombre_cliente
                                apellidoCliente = datoCliente.apellidoPaterno_cliente

                            nombreClienteTicket = nombreCliente + " " + apellidoCliente
                            #Hora bien
                            horaVenta = horaVenta.strftime("%H:%M:%S")

                            # Esto es para obtener las impresoras. No es obligatorio hacerlo siempre que se quiera imprimir
                            impresoras = Conector.ConectorV3.obtenerImpresoras()
                            print(f"Las impresoras son: {impresoras}")

                            contadorTickets = 0
                            for x in range(2):
                                contadorTickets = contadorTickets + 1
                                c = Conector.ConectorV3()
                                c.Iniciar()
                                c.Corte(1)
                                
                                c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                                # Recuerda que la imagen debe existir y debe ser legible para el plugin. Si no, comenta las líneas
                                c.CargarImagenLocalEImprimir("C:\\COSTABELLA\\sistemaCostabella\\static\\images\\anegragrande.png", 0, 216)
                                c.EscribirTexto("\n")
                                c.EstablecerTamañoFuente(1, 1)
                                c.EstablecerEnfatizado(True)
                                c.EscribirTexto("Sucursal: "+nombreSucursal+"\n")
                                c.EstablecerEnfatizado(False)
                                c.EscribirTexto("TEL: "+telefonoSucursal+"\n")
                                c.TextoSegunPaginaDeCodigos(2, "cp850", direccionSucursal+"\n")

                                c.EstablecerEnfatizado(True)
                                c.EscribirTexto("================================================\n")
                                c.EstablecerTamañoFuente(2, 2)
                                c.EscribirTexto("ANTICIPO/APARTADO RENTA #"+str(ultimoIdRenta)+"\n")
                                c.EscribirTexto("VENTA #"+str(ultimoIdVenta)+"\n")
                                c.EstablecerEnfatizado(False)
                                c.EstablecerAlineacion(Conector.ALINEACION_IZQUIERDA)
                                c.EstablecerTamañoFuente(1, 1)
                                c.EscribirTexto("\n")
                                c.EscribirTexto(str(hoyFormato)+" - "+str(horaVenta)+" hrs.\n")
                                c.EscribirTexto("Atendida por: "+nombreCompletoEmpleadoVendedor+".\n")
                                c.EscribirTexto("\n")

                                #Listado de productos 
                                #Productos venta
                                
                                consultaProductoRenta = ProductosRenta.objects.filter(codigo_producto = stringCodigosProductos)
                                for datoProductoRenta in consultaProductoRenta:
                                    nombreProducto = datoProductoRenta.nombre_producto
                                    costoIndividualProducto = datoProductoRenta.costo_renta

                                costoIndividualProductoDecimales = str(costoIndividualProducto)

                                costoTotalProductoDivididoEnElPunto = costoIndividualProductoDecimales.split(".")
                                longitudCostoTotal = len(str(costoTotalProductoDivididoEnElPunto[0]))
                                longitudCostoTotal = int(longitudCostoTotal)

                                
                                caracteresProducto = len(nombreProducto)

                                if longitudCostoTotal == 2:
                                    espacio = 38
                                if longitudCostoTotal == 2:
                                    espacio = 37
                                elif longitudCostoTotal == 3:
                                    espacio = 36
                                elif longitudCostoTotal == 4:
                                    espacio = 35
                                elif longitudCostoTotal == 5:
                                    espacio = 34
                                elif longitudCostoTotal == 6:
                                    espacio = 33
                                numeroEspacios = espacio - int(caracteresProducto)
                                
                                espaciosTicket = ""
                                for x in range(numeroEspacios):
                                    espacioMini = " "
                                    espaciosTicket = espaciosTicket + espacioMini
                                c.EscribirTexto("1 x "+nombreProducto+espaciosTicket+str(montoAbono)+"\n")


                                

                                
                                c.EscribirTexto("\n")
                                c.EscribirTexto("\n")
                                
                                restantePorPagar = float(costoIndividualProducto) - float(montoAbono)                               
                                c.EstablecerTamañoFuente(2, 2)
                                c.EstablecerAlineacion(Conector.ALINEACION_DERECHA)
                                c.EscribirTexto("TOTAL ABONADO:  $"+str(montoAbono)+"\n")
                                c.EstablecerTamañoFuente(1, 1)
                                c.EscribirTexto("TOTAL VESTIDO:  $"+str(costoIndividualProducto)+"\n")
                                c.EscribirTexto("TOTAL RESTANTE:  $"+str(restantePorPagar)+"\n")
                                c.EscribirTexto("\n")
                                c.EstablecerEnfatizado(True)
                                c.EstablecerTamañoFuente(2, 2)
                                c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                                c.EscribirTexto("ENTREGA DEL VESTIDO\n")
                                c.EstablecerTamañoFuente(1, 1)
                                c.EscribirTexto("EL DÍA: "+str(fechaEntregaVestido)+"\n")
                                c.EstablecerTamañoFuente(1, 1)
                                c.EscribirTexto("========== IVA incluido en el precio ==========\n")
                                c.EscribirTexto("\n")
                                c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                                c.TextoSegunPaginaDeCodigos(2, "cp850", "INFORMACION DE PAGO.\n")
                                c.EstablecerEnfatizado(False)
                                c.EscribirTexto("\n")
                                c.EscribirTexto("Pago con "+str(tipo_tarjeta)+".\n")
                                c.EscribirTexto("Referencia: "+referencia_tarjeta+".\n")
                                c.EscribirTexto("\n")
                                c.EstablecerEnfatizado(True)
                                c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                                c.TextoSegunPaginaDeCodigos(2, "cp850", "INFORMACIÓN DE CLIENTE.\n")

                                
                                c.EstablecerEnfatizado(False)
                                c.EscribirTexto("ID:"+str(idCienteTicket)+" - "+nombreClienteTicket+".\n")
                                c.EscribirTexto("=========== Gracias por su compra!! ===========\n")
                                c.EstablecerTamañoFuente(2, 2)
                                c.EstablecerEnfatizado(True)
                                c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                                if contadorTickets == 1:
                                    c.EscribirTexto("\n")
                                    c.EscribirTexto("COPIA TIENDA.\n")
                                    c.EscribirTexto("\n")
                                    c.EstablecerTamañoFuente(1, 1)
                                    c.EscribirTexto("________________________________________________\n")
                                    c.EscribirTexto("Firma de cliente.\n")
                                else:
                                    c.EscribirTexto("\n")
                                    c.EscribirTexto("COPIA CLIENTE.\n")
                                c.EscribirTexto("\n")
                                c.EstablecerTamañoFuente(1, 1)
                                

                                c.Feed(1)
                                c.Corte(1)
                                #c.abrirCajon()
                                c.Pulso(48, 60, 120)
                                print("Imprimiendo...")
                                # Recuerda cambiar por el nombre de tu impresora
                                respuesta = c.imprimirEn("POS80 Printer")
                                if respuesta == True:
                                    print("Impresión correcta")
                                else:
                                    print(f"Error. El mensaje es: {respuesta}")
                            
                            #Renta Apartada pagada con Tarjeta
                            try:
                                tokenTelegram = keysBotCostabella.tokenBotCostabellaRentas
                                botCostabella = telepot.Bot(tokenTelegram)

                                idGrupoTelegram = keysBotCostabella.idGrupo
                                
                                mensaje = " \U0001F457 RENTA APARTADA \U0001F457 \n El cliente "+nombreClienteTicket+" ha apartado el vestido "+nombreProducto+" para entregarlo el día "+fechaEntregaVestido+" en la sucursal "+nombreSucursal
                                botCostabella.sendMessage(idGrupoTelegram,mensaje)
                            except:
                                print("An exception occurred")

                            request.session['rentaAgregada'] = "Renta Agregada Satisfactoriamente!"
                            return redirect('/verCalendarioRentas/')
                     
                                
                        if esConTransferencia:
                            ultimoId = 0
                            ventasTotalesEfectivo = Ventas.objects.filter(tipo_pago ="Transferencia")
                            for venta in ventasTotalesEfectivo:
                                ultimoId = venta.id_venta

                            ultimoIdRenta = 0
                            rentasTotales = Rentas.objects.filter(estado_devolucion ="A",cliente =Clientes.objects.get(id_cliente = cliente))
                            for renta in rentasTotales:
                                ultimoIdRenta = renta.id_renta
                            
                            ventaApartadaCredito = Creditos(fecha_venta_credito=fechaApartado,empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),cliente =Clientes.objects.get(id_cliente = cliente),
                                                              renta =Rentas.objects.get(id_renta = ultimoIdRenta),venta = Ventas.objects.get(id_venta = ultimoId),monto_pagar=costoTotalRenta,monto_pagado=montoAbono,monto_restante =montoRestante,concepto_credito="Renta",descripcion_credito="Crédito por renta " + str(ultimoIdRenta) ,estatus="Pendiente",
                                                            sucursal = Sucursales.objects.get(id_sucursal = sucursal))
                            ventaApartadaCredito.save()
                            if ventaApartadaCredito:
                                ultimoIdCredito = 0
                                creditosTotales = Creditos.objects.filter(cliente =Clientes.objects.get(id_cliente = cliente))
                                for credito in creditosTotales:
                                    ultimoIdCredito = credito.id_credito
                                ingresarPrimerPago = PagosCreditos(id_credito=Creditos.objects.get(id_credito = ultimoIdCredito),fecha_pago1 =fechaApartado,tipo_pago1 ="Transferencia",clave_rastreo_pago_transferencia1 =clave_transferencia,monto_pago1=montoAbono)
                                ingresarPrimerPago.save()
                            
                            #IMPRESION DE TICKEEETSSSS
                            #Ultimo id de venta
                            consultaVentas = Ventas.objects.all()
                            ultimoIdVenta = 0
                            for venta in consultaVentas:
                                ultimoIdVenta = venta.id_venta

                            #Fecha
                            hoy = datetime.now()
                            hoyFormato = hoy.strftime('%Y/%m/%d')

                            #Empleado vendedor
                            consultaEmpleadoVendedor = Empleados.objects.filter(id_empleado = empleadoVendedor)
                            for datoVendedor in consultaEmpleadoVendedor:
                                nombreEmpleado = datoVendedor.nombres
                                apellidoPatEmpleado = datoVendedor.apellido_paterno

                            nombreCompletoEmpleadoVendedor = nombreEmpleado + " "+ apellidoPatEmpleado

                            #Datos sucurssal
                            consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursal)
                            for datoSucursal in consultaSucursal:
                                nombreSucursal = datoSucursal.nombre
                                telefonoSucursal = datoSucursal.telefono
                                direccionSucursal = datoSucursal.direccion

                            #DatosCliente
                            
                            consultaCliente = Clientes.objects.filter(id_cliente = cliente)
                            for datoCliente in consultaCliente:
                                idCienteTicket = datoCliente.id_cliente
                                nombreCliente = datoCliente.nombre_cliente
                                apellidoCliente = datoCliente.apellidoPaterno_cliente

                            consultaRentas = Rentas.objects.all()
                            ultimoIdRenta = 0
                            for renta in consultaRentas:
                                ultimoIdRenta = renta.id_renta

                            nombreClienteTicket = nombreCliente + " " + apellidoCliente
                            #Hora bien
                            horaVenta = horaVenta.strftime("%H:%M:%S")

                            # Esto es para obtener las impresoras. No es obligatorio hacerlo siempre que se quiera imprimir
                            impresoras = Conector.ConectorV3.obtenerImpresoras()
                            print(f"Las impresoras son: {impresoras}")

                            contadorTickets = 0
                            for x in range(2):
                                contadorTickets = contadorTickets + 1
                                c = Conector.ConectorV3()
                                c.Iniciar()
                                c.Corte(1)
                                
                                c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                                # Recuerda que la imagen debe existir y debe ser legible para el plugin. Si no, comenta las líneas
                                c.CargarImagenLocalEImprimir("C:\\COSTABELLA\\sistemaCostabella\\static\\images\\anegragrande.png", 0, 216)
                                c.EscribirTexto("\n")
                                c.EstablecerTamañoFuente(1, 1)
                                c.EstablecerEnfatizado(True)
                                c.EscribirTexto("Sucursal: "+nombreSucursal+"\n")
                                c.EstablecerEnfatizado(False)
                                c.EscribirTexto("TEL: "+telefonoSucursal+"\n")
                                c.TextoSegunPaginaDeCodigos(2, "cp850", direccionSucursal+"\n")

                                c.EstablecerEnfatizado(True)
                                c.EscribirTexto("================================================\n")
                                c.EstablecerTamañoFuente(2, 2)
                                c.EscribirTexto("ANTICIPO/APARTADO RENTA #"+str(ultimoIdRenta)+"\n")
                                c.EscribirTexto("VENTA #"+str(ultimoIdVenta)+"\n")
                                c.EstablecerEnfatizado(False)
                                c.EstablecerAlineacion(Conector.ALINEACION_IZQUIERDA)
                                c.EstablecerTamañoFuente(1, 1)
                                c.EscribirTexto("\n")
                                c.EscribirTexto(str(hoyFormato)+" - "+str(horaVenta)+" hrs.\n")
                                c.EscribirTexto("Atendida por: "+nombreCompletoEmpleadoVendedor+".\n")
                                c.EscribirTexto("\n")

                                #Listado de productos 
                                #Productos venta
                                
                                consultaProductoRenta = ProductosRenta.objects.filter(codigo_producto = stringCodigosProductos)
                                for datoProductoRenta in consultaProductoRenta:
                                    nombreProducto = datoProductoRenta.nombre_producto
                                    costoIndividualProducto = datoProductoRenta.costo_renta

                                costoIndividualProductoDecimales = str(costoIndividualProducto)

                                costoTotalProductoDivididoEnElPunto = costoIndividualProductoDecimales.split(".")
                                longitudCostoTotal = len(str(costoTotalProductoDivididoEnElPunto[0]))
                                longitudCostoTotal = int(longitudCostoTotal)

                                
                                caracteresProducto = len(nombreProducto)

                                if longitudCostoTotal == 2:
                                    espacio = 38
                                if longitudCostoTotal == 2:
                                    espacio = 37
                                elif longitudCostoTotal == 3:
                                    espacio = 36
                                elif longitudCostoTotal == 4:
                                    espacio = 35
                                elif longitudCostoTotal == 5:
                                    espacio = 34
                                elif longitudCostoTotal == 6:
                                    espacio = 33
                                numeroEspacios = espacio - int(caracteresProducto)
                                
                                espaciosTicket = ""
                                for x in range(numeroEspacios):
                                    espacioMini = " "
                                    espaciosTicket = espaciosTicket + espacioMini
                                c.EscribirTexto("1 x "+nombreProducto+espaciosTicket+str(montoAbono)+"\n")


                                

                                
                                c.EscribirTexto("\n")
                                c.EscribirTexto("\n")
                                
                                restantePorPagar = float(costoIndividualProducto) - float(montoAbono)                               
                                c.EstablecerTamañoFuente(2, 2)
                                c.EstablecerAlineacion(Conector.ALINEACION_DERECHA)
                                c.EscribirTexto("TOTAL ABONADO:  $"+str(montoAbono)+"\n")
                                c.EstablecerTamañoFuente(1, 1)
                                c.EscribirTexto("TOTAL VESTIDO:  $"+str(costoIndividualProducto)+"\n")
                                c.EscribirTexto("TOTAL RESTANTE:  $"+str(restantePorPagar)+"\n")
                                c.EscribirTexto("\n")
                                c.EstablecerEnfatizado(True)
                                c.EstablecerTamañoFuente(2, 2)
                                c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                                c.EscribirTexto("ENTREGA DEL VESTIDO\n")
                                c.EstablecerTamañoFuente(1, 1)
                                c.EscribirTexto("EL DÍA: "+str(fechaEntregaVestido)+"\n")
                                c.EstablecerTamañoFuente(1, 1)
                                c.EscribirTexto("========== IVA incluido en el precio ==========\n")
                                c.EscribirTexto("\n")
                                c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                                c.TextoSegunPaginaDeCodigos(2, "cp850", "INFORMACION DE PAGO.\n")
                                c.EstablecerEnfatizado(False)
                                c.EscribirTexto("\n")
                                c.EscribirTexto("Transferencia.\n")
                                c.EscribirTexto("Clave de rastreo: "+str(clave_transferencia)+".\n")
                                c.EscribirTexto("\n")
                                c.EstablecerEnfatizado(True)
                                c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                                c.TextoSegunPaginaDeCodigos(2, "cp850", "INFORMACIÓN DE CLIENTE.\n")

                                
                                c.EstablecerEnfatizado(False)
                                c.EscribirTexto("ID:"+str(idCienteTicket)+" - "+nombreClienteTicket+".\n")
                                c.EscribirTexto("=========== Gracias por su compra!! ===========\n")
                                c.EstablecerTamañoFuente(2, 2)
                                c.EstablecerEnfatizado(True)
                                c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                                if contadorTickets == 1:
                                    c.EscribirTexto("\n")
                                    c.EscribirTexto("COPIA TIENDA.\n")
                                    c.EscribirTexto("\n")
                                    c.EstablecerTamañoFuente(1, 1)
                                    c.EscribirTexto("________________________________________________\n")
                                    c.EscribirTexto("Firma de cliente.\n")
                                else:
                                    c.EscribirTexto("\n")
                                    c.EscribirTexto("COPIA CLIENTE.\n")
                                c.EscribirTexto("\n")
                                c.EstablecerTamañoFuente(1, 1)
                                

                                c.Feed(1)
                                c.Corte(1)
                                #c.abrirCajon()
                                c.Pulso(48, 60, 120)
                                print("Imprimiendo...")
                                # Recuerda cambiar por el nombre de tu impresora
                                respuesta = c.imprimirEn("POS80 Printer")
                                if respuesta == True:
                                    print("Impresión correcta")
                                else:
                                    print(f"Error. El mensaje es: {respuesta}")

                            #Renta Pagada con Transferencia
                            try:
                                tokenTelegram = keysBotCostabella.tokenBotCostabellaRentas
                                botCostabella = telepot.Bot(tokenTelegram)

                                idGrupoTelegram = keysBotCostabella.idGrupo
                                
                                mensaje = " \U0001F457 RENTA APARTADA \U0001F457 \n El cliente "+nombreClienteTicket+" ha apartado el vestido "+nombreProducto+" para entregarlo el día "+fechaEntregaVestido+" en la sucursal "+nombreSucursal
                                botCostabella.sendMessage(idGrupoTelegram,mensaje)
                            except:
                                print("An exception occurred")

                            request.session['rentaAgregada'] = "Renta Agregada Satisfactoriamente!"
                            return redirect('/verCalendarioRentas/')
                            
                            
                  
                      
                            

           
               
            else:  #Renta liquidada
                montoAbono = costoTotalRenta
                montoRestante = 0
             
             
             
                    
                    
                registroRenta = Rentas(cliente = Clientes.objects.get(id_cliente = cliente), codigos_productos_renta = stringCodigosProductos,
                fecha_apartado = fechaApartado, fecha_entrega_renta = fechaEntregaVestido, fecha_limite_devolucion = fechas,fecha_limite_devolucion_cuota = strfechaLimiteDevolucionCuota
                , estado_devolucion = "A", cuota_retraso = "N", monto_total_renta=costoTotalRenta, monto_min_apartado = minimo, monto_pago_apartado = montoAbono, 
                monto_restante = montoRestante,comentarios_renta =comentarios, realizado_por = Empleados.objects.get(id_empleado = empleadoVendedor))
                registroRenta.save()

                if registroRenta:
                    for productoRenta in arregloProductos:
                        codigo = str(productoRenta)
                        actualizacionEstado = ProductosRenta.objects.filter(codigo_producto = codigo).update(estado_renta = "En renta") 
                        
                       
               

                    
                    
                    formaPago = request.POST['tipoPago'] #Efectivo,  tarjeta o transferencia
                    sucursal = request.POST['idSucursal']
              
                    
                    esConEfectivo = False
                    esConTarjeta = False
                    esConTransferencia = False

                    if formaPago == "Efectivo":
                        esConEfectivo = True
                    elif formaPago == "Tarjeta":
                        esConTarjeta = True
                        tipo_tarjeta = request.POST['tipoTarjeta']    
                        referencia_tarjeta = request.POST['referenciaTarjeta'] 
                        
                    elif formaPago == "Transferencia":
                        esConTransferencia = True
                        clave_transferencia = request.POST['claveRastreoTransferencia'] 

                    
                
                
                    
                    arregloProductos = stringCodigosProductos.split(',')
                    productosVenta = []
                    cantidadesProductosVenta = [1]
        
                    
                    
                    for pro_ser in arregloProductos:
                        stringVenta = str(pro_ser)
                
                        intCantidad =int(1)
                        if "PR" in stringVenta:
                            productosVenta.append(stringVenta)
                            cantidadesProductosVenta.append(intCantidad)
                    
                        
                    listaProductosVenta =""
                    cantidadesListaProductosVenta =""
                
                    
                    lProductos =zip(productosVenta,cantidadesProductosVenta)
                    lProductos2 = zip(productosVenta,cantidadesProductosVenta)
            
                    contadorProductos = 0
                    for p,c in lProductos:
                        stringProducto =str(p)
                        stringCantidad =str(c)
                        contadorProductos =contadorProductos +1
                        if contadorProductos == 1:
                            listaProductosVenta=stringProducto
                            cantidadesListaProductosVenta =stringCantidad
                        else:
                            listaProductosVenta += "," + stringProducto 
                            cantidadesListaProductosVenta += "," + stringCantidad
                

                    #RegistrarProducto

                    if esConEfectivo:
                        
                                registroVenta = Ventas(fecha_venta = fechaApartado,  hora_venta =horaVenta,
                                tipo_pago = formaPago, 
                                empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),
                                cliente = Clientes.objects.get(id_cliente = cliente),
                                ids_productos = listaProductosVenta, cantidades_productos = cantidadesListaProductosVenta,
                                ids_servicios_corporales ="", cantidades_servicios_corporales ="",
                                ids_servicios_faciales ="", cantidades_servicios_faciales ="",
                                monto_pagar = costoTotalRenta, credito = "N",
                                comentariosVenta = "Se realizo venta por motivo de renta sin apartado", sucursal = Sucursales.objects.get(id_sucursal = sucursal))

                    if esConTarjeta:
                    
                        
                                registroVenta = Ventas(fecha_venta = fechaApartado,  hora_venta =horaVenta,
                                tipo_pago = formaPago, tipo_tarjeta = tipo_tarjeta, referencia_pago_tarjeta = referencia_tarjeta,
                                empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),
                                cliente = Clientes.objects.get(id_cliente = cliente),
                                ids_productos = listaProductosVenta, cantidades_productos = cantidadesListaProductosVenta,
                                ids_servicios_corporales ="", cantidades_servicios_corporales ="",
                                ids_servicios_faciales ="", cantidades_servicios_faciales ="",
                                monto_pagar = costoTotalRenta, credito = "N",
                                comentariosVenta = "Se realizo venta por motivo de renta sin apartado", sucursal = Sucursales.objects.get(id_sucursal = sucursal))
                    

                    if esConTransferencia:
            
                                registroVenta = Ventas(fecha_venta = fechaApartado,  hora_venta =horaVenta,
                                tipo_pago = formaPago, clave_rastreo_transferencia = clave_transferencia,
                                empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),
                                cliente = Clientes.objects.get(id_cliente = cliente),
                                ids_productos = listaProductosVenta, cantidades_productos = cantidadesListaProductosVenta,
                                ids_servicios_corporales ="", cantidades_servicios_corporales ="",
                                ids_servicios_faciales ="", cantidades_servicios_faciales ="",
                                monto_pagar = costoTotalRenta, credito = "N", comentariosVenta = "Se realizo venta por motivo de renta sin apartado", sucursal = Sucursales.objects.get(id_sucursal = sucursal))
                        

                    registroVenta.save()
                    
                    
                    if registroVenta and esConEfectivo:
                        ultimoId = 0
                        ventasTotalesEfectivo = Ventas.objects.filter(tipo_pago ="Efectivo")
                        for venta in ventasTotalesEfectivo:
                            ultimoId = venta.id_venta
                        tipoMovimiento ="IN"
                        montoMovimiento = float(costoTotalRenta)
                        descripcionMovimiento ="Movimiento por venta " + str(ultimoId) + "   de renta con pago completo "
                        fechaMovimiento = datetime.today().strftime('%Y-%m-%d')
                        horaMovimiento = datetime.now().time()
                        ingresarCantidadEfectivoAcaja =MovimientosCaja(fecha =fechaMovimiento,hora = horaMovimiento,tipo=tipoMovimiento,monto =montoMovimiento, descripcion=descripcionMovimiento,sucursal =  Sucursales.objects.get(id_sucursal = sucursal),
                                                                            realizado_por = Empleados.objects.get(id_empleado = empleadoVendedor))
                        ingresarCantidadEfectivoAcaja.save()
                 
                            
                            
                    #IMPRESION DE TICKEEETSSSS
                    #Ultimo id de venta
                    consultaVentas = Ventas.objects.all()
                    ultimoIdVenta = 0
                    for venta in consultaVentas:
                        ultimoIdVenta = venta.id_venta

                    #Ultimo id de renta
                    ultimoIdRenta = 0
                    consultaRentas = Rentas.objects.all()
                    for renta in consultaRentas:
                        ultimoIdRenta = renta.id_renta
                    #Fecha
                    hoy = datetime.now()
                    hoyFormato = hoy.strftime('%Y/%m/%d')

                    #Empleado vendedor
                    consultaEmpleadoVendedor = Empleados.objects.filter(id_empleado = empleadoVendedor)
                    for datoVendedor in consultaEmpleadoVendedor:
                        nombreEmpleado = datoVendedor.nombres
                        apellidoPatEmpleado = datoVendedor.apellido_paterno

                    nombreCompletoEmpleadoVendedor = nombreEmpleado + " "+ apellidoPatEmpleado

                    #Datos sucurssal
                    consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursal)
                    for datoSucursal in consultaSucursal:
                        nombreSucursal = datoSucursal.nombre
                        telefonoSucursal = datoSucursal.telefono
                        direccionSucursal = datoSucursal.direccion

                    #DatosCliente
                    
                    consultaCliente = Clientes.objects.filter(id_cliente = cliente)
                    for datoCliente in consultaCliente:
                        idCienteTicket = datoCliente.id_cliente
                        nombreCliente = datoCliente.nombre_cliente
                        apellidoCliente = datoCliente.apellidoPaterno_cliente

                    nombreClienteTicket = nombreCliente + " " + apellidoCliente
                    #Hora bien
                    horaVenta = horaVenta.strftime("%H:%M:%S")

                    # Esto es para obtener las impresoras. No es obligatorio hacerlo siempre que se quiera imprimir
                    impresoras = Conector.ConectorV3.obtenerImpresoras()
                    print(f"Las impresoras son: {impresoras}")

                    contadorTickets = 0
                    for x in range(2):
                        contadorTickets = contadorTickets + 1
                        c = Conector.ConectorV3()
                        c.Iniciar()
                        c.Corte(1)
                        
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        # Recuerda que la imagen debe existir y debe ser legible para el plugin. Si no, comenta las líneas
                        c.CargarImagenLocalEImprimir("C:\\COSTABELLA\\sistemaCostabella\\static\\images\\anegragrande.png", 0, 216)
                        c.EscribirTexto("\n")
                        c.EstablecerTamañoFuente(1, 1)
                        c.EstablecerEnfatizado(True)
                        c.EscribirTexto("Sucursal: "+nombreSucursal+"\n")
                        c.EstablecerEnfatizado(False)
                        c.EscribirTexto("TEL: "+telefonoSucursal+"\n")
                        c.TextoSegunPaginaDeCodigos(2, "cp850", direccionSucursal+"\n")

                        c.EstablecerEnfatizado(True)
                        c.EscribirTexto("================================================\n")
                        c.EstablecerTamañoFuente(2, 2)
                        c.EscribirTexto("APARTADO RENTA #"+str(ultimoIdRenta)+"\n")
                        c.EscribirTexto("VENTA #"+str(ultimoIdVenta)+"\n")
                        c.EstablecerEnfatizado(False)
                        c.EstablecerAlineacion(Conector.ALINEACION_IZQUIERDA)
                        c.EstablecerTamañoFuente(1, 1)
                        c.EscribirTexto("\n")
                        c.EscribirTexto(str(hoyFormato)+" - "+str(horaVenta)+" hrs.\n")
                        c.EscribirTexto("Atendida por: "+nombreCompletoEmpleadoVendedor+".\n")
                        c.EscribirTexto("\n")

                        #Listado de productos 
                        #Productos venta
                        
                        consultaProductoRenta = ProductosRenta.objects.filter(codigo_producto = stringCodigosProductos)
                        for datoProductoRenta in consultaProductoRenta:
                            nombreProducto = datoProductoRenta.nombre_producto
                            costoIndividualProducto = datoProductoRenta.costo_renta

                        costoIndividualProductoDecimales = str(costoIndividualProducto)

                        costoTotalProductoDivididoEnElPunto = costoIndividualProductoDecimales.split(".")
                        longitudCostoTotal = len(str(costoTotalProductoDivididoEnElPunto[0]))
                        longitudCostoTotal = int(longitudCostoTotal)

                        
                        caracteresProducto = len(nombreProducto)

                        if longitudCostoTotal == 2:
                            espacio = 38
                        if longitudCostoTotal == 2:
                            espacio = 37
                        elif longitudCostoTotal == 3:
                            espacio = 36
                        elif longitudCostoTotal == 4:
                            espacio = 35
                        elif longitudCostoTotal == 5:
                            espacio = 34
                        elif longitudCostoTotal == 6:
                            espacio = 33
                        numeroEspacios = espacio - int(caracteresProducto)
                        
                        espaciosTicket = ""
                        for x in range(numeroEspacios):
                            espacioMini = " "
                            espaciosTicket = espaciosTicket + espacioMini
                        c.EscribirTexto("1 x "+nombreProducto+espaciosTicket+str(montoAbono)+"\n")


                        

                        
                        c.EscribirTexto("\n")
                        c.EscribirTexto("\n")
                        
                        restantePorPagar = float(costoIndividualProducto) - float(montoAbono)                               
                        c.EstablecerTamañoFuente(2, 2)
                        c.EstablecerAlineacion(Conector.ALINEACION_DERECHA)
                        c.EscribirTexto("TOTAL:  $"+str(montoAbono)+"\n")
                        c.EstablecerTamañoFuente(1, 1)
                        c.EscribirTexto("TOTAL VESTIDO:  $"+str(costoIndividualProducto)+"\n")
                        c.EscribirTexto("Pago de renta liquidado.\n")
                        c.EscribirTexto("\n")
                        c.EstablecerEnfatizado(True)
                        c.EstablecerTamañoFuente(2, 2)
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        c.EscribirTexto("ENTREGA DEL VESTIDO\n")
                        c.EstablecerTamañoFuente(1, 1)
                        c.EscribirTexto("EL DÍA: "+str(fechaEntregaVestido)+"\n")
                        c.EstablecerTamañoFuente(1, 1)
                        c.EscribirTexto("========== IVA incluido en el precio ==========\n")
                        c.EscribirTexto("\n")
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        c.TextoSegunPaginaDeCodigos(2, "cp850", "INFORMACION DE PAGO.\n")
                        c.EstablecerEnfatizado(False)
                        c.EscribirTexto("\n")
                        if esConEfectivo:
                            c.EscribirTexto("Pago en efectivo.\n")
                        elif esConTarjeta:
                            c.EscribirTexto("Pago con "+str(tipo_tarjeta)+".\n")
                            c.EscribirTexto("Referencia: "+referencia_tarjeta+".\n")
                        elif esConTransferencia:
                            c.EscribirTexto("Transferencia.\n")
                            c.EscribirTexto("Clave de rastreo: "+str(clave_transferencia)+".\n")
                        c.EscribirTexto("\n")
                        c.EstablecerEnfatizado(True)
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        c.TextoSegunPaginaDeCodigos(2, "cp850", "INFORMACIÓN DE CLIENTE.\n")

                        
                        c.EstablecerEnfatizado(False)
                        c.EscribirTexto("ID:"+str(idCienteTicket)+" - "+nombreClienteTicket+".\n")
                        c.EscribirTexto("=========== Gracias por su compra!! ===========\n")
                        c.EstablecerTamañoFuente(2, 2)
                        c.EstablecerEnfatizado(True)
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        if contadorTickets == 1:
                            c.EscribirTexto("\n")
                            c.EscribirTexto("COPIA TIENDA.\n")
                            c.EscribirTexto("\n")
                            c.EstablecerTamañoFuente(1, 1)
                            c.EscribirTexto("________________________________________________\n")
                            c.EscribirTexto("Firma de cliente.\n")
                        else:
                            c.EscribirTexto("\n")
                            c.EscribirTexto("COPIA CLIENTE.\n")
                        c.EscribirTexto("\n")
                        c.EstablecerTamañoFuente(1, 1)
                        

                        c.Feed(1)
                        c.Corte(1)
                        #c.abrirCajon()
                        c.Pulso(48, 60, 120)
                        print("Imprimiendo...")
                        # Recuerda cambiar por el nombre de tu impresora
                        respuesta = c.imprimirEn("POS80 Printer")
                        if respuesta == True:
                            print("Impresión correcta")
                        else:
                            print(f"Error. El mensaje es: {respuesta}")
                    #Renta Liquidada pagada con Efectivo
                    try:
                        tokenTelegram = keysBotCostabella.tokenBotCostabellaRentas
                        botCostabella = telepot.Bot(tokenTelegram)

                        idGrupoTelegram = keysBotCostabella.idGrupo
                        
                        mensaje = " \U0001F457 RENTA APARTADA LIQUIDADA \U0001F457 \n El cliente "+nombreClienteTicket+" ha apartado el vestido "+nombreProducto+" para entregarlo el día "+fechaEntregaVestido+" en la sucursal "+nombreSucursal
                        botCostabella.sendMessage(idGrupoTelegram,mensaje)
                    except:
                        print("An exception occurred")

                    request.session['rentaAgregada'] = "Renta Agregada Satisfactoriamente!"
                    return redirect('/verCalendarioRentas/')
                else:
                    request.session['rentaNoAgregada'] = "Error en la base de datos, intentelo más tarde.."
                    return redirect('/seleccionarSucursalRentas/')
            
             
        

    else:
        return render(request,"1 Login/login.html")
    
    
    
    
    
#----PAGOS CREDITOS

def guardarPago1(request):
    if "idSesion" in request.session:
        # Variables de sesión
        idEmpleado = request.session['idSesion']
        if request.method == "POST":
            
            

            idCreditoAPagar = request.POST['idCredito']
            idPagoCredito = request.POST['idPagoCredito']
            cantidadPago1 = request.POST['cantidadPago1']

            fechaPago1 = datetime.now()
            horaVenta= datetime.now().time()
             
            formaPago = request.POST['tipoPago'] #Efectivo,  tarjeta o transferencia
            
            datosCredito = Creditos.objects.filter(id_credito = idCreditoAPagar)
            for dato in datosCredito:
                montoTotalCredito = dato.monto_pagar
                montoPagado = dato.monto_pagado
                sucursal = dato.sucursal_id
                montoRestante = dato.monto_restante
                idVentaCredito = dato.venta_id
                
                
           
            floatCantidadPago1 = float(cantidadPago1)
            floatRestante = float(montoRestante)
                
                
           
                
            if floatCantidadPago1 == floatRestante:
                restante = 0
                estado = "Finalizado"
           
                
            
            else:
                restante = montoTotalCredito - float(cantidadPago1)
                estado = "Pendiente"
                
                   
                 
                    
            esConEfectivo = False
            esConTarjeta = False
            esConTransferencia = False

            if formaPago == "Efectivo":
                esConEfectivo = True
            elif formaPago == "Tarjeta":
                esConTarjeta = True
                tipo_tarjeta = request.POST['tipoTarjeta']    
                referencia_tarjeta = request.POST['referenciaTarjeta'] 
                        
            elif formaPago == "Transferencia":
                esConTransferencia = True
                clave_transferencia = request.POST['claveRastreoTransferencia'] 

                    


            if esConEfectivo:
                        
                registrarPago1 = PagosCreditos.objects.filter(id_historialCredito = idPagoCredito).update(fecha_pago1 = fechaPago1,tipo_pago1 ="Efectivo",monto_pago1 =cantidadPago1) 
                
                if registrarPago1:
                    
                    
                    actualizarEstadoCredito = Creditos.objects.filter(id_credito = idCreditoAPagar).update(monto_pagado = cantidadPago1,monto_restante =restante,estatus =estado) 
                    if actualizarEstadoCredito:
                         
                        tipoMovimiento ="IN"
                        montoMovimiento = float(cantidadPago1)
                        descripcionMovimiento ="Movimiento por abono de crédito " + str(idCreditoAPagar) 
                        fechaMovimiento = datetime.today().strftime('%Y-%m-%d')
                        horaMovimiento = datetime.now().time()
                        ingresarCantidadEfectivoAcaja =MovimientosCaja(fecha =fechaMovimiento,hora = horaMovimiento,tipo=tipoMovimiento,monto =montoMovimiento, descripcion=descripcionMovimiento,sucursal =  Sucursales.objects.get(id_sucursal = sucursal),
                                                                            realizado_por = Empleados.objects.get(id_empleado = idEmpleado))
                        ingresarCantidadEfectivoAcaja.save()

                        #IMPRESION DE TICKEEETSSSS

                        #Fecha
                        hoy = datetime.now()
                        hoyFormato = hoy.strftime('%Y/%m/%d')

                        #Consulta de venta
                        consultaVenta = Ventas.objects.filter(id_venta = idVentaCredito)
                        for datoVenta in consultaVenta:
                            empleadoVendedor = datoVenta.empleado_vendedor_id
                            sucursal = datoVenta.sucursal_id
                            cliente = datoVenta.cliente_id
                        #Empleado vendedor
                        consultaEmpleadoVendedor = Empleados.objects.filter(id_empleado = empleadoVendedor)
                        for datoVendedor in consultaEmpleadoVendedor:
                            nombreEmpleado = datoVendedor.nombres
                            apellidoPatEmpleado = datoVendedor.apellido_paterno

                        nombreCompletoEmpleadoVendedor = nombreEmpleado + " "+ apellidoPatEmpleado

                        #Datos sucurssal
                        consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursal)
                        for datoSucursal in consultaSucursal:
                            nombreSucursal = datoSucursal.nombre
                            telefonoSucursal = datoSucursal.telefono
                            direccionSucursal = datoSucursal.direccion

                        
                        
                        
                        #Hora bien
                        horaVenta = horaVenta.strftime("%H:%M:%S")

                        # Esto es para obtener las impresoras. No es obligatorio hacerlo siempre que se quiera imprimir
                        impresoras = Conector.ConectorV3.obtenerImpresoras()
                        print(f"Las impresoras son: {impresoras}")
                        
                        contadorTickets = 0
                        for x in range(2):
                            contadorTickets = contadorTickets + 1

                            
                            c = Conector.ConectorV3()
                            c.Iniciar()
                            c.Corte(1)
                            
                            c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                            # Recuerda que la imagen debe existir y debe ser legible para el plugin. Si no, comenta las líneas
                            c.CargarImagenLocalEImprimir("C:\\COSTABELLA\\sistemaCostabella\\static\\images\\anegragrande.png", 0, 216)
                            c.EscribirTexto("\n")
                            c.EstablecerTamañoFuente(1, 1)
                            c.EstablecerEnfatizado(True)
                            c.EscribirTexto("Sucursal: "+nombreSucursal+"\n")
                            c.EstablecerEnfatizado(False)
                            c.EscribirTexto("TEL: "+telefonoSucursal+"\n")
                            c.TextoSegunPaginaDeCodigos(2, "cp850", direccionSucursal+"\n")

                            c.EstablecerEnfatizado(True)
                            c.EscribirTexto("================================================\n")
                            c.EstablecerTamañoFuente(2, 2)
                            c.EscribirTexto("PAGO DE VENTA #"+str(idVentaCredito)+"\n")
                            c.EscribirTexto("CRÉDITO #"+str(idCreditoAPagar)+"\n")
                            c.EstablecerEnfatizado(False)
                            c.EstablecerAlineacion(Conector.ALINEACION_IZQUIERDA)
                            c.EstablecerTamañoFuente(1, 1)
                            c.EscribirTexto("\n")
                            c.EscribirTexto(" "+str(hoyFormato)+" - "+str(horaVenta)+" hrs.\n")
                            c.EscribirTexto("Atendida por: "+nombreCompletoEmpleadoVendedor+".\n")
                            c.EscribirTexto("\n")

                            #Listado de productos 
                            #Productos vendidos en ese credito

                            consultaVenta = Ventas.objects.filter(id_venta = idVentaCredito)
                            for datoVenta in consultaVenta:
                                codigosProductosVenta = datoVenta.ids_productos
                                cantidadesProductosVenta = datoVenta.cantidades_productos
                                idsServiciosCorporales = datoVenta.ids_servicios_corporales
                                cantidadServiciosCorporales = datoVenta.cantidades_servicios_corporales
                                idsServiciosFaciales = datoVenta.ids_servicios_faciales
                                cantidadServiciosFaciales = datoVenta.cantidades_servicios_faciales
                                descuento = datoVenta.descuento
                                costoTotalAPagar = datoVenta.monto_pagar
                                cliente = datoVenta.cliente_id

                            if cliente == None:
                                nombreClienteTicket = "Momentaneo"
                                idCienteTicket="Sin id"
                            else:
                                consultaCliente = Clientes.objects.filter(id_cliente = cliente)
                                for datoCliente in consultaCliente:
                                    idCienteTicket = datoCliente.id_cliente
                                    nombreCliente = datoCliente.nombre_cliente
                                    apellidoCliente = datoCliente.apellidoPaterno_cliente
                                nombreClienteTicket = nombreCliente + " "+apellidoCliente
                                
                                

                            listaCodigosProductos = codigosProductosVenta.split(",")
                            listaCantidadesProductos = cantidadesProductosVenta.split(",")
                            listaIdsServiciosCorporales = idsServiciosCorporales.split(",")
                            listaCantidadesServiciosCorporales = cantidadServiciosCorporales.split(",")
                            listaIdsServiciosFaciales = idsServiciosFaciales.split(",")
                            listaCantidadesServiciosFaciales = cantidadServiciosFaciales.split(",")
                            
                            longitudProductos = len(listaCodigosProductos)
                            longitudServiciosCorporales = len(listaIdsServiciosCorporales)
                            longitudServiciosFaciales = len(listaIdsServiciosFaciales)


                            listaProductos = zip(listaCodigosProductos,listaCantidadesProductos)
                            listaServiciosCorporales = zip(listaIdsServiciosCorporales, listaCantidadesServiciosCorporales)
                            listaServiciosFaciales = zip(listaIdsServiciosFaciales, listaCantidadesServiciosFaciales)

                            if longitudProductos >= 1:
                                for codigo, cantidad in listaProductos:
                                    if codigo != "":
                                        strCodigo = str(codigo)
                                        strCantidad = str(cantidad)
                                        consultaProductoVenta = ProductosVenta.objects.filter(codigo_producto = strCodigo)
                                        for datoProductoVenta in consultaProductoVenta:
                                            nombreProducto = datoProductoVenta.nombre_producto
                                            costoIndividualProducto = datoProductoVenta.costo_venta

                                        floatCantidad = float(cantidad)
                                        costototalProducto = costoIndividualProducto * floatCantidad
                                        costototalProductoDosDecimales = round(costototalProducto, 2)
                                        costototalProductoDosDecimales = str(costototalProductoDosDecimales)

                                        costoTotalProductoDivididoEnElPunto = costototalProductoDosDecimales.split(".")
                                        longitudCostoTotal = len(str(costoTotalProductoDivididoEnElPunto[0]))
                                        longitudCostoTotal = int(longitudCostoTotal)

                                        
                                        caracteresProducto = len(nombreProducto)

                                        if longitudCostoTotal == 2:
                                            espacio = 38
                                        if longitudCostoTotal == 2:
                                            espacio = 37
                                        elif longitudCostoTotal == 3:
                                            espacio = 36
                                        elif longitudCostoTotal == 4:
                                            espacio = 35
                                        elif longitudCostoTotal == 5:
                                            espacio = 34
                                        elif longitudCostoTotal == 6:
                                            espacio = 33
                                        numeroEspacios = espacio - int(caracteresProducto)
                                        
                                        espaciosTicket = ""
                                        for x in range(numeroEspacios):
                                            espacioMini = " "
                                            espaciosTicket = espaciosTicket + espacioMini
                                        c.EscribirTexto(strCantidad+" x "+nombreProducto+espaciosTicket+str(costototalProductoDosDecimales)+"\n")
                            
                            if longitudServiciosCorporales >=1:
                                for idd, cantidad in listaServiciosCorporales:
                                    if idd != "":
                                        idServicio = int(idd)
                                        strCantidad = str(cantidad)
                                        consultaServicio = Servicios.objects.filter(id_servicio = idServicio)
                                        for datoServicio in consultaServicio:
                                            nombreServicio = datoServicio.nombre_servicio
                                            costoServicio = datoServicio.precio_venta

                                        floatCantidad = float(cantidad)
                                        costototalProducto = costoServicio * floatCantidad
                                        costototalProductoDosDecimales = round(costototalProducto, 2)
                                        costototalProductoDosDecimales = str(costototalProductoDosDecimales)

                                        costoTotalProductoDivididoEnElPunto = costototalProductoDosDecimales.split(".")
                                        longitudCostoTotal = len(str(costoTotalProductoDivididoEnElPunto[0]))
                                        longitudCostoTotal = int(longitudCostoTotal)

                                        
                                        caracteresProducto = len(nombreServicio)

                                        if longitudCostoTotal == 2:
                                            espacio = 38
                                        if longitudCostoTotal == 2:
                                            espacio = 37
                                        elif longitudCostoTotal == 3:
                                            espacio = 36
                                        elif longitudCostoTotal == 4:
                                            espacio = 35
                                        elif longitudCostoTotal == 5:
                                            espacio = 34
                                        elif longitudCostoTotal == 6:
                                            espacio = 33
                                        numeroEspacios = espacio - int(caracteresProducto)
                                        
                                        espaciosTicket = ""
                                        for x in range(numeroEspacios):
                                            espacioMini = " "
                                            espaciosTicket = espaciosTicket + espacioMini
                                        c.EscribirTexto(strCantidad+" x "+nombreServicio+espaciosTicket+str(costototalProductoDosDecimales)+"\n")

                            if longitudServiciosFaciales >=1:
                                for idd, cantidad in listaServiciosFaciales:
                                    if idd != "":
                                        idServicio = int(idd)
                                        strCantidad = str(cantidad)
                                        consultaServicio = Servicios.objects.filter(id_servicio = idServicio)
                                        for datoServicio in consultaServicio:
                                            nombreServicio = datoServicio.nombre_servicio
                                            costoServicio = datoServicio.precio_venta

                                        floatCantidad = float(cantidad)
                                        costototalProducto = costoServicio * floatCantidad
                                        costototalProductoDosDecimales = round(costototalProducto, 2)
                                        costototalProductoDosDecimales = str(costototalProductoDosDecimales)

                                        costoTotalProductoDivididoEnElPunto = costototalProductoDosDecimales.split(".")
                                        longitudCostoTotal = len(str(costoTotalProductoDivididoEnElPunto[0]))
                                        longitudCostoTotal = int(longitudCostoTotal)

                                        
                                        caracteresProducto = len(nombreServicio)

                                        if longitudCostoTotal == 2:
                                            espacio = 38
                                        if longitudCostoTotal == 2:
                                            espacio = 37
                                        elif longitudCostoTotal == 3:
                                            espacio = 36
                                        elif longitudCostoTotal == 4:
                                            espacio = 35
                                        elif longitudCostoTotal == 5:
                                            espacio = 34
                                        elif longitudCostoTotal == 6:
                                            espacio = 33
                                        numeroEspacios = espacio - int(caracteresProducto)
                                        
                                        espaciosTicket = ""
                                        for x in range(numeroEspacios):
                                            espacioMini = " "
                                            espaciosTicket = espaciosTicket + espacioMini
                                        c.EscribirTexto(strCantidad+" x "+nombreServicio+espaciosTicket+str(costototalProductoDosDecimales)+"\n")
                            
                            

                            c.EscribirTexto("\n")
                            c.EscribirTexto("\n")

                            if descuento == None:
                                c.EstablecerTamañoFuente(2, 2)
                                c.EstablecerAlineacion(Conector.ALINEACION_DERECHA)
                                c.EscribirTexto("TOTAL:  $"+str(costoTotalAPagar)+"\n")
                                costoTotalPagarCredito = costoTotalAPagar
                                c.EscribirTexto("ABONADO: $"+str(cantidadPago1)+"\n")
                                c.EscribirTexto("RESTANTE: $"+str(restante)+"\n")
                            else:
                                intDescuento = int(descuento)
                                consultaDescuentos = Descuentos.objects.filter(porcentaje = intDescuento)
                                for datoDescuento in consultaDescuentos:
                                    nombreDescuento = datoDescuento.nombre_descuento
                                    porcentajeDescuento = datoDescuento.porcentaje

                                porcentajePagado = 100 - porcentajeDescuento #85
                                totalSinDescuento1 = 100 * costoTotalAPagar
                                totalSinDescuento2 = totalSinDescuento1/porcentajePagado
                                totalSinDescuento2 = round(totalSinDescuento2)

                                primerMulti = porcentajeDescuento * float(totalSinDescuento2)
                                primerDivision = primerMulti/100
                                resultadoDescuento = round(primerDivision)
                                
                                costoTotalAPagarConDescuento = totalSinDescuento2 - resultadoDescuento

                                c.EstablecerTamañoFuente(1, 1)
                                c.EstablecerAlineacion(Conector.ALINEACION_DERECHA)
                                c.EscribirTexto("Subtotal:  $"+str(totalSinDescuento2)+"\n")
                                c.EscribirTexto("Descuento:  $"+str(resultadoDescuento)+"\n")
                                c.EstablecerTamañoFuente(2, 2)
                                c.EscribirTexto("TOTAL:  $"+str(costoTotalAPagarConDescuento)+"\n")
                                c.EstablecerTamañoFuente(1, 1)
                                c.EscribirTexto("Descuento aplicado: -"+str(porcentajeDescuento)+"%- "+str(nombreDescuento)+"\n")
                                c.EscribirTexto("ABONADO: $"+str(cantidadPago1)+"\n")
                                c.EscribirTexto("RESTANTE: $"+str(restante)+"\n")
                                costoTotalPagarCredito = costoTotalAPagarConDescuento

                            c.EscribirTexto("\n")
                            c.EstablecerEnfatizado(True)
                            c.EstablecerTamañoFuente(1, 1)
                            c.EscribirTexto("========== IVA incluido en el precio ==========\n")
                            c.EscribirTexto("\n")
                            c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                            c.TextoSegunPaginaDeCodigos(2, "cp850", "INFORMACION DE PAGO.\n")
                            c.EstablecerEnfatizado(False)
                            c.EscribirTexto("\n")
                            c.EstablecerEnfatizado(True)
                            c.EscribirTexto("Pago en efectivo.\n")
                            c.EscribirTexto("Pago a crédito 4 quincenas.\n")
                            c.EscribirTexto("Primer pago recibido.\n")
                            c.EstablecerEnfatizado(False)
                            if restante == 0:
                                c.EscribirTexto("PAGO LIQUIDADO\n")
                            else:
                                restantePorPagar = float(restante)/3
                                restantePorPagar = round(restantePorPagar,2)
                                c.EscribirTexto("Abonos restantes de: $"+str(restantePorPagar)+" MXN.\n")
                                ahora = datetime.now()
                                fechaSegundoPago = ahora + timedelta(days=15)
                                fechaSegundoPago = fechaSegundoPago.strftime('%Y-%m-%d')
                                c.EscribirTexto("Segundo pago el día: "+str(fechaSegundoPago)+".\n")
                            
                        
                            c.EscribirTexto("\n")
                            c.EstablecerEnfatizado(True)
                            c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                            c.TextoSegunPaginaDeCodigos(2, "cp850", "INFORMACIÓN DE CLIENTE.\n")

                            if nombreClienteTicket == "Momentaneo":
                                c.EstablecerEnfatizado(False)
                                c.EscribirTexto("Cliente momentaneo.\n")
                            else:
                                c.EstablecerEnfatizado(False)
                                c.EscribirTexto("ID:"+str(idCienteTicket)+" - "+nombreClienteTicket+".\n")
                            c.EscribirTexto("=========== Gracias por su compra!! ===========\n")
                            c.EstablecerTamañoFuente(2, 2)
                            c.EstablecerEnfatizado(True)
                            c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                            if contadorTickets == 1:
                                c.EscribirTexto("\n")
                                c.EscribirTexto("COPIA TIENDA.\n")
                                c.EscribirTexto("\n")
                                c.EstablecerTamañoFuente(1, 1)
                                c.EscribirTexto("________________________________________________\n")
                                c.EscribirTexto("Firma de cliente.\n")
                            else:
                                c.EscribirTexto("\n")
                                c.EscribirTexto("COPIA CLIENTE.\n")
                            c.EscribirTexto("\n")
                            c.EstablecerTamañoFuente(1, 1)
                            

                            c.Feed(1)
                            c.Corte(1)
                            #c.abrirCajon()
                            c.Pulso(48, 60, 120)
                            print("Imprimiendo...")
                            # Recuerda cambiar por el nombre de tu impresora
                            respuesta = c.imprimirEn("POS80 Printer")
                            if respuesta == True:
                                print("Impresión correcta")
                            else:
                                print(f"Error. El mensaje es: {respuesta}")

                

            if esConTarjeta:
                    
                        
                registrarPago1 = PagosCreditos.objects.filter(id_historialCredito = idPagoCredito).update(fecha_pago1 = fechaPago1,tipo_pago1 ="Tarjeta",tipo_tarjeta1=tipo_tarjeta,referencia_pago_tarjeta1=referencia_tarjeta,monto_pago1 =cantidadPago1) 
                
                if registrarPago1:
                    
                    
                    actualizarEstadoCredito = Creditos.objects.filter(id_credito = idCreditoAPagar).update(monto_pagado = cantidadPago1,monto_restante =restante,estatus =estado) 

                    #IMPRESION DE TICKEEETSSSS

                    #Fecha
                    hoy = datetime.now()
                    hoyFormato = hoy.strftime('%Y/%m/%d')

                    #Consulta de venta
                    consultaVenta = Ventas.objects.filter(id_venta = idVentaCredito)
                    for datoVenta in consultaVenta:
                        empleadoVendedor = datoVenta.empleado_vendedor_id
                        sucursal = datoVenta.sucursal_id
                        cliente = datoVenta.cliente_id
                    #Empleado vendedor
                    consultaEmpleadoVendedor = Empleados.objects.filter(id_empleado = empleadoVendedor)
                    for datoVendedor in consultaEmpleadoVendedor:
                        nombreEmpleado = datoVendedor.nombres
                        apellidoPatEmpleado = datoVendedor.apellido_paterno

                    nombreCompletoEmpleadoVendedor = nombreEmpleado + " "+ apellidoPatEmpleado

                    #Datos sucurssal
                    consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursal)
                    for datoSucursal in consultaSucursal:
                        nombreSucursal = datoSucursal.nombre
                        telefonoSucursal = datoSucursal.telefono
                        direccionSucursal = datoSucursal.direccion

                    
                    
                    
                    #Hora bien
                    horaVenta = horaVenta.strftime("%H:%M:%S")

                    # Esto es para obtener las impresoras. No es obligatorio hacerlo siempre que se quiera imprimir
                    impresoras = Conector.ConectorV3.obtenerImpresoras()
                    print(f"Las impresoras son: {impresoras}")
                    
                    contadorTickets = 0
                    for x in range(2):
                        contadorTickets = contadorTickets + 1

                        
                        c = Conector.ConectorV3()
                        c.Iniciar()
                        c.Corte(1)
                        
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        # Recuerda que la imagen debe existir y debe ser legible para el plugin. Si no, comenta las líneas
                        c.CargarImagenLocalEImprimir("C:\\COSTABELLA\\sistemaCostabella\\static\\images\\anegragrande.png", 0, 216)
                        c.EscribirTexto("\n")
                        c.EstablecerTamañoFuente(1, 1)
                        c.EstablecerEnfatizado(True)
                        c.EscribirTexto("Sucursal: "+nombreSucursal+"\n")
                        c.EstablecerEnfatizado(False)
                        c.EscribirTexto("TEL: "+telefonoSucursal+"\n")
                        c.TextoSegunPaginaDeCodigos(2, "cp850", direccionSucursal+"\n")

                        c.EstablecerEnfatizado(True)
                        c.EscribirTexto("================================================\n")
                        c.EstablecerTamañoFuente(2, 2)
                        c.EscribirTexto("PAGO DE VENTA #"+str(idVentaCredito)+"\n")
                        c.EscribirTexto("CRÉDITO #"+str(idCreditoAPagar)+"\n")
                        c.EstablecerEnfatizado(False)
                        c.EstablecerAlineacion(Conector.ALINEACION_IZQUIERDA)
                        c.EstablecerTamañoFuente(1, 1)
                        c.EscribirTexto("\n")
                        c.EscribirTexto(" "+str(hoyFormato)+" - "+str(horaVenta)+" hrs.\n")
                        c.EscribirTexto("Atendida por: "+nombreCompletoEmpleadoVendedor+".\n")
                        c.EscribirTexto("\n")

                        #Listado de productos 
                        #Productos vendidos en ese credito

                        consultaVenta = Ventas.objects.filter(id_venta = idVentaCredito)
                        for datoVenta in consultaVenta:
                            codigosProductosVenta = datoVenta.ids_productos
                            cantidadesProductosVenta = datoVenta.cantidades_productos
                            idsServiciosCorporales = datoVenta.ids_servicios_corporales
                            cantidadServiciosCorporales = datoVenta.cantidades_servicios_corporales
                            idsServiciosFaciales = datoVenta.ids_servicios_faciales
                            cantidadServiciosFaciales = datoVenta.cantidades_servicios_faciales
                            descuento = datoVenta.descuento
                            costoTotalAPagar = datoVenta.monto_pagar
                            cliente = datoVenta.cliente_id

                        if cliente == None:
                            nombreClienteTicket = "Momentaneo"
                            idCienteTicket="Sin id"
                        else:
                            consultaCliente = Clientes.objects.filter(id_cliente = cliente)
                            for datoCliente in consultaCliente:
                                idCienteTicket = datoCliente.id_cliente
                                nombreCliente = datoCliente.nombre_cliente
                                apellidoCliente = datoCliente.apellidoPaterno_cliente
                            nombreClienteTicket = nombreCliente + " "+apellidoCliente
                            
                            

                        listaCodigosProductos = codigosProductosVenta.split(",")
                        listaCantidadesProductos = cantidadesProductosVenta.split(",")
                        listaIdsServiciosCorporales = idsServiciosCorporales.split(",")
                        listaCantidadesServiciosCorporales = cantidadServiciosCorporales.split(",")
                        listaIdsServiciosFaciales = idsServiciosFaciales.split(",")
                        listaCantidadesServiciosFaciales = cantidadServiciosFaciales.split(",")
                        
                        longitudProductos = len(listaCodigosProductos)
                        longitudServiciosCorporales = len(listaIdsServiciosCorporales)
                        longitudServiciosFaciales = len(listaIdsServiciosFaciales)


                        listaProductos = zip(listaCodigosProductos,listaCantidadesProductos)
                        listaServiciosCorporales = zip(listaIdsServiciosCorporales, listaCantidadesServiciosCorporales)
                        listaServiciosFaciales = zip(listaIdsServiciosFaciales, listaCantidadesServiciosFaciales)

                        if longitudProductos >= 1:
                            for codigo, cantidad in listaProductos:
                                if codigo != "":
                                    strCodigo = str(codigo)
                                    strCantidad = str(cantidad)
                                    consultaProductoVenta = ProductosVenta.objects.filter(codigo_producto = strCodigo)
                                    for datoProductoVenta in consultaProductoVenta:
                                        nombreProducto = datoProductoVenta.nombre_producto
                                        costoIndividualProducto = datoProductoVenta.costo_venta

                                    floatCantidad = float(cantidad)
                                    costototalProducto = costoIndividualProducto * floatCantidad
                                    costototalProductoDosDecimales = round(costototalProducto, 2)
                                    costototalProductoDosDecimales = str(costototalProductoDosDecimales)

                                    costoTotalProductoDivididoEnElPunto = costototalProductoDosDecimales.split(".")
                                    longitudCostoTotal = len(str(costoTotalProductoDivididoEnElPunto[0]))
                                    longitudCostoTotal = int(longitudCostoTotal)

                                    
                                    caracteresProducto = len(nombreProducto)

                                    if longitudCostoTotal == 2:
                                        espacio = 38
                                    if longitudCostoTotal == 2:
                                        espacio = 37
                                    elif longitudCostoTotal == 3:
                                        espacio = 36
                                    elif longitudCostoTotal == 4:
                                        espacio = 35
                                    elif longitudCostoTotal == 5:
                                        espacio = 34
                                    elif longitudCostoTotal == 6:
                                        espacio = 33
                                    numeroEspacios = espacio - int(caracteresProducto)
                                    
                                    espaciosTicket = ""
                                    for x in range(numeroEspacios):
                                        espacioMini = " "
                                        espaciosTicket = espaciosTicket + espacioMini
                                    c.EscribirTexto(strCantidad+" x "+nombreProducto+espaciosTicket+str(costototalProductoDosDecimales)+"\n")
                        
                        if longitudServiciosCorporales >=1:
                            for idd, cantidad in listaServiciosCorporales:
                                if idd != "":
                                    idServicio = int(idd)
                                    strCantidad = str(cantidad)
                                    consultaServicio = Servicios.objects.filter(id_servicio = idServicio)
                                    for datoServicio in consultaServicio:
                                        nombreServicio = datoServicio.nombre_servicio
                                        costoServicio = datoServicio.precio_venta

                                    floatCantidad = float(cantidad)
                                    costototalProducto = costoServicio * floatCantidad
                                    costototalProductoDosDecimales = round(costototalProducto, 2)
                                    costototalProductoDosDecimales = str(costototalProductoDosDecimales)

                                    costoTotalProductoDivididoEnElPunto = costototalProductoDosDecimales.split(".")
                                    longitudCostoTotal = len(str(costoTotalProductoDivididoEnElPunto[0]))
                                    longitudCostoTotal = int(longitudCostoTotal)

                                    
                                    caracteresProducto = len(nombreServicio)

                                    if longitudCostoTotal == 2:
                                        espacio = 38
                                    if longitudCostoTotal == 2:
                                        espacio = 37
                                    elif longitudCostoTotal == 3:
                                        espacio = 36
                                    elif longitudCostoTotal == 4:
                                        espacio = 35
                                    elif longitudCostoTotal == 5:
                                        espacio = 34
                                    elif longitudCostoTotal == 6:
                                        espacio = 33
                                    numeroEspacios = espacio - int(caracteresProducto)
                                    
                                    espaciosTicket = ""
                                    for x in range(numeroEspacios):
                                        espacioMini = " "
                                        espaciosTicket = espaciosTicket + espacioMini
                                    c.EscribirTexto(strCantidad+" x "+nombreServicio+espaciosTicket+str(costototalProductoDosDecimales)+"\n")

                        if longitudServiciosFaciales >=1:
                            for idd, cantidad in listaServiciosFaciales:
                                if idd != "":
                                    idServicio = int(idd)
                                    strCantidad = str(cantidad)
                                    consultaServicio = Servicios.objects.filter(id_servicio = idServicio)
                                    for datoServicio in consultaServicio:
                                        nombreServicio = datoServicio.nombre_servicio
                                        costoServicio = datoServicio.precio_venta

                                    floatCantidad = float(cantidad)
                                    costototalProducto = costoServicio * floatCantidad
                                    costototalProductoDosDecimales = round(costototalProducto, 2)
                                    costototalProductoDosDecimales = str(costototalProductoDosDecimales)

                                    costoTotalProductoDivididoEnElPunto = costototalProductoDosDecimales.split(".")
                                    longitudCostoTotal = len(str(costoTotalProductoDivididoEnElPunto[0]))
                                    longitudCostoTotal = int(longitudCostoTotal)

                                    
                                    caracteresProducto = len(nombreServicio)

                                    if longitudCostoTotal == 2:
                                        espacio = 38
                                    if longitudCostoTotal == 2:
                                        espacio = 37
                                    elif longitudCostoTotal == 3:
                                        espacio = 36
                                    elif longitudCostoTotal == 4:
                                        espacio = 35
                                    elif longitudCostoTotal == 5:
                                        espacio = 34
                                    elif longitudCostoTotal == 6:
                                        espacio = 33
                                    numeroEspacios = espacio - int(caracteresProducto)
                                    
                                    espaciosTicket = ""
                                    for x in range(numeroEspacios):
                                        espacioMini = " "
                                        espaciosTicket = espaciosTicket + espacioMini
                                    c.EscribirTexto(strCantidad+" x "+nombreServicio+espaciosTicket+str(costototalProductoDosDecimales)+"\n")
                        
                        

                        c.EscribirTexto("\n")
                        c.EscribirTexto("\n")

                        if descuento == None:
                            c.EstablecerTamañoFuente(2, 2)
                            c.EstablecerAlineacion(Conector.ALINEACION_DERECHA)
                            c.EscribirTexto("TOTAL:  $"+str(costoTotalAPagar)+"\n")
                            costoTotalPagarCredito = costoTotalAPagar
                            c.EscribirTexto("ABONADO: $"+str(cantidadPago1)+"\n")
                            c.EscribirTexto("RESTANTE: $"+str(restante)+"\n")
                        else:
                            intDescuento = int(descuento)
                            consultaDescuentos = Descuentos.objects.filter(porcentaje = intDescuento)
                            for datoDescuento in consultaDescuentos:
                                nombreDescuento = datoDescuento.nombre_descuento
                                porcentajeDescuento = datoDescuento.porcentaje

                            porcentajePagado = 100 - porcentajeDescuento #85
                            totalSinDescuento1 = 100 * costoTotalAPagar
                            totalSinDescuento2 = totalSinDescuento1/porcentajePagado
                            totalSinDescuento2 = round(totalSinDescuento2)

                            primerMulti = porcentajeDescuento * float(totalSinDescuento2)
                            primerDivision = primerMulti/100
                            resultadoDescuento = round(primerDivision)
                            
                            costoTotalAPagarConDescuento = totalSinDescuento2 - resultadoDescuento

                            c.EstablecerTamañoFuente(1, 1)
                            c.EstablecerAlineacion(Conector.ALINEACION_DERECHA)
                            c.EscribirTexto("Subtotal:  $"+str(totalSinDescuento2)+"\n")
                            c.EscribirTexto("Descuento:  $"+str(resultadoDescuento)+"\n")
                            c.EstablecerTamañoFuente(2, 2)
                            c.EscribirTexto("TOTAL:  $"+str(costoTotalAPagarConDescuento)+"\n")
                            c.EstablecerTamañoFuente(1, 1)
                            c.EscribirTexto("Descuento aplicado: -"+str(porcentajeDescuento)+"%- "+str(nombreDescuento)+"\n")
                            c.EscribirTexto("ABONADO: $"+str(cantidadPago1)+"\n")
                            c.EscribirTexto("RESTANTE: $"+str(restante)+"\n")
                            costoTotalPagarCredito = costoTotalAPagarConDescuento

                        c.EscribirTexto("\n")
                        c.EstablecerEnfatizado(True)
                        c.EstablecerTamañoFuente(1, 1)
                        c.EscribirTexto("========== IVA incluido en el precio ==========\n")
                        c.EscribirTexto("\n")
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        c.TextoSegunPaginaDeCodigos(2, "cp850", "INFORMACION DE PAGO.\n")
                        c.EstablecerEnfatizado(False)
                        c.EscribirTexto("\n")
                        c.EstablecerEnfatizado(True)
                        c.EscribirTexto("Pago en con tarjeta.\n")
                        c.EstablecerEnfatizado(False)
                        c.EscribirTexto("Pago con "+str(tipo_tarjeta)+".\n")
                        c.EscribirTexto("Referencia: "+referencia_tarjeta+".\n")
                        c.EscribirTexto("\n")
                        c.EscribirTexto("Pago a crédito 4 quincenas.\n")
                        c.EscribirTexto("Primer pago recibido.\n")
                        c.EstablecerEnfatizado(False)
                        if restante == 0:
                            c.EscribirTexto("PAGO LIQUIDADO\n")
                        else:
                            restantePorPagar = float(restante)/3
                            restantePorPagar = round(restantePorPagar,2)
                            c.EscribirTexto("Abonos restantes de: $"+str(restantePorPagar)+" MXN.\n")
                            ahora = datetime.now()
                            fechaSegundoPago = ahora + timedelta(days=15)
                            fechaSegundoPago = fechaSegundoPago.strftime('%Y-%m-%d')
                            c.EscribirTexto("Segundo pago el día: "+str(fechaSegundoPago)+".\n")
                        
                    
                        c.EscribirTexto("\n")
                        c.EstablecerEnfatizado(True)
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        c.TextoSegunPaginaDeCodigos(2, "cp850", "INFORMACIÓN DE CLIENTE.\n")

                        if nombreClienteTicket == "Momentaneo":
                            c.EstablecerEnfatizado(False)
                            c.EscribirTexto("Cliente momentaneo.\n")
                        else:
                            c.EstablecerEnfatizado(False)
                            c.EscribirTexto("ID:"+str(idCienteTicket)+" - "+nombreClienteTicket+".\n")
                        c.EscribirTexto("=========== Gracias por su compra!! ===========\n")
                        c.EstablecerTamañoFuente(2, 2)
                        c.EstablecerEnfatizado(True)
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        if contadorTickets == 1:
                            c.EscribirTexto("\n")
                            c.EscribirTexto("COPIA TIENDA.\n")
                            c.EscribirTexto("\n")
                            c.EstablecerTamañoFuente(1, 1)
                            c.EscribirTexto("________________________________________________\n")
                            c.EscribirTexto("Firma de cliente.\n")
                        else:
                            c.EscribirTexto("\n")
                            c.EscribirTexto("COPIA CLIENTE.\n")
                        c.EscribirTexto("\n")
                        c.EstablecerTamañoFuente(1, 1)
                        

                        c.Feed(1)
                        c.Corte(1)
                        #c.abrirCajon()
                        c.Pulso(48, 60, 120)
                        print("Imprimiendo...")
                        # Recuerda cambiar por el nombre de tu impresora
                        respuesta = c.imprimirEn("POS80 Printer")
                        if respuesta == True:
                            print("Impresión correcta")
                        else:
                            print(f"Error. El mensaje es: {respuesta}")
                    

            if esConTransferencia:
            
                registrarPago1 = PagosCreditos.objects.filter(id_historialCredito = idPagoCredito).update(fecha_pago1 = fechaPago1,tipo_pago1 ="Transferencia",clave_rastreo_pago_transferencia1=clave_transferencia,monto_pago1 =cantidadPago1) 
                
                if registrarPago1:
                    
                    
                    actualizarEstadoCredito = Creditos.objects.filter(id_credito = idCreditoAPagar).update(monto_pagado = cantidadPago1,monto_restante =restante,estatus =estado) 
                    
                    #IMPRESION DE TICKEEETSSSS

                    #Fecha
                    hoy = datetime.now()
                    hoyFormato = hoy.strftime('%Y/%m/%d')

                    #Consulta de venta
                    consultaVenta = Ventas.objects.filter(id_venta = idVentaCredito)
                    for datoVenta in consultaVenta:
                        empleadoVendedor = datoVenta.empleado_vendedor_id
                        sucursal = datoVenta.sucursal_id
                        cliente = datoVenta.cliente_id
                    #Empleado vendedor
                    consultaEmpleadoVendedor = Empleados.objects.filter(id_empleado = empleadoVendedor)
                    for datoVendedor in consultaEmpleadoVendedor:
                        nombreEmpleado = datoVendedor.nombres
                        apellidoPatEmpleado = datoVendedor.apellido_paterno

                    nombreCompletoEmpleadoVendedor = nombreEmpleado + " "+ apellidoPatEmpleado

                    #Datos sucurssal
                    consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursal)
                    for datoSucursal in consultaSucursal:
                        nombreSucursal = datoSucursal.nombre
                        telefonoSucursal = datoSucursal.telefono
                        direccionSucursal = datoSucursal.direccion

                    
                    
                    
                    #Hora bien
                    horaVenta = horaVenta.strftime("%H:%M:%S")

                    # Esto es para obtener las impresoras. No es obligatorio hacerlo siempre que se quiera imprimir
                    impresoras = Conector.ConectorV3.obtenerImpresoras()
                    print(f"Las impresoras son: {impresoras}")
                    
                    contadorTickets = 0
                    for x in range(2):
                        contadorTickets = contadorTickets + 1

                        
                        c = Conector.ConectorV3()
                        c.Iniciar()
                        c.Corte(1)
                        
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        # Recuerda que la imagen debe existir y debe ser legible para el plugin. Si no, comenta las líneas
                        c.CargarImagenLocalEImprimir("C:\\COSTABELLA\\sistemaCostabella\\static\\images\\anegragrande.png", 0, 216)
                        c.EscribirTexto("\n")
                        c.EstablecerTamañoFuente(1, 1)
                        c.EstablecerEnfatizado(True)
                        c.EscribirTexto("Sucursal: "+nombreSucursal+"\n")
                        c.EstablecerEnfatizado(False)
                        c.EscribirTexto("TEL: "+telefonoSucursal+"\n")
                        c.TextoSegunPaginaDeCodigos(2, "cp850", direccionSucursal+"\n")

                        c.EstablecerEnfatizado(True)
                        c.EscribirTexto("================================================\n")
                        c.EstablecerTamañoFuente(2, 2)
                        c.EscribirTexto("PAGO DE VENTA #"+str(idVentaCredito)+"\n")
                        c.EscribirTexto("CRÉDITO #"+str(idCreditoAPagar)+"\n")
                        c.EstablecerEnfatizado(False)
                        c.EstablecerAlineacion(Conector.ALINEACION_IZQUIERDA)
                        c.EstablecerTamañoFuente(1, 1)
                        c.EscribirTexto("\n")
                        c.EscribirTexto(" "+str(hoyFormato)+" - "+str(horaVenta)+" hrs.\n")
                        c.EscribirTexto("Atendida por: "+nombreCompletoEmpleadoVendedor+".\n")
                        c.EscribirTexto("\n")

                        #Listado de productos 
                        #Productos vendidos en ese credito

                        consultaVenta = Ventas.objects.filter(id_venta = idVentaCredito)
                        for datoVenta in consultaVenta:
                            codigosProductosVenta = datoVenta.ids_productos
                            cantidadesProductosVenta = datoVenta.cantidades_productos
                            idsServiciosCorporales = datoVenta.ids_servicios_corporales
                            cantidadServiciosCorporales = datoVenta.cantidades_servicios_corporales
                            idsServiciosFaciales = datoVenta.ids_servicios_faciales
                            cantidadServiciosFaciales = datoVenta.cantidades_servicios_faciales
                            descuento = datoVenta.descuento
                            costoTotalAPagar = datoVenta.monto_pagar
                            cliente = datoVenta.cliente_id

                        if cliente == None:
                            nombreClienteTicket = "Momentaneo"
                            idCienteTicket="Sin id"
                        else:
                            consultaCliente = Clientes.objects.filter(id_cliente = cliente)
                            for datoCliente in consultaCliente:
                                idCienteTicket = datoCliente.id_cliente
                                nombreCliente = datoCliente.nombre_cliente
                                apellidoCliente = datoCliente.apellidoPaterno_cliente
                            nombreClienteTicket = nombreCliente + " "+apellidoCliente
                            
                            

                        listaCodigosProductos = codigosProductosVenta.split(",")
                        listaCantidadesProductos = cantidadesProductosVenta.split(",")
                        listaIdsServiciosCorporales = idsServiciosCorporales.split(",")
                        listaCantidadesServiciosCorporales = cantidadServiciosCorporales.split(",")
                        listaIdsServiciosFaciales = idsServiciosFaciales.split(",")
                        listaCantidadesServiciosFaciales = cantidadServiciosFaciales.split(",")
                        
                        longitudProductos = len(listaCodigosProductos)
                        longitudServiciosCorporales = len(listaIdsServiciosCorporales)
                        longitudServiciosFaciales = len(listaIdsServiciosFaciales)


                        listaProductos = zip(listaCodigosProductos,listaCantidadesProductos)
                        listaServiciosCorporales = zip(listaIdsServiciosCorporales, listaCantidadesServiciosCorporales)
                        listaServiciosFaciales = zip(listaIdsServiciosFaciales, listaCantidadesServiciosFaciales)

                        if longitudProductos >= 1:
                            for codigo, cantidad in listaProductos:
                                if codigo != "":
                                    strCodigo = str(codigo)
                                    strCantidad = str(cantidad)
                                    consultaProductoVenta = ProductosVenta.objects.filter(codigo_producto = strCodigo)
                                    for datoProductoVenta in consultaProductoVenta:
                                        nombreProducto = datoProductoVenta.nombre_producto
                                        costoIndividualProducto = datoProductoVenta.costo_venta

                                    floatCantidad = float(cantidad)
                                    costototalProducto = costoIndividualProducto * floatCantidad
                                    costototalProductoDosDecimales = round(costototalProducto, 2)
                                    costototalProductoDosDecimales = str(costototalProductoDosDecimales)

                                    costoTotalProductoDivididoEnElPunto = costototalProductoDosDecimales.split(".")
                                    longitudCostoTotal = len(str(costoTotalProductoDivididoEnElPunto[0]))
                                    longitudCostoTotal = int(longitudCostoTotal)

                                    
                                    caracteresProducto = len(nombreProducto)

                                    if longitudCostoTotal == 2:
                                        espacio = 38
                                    if longitudCostoTotal == 2:
                                        espacio = 37
                                    elif longitudCostoTotal == 3:
                                        espacio = 36
                                    elif longitudCostoTotal == 4:
                                        espacio = 35
                                    elif longitudCostoTotal == 5:
                                        espacio = 34
                                    elif longitudCostoTotal == 6:
                                        espacio = 33
                                    numeroEspacios = espacio - int(caracteresProducto)
                                    
                                    espaciosTicket = ""
                                    for x in range(numeroEspacios):
                                        espacioMini = " "
                                        espaciosTicket = espaciosTicket + espacioMini
                                    c.EscribirTexto(strCantidad+" x "+nombreProducto+espaciosTicket+str(costototalProductoDosDecimales)+"\n")
                        
                        if longitudServiciosCorporales >=1:
                            for idd, cantidad in listaServiciosCorporales:
                                if idd != "":
                                    idServicio = int(idd)
                                    strCantidad = str(cantidad)
                                    consultaServicio = Servicios.objects.filter(id_servicio = idServicio)
                                    for datoServicio in consultaServicio:
                                        nombreServicio = datoServicio.nombre_servicio
                                        costoServicio = datoServicio.precio_venta

                                    floatCantidad = float(cantidad)
                                    costototalProducto = costoServicio * floatCantidad
                                    costototalProductoDosDecimales = round(costototalProducto, 2)
                                    costototalProductoDosDecimales = str(costototalProductoDosDecimales)

                                    costoTotalProductoDivididoEnElPunto = costototalProductoDosDecimales.split(".")
                                    longitudCostoTotal = len(str(costoTotalProductoDivididoEnElPunto[0]))
                                    longitudCostoTotal = int(longitudCostoTotal)

                                    
                                    caracteresProducto = len(nombreServicio)

                                    if longitudCostoTotal == 2:
                                        espacio = 38
                                    if longitudCostoTotal == 2:
                                        espacio = 37
                                    elif longitudCostoTotal == 3:
                                        espacio = 36
                                    elif longitudCostoTotal == 4:
                                        espacio = 35
                                    elif longitudCostoTotal == 5:
                                        espacio = 34
                                    elif longitudCostoTotal == 6:
                                        espacio = 33
                                    numeroEspacios = espacio - int(caracteresProducto)
                                    
                                    espaciosTicket = ""
                                    for x in range(numeroEspacios):
                                        espacioMini = " "
                                        espaciosTicket = espaciosTicket + espacioMini
                                    c.EscribirTexto(strCantidad+" x "+nombreServicio+espaciosTicket+str(costototalProductoDosDecimales)+"\n")

                        if longitudServiciosFaciales >=1:
                            for idd, cantidad in listaServiciosFaciales:
                                if idd != "":
                                    idServicio = int(idd)
                                    strCantidad = str(cantidad)
                                    consultaServicio = Servicios.objects.filter(id_servicio = idServicio)
                                    for datoServicio in consultaServicio:
                                        nombreServicio = datoServicio.nombre_servicio
                                        costoServicio = datoServicio.precio_venta

                                    floatCantidad = float(cantidad)
                                    costototalProducto = costoServicio * floatCantidad
                                    costototalProductoDosDecimales = round(costototalProducto, 2)
                                    costototalProductoDosDecimales = str(costototalProductoDosDecimales)

                                    costoTotalProductoDivididoEnElPunto = costototalProductoDosDecimales.split(".")
                                    longitudCostoTotal = len(str(costoTotalProductoDivididoEnElPunto[0]))
                                    longitudCostoTotal = int(longitudCostoTotal)

                                    
                                    caracteresProducto = len(nombreServicio)

                                    if longitudCostoTotal == 2:
                                        espacio = 38
                                    if longitudCostoTotal == 2:
                                        espacio = 37
                                    elif longitudCostoTotal == 3:
                                        espacio = 36
                                    elif longitudCostoTotal == 4:
                                        espacio = 35
                                    elif longitudCostoTotal == 5:
                                        espacio = 34
                                    elif longitudCostoTotal == 6:
                                        espacio = 33
                                    numeroEspacios = espacio - int(caracteresProducto)
                                    
                                    espaciosTicket = ""
                                    for x in range(numeroEspacios):
                                        espacioMini = " "
                                        espaciosTicket = espaciosTicket + espacioMini
                                    c.EscribirTexto(strCantidad+" x "+nombreServicio+espaciosTicket+str(costototalProductoDosDecimales)+"\n")
                        
                        

                        c.EscribirTexto("\n")
                        c.EscribirTexto("\n")

                        if descuento == None:
                            c.EstablecerTamañoFuente(2, 2)
                            c.EstablecerAlineacion(Conector.ALINEACION_DERECHA)
                            c.EscribirTexto("TOTAL:  $"+str(costoTotalAPagar)+"\n")
                            costoTotalPagarCredito = costoTotalAPagar
                            c.EscribirTexto("ABONADO: $"+str(cantidadPago1)+"\n")
                            c.EscribirTexto("RESTANTE: $"+str(restante)+"\n")
                        else:
                            intDescuento = int(descuento)
                            consultaDescuentos = Descuentos.objects.filter(porcentaje = intDescuento)
                            for datoDescuento in consultaDescuentos:
                                nombreDescuento = datoDescuento.nombre_descuento
                                porcentajeDescuento = datoDescuento.porcentaje

                            porcentajePagado = 100 - porcentajeDescuento #85
                            totalSinDescuento1 = 100 * costoTotalAPagar
                            totalSinDescuento2 = totalSinDescuento1/porcentajePagado
                            totalSinDescuento2 = round(totalSinDescuento2)

                            primerMulti = porcentajeDescuento * float(totalSinDescuento2)
                            primerDivision = primerMulti/100
                            resultadoDescuento = round(primerDivision)
                            
                            costoTotalAPagarConDescuento = totalSinDescuento2 - resultadoDescuento

                            c.EstablecerTamañoFuente(1, 1)
                            c.EstablecerAlineacion(Conector.ALINEACION_DERECHA)
                            c.EscribirTexto("Subtotal:  $"+str(totalSinDescuento2)+"\n")
                            c.EscribirTexto("Descuento:  $"+str(resultadoDescuento)+"\n")
                            c.EstablecerTamañoFuente(2, 2)
                            c.EscribirTexto("TOTAL:  $"+str(costoTotalAPagarConDescuento)+"\n")
                            c.EstablecerTamañoFuente(1, 1)
                            c.EscribirTexto("Descuento aplicado: -"+str(porcentajeDescuento)+"%- "+str(nombreDescuento)+"\n")
                            c.EscribirTexto("ABONADO: $"+str(cantidadPago1)+"\n")
                            c.EscribirTexto("RESTANTE: $"+str(restante)+"\n")
                            costoTotalPagarCredito = costoTotalAPagarConDescuento

                        c.EscribirTexto("\n")
                        c.EstablecerEnfatizado(True)
                        c.EstablecerTamañoFuente(1, 1)
                        c.EscribirTexto("========== IVA incluido en el precio ==========\n")
                        c.EscribirTexto("\n")
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        c.TextoSegunPaginaDeCodigos(2, "cp850", "INFORMACION DE PAGO.\n")
                        c.EstablecerEnfatizado(False)
                        c.EscribirTexto("\n")
                        c.EstablecerEnfatizado(True)
                        c.EscribirTexto("Pago en con tarjeta.\n")
                        c.EstablecerEnfatizado(False)
                        c.EscribirTexto("Transferencia.\n")
                        c.EscribirTexto("Clave de rastreo: "+str(clave_transferencia)+".\n")
                        c.EscribirTexto("\n")
                        c.EscribirTexto("Pago a crédito 4 quincenas.\n")
                        c.EscribirTexto("Primer pago recibido.\n")
                        c.EstablecerEnfatizado(False)
                        if restante == 0:
                            c.EscribirTexto("PAGO LIQUIDADO\n")
                        else:
                            restantePorPagar = float(restante)/3
                            restantePorPagar = round(restantePorPagar,2)
                            c.EscribirTexto("Abonos restantes de: $"+str(restantePorPagar)+" MXN.\n")
                            ahora = datetime.now()
                            fechaSegundoPago = ahora + timedelta(days=15)
                            fechaSegundoPago = fechaSegundoPago.strftime('%Y-%m-%d')
                            c.EscribirTexto("Segundo pago el día: "+str(fechaSegundoPago)+".\n")
                        
                    
                        c.EscribirTexto("\n")
                        c.EstablecerEnfatizado(True)
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        c.TextoSegunPaginaDeCodigos(2, "cp850", "INFORMACIÓN DE CLIENTE.\n")

                        if nombreClienteTicket == "Momentaneo":
                            c.EstablecerEnfatizado(False)
                            c.EscribirTexto("Cliente momentaneo.\n")
                        else:
                            c.EstablecerEnfatizado(False)
                            c.EscribirTexto("ID:"+str(idCienteTicket)+" - "+nombreClienteTicket+".\n")
                        c.EscribirTexto("=========== Gracias por su compra!! ===========\n")
                        c.EstablecerTamañoFuente(2, 2)
                        c.EstablecerEnfatizado(True)
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        if contadorTickets == 1:
                            c.EscribirTexto("\n")
                            c.EscribirTexto("COPIA TIENDA.\n")
                            c.EscribirTexto("\n")
                            c.EstablecerTamañoFuente(1, 1)
                            c.EscribirTexto("________________________________________________\n")
                            c.EscribirTexto("Firma de cliente.\n")
                        else:
                            c.EscribirTexto("\n")
                            c.EscribirTexto("COPIA CLIENTE.\n")
                        c.EscribirTexto("\n")
                        c.EstablecerTamañoFuente(1, 1)
                        

                        c.Feed(1)
                        c.Corte(1)
                        #c.abrirCajon()
                        c.Pulso(48, 60, 120)
                        print("Imprimiendo...")
                        # Recuerda cambiar por el nombre de tu impresora
                        respuesta = c.imprimirEn("POS80 Printer")
                        if respuesta == True:
                            print("Impresión correcta")
                        else:
                            print(f"Error. El mensaje es: {respuesta}")

                

           
                    
                 
                            
                            
                            
            if actualizarEstadoCredito and registrarPago1:
                request.session['pago1Agregado'] = "Pago de crédito Guardado correctamente!"
                return redirect('/verCreditosClientes/')
            else:
                request.session['pago1NoAgregado'] = "Error en la base de datos, intentelo más tarde.."
                return redirect('/verCreditosClientes/')
            
             
        

    else:
        return render(request,"1 Login/login.html")
    
    
    
      

def guardarPago2(request):
    if "idSesion" in request.session:
        # Variables de sesión
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        idPerfil = idEmpleado
        idConfig = idEmpleado
    
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']
        idEmpleado = request.session['idSesion']
        if request.method == "POST":
            
            

           
            

            idCreditoAPagar = request.POST['idCredito']
            idPagoCredito = request.POST['idPagoCredito']
            cantidadPago2 = request.POST['cantidadPago2']

            fechaPago2 = datetime.now()
            horaVenta= datetime.now().time()
             
            formaPago = request.POST['tipoPago'] #Efectivo,  tarjeta o transferencia
            
            datosCredito = Creditos.objects.filter(id_credito = idCreditoAPagar)
            for dato in datosCredito:
                montoTotalCredito = dato.monto_pagar
                montoRestante = dato.monto_restante
                montoPagado = dato.monto_pagado
                sucursal = dato.sucursal_id
                idVentaCredito = dato.venta_id
                
                
           
                
            floatCantidadPago2 = float(cantidadPago2)
            floatRestante = float(montoRestante)
                
                
           
                
            if floatCantidadPago2 == floatRestante:
                restante = 0
                estado = "Finalizado"
           
                
            
            else:
                restante = montoRestante - float(cantidadPago2)
                estado = "Pendiente"

            actualMontoPagado = float(montoPagado) + float(cantidadPago2)
                
                   
                 
                    
            esConEfectivo = False
            esConTarjeta = False
            esConTransferencia = False

            if formaPago == "Efectivo":
                esConEfectivo = True
            elif formaPago == "Tarjeta":
                esConTarjeta = True
                tipo_tarjeta = request.POST['tipoTarjeta']    
                referencia_tarjeta = request.POST['referenciaTarjeta'] 
                        
            elif formaPago == "Transferencia":
                esConTransferencia = True
                clave_transferencia = request.POST['claveRastreoTransferencia'] 

                    


            if esConEfectivo:
                        
                registrarPago2 = PagosCreditos.objects.filter(id_historialCredito = idPagoCredito).update(fecha_pago2 = fechaPago2,tipo_pago2 ="Efectivo",monto_pago2 =cantidadPago2) 
                
                if registrarPago2:
                    
                    
                    actualizarEstadoCreditoPago2 = Creditos.objects.filter(id_credito = idCreditoAPagar).update(monto_pagado = actualMontoPagado,monto_restante =restante,estatus =estado) 
                    if actualizarEstadoCreditoPago2:
                         
                        tipoMovimiento ="IN"
                        montoMovimiento = float(cantidadPago2)
                        descripcionMovimiento ="Movimiento por abono de crédito " + str(idCreditoAPagar) 
                        fechaMovimiento = datetime.today().strftime('%Y-%m-%d')
                        horaMovimiento = datetime.now().time()
                        ingresarCantidadEfectivoAcaja =MovimientosCaja(fecha =fechaMovimiento,hora = horaMovimiento,tipo=tipoMovimiento,monto =montoMovimiento, descripcion=descripcionMovimiento,sucursal =  Sucursales.objects.get(id_sucursal = sucursal),
                                                                            realizado_por = Empleados.objects.get(id_empleado = idEmpleado))
                        ingresarCantidadEfectivoAcaja.save()

                        #IMPRESION DE TICKEEETSSSS

                        #Fecha
                        hoy = datetime.now()
                        hoyFormato = hoy.strftime('%Y/%m/%d')

                        #Consulta de venta
                        consultaVenta = Ventas.objects.filter(id_venta = idVentaCredito)
                        for datoVenta in consultaVenta:
                            empleadoVendedor = datoVenta.empleado_vendedor_id
                            sucursal = datoVenta.sucursal_id
                            cliente = datoVenta.cliente_id
                        #Empleado vendedor
                        consultaEmpleadoVendedor = Empleados.objects.filter(id_empleado = empleadoVendedor)
                        for datoVendedor in consultaEmpleadoVendedor:
                            nombreEmpleado = datoVendedor.nombres
                            apellidoPatEmpleado = datoVendedor.apellido_paterno

                        nombreCompletoEmpleadoVendedor = nombreEmpleado + " "+ apellidoPatEmpleado

                        #Datos sucurssal
                        consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursal)
                        for datoSucursal in consultaSucursal:
                            nombreSucursal = datoSucursal.nombre
                            telefonoSucursal = datoSucursal.telefono
                            direccionSucursal = datoSucursal.direccion

                        
                        
                        
                        #Hora bien
                        horaVenta = horaVenta.strftime("%H:%M:%S")

                        # Esto es para obtener las impresoras. No es obligatorio hacerlo siempre que se quiera imprimir
                        impresoras = Conector.ConectorV3.obtenerImpresoras()
                        print(f"Las impresoras son: {impresoras}")
                        
                        contadorTickets = 0
                        for x in range(2):
                            contadorTickets = contadorTickets + 1

                            
                            c = Conector.ConectorV3()
                            c.Iniciar()
                            c.Corte(1)
                            
                            c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                            # Recuerda que la imagen debe existir y debe ser legible para el plugin. Si no, comenta las líneas
                            c.CargarImagenLocalEImprimir("C:\\COSTABELLA\\sistemaCostabella\\static\\images\\anegragrande.png", 0, 216)
                            c.EscribirTexto("\n")
                            c.EstablecerTamañoFuente(1, 1)
                            c.EstablecerEnfatizado(True)
                            c.EscribirTexto("Sucursal: "+nombreSucursal+"\n")
                            c.EstablecerEnfatizado(False)
                            c.EscribirTexto("TEL: "+telefonoSucursal+"\n")
                            c.TextoSegunPaginaDeCodigos(2, "cp850", direccionSucursal+"\n")

                            c.EstablecerEnfatizado(True)
                            c.EscribirTexto("================================================\n")
                            c.EstablecerTamañoFuente(2, 2)
                            c.EscribirTexto("PAGO DE VENTA #"+str(idVentaCredito)+"\n")
                            c.EscribirTexto("CRÉDITO #"+str(idCreditoAPagar)+"\n")
                            c.EstablecerEnfatizado(False)
                            c.EstablecerAlineacion(Conector.ALINEACION_IZQUIERDA)
                            c.EstablecerTamañoFuente(1, 1)
                            c.EscribirTexto("\n")
                            c.EscribirTexto(" "+str(hoyFormato)+" - "+str(horaVenta)+" hrs.\n")
                            c.EscribirTexto("Atendida por: "+nombreCompletoEmpleadoVendedor+".\n")
                            c.EscribirTexto("\n")

                            #Listado de productos 
                            #Productos vendidos en ese credito

                            consultaVenta = Ventas.objects.filter(id_venta = idVentaCredito)
                            for datoVenta in consultaVenta:
                                codigosProductosVenta = datoVenta.ids_productos
                                cantidadesProductosVenta = datoVenta.cantidades_productos
                                idsServiciosCorporales = datoVenta.ids_servicios_corporales
                                cantidadServiciosCorporales = datoVenta.cantidades_servicios_corporales
                                idsServiciosFaciales = datoVenta.ids_servicios_faciales
                                cantidadServiciosFaciales = datoVenta.cantidades_servicios_faciales
                                descuento = datoVenta.descuento
                                costoTotalAPagar = datoVenta.monto_pagar
                                cliente = datoVenta.cliente_id

                            if cliente == None:
                                nombreClienteTicket = "Momentaneo"
                                idCienteTicket="Sin id"
                            else:
                                consultaCliente = Clientes.objects.filter(id_cliente = cliente)
                                for datoCliente in consultaCliente:
                                    idCienteTicket = datoCliente.id_cliente
                                    nombreCliente = datoCliente.nombre_cliente
                                    apellidoCliente = datoCliente.apellidoPaterno_cliente
                                nombreClienteTicket = nombreCliente + " "+apellidoCliente
                                
                                

                            listaCodigosProductos = codigosProductosVenta.split(",")
                            listaCantidadesProductos = cantidadesProductosVenta.split(",")
                            listaIdsServiciosCorporales = idsServiciosCorporales.split(",")
                            listaCantidadesServiciosCorporales = cantidadServiciosCorporales.split(",")
                            listaIdsServiciosFaciales = idsServiciosFaciales.split(",")
                            listaCantidadesServiciosFaciales = cantidadServiciosFaciales.split(",")
                            
                            longitudProductos = len(listaCodigosProductos)
                            longitudServiciosCorporales = len(listaIdsServiciosCorporales)
                            longitudServiciosFaciales = len(listaIdsServiciosFaciales)


                            listaProductos = zip(listaCodigosProductos,listaCantidadesProductos)
                            listaServiciosCorporales = zip(listaIdsServiciosCorporales, listaCantidadesServiciosCorporales)
                            listaServiciosFaciales = zip(listaIdsServiciosFaciales, listaCantidadesServiciosFaciales)

                            if longitudProductos >= 1:
                                for codigo, cantidad in listaProductos:
                                    if codigo != "":
                                        strCodigo = str(codigo)
                                        strCantidad = str(cantidad)
                                        consultaProductoVenta = ProductosVenta.objects.filter(codigo_producto = strCodigo)
                                        for datoProductoVenta in consultaProductoVenta:
                                            nombreProducto = datoProductoVenta.nombre_producto
                                            costoIndividualProducto = datoProductoVenta.costo_venta

                                        floatCantidad = float(cantidad)
                                        costototalProducto = costoIndividualProducto * floatCantidad
                                        costototalProductoDosDecimales = round(costototalProducto, 2)
                                        costototalProductoDosDecimales = str(costototalProductoDosDecimales)

                                        costoTotalProductoDivididoEnElPunto = costototalProductoDosDecimales.split(".")
                                        longitudCostoTotal = len(str(costoTotalProductoDivididoEnElPunto[0]))
                                        longitudCostoTotal = int(longitudCostoTotal)

                                        
                                        caracteresProducto = len(nombreProducto)

                                        if longitudCostoTotal == 2:
                                            espacio = 38
                                        if longitudCostoTotal == 2:
                                            espacio = 37
                                        elif longitudCostoTotal == 3:
                                            espacio = 36
                                        elif longitudCostoTotal == 4:
                                            espacio = 35
                                        elif longitudCostoTotal == 5:
                                            espacio = 34
                                        elif longitudCostoTotal == 6:
                                            espacio = 33
                                        numeroEspacios = espacio - int(caracteresProducto)
                                        
                                        espaciosTicket = ""
                                        for x in range(numeroEspacios):
                                            espacioMini = " "
                                            espaciosTicket = espaciosTicket + espacioMini
                                        c.EscribirTexto(strCantidad+" x "+nombreProducto+espaciosTicket+str(costototalProductoDosDecimales)+"\n")
                            
                            if longitudServiciosCorporales >=1:
                                for idd, cantidad in listaServiciosCorporales:
                                    if idd != "":
                                        idServicio = int(idd)
                                        strCantidad = str(cantidad)
                                        consultaServicio = Servicios.objects.filter(id_servicio = idServicio)
                                        for datoServicio in consultaServicio:
                                            nombreServicio = datoServicio.nombre_servicio
                                            costoServicio = datoServicio.precio_venta

                                        floatCantidad = float(cantidad)
                                        costototalProducto = costoServicio * floatCantidad
                                        costototalProductoDosDecimales = round(costototalProducto, 2)
                                        costototalProductoDosDecimales = str(costototalProductoDosDecimales)

                                        costoTotalProductoDivididoEnElPunto = costototalProductoDosDecimales.split(".")
                                        longitudCostoTotal = len(str(costoTotalProductoDivididoEnElPunto[0]))
                                        longitudCostoTotal = int(longitudCostoTotal)

                                        
                                        caracteresProducto = len(nombreServicio)

                                        if longitudCostoTotal == 2:
                                            espacio = 38
                                        if longitudCostoTotal == 2:
                                            espacio = 37
                                        elif longitudCostoTotal == 3:
                                            espacio = 36
                                        elif longitudCostoTotal == 4:
                                            espacio = 35
                                        elif longitudCostoTotal == 5:
                                            espacio = 34
                                        elif longitudCostoTotal == 6:
                                            espacio = 33
                                        numeroEspacios = espacio - int(caracteresProducto)
                                        
                                        espaciosTicket = ""
                                        for x in range(numeroEspacios):
                                            espacioMini = " "
                                            espaciosTicket = espaciosTicket + espacioMini
                                        c.EscribirTexto(strCantidad+" x "+nombreServicio+espaciosTicket+str(costototalProductoDosDecimales)+"\n")

                            if longitudServiciosFaciales >=1:
                                for idd, cantidad in listaServiciosFaciales:
                                    if idd != "":
                                        idServicio = int(idd)
                                        strCantidad = str(cantidad)
                                        consultaServicio = Servicios.objects.filter(id_servicio = idServicio)
                                        for datoServicio in consultaServicio:
                                            nombreServicio = datoServicio.nombre_servicio
                                            costoServicio = datoServicio.precio_venta

                                        floatCantidad = float(cantidad)
                                        costototalProducto = costoServicio * floatCantidad
                                        costototalProductoDosDecimales = round(costototalProducto, 2)
                                        costototalProductoDosDecimales = str(costototalProductoDosDecimales)

                                        costoTotalProductoDivididoEnElPunto = costototalProductoDosDecimales.split(".")
                                        longitudCostoTotal = len(str(costoTotalProductoDivididoEnElPunto[0]))
                                        longitudCostoTotal = int(longitudCostoTotal)

                                        
                                        caracteresProducto = len(nombreServicio)

                                        if longitudCostoTotal == 2:
                                            espacio = 38
                                        if longitudCostoTotal == 2:
                                            espacio = 37
                                        elif longitudCostoTotal == 3:
                                            espacio = 36
                                        elif longitudCostoTotal == 4:
                                            espacio = 35
                                        elif longitudCostoTotal == 5:
                                            espacio = 34
                                        elif longitudCostoTotal == 6:
                                            espacio = 33
                                        numeroEspacios = espacio - int(caracteresProducto)
                                        
                                        espaciosTicket = ""
                                        for x in range(numeroEspacios):
                                            espacioMini = " "
                                            espaciosTicket = espaciosTicket + espacioMini
                                        c.EscribirTexto(strCantidad+" x "+nombreServicio+espaciosTicket+str(costototalProductoDosDecimales)+"\n")
                            
                            

                            c.EscribirTexto("\n")
                            c.EscribirTexto("\n")

                            if descuento == None:
                                c.EstablecerTamañoFuente(2, 2)
                                c.EstablecerAlineacion(Conector.ALINEACION_DERECHA)
                                c.EscribirTexto("TOTAL:  $"+str(costoTotalAPagar)+"\n")
                                costoTotalPagarCredito = costoTotalAPagar
                                c.EscribirTexto("ABONADO: $"+str(cantidadPago2)+"\n")
                                c.EscribirTexto("RESTANTE: $"+str(restante)+"\n")
                            else:
                                intDescuento = int(descuento)
                                consultaDescuentos = Descuentos.objects.filter(porcentaje = intDescuento)
                                for datoDescuento in consultaDescuentos:
                                    nombreDescuento = datoDescuento.nombre_descuento
                                    porcentajeDescuento = datoDescuento.porcentaje

                                porcentajePagado = 100 - porcentajeDescuento #85
                                totalSinDescuento1 = 100 * costoTotalAPagar
                                totalSinDescuento2 = totalSinDescuento1/porcentajePagado
                                totalSinDescuento2 = round(totalSinDescuento2)

                                primerMulti = porcentajeDescuento * float(totalSinDescuento2)
                                primerDivision = primerMulti/100
                                resultadoDescuento = round(primerDivision)
                                
                                costoTotalAPagarConDescuento = totalSinDescuento2 - resultadoDescuento

                                c.EstablecerTamañoFuente(1, 1)
                                c.EstablecerAlineacion(Conector.ALINEACION_DERECHA)
                                c.EscribirTexto("Subtotal:  $"+str(totalSinDescuento2)+"\n")
                                c.EscribirTexto("Descuento:  $"+str(resultadoDescuento)+"\n")
                                c.EstablecerTamañoFuente(2, 2)
                                c.EscribirTexto("TOTAL:  $"+str(costoTotalAPagarConDescuento)+"\n")
                                c.EstablecerTamañoFuente(1, 1)
                                c.EscribirTexto("Descuento aplicado: -"+str(porcentajeDescuento)+"%- "+str(nombreDescuento)+"\n")
                                c.EscribirTexto("ABONADO: $"+str(cantidadPago2)+"\n")
                                c.EscribirTexto("RESTANTE: $"+str(restante)+"\n")
                                costoTotalPagarCredito = costoTotalAPagarConDescuento

                            c.EscribirTexto("\n")
                            c.EstablecerEnfatizado(True)
                            c.EstablecerTamañoFuente(1, 1)
                            c.EscribirTexto("========== IVA incluido en el precio ==========\n")
                            c.EscribirTexto("\n")
                            c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                            c.TextoSegunPaginaDeCodigos(2, "cp850", "INFORMACION DE PAGO.\n")
                            c.EstablecerEnfatizado(False)
                            c.EscribirTexto("\n")
                            c.EstablecerEnfatizado(True)
                            c.EscribirTexto("Pago en efectivo.\n")
                            c.EscribirTexto("Pago a crédito 4 quincenas.\n")
                            c.EscribirTexto("Segundo pago recibido.\n")
                            c.EstablecerEnfatizado(False)
                            if restante == 0:
                                c.EscribirTexto("PAGO LIQUIDADO\n")
                            else:
                                restantePorPagar = float(restante)/2
                                restantePorPagar = round(restantePorPagar,2)
                                c.EscribirTexto("Abonos restantes de: $"+str(restantePorPagar)+" MXN.\n")
                                ahora = datetime.now()
                                fechaSegundoPago = ahora + timedelta(days=15)
                                fechaSegundoPago = fechaSegundoPago.strftime('%Y-%m-%d')
                                c.EscribirTexto("Tercer pago el día: "+str(fechaSegundoPago)+".\n")
                            
                        
                            c.EscribirTexto("\n")
                            c.EstablecerEnfatizado(True)
                            c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                            c.TextoSegunPaginaDeCodigos(2, "cp850", "INFORMACIÓN DE CLIENTE.\n")

                            if nombreClienteTicket == "Momentaneo":
                                c.EstablecerEnfatizado(False)
                                c.EscribirTexto("Cliente momentaneo.\n")
                            else:
                                c.EstablecerEnfatizado(False)
                                c.EscribirTexto("ID:"+str(idCienteTicket)+" - "+nombreClienteTicket+".\n")
                            c.EscribirTexto("=========== Gracias por su compra!! ===========\n")
                            c.EstablecerTamañoFuente(2, 2)
                            c.EstablecerEnfatizado(True)
                            c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                            if contadorTickets == 1:
                                c.EscribirTexto("\n")
                                c.EscribirTexto("COPIA TIENDA.\n")
                                c.EscribirTexto("\n")
                                c.EstablecerTamañoFuente(1, 1)
                                c.EscribirTexto("________________________________________________\n")
                                c.EscribirTexto("Firma de cliente.\n")
                            else:
                                c.EscribirTexto("\n")
                                c.EscribirTexto("COPIA CLIENTE.\n")
                            c.EscribirTexto("\n")
                            c.EstablecerTamañoFuente(1, 1)
                            

                            c.Feed(1)
                            c.Corte(1)
                            #c.abrirCajon()
                            c.Pulso(48, 60, 120)
                            print("Imprimiendo...")
                            # Recuerda cambiar por el nombre de tu impresora
                            respuesta = c.imprimirEn("POS80 Printer")
                            if respuesta == True:
                                print("Impresión correcta")
                            else:
                                print(f"Error. El mensaje es: {respuesta}")


                
                

            if esConTarjeta:
                    
                        
                registrarPago2 = PagosCreditos.objects.filter(id_historialCredito = idPagoCredito).update(fecha_pago2 = fechaPago2,tipo_pago2 ="Tarjeta",tipo_tarjeta2=tipo_tarjeta,referencia_pago_tarjeta2=referencia_tarjeta,monto_pago2 =cantidadPago2) 
                
                if registrarPago2:
                    
                    
                    actualizarEstadoCreditoPago2 = Creditos.objects.filter(id_credito = idCreditoAPagar).update(monto_pagado = actualMontoPagado,monto_restante =restante,estatus =estado) 
                  
                    #IMPRESION DE TICKEEETSSSS

                    #Fecha
                    hoy = datetime.now()
                    hoyFormato = hoy.strftime('%Y/%m/%d')

                    #Consulta de venta
                    consultaVenta = Ventas.objects.filter(id_venta = idVentaCredito)
                    for datoVenta in consultaVenta:
                        empleadoVendedor = datoVenta.empleado_vendedor_id
                        sucursal = datoVenta.sucursal_id
                        cliente = datoVenta.cliente_id
                    #Empleado vendedor
                    consultaEmpleadoVendedor = Empleados.objects.filter(id_empleado = empleadoVendedor)
                    for datoVendedor in consultaEmpleadoVendedor:
                        nombreEmpleado = datoVendedor.nombres
                        apellidoPatEmpleado = datoVendedor.apellido_paterno

                    nombreCompletoEmpleadoVendedor = nombreEmpleado + " "+ apellidoPatEmpleado

                    #Datos sucurssal
                    consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursal)
                    for datoSucursal in consultaSucursal:
                        nombreSucursal = datoSucursal.nombre
                        telefonoSucursal = datoSucursal.telefono
                        direccionSucursal = datoSucursal.direccion

                    
                    
                    
                    #Hora bien
                    horaVenta = horaVenta.strftime("%H:%M:%S")

                    # Esto es para obtener las impresoras. No es obligatorio hacerlo siempre que se quiera imprimir
                    impresoras = Conector.ConectorV3.obtenerImpresoras()
                    print(f"Las impresoras son: {impresoras}")
                    
                    contadorTickets = 0
                    for x in range(2):
                        contadorTickets = contadorTickets + 1

                        
                        c = Conector.ConectorV3()
                        c.Iniciar()
                        c.Corte(1)
                        
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        # Recuerda que la imagen debe existir y debe ser legible para el plugin. Si no, comenta las líneas
                        c.CargarImagenLocalEImprimir("C:\\COSTABELLA\\sistemaCostabella\\static\\images\\anegragrande.png", 0, 216)
                        c.EscribirTexto("\n")
                        c.EstablecerTamañoFuente(1, 1)
                        c.EstablecerEnfatizado(True)
                        c.EscribirTexto("Sucursal: "+nombreSucursal+"\n")
                        c.EstablecerEnfatizado(False)
                        c.EscribirTexto("TEL: "+telefonoSucursal+"\n")
                        c.TextoSegunPaginaDeCodigos(2, "cp850", direccionSucursal+"\n")

                        c.EstablecerEnfatizado(True)
                        c.EscribirTexto("================================================\n")
                        c.EstablecerTamañoFuente(2, 2)
                        c.EscribirTexto("PAGO DE VENTA #"+str(idVentaCredito)+"\n")
                        c.EscribirTexto("CRÉDITO #"+str(idCreditoAPagar)+"\n")
                        c.EstablecerEnfatizado(False)
                        c.EstablecerAlineacion(Conector.ALINEACION_IZQUIERDA)
                        c.EstablecerTamañoFuente(1, 1)
                        c.EscribirTexto("\n")
                        c.EscribirTexto(" "+str(hoyFormato)+" - "+str(horaVenta)+" hrs.\n")
                        c.EscribirTexto("Atendida por: "+nombreCompletoEmpleadoVendedor+".\n")
                        c.EscribirTexto("\n")

                        #Listado de productos 
                        #Productos vendidos en ese credito

                        consultaVenta = Ventas.objects.filter(id_venta = idVentaCredito)
                        for datoVenta in consultaVenta:
                            codigosProductosVenta = datoVenta.ids_productos
                            cantidadesProductosVenta = datoVenta.cantidades_productos
                            idsServiciosCorporales = datoVenta.ids_servicios_corporales
                            cantidadServiciosCorporales = datoVenta.cantidades_servicios_corporales
                            idsServiciosFaciales = datoVenta.ids_servicios_faciales
                            cantidadServiciosFaciales = datoVenta.cantidades_servicios_faciales
                            descuento = datoVenta.descuento
                            costoTotalAPagar = datoVenta.monto_pagar
                            cliente = datoVenta.cliente_id

                        if cliente == None:
                            nombreClienteTicket = "Momentaneo"
                            idCienteTicket="Sin id"
                        else:
                            consultaCliente = Clientes.objects.filter(id_cliente = cliente)
                            for datoCliente in consultaCliente:
                                idCienteTicket = datoCliente.id_cliente
                                nombreCliente = datoCliente.nombre_cliente
                                apellidoCliente = datoCliente.apellidoPaterno_cliente
                            nombreClienteTicket = nombreCliente + " "+apellidoCliente
                            
                            

                        listaCodigosProductos = codigosProductosVenta.split(",")
                        listaCantidadesProductos = cantidadesProductosVenta.split(",")
                        listaIdsServiciosCorporales = idsServiciosCorporales.split(",")
                        listaCantidadesServiciosCorporales = cantidadServiciosCorporales.split(",")
                        listaIdsServiciosFaciales = idsServiciosFaciales.split(",")
                        listaCantidadesServiciosFaciales = cantidadServiciosFaciales.split(",")
                        
                        longitudProductos = len(listaCodigosProductos)
                        longitudServiciosCorporales = len(listaIdsServiciosCorporales)
                        longitudServiciosFaciales = len(listaIdsServiciosFaciales)


                        listaProductos = zip(listaCodigosProductos,listaCantidadesProductos)
                        listaServiciosCorporales = zip(listaIdsServiciosCorporales, listaCantidadesServiciosCorporales)
                        listaServiciosFaciales = zip(listaIdsServiciosFaciales, listaCantidadesServiciosFaciales)

                        if longitudProductos >= 1:
                            for codigo, cantidad in listaProductos:
                                if codigo != "":
                                    strCodigo = str(codigo)
                                    strCantidad = str(cantidad)
                                    consultaProductoVenta = ProductosVenta.objects.filter(codigo_producto = strCodigo)
                                    for datoProductoVenta in consultaProductoVenta:
                                        nombreProducto = datoProductoVenta.nombre_producto
                                        costoIndividualProducto = datoProductoVenta.costo_venta

                                    floatCantidad = float(cantidad)
                                    costototalProducto = costoIndividualProducto * floatCantidad
                                    costototalProductoDosDecimales = round(costototalProducto, 2)
                                    costototalProductoDosDecimales = str(costototalProductoDosDecimales)

                                    costoTotalProductoDivididoEnElPunto = costototalProductoDosDecimales.split(".")
                                    longitudCostoTotal = len(str(costoTotalProductoDivididoEnElPunto[0]))
                                    longitudCostoTotal = int(longitudCostoTotal)

                                    
                                    caracteresProducto = len(nombreProducto)

                                    if longitudCostoTotal == 2:
                                        espacio = 38
                                    if longitudCostoTotal == 2:
                                        espacio = 37
                                    elif longitudCostoTotal == 3:
                                        espacio = 36
                                    elif longitudCostoTotal == 4:
                                        espacio = 35
                                    elif longitudCostoTotal == 5:
                                        espacio = 34
                                    elif longitudCostoTotal == 6:
                                        espacio = 33
                                    numeroEspacios = espacio - int(caracteresProducto)
                                    
                                    espaciosTicket = ""
                                    for x in range(numeroEspacios):
                                        espacioMini = " "
                                        espaciosTicket = espaciosTicket + espacioMini
                                    c.EscribirTexto(strCantidad+" x "+nombreProducto+espaciosTicket+str(costototalProductoDosDecimales)+"\n")
                        
                        if longitudServiciosCorporales >=1:
                            for idd, cantidad in listaServiciosCorporales:
                                if idd != "":
                                    idServicio = int(idd)
                                    strCantidad = str(cantidad)
                                    consultaServicio = Servicios.objects.filter(id_servicio = idServicio)
                                    for datoServicio in consultaServicio:
                                        nombreServicio = datoServicio.nombre_servicio
                                        costoServicio = datoServicio.precio_venta

                                    floatCantidad = float(cantidad)
                                    costototalProducto = costoServicio * floatCantidad
                                    costototalProductoDosDecimales = round(costototalProducto, 2)
                                    costototalProductoDosDecimales = str(costototalProductoDosDecimales)

                                    costoTotalProductoDivididoEnElPunto = costototalProductoDosDecimales.split(".")
                                    longitudCostoTotal = len(str(costoTotalProductoDivididoEnElPunto[0]))
                                    longitudCostoTotal = int(longitudCostoTotal)

                                    
                                    caracteresProducto = len(nombreServicio)

                                    if longitudCostoTotal == 2:
                                        espacio = 38
                                    if longitudCostoTotal == 2:
                                        espacio = 37
                                    elif longitudCostoTotal == 3:
                                        espacio = 36
                                    elif longitudCostoTotal == 4:
                                        espacio = 35
                                    elif longitudCostoTotal == 5:
                                        espacio = 34
                                    elif longitudCostoTotal == 6:
                                        espacio = 33
                                    numeroEspacios = espacio - int(caracteresProducto)
                                    
                                    espaciosTicket = ""
                                    for x in range(numeroEspacios):
                                        espacioMini = " "
                                        espaciosTicket = espaciosTicket + espacioMini
                                    c.EscribirTexto(strCantidad+" x "+nombreServicio+espaciosTicket+str(costototalProductoDosDecimales)+"\n")

                        if longitudServiciosFaciales >=1:
                            for idd, cantidad in listaServiciosFaciales:
                                if idd != "":
                                    idServicio = int(idd)
                                    strCantidad = str(cantidad)
                                    consultaServicio = Servicios.objects.filter(id_servicio = idServicio)
                                    for datoServicio in consultaServicio:
                                        nombreServicio = datoServicio.nombre_servicio
                                        costoServicio = datoServicio.precio_venta

                                    floatCantidad = float(cantidad)
                                    costototalProducto = costoServicio * floatCantidad
                                    costototalProductoDosDecimales = round(costototalProducto, 2)
                                    costototalProductoDosDecimales = str(costototalProductoDosDecimales)

                                    costoTotalProductoDivididoEnElPunto = costototalProductoDosDecimales.split(".")
                                    longitudCostoTotal = len(str(costoTotalProductoDivididoEnElPunto[0]))
                                    longitudCostoTotal = int(longitudCostoTotal)

                                    
                                    caracteresProducto = len(nombreServicio)

                                    if longitudCostoTotal == 2:
                                        espacio = 38
                                    if longitudCostoTotal == 2:
                                        espacio = 37
                                    elif longitudCostoTotal == 3:
                                        espacio = 36
                                    elif longitudCostoTotal == 4:
                                        espacio = 35
                                    elif longitudCostoTotal == 5:
                                        espacio = 34
                                    elif longitudCostoTotal == 6:
                                        espacio = 33
                                    numeroEspacios = espacio - int(caracteresProducto)
                                    
                                    espaciosTicket = ""
                                    for x in range(numeroEspacios):
                                        espacioMini = " "
                                        espaciosTicket = espaciosTicket + espacioMini
                                    c.EscribirTexto(strCantidad+" x "+nombreServicio+espaciosTicket+str(costototalProductoDosDecimales)+"\n")
                        
                        

                        c.EscribirTexto("\n")
                        c.EscribirTexto("\n")

                        if descuento == None:
                            c.EstablecerTamañoFuente(2, 2)
                            c.EstablecerAlineacion(Conector.ALINEACION_DERECHA)
                            c.EscribirTexto("TOTAL:  $"+str(costoTotalAPagar)+"\n")
                            costoTotalPagarCredito = costoTotalAPagar
                            c.EscribirTexto("ABONADO: $"+str(cantidadPago2)+"\n")
                            c.EscribirTexto("RESTANTE: $"+str(restante)+"\n")
                        else:
                            intDescuento = int(descuento)
                            consultaDescuentos = Descuentos.objects.filter(porcentaje = intDescuento)
                            for datoDescuento in consultaDescuentos:
                                nombreDescuento = datoDescuento.nombre_descuento
                                porcentajeDescuento = datoDescuento.porcentaje

                            porcentajePagado = 100 - porcentajeDescuento #85
                            totalSinDescuento1 = 100 * costoTotalAPagar
                            totalSinDescuento2 = totalSinDescuento1/porcentajePagado
                            totalSinDescuento2 = round(totalSinDescuento2)

                            primerMulti = porcentajeDescuento * float(totalSinDescuento2)
                            primerDivision = primerMulti/100
                            resultadoDescuento = round(primerDivision)
                            
                            costoTotalAPagarConDescuento = totalSinDescuento2 - resultadoDescuento

                            c.EstablecerTamañoFuente(1, 1)
                            c.EstablecerAlineacion(Conector.ALINEACION_DERECHA)
                            c.EscribirTexto("Subtotal:  $"+str(totalSinDescuento2)+"\n")
                            c.EscribirTexto("Descuento:  $"+str(resultadoDescuento)+"\n")
                            c.EstablecerTamañoFuente(2, 2)
                            c.EscribirTexto("TOTAL:  $"+str(costoTotalAPagarConDescuento)+"\n")
                            c.EstablecerTamañoFuente(1, 1)
                            c.EscribirTexto("Descuento aplicado: -"+str(porcentajeDescuento)+"%- "+str(nombreDescuento)+"\n")
                            c.EscribirTexto("ABONADO: $"+str(cantidadPago2)+"\n")
                            c.EscribirTexto("RESTANTE: $"+str(restante)+"\n")
                            costoTotalPagarCredito = costoTotalAPagarConDescuento

                        c.EscribirTexto("\n")
                        c.EstablecerEnfatizado(True)
                        c.EstablecerTamañoFuente(1, 1)
                        c.EscribirTexto("========== IVA incluido en el precio ==========\n")
                        c.EscribirTexto("\n")
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        c.TextoSegunPaginaDeCodigos(2, "cp850", "INFORMACION DE PAGO.\n")
                        c.EstablecerEnfatizado(False)
                        c.EscribirTexto("\n")
                        c.EstablecerEnfatizado(True)
                        c.EscribirTexto("Pago en con tarjeta.\n")
                        c.EstablecerEnfatizado(False)
                        c.EscribirTexto("Pago con "+str(tipo_tarjeta)+".\n")
                        c.EscribirTexto("Referencia: "+referencia_tarjeta+".\n")
                        c.EscribirTexto("Segundo pago recibido.\n")
                        c.EstablecerEnfatizado(False)
                        if restante == 0:
                            c.EscribirTexto("PAGO LIQUIDADO\n")
                        else:
                            restantePorPagar = float(restante)/2
                            restantePorPagar = round(restantePorPagar,2)
                            c.EscribirTexto("Abonos restantes de: $"+str(restantePorPagar)+" MXN.\n")
                            ahora = datetime.now()
                            fechaSegundoPago = ahora + timedelta(days=15)
                            fechaSegundoPago = fechaSegundoPago.strftime('%Y-%m-%d')
                            c.EscribirTexto("Tercer pago el día: "+str(fechaSegundoPago)+".\n")
                        
                    
                        c.EscribirTexto("\n")
                        c.EstablecerEnfatizado(True)
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        c.TextoSegunPaginaDeCodigos(2, "cp850", "INFORMACIÓN DE CLIENTE.\n")

                        if nombreClienteTicket == "Momentaneo":
                            c.EstablecerEnfatizado(False)
                            c.EscribirTexto("Cliente momentaneo.\n")
                        else:
                            c.EstablecerEnfatizado(False)
                            c.EscribirTexto("ID:"+str(idCienteTicket)+" - "+nombreClienteTicket+".\n")
                        c.EscribirTexto("=========== Gracias por su compra!! ===========\n")
                        c.EstablecerTamañoFuente(2, 2)
                        c.EstablecerEnfatizado(True)
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        if contadorTickets == 1:
                            c.EscribirTexto("\n")
                            c.EscribirTexto("COPIA TIENDA.\n")
                            c.EscribirTexto("\n")
                            c.EstablecerTamañoFuente(1, 1)
                            c.EscribirTexto("________________________________________________\n")
                            c.EscribirTexto("Firma de cliente.\n")
                        else:
                            c.EscribirTexto("\n")
                            c.EscribirTexto("COPIA CLIENTE.\n")
                        c.EscribirTexto("\n")
                        c.EstablecerTamañoFuente(1, 1)
                        

                        c.Feed(1)
                        c.Corte(1)
                        #c.abrirCajon()
                        c.Pulso(48, 60, 120)
                        print("Imprimiendo...")
                        # Recuerda cambiar por el nombre de tu impresora
                        respuesta = c.imprimirEn("POS80 Printer")
                        if respuesta == True:
                            print("Impresión correcta")
                        else:
                            print(f"Error. El mensaje es: {respuesta}")

            if esConTransferencia:
            
                registrarPago2 = PagosCreditos.objects.filter(id_historialCredito = idPagoCredito).update(fecha_pago2 = fechaPago2,tipo_pago2 ="Transferencia",clave_rastreo_pago_transferencia2=clave_transferencia,monto_pago2 =cantidadPago2) 
                
                if registrarPago2:
                    
                    
                    actualizarEstadoCreditoPago2 = Creditos.objects.filter(id_credito = idCreditoAPagar).update(monto_pagado = actualMontoPagado,monto_restante =restante,estatus =estado) 

                    #Fecha
                    hoy = datetime.now()
                    hoyFormato = hoy.strftime('%Y/%m/%d')

                    #Consulta de venta
                    consultaVenta = Ventas.objects.filter(id_venta = idVentaCredito)
                    for datoVenta in consultaVenta:
                        empleadoVendedor = datoVenta.empleado_vendedor_id
                        sucursal = datoVenta.sucursal_id
                        cliente = datoVenta.cliente_id
                    #Empleado vendedor
                    consultaEmpleadoVendedor = Empleados.objects.filter(id_empleado = empleadoVendedor)
                    for datoVendedor in consultaEmpleadoVendedor:
                        nombreEmpleado = datoVendedor.nombres
                        apellidoPatEmpleado = datoVendedor.apellido_paterno

                    nombreCompletoEmpleadoVendedor = nombreEmpleado + " "+ apellidoPatEmpleado

                    #Datos sucurssal
                    consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursal)
                    for datoSucursal in consultaSucursal:
                        nombreSucursal = datoSucursal.nombre
                        telefonoSucursal = datoSucursal.telefono
                        direccionSucursal = datoSucursal.direccion

                    
                    
                    
                    #Hora bien
                    horaVenta = horaVenta.strftime("%H:%M:%S")

                    # Esto es para obtener las impresoras. No es obligatorio hacerlo siempre que se quiera imprimir
                    impresoras = Conector.ConectorV3.obtenerImpresoras()
                    print(f"Las impresoras son: {impresoras}")
                    
                    contadorTickets = 0
                    for x in range(2):
                        contadorTickets = contadorTickets + 1

                        
                        c = Conector.ConectorV3()
                        c.Iniciar()
                        c.Corte(1)
                        
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        # Recuerda que la imagen debe existir y debe ser legible para el plugin. Si no, comenta las líneas
                        c.CargarImagenLocalEImprimir("C:\\COSTABELLA\\sistemaCostabella\\static\\images\\anegragrande.png", 0, 216)
                        c.EscribirTexto("\n")
                        c.EstablecerTamañoFuente(1, 1)
                        c.EstablecerEnfatizado(True)
                        c.EscribirTexto("Sucursal: "+nombreSucursal+"\n")
                        c.EstablecerEnfatizado(False)
                        c.EscribirTexto("TEL: "+telefonoSucursal+"\n")
                        c.TextoSegunPaginaDeCodigos(2, "cp850", direccionSucursal+"\n")

                        c.EstablecerEnfatizado(True)
                        c.EscribirTexto("================================================\n")
                        c.EstablecerTamañoFuente(2, 2)
                        c.EscribirTexto("PAGO DE VENTA #"+str(idVentaCredito)+"\n")
                        c.EscribirTexto("CRÉDITO #"+str(idCreditoAPagar)+"\n")
                        c.EstablecerEnfatizado(False)
                        c.EstablecerAlineacion(Conector.ALINEACION_IZQUIERDA)
                        c.EstablecerTamañoFuente(1, 1)
                        c.EscribirTexto("\n")
                        c.EscribirTexto(" "+str(hoyFormato)+" - "+str(horaVenta)+" hrs.\n")
                        c.EscribirTexto("Atendida por: "+nombreCompletoEmpleadoVendedor+".\n")
                        c.EscribirTexto("\n")

                        #Listado de productos 
                        #Productos vendidos en ese credito

                        consultaVenta = Ventas.objects.filter(id_venta = idVentaCredito)
                        for datoVenta in consultaVenta:
                            codigosProductosVenta = datoVenta.ids_productos
                            cantidadesProductosVenta = datoVenta.cantidades_productos
                            idsServiciosCorporales = datoVenta.ids_servicios_corporales
                            cantidadServiciosCorporales = datoVenta.cantidades_servicios_corporales
                            idsServiciosFaciales = datoVenta.ids_servicios_faciales
                            cantidadServiciosFaciales = datoVenta.cantidades_servicios_faciales
                            descuento = datoVenta.descuento
                            costoTotalAPagar = datoVenta.monto_pagar
                            cliente = datoVenta.cliente_id

                        if cliente == None:
                            nombreClienteTicket = "Momentaneo"
                            idCienteTicket="Sin id"
                        else:
                            consultaCliente = Clientes.objects.filter(id_cliente = cliente)
                            for datoCliente in consultaCliente:
                                idCienteTicket = datoCliente.id_cliente
                                nombreCliente = datoCliente.nombre_cliente
                                apellidoCliente = datoCliente.apellidoPaterno_cliente
                            nombreClienteTicket = nombreCliente + " "+apellidoCliente
                            
                            

                        listaCodigosProductos = codigosProductosVenta.split(",")
                        listaCantidadesProductos = cantidadesProductosVenta.split(",")
                        listaIdsServiciosCorporales = idsServiciosCorporales.split(",")
                        listaCantidadesServiciosCorporales = cantidadServiciosCorporales.split(",")
                        listaIdsServiciosFaciales = idsServiciosFaciales.split(",")
                        listaCantidadesServiciosFaciales = cantidadServiciosFaciales.split(",")
                        
                        longitudProductos = len(listaCodigosProductos)
                        longitudServiciosCorporales = len(listaIdsServiciosCorporales)
                        longitudServiciosFaciales = len(listaIdsServiciosFaciales)


                        listaProductos = zip(listaCodigosProductos,listaCantidadesProductos)
                        listaServiciosCorporales = zip(listaIdsServiciosCorporales, listaCantidadesServiciosCorporales)
                        listaServiciosFaciales = zip(listaIdsServiciosFaciales, listaCantidadesServiciosFaciales)

                        if longitudProductos >= 1:
                            for codigo, cantidad in listaProductos:
                                if codigo != "":
                                    strCodigo = str(codigo)
                                    strCantidad = str(cantidad)
                                    consultaProductoVenta = ProductosVenta.objects.filter(codigo_producto = strCodigo)
                                    for datoProductoVenta in consultaProductoVenta:
                                        nombreProducto = datoProductoVenta.nombre_producto
                                        costoIndividualProducto = datoProductoVenta.costo_venta

                                    floatCantidad = float(cantidad)
                                    costototalProducto = costoIndividualProducto * floatCantidad
                                    costototalProductoDosDecimales = round(costototalProducto, 2)
                                    costototalProductoDosDecimales = str(costototalProductoDosDecimales)

                                    costoTotalProductoDivididoEnElPunto = costototalProductoDosDecimales.split(".")
                                    longitudCostoTotal = len(str(costoTotalProductoDivididoEnElPunto[0]))
                                    longitudCostoTotal = int(longitudCostoTotal)

                                    
                                    caracteresProducto = len(nombreProducto)

                                    if longitudCostoTotal == 2:
                                        espacio = 38
                                    if longitudCostoTotal == 2:
                                        espacio = 37
                                    elif longitudCostoTotal == 3:
                                        espacio = 36
                                    elif longitudCostoTotal == 4:
                                        espacio = 35
                                    elif longitudCostoTotal == 5:
                                        espacio = 34
                                    elif longitudCostoTotal == 6:
                                        espacio = 33
                                    numeroEspacios = espacio - int(caracteresProducto)
                                    
                                    espaciosTicket = ""
                                    for x in range(numeroEspacios):
                                        espacioMini = " "
                                        espaciosTicket = espaciosTicket + espacioMini
                                    c.EscribirTexto(strCantidad+" x "+nombreProducto+espaciosTicket+str(costototalProductoDosDecimales)+"\n")
                        
                        if longitudServiciosCorporales >=1:
                            for idd, cantidad in listaServiciosCorporales:
                                if idd != "":
                                    idServicio = int(idd)
                                    strCantidad = str(cantidad)
                                    consultaServicio = Servicios.objects.filter(id_servicio = idServicio)
                                    for datoServicio in consultaServicio:
                                        nombreServicio = datoServicio.nombre_servicio
                                        costoServicio = datoServicio.precio_venta

                                    floatCantidad = float(cantidad)
                                    costototalProducto = costoServicio * floatCantidad
                                    costototalProductoDosDecimales = round(costototalProducto, 2)
                                    costototalProductoDosDecimales = str(costototalProductoDosDecimales)

                                    costoTotalProductoDivididoEnElPunto = costototalProductoDosDecimales.split(".")
                                    longitudCostoTotal = len(str(costoTotalProductoDivididoEnElPunto[0]))
                                    longitudCostoTotal = int(longitudCostoTotal)

                                    
                                    caracteresProducto = len(nombreServicio)

                                    if longitudCostoTotal == 2:
                                        espacio = 38
                                    if longitudCostoTotal == 2:
                                        espacio = 37
                                    elif longitudCostoTotal == 3:
                                        espacio = 36
                                    elif longitudCostoTotal == 4:
                                        espacio = 35
                                    elif longitudCostoTotal == 5:
                                        espacio = 34
                                    elif longitudCostoTotal == 6:
                                        espacio = 33
                                    numeroEspacios = espacio - int(caracteresProducto)
                                    
                                    espaciosTicket = ""
                                    for x in range(numeroEspacios):
                                        espacioMini = " "
                                        espaciosTicket = espaciosTicket + espacioMini
                                    c.EscribirTexto(strCantidad+" x "+nombreServicio+espaciosTicket+str(costototalProductoDosDecimales)+"\n")

                        if longitudServiciosFaciales >=1:
                            for idd, cantidad in listaServiciosFaciales:
                                if idd != "":
                                    idServicio = int(idd)
                                    strCantidad = str(cantidad)
                                    consultaServicio = Servicios.objects.filter(id_servicio = idServicio)
                                    for datoServicio in consultaServicio:
                                        nombreServicio = datoServicio.nombre_servicio
                                        costoServicio = datoServicio.precio_venta

                                    floatCantidad = float(cantidad)
                                    costototalProducto = costoServicio * floatCantidad
                                    costototalProductoDosDecimales = round(costototalProducto, 2)
                                    costototalProductoDosDecimales = str(costototalProductoDosDecimales)

                                    costoTotalProductoDivididoEnElPunto = costototalProductoDosDecimales.split(".")
                                    longitudCostoTotal = len(str(costoTotalProductoDivididoEnElPunto[0]))
                                    longitudCostoTotal = int(longitudCostoTotal)

                                    
                                    caracteresProducto = len(nombreServicio)

                                    if longitudCostoTotal == 2:
                                        espacio = 38
                                    if longitudCostoTotal == 2:
                                        espacio = 37
                                    elif longitudCostoTotal == 3:
                                        espacio = 36
                                    elif longitudCostoTotal == 4:
                                        espacio = 35
                                    elif longitudCostoTotal == 5:
                                        espacio = 34
                                    elif longitudCostoTotal == 6:
                                        espacio = 33
                                    numeroEspacios = espacio - int(caracteresProducto)
                                    
                                    espaciosTicket = ""
                                    for x in range(numeroEspacios):
                                        espacioMini = " "
                                        espaciosTicket = espaciosTicket + espacioMini
                                    c.EscribirTexto(strCantidad+" x "+nombreServicio+espaciosTicket+str(costototalProductoDosDecimales)+"\n")
                        
                        

                        c.EscribirTexto("\n")
                        c.EscribirTexto("\n")

                        if descuento == None:
                            c.EstablecerTamañoFuente(2, 2)
                            c.EstablecerAlineacion(Conector.ALINEACION_DERECHA)
                            c.EscribirTexto("TOTAL:  $"+str(costoTotalAPagar)+"\n")
                            costoTotalPagarCredito = costoTotalAPagar
                            c.EscribirTexto("ABONADO: $"+str(cantidadPago2)+"\n")
                            c.EscribirTexto("RESTANTE: $"+str(restante)+"\n")
                        else:
                            intDescuento = int(descuento)
                            consultaDescuentos = Descuentos.objects.filter(porcentaje = intDescuento)
                            for datoDescuento in consultaDescuentos:
                                nombreDescuento = datoDescuento.nombre_descuento
                                porcentajeDescuento = datoDescuento.porcentaje

                            porcentajePagado = 100 - porcentajeDescuento #85
                            totalSinDescuento1 = 100 * costoTotalAPagar
                            totalSinDescuento2 = totalSinDescuento1/porcentajePagado
                            totalSinDescuento2 = round(totalSinDescuento2)

                            primerMulti = porcentajeDescuento * float(totalSinDescuento2)
                            primerDivision = primerMulti/100
                            resultadoDescuento = round(primerDivision)
                            
                            costoTotalAPagarConDescuento = totalSinDescuento2 - resultadoDescuento

                            c.EstablecerTamañoFuente(1, 1)
                            c.EstablecerAlineacion(Conector.ALINEACION_DERECHA)
                            c.EscribirTexto("Subtotal:  $"+str(totalSinDescuento2)+"\n")
                            c.EscribirTexto("Descuento:  $"+str(resultadoDescuento)+"\n")
                            c.EstablecerTamañoFuente(2, 2)
                            c.EscribirTexto("TOTAL:  $"+str(costoTotalAPagarConDescuento)+"\n")
                            c.EstablecerTamañoFuente(1, 1)
                            c.EscribirTexto("Descuento aplicado: -"+str(porcentajeDescuento)+"%- "+str(nombreDescuento)+"\n")
                            c.EscribirTexto("ABONADO: $"+str(cantidadPago2)+"\n")
                            c.EscribirTexto("RESTANTE: $"+str(restante)+"\n")
                            costoTotalPagarCredito = costoTotalAPagarConDescuento

                        c.EscribirTexto("\n")
                        c.EstablecerEnfatizado(True)
                        c.EstablecerTamañoFuente(1, 1)
                        c.EscribirTexto("========== IVA incluido en el precio ==========\n")
                        c.EscribirTexto("\n")
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        c.TextoSegunPaginaDeCodigos(2, "cp850", "INFORMACION DE PAGO.\n")
                        c.EstablecerEnfatizado(False)
                        c.EscribirTexto("\n")
                        c.EstablecerEnfatizado(True)
                        c.EscribirTexto("Pago en con Transferencia.\n")
                        c.EstablecerEnfatizado(False)
                        c.EscribirTexto("Transferencia.\n")
                        c.EscribirTexto("Clave de rastreo: "+str(clave_transferencia)+".\n")
                        c.EscribirTexto("Segundo pago recibido.\n")
                        c.EstablecerEnfatizado(False)
                        if restante == 0:
                            c.EscribirTexto("PAGO LIQUIDADO\n")
                        else:
                            restantePorPagar = float(restante)/2
                            restantePorPagar = round(restantePorPagar,2)
                            c.EscribirTexto("Abonos restantes de: $"+str(restantePorPagar)+" MXN.\n")
                            ahora = datetime.now()
                            fechaSegundoPago = ahora + timedelta(days=15)
                            fechaSegundoPago = fechaSegundoPago.strftime('%Y-%m-%d')
                            c.EscribirTexto("Tercer pago el día: "+str(fechaSegundoPago)+".\n")
                        
                    
                        c.EscribirTexto("\n")
                        c.EstablecerEnfatizado(True)
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        c.TextoSegunPaginaDeCodigos(2, "cp850", "INFORMACIÓN DE CLIENTE.\n")

                        if nombreClienteTicket == "Momentaneo":
                            c.EstablecerEnfatizado(False)
                            c.EscribirTexto("Cliente momentaneo.\n")
                        else:
                            c.EstablecerEnfatizado(False)
                            c.EscribirTexto("ID:"+str(idCienteTicket)+" - "+nombreClienteTicket+".\n")
                        c.EscribirTexto("=========== Gracias por su compra!! ===========\n")
                        c.EstablecerTamañoFuente(2, 2)
                        c.EstablecerEnfatizado(True)
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        if contadorTickets == 1:
                            c.EscribirTexto("\n")
                            c.EscribirTexto("COPIA TIENDA.\n")
                            c.EscribirTexto("\n")
                            c.EstablecerTamañoFuente(1, 1)
                            c.EscribirTexto("________________________________________________\n")
                            c.EscribirTexto("Firma de cliente.\n")
                        else:
                            c.EscribirTexto("\n")
                            c.EscribirTexto("COPIA CLIENTE.\n")
                        c.EscribirTexto("\n")
                        c.EstablecerTamañoFuente(1, 1)
                        

                        c.Feed(1)
                        c.Corte(1)
                        #c.abrirCajon()
                        c.Pulso(48, 60, 120)
                        print("Imprimiendo...")
                        # Recuerda cambiar por el nombre de tu impresora
                        respuesta = c.imprimirEn("POS80 Printer")
                        if respuesta == True:
                            print("Impresión correcta")
                        else:
                            print(f"Error. El mensaje es: {respuesta}")

                

           
                    
                 
                            
                            
                            
            if actualizarEstadoCreditoPago2 and registrarPago2:
                request.session['pago2Agregado'] = "Pago de crédito Guardado correctamente!"
                return redirect('/verCreditosClientes/')
            else:
                request.session['pago2NoAgregado'] = "Error en la base de datos, intentelo más tarde.."
                return redirect('/verCreditosClientes/')
            
             
        


    else:
        return render(request,"1 Login/login.html")
    
    
    


def guardarPago3(request):
    if "idSesion" in request.session:
        # Variables de sesión
        idEmpleado = request.session['idSesion']
        
        if request.method == "POST":
            
            

            idCreditoAPagar = request.POST['idCredito']
            idPagoCredito = request.POST['idPagoCredito']
            cantidadPago3 = request.POST['cantidadPago3']

            fechaPago1 = datetime.now()
            horaVenta= datetime.now().time()
            
             
            formaPago = request.POST['tipoPago'] #Efectivo,  tarjeta o transferencia
            
            datosCredito = Creditos.objects.filter(id_credito = idCreditoAPagar)
            for dato in datosCredito:
                montoRestante = dato.monto_restante
                sucursal = dato.sucursal_id
                montoPagado = dato.monto_pagado
                idVentaCredito = dato.venta_id
                
            floatCantidadPago3 = float(cantidadPago3)
            floatRestante = float(montoRestante)
                
                
           
                
            if floatCantidadPago3 == floatRestante:
                restante = 0
                estado = "Finalizado"
           
                
            
            else:
                restante = montoRestante - float(cantidadPago3)
                estado = "Pendiente"
                
            actualMontoPagado = float(montoPagado) + float(cantidadPago3)
                 
                    
            esConEfectivo = False
            esConTarjeta = False
            esConTransferencia = False

            if formaPago == "Efectivo":
                esConEfectivo = True
            elif formaPago == "Tarjeta":
                esConTarjeta = True
                tipo_tarjeta = request.POST['tipoTarjeta']    
                referencia_tarjeta = request.POST['referenciaTarjeta'] 
                        
            elif formaPago == "Transferencia":
                esConTransferencia = True
                clave_transferencia = request.POST['claveRastreoTransferencia'] 

                    


            if esConEfectivo:
                        
                registrarPago3 = PagosCreditos.objects.filter(id_historialCredito = idPagoCredito).update(fecha_pago3 = fechaPago1,tipo_pago3 ="Efectivo",monto_pago3 =cantidadPago3) 
                
                if registrarPago3:
                    
                    
                    actualizarEstadoCredito = Creditos.objects.filter(id_credito = idCreditoAPagar).update(monto_pagado = actualMontoPagado,monto_restante =restante,estatus =estado) 
                    if actualizarEstadoCredito:
                         
                        tipoMovimiento ="IN"
                        montoMovimiento = float(cantidadPago3)
                        descripcionMovimiento ="Movimiento por abono de crédito " + str(idCreditoAPagar) 
                        fechaMovimiento = datetime.today().strftime('%Y-%m-%d')
                        horaMovimiento = datetime.now().time()
                        ingresarCantidadEfectivoAcaja =MovimientosCaja(fecha =fechaMovimiento,hora = horaMovimiento,tipo=tipoMovimiento,monto =montoMovimiento, descripcion=descripcionMovimiento,sucursal =  Sucursales.objects.get(id_sucursal = sucursal),
                                                                            realizado_por = Empleados.objects.get(id_empleado = idEmpleado))
                        ingresarCantidadEfectivoAcaja.save()

                         #IMPRESION DE TICKEEETSSSS

                        #Fecha
                        hoy = datetime.now()
                        hoyFormato = hoy.strftime('%Y/%m/%d')

                        #Consulta de venta
                        consultaVenta = Ventas.objects.filter(id_venta = idVentaCredito)
                        for datoVenta in consultaVenta:
                            empleadoVendedor = datoVenta.empleado_vendedor_id
                            sucursal = datoVenta.sucursal_id
                            cliente = datoVenta.cliente_id
                        #Empleado vendedor
                        consultaEmpleadoVendedor = Empleados.objects.filter(id_empleado = empleadoVendedor)
                        for datoVendedor in consultaEmpleadoVendedor:
                            nombreEmpleado = datoVendedor.nombres
                            apellidoPatEmpleado = datoVendedor.apellido_paterno

                        nombreCompletoEmpleadoVendedor = nombreEmpleado + " "+ apellidoPatEmpleado

                        #Datos sucurssal
                        consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursal)
                        for datoSucursal in consultaSucursal:
                            nombreSucursal = datoSucursal.nombre
                            telefonoSucursal = datoSucursal.telefono
                            direccionSucursal = datoSucursal.direccion

                        
                        
                        
                        #Hora bien
                        horaVenta = horaVenta.strftime("%H:%M:%S")

                        # Esto es para obtener las impresoras. No es obligatorio hacerlo siempre que se quiera imprimir
                        impresoras = Conector.ConectorV3.obtenerImpresoras()
                        print(f"Las impresoras son: {impresoras}")
                        
                        contadorTickets = 0
                        for x in range(2):
                            contadorTickets = contadorTickets + 1

                            
                            c = Conector.ConectorV3()
                            c.Iniciar()
                            c.Corte(1)
                            
                            c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                            # Recuerda que la imagen debe existir y debe ser legible para el plugin. Si no, comenta las líneas
                            c.CargarImagenLocalEImprimir("C:\\COSTABELLA\\sistemaCostabella\\static\\images\\anegragrande.png", 0, 216)
                            c.EscribirTexto("\n")
                            c.EstablecerTamañoFuente(1, 1)
                            c.EstablecerEnfatizado(True)
                            c.EscribirTexto("Sucursal: "+nombreSucursal+"\n")
                            c.EstablecerEnfatizado(False)
                            c.EscribirTexto("TEL: "+telefonoSucursal+"\n")
                            c.TextoSegunPaginaDeCodigos(2, "cp850", direccionSucursal+"\n")

                            c.EstablecerEnfatizado(True)
                            c.EscribirTexto("================================================\n")
                            c.EstablecerTamañoFuente(2, 2)
                            c.EscribirTexto("PAGO DE VENTA #"+str(idVentaCredito)+"\n")
                            c.EscribirTexto("CRÉDITO #"+str(idCreditoAPagar)+"\n")
                            c.EstablecerEnfatizado(False)
                            c.EstablecerAlineacion(Conector.ALINEACION_IZQUIERDA)
                            c.EstablecerTamañoFuente(1, 1)
                            c.EscribirTexto("\n")
                            c.EscribirTexto(" "+str(hoyFormato)+" - "+str(horaVenta)+" hrs.\n")
                            c.EscribirTexto("Atendida por: "+nombreCompletoEmpleadoVendedor+".\n")
                            c.EscribirTexto("\n")

                            #Listado de productos 
                            #Productos vendidos en ese credito

                            consultaVenta = Ventas.objects.filter(id_venta = idVentaCredito)
                            for datoVenta in consultaVenta:
                                codigosProductosVenta = datoVenta.ids_productos
                                cantidadesProductosVenta = datoVenta.cantidades_productos
                                idsServiciosCorporales = datoVenta.ids_servicios_corporales
                                cantidadServiciosCorporales = datoVenta.cantidades_servicios_corporales
                                idsServiciosFaciales = datoVenta.ids_servicios_faciales
                                cantidadServiciosFaciales = datoVenta.cantidades_servicios_faciales
                                descuento = datoVenta.descuento
                                costoTotalAPagar = datoVenta.monto_pagar
                                cliente = datoVenta.cliente_id

                            if cliente == None:
                                nombreClienteTicket = "Momentaneo"
                                idCienteTicket="Sin id"
                            else:
                                consultaCliente = Clientes.objects.filter(id_cliente = cliente)
                                for datoCliente in consultaCliente:
                                    idCienteTicket = datoCliente.id_cliente
                                    nombreCliente = datoCliente.nombre_cliente
                                    apellidoCliente = datoCliente.apellidoPaterno_cliente
                                nombreClienteTicket = nombreCliente + " "+apellidoCliente
                                
                                

                            listaCodigosProductos = codigosProductosVenta.split(",")
                            listaCantidadesProductos = cantidadesProductosVenta.split(",")
                            listaIdsServiciosCorporales = idsServiciosCorporales.split(",")
                            listaCantidadesServiciosCorporales = cantidadServiciosCorporales.split(",")
                            listaIdsServiciosFaciales = idsServiciosFaciales.split(",")
                            listaCantidadesServiciosFaciales = cantidadServiciosFaciales.split(",")
                            
                            longitudProductos = len(listaCodigosProductos)
                            longitudServiciosCorporales = len(listaIdsServiciosCorporales)
                            longitudServiciosFaciales = len(listaIdsServiciosFaciales)


                            listaProductos = zip(listaCodigosProductos,listaCantidadesProductos)
                            listaServiciosCorporales = zip(listaIdsServiciosCorporales, listaCantidadesServiciosCorporales)
                            listaServiciosFaciales = zip(listaIdsServiciosFaciales, listaCantidadesServiciosFaciales)

                            if longitudProductos >= 1:
                                for codigo, cantidad in listaProductos:
                                    if codigo != "":
                                        strCodigo = str(codigo)
                                        strCantidad = str(cantidad)
                                        consultaProductoVenta = ProductosVenta.objects.filter(codigo_producto = strCodigo)
                                        for datoProductoVenta in consultaProductoVenta:
                                            nombreProducto = datoProductoVenta.nombre_producto
                                            costoIndividualProducto = datoProductoVenta.costo_venta

                                        floatCantidad = float(cantidad)
                                        costototalProducto = costoIndividualProducto * floatCantidad
                                        costototalProductoDosDecimales = round(costototalProducto, 2)
                                        costototalProductoDosDecimales = str(costototalProductoDosDecimales)

                                        costoTotalProductoDivididoEnElPunto = costototalProductoDosDecimales.split(".")
                                        longitudCostoTotal = len(str(costoTotalProductoDivididoEnElPunto[0]))
                                        longitudCostoTotal = int(longitudCostoTotal)

                                        
                                        caracteresProducto = len(nombreProducto)

                                        if longitudCostoTotal == 2:
                                            espacio = 38
                                        if longitudCostoTotal == 2:
                                            espacio = 37
                                        elif longitudCostoTotal == 3:
                                            espacio = 36
                                        elif longitudCostoTotal == 4:
                                            espacio = 35
                                        elif longitudCostoTotal == 5:
                                            espacio = 34
                                        elif longitudCostoTotal == 6:
                                            espacio = 33
                                        numeroEspacios = espacio - int(caracteresProducto)
                                        
                                        espaciosTicket = ""
                                        for x in range(numeroEspacios):
                                            espacioMini = " "
                                            espaciosTicket = espaciosTicket + espacioMini
                                        c.EscribirTexto(strCantidad+" x "+nombreProducto+espaciosTicket+str(costototalProductoDosDecimales)+"\n")
                            
                            if longitudServiciosCorporales >=1:
                                for idd, cantidad in listaServiciosCorporales:
                                    if idd != "":
                                        idServicio = int(idd)
                                        strCantidad = str(cantidad)
                                        consultaServicio = Servicios.objects.filter(id_servicio = idServicio)
                                        for datoServicio in consultaServicio:
                                            nombreServicio = datoServicio.nombre_servicio
                                            costoServicio = datoServicio.precio_venta

                                        floatCantidad = float(cantidad)
                                        costototalProducto = costoServicio * floatCantidad
                                        costototalProductoDosDecimales = round(costototalProducto, 2)
                                        costototalProductoDosDecimales = str(costototalProductoDosDecimales)

                                        costoTotalProductoDivididoEnElPunto = costototalProductoDosDecimales.split(".")
                                        longitudCostoTotal = len(str(costoTotalProductoDivididoEnElPunto[0]))
                                        longitudCostoTotal = int(longitudCostoTotal)

                                        
                                        caracteresProducto = len(nombreServicio)

                                        if longitudCostoTotal == 2:
                                            espacio = 38
                                        if longitudCostoTotal == 2:
                                            espacio = 37
                                        elif longitudCostoTotal == 3:
                                            espacio = 36
                                        elif longitudCostoTotal == 4:
                                            espacio = 35
                                        elif longitudCostoTotal == 5:
                                            espacio = 34
                                        elif longitudCostoTotal == 6:
                                            espacio = 33
                                        numeroEspacios = espacio - int(caracteresProducto)
                                        
                                        espaciosTicket = ""
                                        for x in range(numeroEspacios):
                                            espacioMini = " "
                                            espaciosTicket = espaciosTicket + espacioMini
                                        c.EscribirTexto(strCantidad+" x "+nombreServicio+espaciosTicket+str(costototalProductoDosDecimales)+"\n")

                            if longitudServiciosFaciales >=1:
                                for idd, cantidad in listaServiciosFaciales:
                                    if idd != "":
                                        idServicio = int(idd)
                                        strCantidad = str(cantidad)
                                        consultaServicio = Servicios.objects.filter(id_servicio = idServicio)
                                        for datoServicio in consultaServicio:
                                            nombreServicio = datoServicio.nombre_servicio
                                            costoServicio = datoServicio.precio_venta

                                        floatCantidad = float(cantidad)
                                        costototalProducto = costoServicio * floatCantidad
                                        costototalProductoDosDecimales = round(costototalProducto, 2)
                                        costototalProductoDosDecimales = str(costototalProductoDosDecimales)

                                        costoTotalProductoDivididoEnElPunto = costototalProductoDosDecimales.split(".")
                                        longitudCostoTotal = len(str(costoTotalProductoDivididoEnElPunto[0]))
                                        longitudCostoTotal = int(longitudCostoTotal)

                                        
                                        caracteresProducto = len(nombreServicio)

                                        if longitudCostoTotal == 2:
                                            espacio = 38
                                        if longitudCostoTotal == 2:
                                            espacio = 37
                                        elif longitudCostoTotal == 3:
                                            espacio = 36
                                        elif longitudCostoTotal == 4:
                                            espacio = 35
                                        elif longitudCostoTotal == 5:
                                            espacio = 34
                                        elif longitudCostoTotal == 6:
                                            espacio = 33
                                        numeroEspacios = espacio - int(caracteresProducto)
                                        
                                        espaciosTicket = ""
                                        for x in range(numeroEspacios):
                                            espacioMini = " "
                                            espaciosTicket = espaciosTicket + espacioMini
                                        c.EscribirTexto(strCantidad+" x "+nombreServicio+espaciosTicket+str(costototalProductoDosDecimales)+"\n")
                            
                            

                            c.EscribirTexto("\n")
                            c.EscribirTexto("\n")

                            if descuento == None:
                                c.EstablecerTamañoFuente(2, 2)
                                c.EstablecerAlineacion(Conector.ALINEACION_DERECHA)
                                c.EscribirTexto("TOTAL:  $"+str(costoTotalAPagar)+"\n")
                                costoTotalPagarCredito = costoTotalAPagar
                                c.EscribirTexto("ABONADO: $"+str(cantidadPago3)+"\n")
                                c.EscribirTexto("RESTANTE: $"+str(restante)+"\n")
                            else:
                                intDescuento = int(descuento)
                                consultaDescuentos = Descuentos.objects.filter(porcentaje = intDescuento)
                                for datoDescuento in consultaDescuentos:
                                    nombreDescuento = datoDescuento.nombre_descuento
                                    porcentajeDescuento = datoDescuento.porcentaje

                                porcentajePagado = 100 - porcentajeDescuento #85
                                totalSinDescuento1 = 100 * costoTotalAPagar
                                totalSinDescuento2 = totalSinDescuento1/porcentajePagado
                                totalSinDescuento2 = round(totalSinDescuento2)

                                primerMulti = porcentajeDescuento * float(totalSinDescuento2)
                                primerDivision = primerMulti/100
                                resultadoDescuento = round(primerDivision)
                                
                                costoTotalAPagarConDescuento = totalSinDescuento2 - resultadoDescuento

                                c.EstablecerTamañoFuente(1, 1)
                                c.EstablecerAlineacion(Conector.ALINEACION_DERECHA)
                                c.EscribirTexto("Subtotal:  $"+str(totalSinDescuento2)+"\n")
                                c.EscribirTexto("Descuento:  $"+str(resultadoDescuento)+"\n")
                                c.EstablecerTamañoFuente(2, 2)
                                c.EscribirTexto("TOTAL:  $"+str(costoTotalAPagarConDescuento)+"\n")
                                c.EstablecerTamañoFuente(1, 1)
                                c.EscribirTexto("Descuento aplicado: -"+str(porcentajeDescuento)+"%- "+str(nombreDescuento)+"\n")
                                c.EscribirTexto("ABONADO: $"+str(cantidadPago3)+"\n")
                                c.EscribirTexto("RESTANTE: $"+str(restante)+"\n")
                                costoTotalPagarCredito = costoTotalAPagarConDescuento

                            c.EscribirTexto("\n")
                            c.EstablecerEnfatizado(True)
                            c.EstablecerTamañoFuente(1, 1)
                            c.EscribirTexto("========== IVA incluido en el precio ==========\n")
                            c.EscribirTexto("\n")
                            c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                            c.TextoSegunPaginaDeCodigos(2, "cp850", "INFORMACION DE PAGO.\n")
                            c.EstablecerEnfatizado(False)
                            c.EscribirTexto("\n")
                            c.EstablecerEnfatizado(True)
                            c.EscribirTexto("Pago en efectivo.\n")
                            c.EscribirTexto("Pago a crédito 4 quincenas.\n")
                            c.EscribirTexto("Tercer pago recibido.\n")
                            c.EstablecerEnfatizado(False)
                            if restante == 0:
                                c.EscribirTexto("PAGO LIQUIDADO\n")
                            else:
                                restantePorPagar = float(restante)
                                restantePorPagar = round(restantePorPagar,2)
                                c.EscribirTexto("Abonos restantes de: $"+str(restantePorPagar)+" MXN.\n")
                                ahora = datetime.now()
                                fechaSegundoPago = ahora + timedelta(days=15)
                                fechaSegundoPago = fechaSegundoPago.strftime('%Y-%m-%d')
                                c.EscribirTexto("Cuarto pago el día: "+str(fechaSegundoPago)+".\n")
                            
                        
                            c.EscribirTexto("\n")
                            c.EstablecerEnfatizado(True)
                            c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                            c.TextoSegunPaginaDeCodigos(2, "cp850", "INFORMACIÓN DE CLIENTE.\n")

                            if nombreClienteTicket == "Momentaneo":
                                c.EstablecerEnfatizado(False)
                                c.EscribirTexto("Cliente momentaneo.\n")
                            else:
                                c.EstablecerEnfatizado(False)
                                c.EscribirTexto("ID:"+str(idCienteTicket)+" - "+nombreClienteTicket+".\n")
                            c.EscribirTexto("=========== Gracias por su compra!! ===========\n")
                            c.EstablecerTamañoFuente(2, 2)
                            c.EstablecerEnfatizado(True)
                            c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                            if contadorTickets == 1:
                                c.EscribirTexto("\n")
                                c.EscribirTexto("COPIA TIENDA.\n")
                                c.EscribirTexto("\n")
                                c.EstablecerTamañoFuente(1, 1)
                                c.EscribirTexto("________________________________________________\n")
                                c.EscribirTexto("Firma de cliente.\n")
                            else:
                                c.EscribirTexto("\n")
                                c.EscribirTexto("COPIA CLIENTE.\n")
                            c.EscribirTexto("\n")
                            c.EstablecerTamañoFuente(1, 1)
                            

                            c.Feed(1)
                            c.Corte(1)
                            #c.abrirCajon()
                            c.Pulso(48, 60, 120)
                            print("Imprimiendo...")
                            # Recuerda cambiar por el nombre de tu impresora
                            respuesta = c.imprimirEn("POS80 Printer")
                            if respuesta == True:
                                print("Impresión correcta")
                            else:
                                print(f"Error. El mensaje es: {respuesta}")


            if esConTarjeta:
                    
                        
                registrarPago3 = PagosCreditos.objects.filter(id_historialCredito = idPagoCredito).update(fecha_pago3 = fechaPago1,tipo_pago3 ="Tarjeta",tipo_tarjeta3=tipo_tarjeta,referencia_pago_tarjeta3=referencia_tarjeta,monto_pago3 =cantidadPago3) 
                
                if registrarPago3:
                    
                    
                    actualizarEstadoCredito = Creditos.objects.filter(id_credito = idCreditoAPagar).update(monto_pagado = actualMontoPagado,monto_restante =restante,estatus =estado) 

                    #IMPRESION DE TICKEEETSSSS

                    #Fecha
                    hoy = datetime.now()
                    hoyFormato = hoy.strftime('%Y/%m/%d')

                    #Consulta de venta
                    consultaVenta = Ventas.objects.filter(id_venta = idVentaCredito)
                    for datoVenta in consultaVenta:
                        empleadoVendedor = datoVenta.empleado_vendedor_id
                        sucursal = datoVenta.sucursal_id
                        cliente = datoVenta.cliente_id
                    #Empleado vendedor
                    consultaEmpleadoVendedor = Empleados.objects.filter(id_empleado = empleadoVendedor)
                    for datoVendedor in consultaEmpleadoVendedor:
                        nombreEmpleado = datoVendedor.nombres
                        apellidoPatEmpleado = datoVendedor.apellido_paterno

                    nombreCompletoEmpleadoVendedor = nombreEmpleado + " "+ apellidoPatEmpleado

                    #Datos sucurssal
                    consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursal)
                    for datoSucursal in consultaSucursal:
                        nombreSucursal = datoSucursal.nombre
                        telefonoSucursal = datoSucursal.telefono
                        direccionSucursal = datoSucursal.direccion

                    
                    
                    
                    #Hora bien
                    horaVenta = horaVenta.strftime("%H:%M:%S")

                    # Esto es para obtener las impresoras. No es obligatorio hacerlo siempre que se quiera imprimir
                    impresoras = Conector.ConectorV3.obtenerImpresoras()
                    print(f"Las impresoras son: {impresoras}")
                    
                    contadorTickets = 0
                    for x in range(2):
                        contadorTickets = contadorTickets + 1

                        
                        c = Conector.ConectorV3()
                        c.Iniciar()
                        c.Corte(1)
                        
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        # Recuerda que la imagen debe existir y debe ser legible para el plugin. Si no, comenta las líneas
                        c.CargarImagenLocalEImprimir("C:\\COSTABELLA\\sistemaCostabella\\static\\images\\anegragrande.png", 0, 216)
                        c.EscribirTexto("\n")
                        c.EstablecerTamañoFuente(1, 1)
                        c.EstablecerEnfatizado(True)
                        c.EscribirTexto("Sucursal: "+nombreSucursal+"\n")
                        c.EstablecerEnfatizado(False)
                        c.EscribirTexto("TEL: "+telefonoSucursal+"\n")
                        c.TextoSegunPaginaDeCodigos(2, "cp850", direccionSucursal+"\n")

                        c.EstablecerEnfatizado(True)
                        c.EscribirTexto("================================================\n")
                        c.EstablecerTamañoFuente(2, 2)
                        c.EscribirTexto("PAGO DE VENTA #"+str(idVentaCredito)+"\n")
                        c.EscribirTexto("CRÉDITO #"+str(idCreditoAPagar)+"\n")
                        c.EstablecerEnfatizado(False)
                        c.EstablecerAlineacion(Conector.ALINEACION_IZQUIERDA)
                        c.EstablecerTamañoFuente(1, 1)
                        c.EscribirTexto("\n")
                        c.EscribirTexto(" "+str(hoyFormato)+" - "+str(horaVenta)+" hrs.\n")
                        c.EscribirTexto("Atendida por: "+nombreCompletoEmpleadoVendedor+".\n")
                        c.EscribirTexto("\n")

                        #Listado de productos 
                        #Productos vendidos en ese credito

                        consultaVenta = Ventas.objects.filter(id_venta = idVentaCredito)
                        for datoVenta in consultaVenta:
                            codigosProductosVenta = datoVenta.ids_productos
                            cantidadesProductosVenta = datoVenta.cantidades_productos
                            idsServiciosCorporales = datoVenta.ids_servicios_corporales
                            cantidadServiciosCorporales = datoVenta.cantidades_servicios_corporales
                            idsServiciosFaciales = datoVenta.ids_servicios_faciales
                            cantidadServiciosFaciales = datoVenta.cantidades_servicios_faciales
                            descuento = datoVenta.descuento
                            costoTotalAPagar = datoVenta.monto_pagar
                            cliente = datoVenta.cliente_id

                        if cliente == None:
                            nombreClienteTicket = "Momentaneo"
                            idCienteTicket="Sin id"
                        else:
                            consultaCliente = Clientes.objects.filter(id_cliente = cliente)
                            for datoCliente in consultaCliente:
                                idCienteTicket = datoCliente.id_cliente
                                nombreCliente = datoCliente.nombre_cliente
                                apellidoCliente = datoCliente.apellidoPaterno_cliente
                            nombreClienteTicket = nombreCliente + " "+apellidoCliente
                            
                            

                        listaCodigosProductos = codigosProductosVenta.split(",")
                        listaCantidadesProductos = cantidadesProductosVenta.split(",")
                        listaIdsServiciosCorporales = idsServiciosCorporales.split(",")
                        listaCantidadesServiciosCorporales = cantidadServiciosCorporales.split(",")
                        listaIdsServiciosFaciales = idsServiciosFaciales.split(",")
                        listaCantidadesServiciosFaciales = cantidadServiciosFaciales.split(",")
                        
                        longitudProductos = len(listaCodigosProductos)
                        longitudServiciosCorporales = len(listaIdsServiciosCorporales)
                        longitudServiciosFaciales = len(listaIdsServiciosFaciales)


                        listaProductos = zip(listaCodigosProductos,listaCantidadesProductos)
                        listaServiciosCorporales = zip(listaIdsServiciosCorporales, listaCantidadesServiciosCorporales)
                        listaServiciosFaciales = zip(listaIdsServiciosFaciales, listaCantidadesServiciosFaciales)

                        if longitudProductos >= 1:
                            for codigo, cantidad in listaProductos:
                                if codigo != "":
                                    strCodigo = str(codigo)
                                    strCantidad = str(cantidad)
                                    consultaProductoVenta = ProductosVenta.objects.filter(codigo_producto = strCodigo)
                                    for datoProductoVenta in consultaProductoVenta:
                                        nombreProducto = datoProductoVenta.nombre_producto
                                        costoIndividualProducto = datoProductoVenta.costo_venta

                                    floatCantidad = float(cantidad)
                                    costototalProducto = costoIndividualProducto * floatCantidad
                                    costototalProductoDosDecimales = round(costototalProducto, 2)
                                    costototalProductoDosDecimales = str(costototalProductoDosDecimales)

                                    costoTotalProductoDivididoEnElPunto = costototalProductoDosDecimales.split(".")
                                    longitudCostoTotal = len(str(costoTotalProductoDivididoEnElPunto[0]))
                                    longitudCostoTotal = int(longitudCostoTotal)

                                    
                                    caracteresProducto = len(nombreProducto)

                                    if longitudCostoTotal == 2:
                                        espacio = 38
                                    if longitudCostoTotal == 2:
                                        espacio = 37
                                    elif longitudCostoTotal == 3:
                                        espacio = 36
                                    elif longitudCostoTotal == 4:
                                        espacio = 35
                                    elif longitudCostoTotal == 5:
                                        espacio = 34
                                    elif longitudCostoTotal == 6:
                                        espacio = 33
                                    numeroEspacios = espacio - int(caracteresProducto)
                                    
                                    espaciosTicket = ""
                                    for x in range(numeroEspacios):
                                        espacioMini = " "
                                        espaciosTicket = espaciosTicket + espacioMini
                                    c.EscribirTexto(strCantidad+" x "+nombreProducto+espaciosTicket+str(costototalProductoDosDecimales)+"\n")
                        
                        if longitudServiciosCorporales >=1:
                            for idd, cantidad in listaServiciosCorporales:
                                if idd != "":
                                    idServicio = int(idd)
                                    strCantidad = str(cantidad)
                                    consultaServicio = Servicios.objects.filter(id_servicio = idServicio)
                                    for datoServicio in consultaServicio:
                                        nombreServicio = datoServicio.nombre_servicio
                                        costoServicio = datoServicio.precio_venta

                                    floatCantidad = float(cantidad)
                                    costototalProducto = costoServicio * floatCantidad
                                    costototalProductoDosDecimales = round(costototalProducto, 2)
                                    costototalProductoDosDecimales = str(costototalProductoDosDecimales)

                                    costoTotalProductoDivididoEnElPunto = costototalProductoDosDecimales.split(".")
                                    longitudCostoTotal = len(str(costoTotalProductoDivididoEnElPunto[0]))
                                    longitudCostoTotal = int(longitudCostoTotal)

                                    
                                    caracteresProducto = len(nombreServicio)

                                    if longitudCostoTotal == 2:
                                        espacio = 38
                                    if longitudCostoTotal == 2:
                                        espacio = 37
                                    elif longitudCostoTotal == 3:
                                        espacio = 36
                                    elif longitudCostoTotal == 4:
                                        espacio = 35
                                    elif longitudCostoTotal == 5:
                                        espacio = 34
                                    elif longitudCostoTotal == 6:
                                        espacio = 33
                                    numeroEspacios = espacio - int(caracteresProducto)
                                    
                                    espaciosTicket = ""
                                    for x in range(numeroEspacios):
                                        espacioMini = " "
                                        espaciosTicket = espaciosTicket + espacioMini
                                    c.EscribirTexto(strCantidad+" x "+nombreServicio+espaciosTicket+str(costototalProductoDosDecimales)+"\n")

                        if longitudServiciosFaciales >=1:
                            for idd, cantidad in listaServiciosFaciales:
                                if idd != "":
                                    idServicio = int(idd)
                                    strCantidad = str(cantidad)
                                    consultaServicio = Servicios.objects.filter(id_servicio = idServicio)
                                    for datoServicio in consultaServicio:
                                        nombreServicio = datoServicio.nombre_servicio
                                        costoServicio = datoServicio.precio_venta

                                    floatCantidad = float(cantidad)
                                    costototalProducto = costoServicio * floatCantidad
                                    costototalProductoDosDecimales = round(costototalProducto, 2)
                                    costototalProductoDosDecimales = str(costototalProductoDosDecimales)

                                    costoTotalProductoDivididoEnElPunto = costototalProductoDosDecimales.split(".")
                                    longitudCostoTotal = len(str(costoTotalProductoDivididoEnElPunto[0]))
                                    longitudCostoTotal = int(longitudCostoTotal)

                                    
                                    caracteresProducto = len(nombreServicio)

                                    if longitudCostoTotal == 2:
                                        espacio = 38
                                    if longitudCostoTotal == 2:
                                        espacio = 37
                                    elif longitudCostoTotal == 3:
                                        espacio = 36
                                    elif longitudCostoTotal == 4:
                                        espacio = 35
                                    elif longitudCostoTotal == 5:
                                        espacio = 34
                                    elif longitudCostoTotal == 6:
                                        espacio = 33
                                    numeroEspacios = espacio - int(caracteresProducto)
                                    
                                    espaciosTicket = ""
                                    for x in range(numeroEspacios):
                                        espacioMini = " "
                                        espaciosTicket = espaciosTicket + espacioMini
                                    c.EscribirTexto(strCantidad+" x "+nombreServicio+espaciosTicket+str(costototalProductoDosDecimales)+"\n")
                        
                        

                        c.EscribirTexto("\n")
                        c.EscribirTexto("\n")

                        if descuento == None:
                            c.EstablecerTamañoFuente(2, 2)
                            c.EstablecerAlineacion(Conector.ALINEACION_DERECHA)
                            c.EscribirTexto("TOTAL:  $"+str(costoTotalAPagar)+"\n")
                            costoTotalPagarCredito = costoTotalAPagar
                            c.EscribirTexto("ABONADO: $"+str(cantidadPago3)+"\n")
                            c.EscribirTexto("RESTANTE: $"+str(restante)+"\n")
                        else:
                            intDescuento = int(descuento)
                            consultaDescuentos = Descuentos.objects.filter(porcentaje = intDescuento)
                            for datoDescuento in consultaDescuentos:
                                nombreDescuento = datoDescuento.nombre_descuento
                                porcentajeDescuento = datoDescuento.porcentaje

                            porcentajePagado = 100 - porcentajeDescuento #85
                            totalSinDescuento1 = 100 * costoTotalAPagar
                            totalSinDescuento2 = totalSinDescuento1/porcentajePagado
                            totalSinDescuento2 = round(totalSinDescuento2)

                            primerMulti = porcentajeDescuento * float(totalSinDescuento2)
                            primerDivision = primerMulti/100
                            resultadoDescuento = round(primerDivision)
                            
                            costoTotalAPagarConDescuento = totalSinDescuento2 - resultadoDescuento

                            c.EstablecerTamañoFuente(1, 1)
                            c.EstablecerAlineacion(Conector.ALINEACION_DERECHA)
                            c.EscribirTexto("Subtotal:  $"+str(totalSinDescuento2)+"\n")
                            c.EscribirTexto("Descuento:  $"+str(resultadoDescuento)+"\n")
                            c.EstablecerTamañoFuente(2, 2)
                            c.EscribirTexto("TOTAL:  $"+str(costoTotalAPagarConDescuento)+"\n")
                            c.EstablecerTamañoFuente(1, 1)
                            c.EscribirTexto("Descuento aplicado: -"+str(porcentajeDescuento)+"%- "+str(nombreDescuento)+"\n")
                            c.EscribirTexto("ABONADO: $"+str(cantidadPago3)+"\n")
                            c.EscribirTexto("RESTANTE: $"+str(restante)+"\n")
                            costoTotalPagarCredito = costoTotalAPagarConDescuento

                        c.EscribirTexto("\n")
                        c.EstablecerEnfatizado(True)
                        c.EstablecerTamañoFuente(1, 1)
                        c.EscribirTexto("========== IVA incluido en el precio ==========\n")
                        c.EscribirTexto("\n")
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        c.TextoSegunPaginaDeCodigos(2, "cp850", "INFORMACION DE PAGO.\n")
                        c.EstablecerEnfatizado(False)
                        c.EscribirTexto("\n")
                        c.EstablecerEnfatizado(True)
                        c.EscribirTexto("Pago en con tarjeta.\n")
                        c.EstablecerEnfatizado(False)
                        c.EscribirTexto("Pago con "+str(tipo_tarjeta)+".\n")
                        c.EscribirTexto("Referencia: "+referencia_tarjeta+".\n")
                        c.EscribirTexto("Tercer pago recibido.\n")
                        c.EstablecerEnfatizado(False)
                        if restante == 0:
                            c.EscribirTexto("PAGO LIQUIDADO\n")
                        else:
                            restantePorPagar = float(restante)/2
                            restantePorPagar = round(restantePorPagar,2)
                            c.EscribirTexto("Abonos restantes de: $"+str(restantePorPagar)+" MXN.\n")
                            ahora = datetime.now()
                            fechaSegundoPago = ahora + timedelta(days=15)
                            fechaSegundoPago = fechaSegundoPago.strftime('%Y-%m-%d')
                            c.EscribirTexto("Cuarto pago el día: "+str(fechaSegundoPago)+".\n")
                        
                    
                        c.EscribirTexto("\n")
                        c.EstablecerEnfatizado(True)
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        c.TextoSegunPaginaDeCodigos(2, "cp850", "INFORMACIÓN DE CLIENTE.\n")

                        if nombreClienteTicket == "Momentaneo":
                            c.EstablecerEnfatizado(False)
                            c.EscribirTexto("Cliente momentaneo.\n")
                        else:
                            c.EstablecerEnfatizado(False)
                            c.EscribirTexto("ID:"+str(idCienteTicket)+" - "+nombreClienteTicket+".\n")
                        c.EscribirTexto("=========== Gracias por su compra!! ===========\n")
                        c.EstablecerTamañoFuente(2, 2)
                        c.EstablecerEnfatizado(True)
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        if contadorTickets == 1:
                            c.EscribirTexto("\n")
                            c.EscribirTexto("COPIA TIENDA.\n")
                            c.EscribirTexto("\n")
                            c.EstablecerTamañoFuente(1, 1)
                            c.EscribirTexto("________________________________________________\n")
                            c.EscribirTexto("Firma de cliente.\n")
                        else:
                            c.EscribirTexto("\n")
                            c.EscribirTexto("COPIA CLIENTE.\n")
                        c.EscribirTexto("\n")
                        c.EstablecerTamañoFuente(1, 1)
                        

                        c.Feed(1)
                        c.Corte(1)
                        #c.abrirCajon()
                        c.Pulso(48, 60, 120)
                        print("Imprimiendo...")
                        # Recuerda cambiar por el nombre de tu impresora
                        respuesta = c.imprimirEn("POS80 Printer")
                        if respuesta == True:
                            print("Impresión correcta")
                        else:
                            print(f"Error. El mensaje es: {respuesta}")
                    

            if esConTransferencia:
            
                registrarPago3 = PagosCreditos.objects.filter(id_historialCredito = idPagoCredito).update(fecha_pago3 = fechaPago1,tipo_pago3 ="Transferencia",clave_rastreo_pago_transferencia3=clave_transferencia,monto_pago3 =cantidadPago3) 
                
                if registrarPago3:
                    
                    
                    actualizarEstadoCredito = Creditos.objects.filter(id_credito = idCreditoAPagar).update(monto_pagado = actualMontoPagado,monto_restante =restante,estatus =estado) 
                    
                    #Fecha
                    hoy = datetime.now()
                    hoyFormato = hoy.strftime('%Y/%m/%d')

                    #Consulta de venta
                    consultaVenta = Ventas.objects.filter(id_venta = idVentaCredito)
                    for datoVenta in consultaVenta:
                        empleadoVendedor = datoVenta.empleado_vendedor_id
                        sucursal = datoVenta.sucursal_id
                        cliente = datoVenta.cliente_id
                    #Empleado vendedor
                    consultaEmpleadoVendedor = Empleados.objects.filter(id_empleado = empleadoVendedor)
                    for datoVendedor in consultaEmpleadoVendedor:
                        nombreEmpleado = datoVendedor.nombres
                        apellidoPatEmpleado = datoVendedor.apellido_paterno

                    nombreCompletoEmpleadoVendedor = nombreEmpleado + " "+ apellidoPatEmpleado

                    #Datos sucurssal
                    consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursal)
                    for datoSucursal in consultaSucursal:
                        nombreSucursal = datoSucursal.nombre
                        telefonoSucursal = datoSucursal.telefono
                        direccionSucursal = datoSucursal.direccion

                    
                    
                    
                    #Hora bien
                    horaVenta = horaVenta.strftime("%H:%M:%S")

                    # Esto es para obtener las impresoras. No es obligatorio hacerlo siempre que se quiera imprimir
                    impresoras = Conector.ConectorV3.obtenerImpresoras()
                    print(f"Las impresoras son: {impresoras}")
                    
                    contadorTickets = 0
                    for x in range(2):
                        contadorTickets = contadorTickets + 1

                        
                        c = Conector.ConectorV3()
                        c.Iniciar()
                        c.Corte(1)
                        
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        # Recuerda que la imagen debe existir y debe ser legible para el plugin. Si no, comenta las líneas
                        c.CargarImagenLocalEImprimir("C:\\COSTABELLA\\sistemaCostabella\\static\\images\\anegragrande.png", 0, 216)
                        c.EscribirTexto("\n")
                        c.EstablecerTamañoFuente(1, 1)
                        c.EstablecerEnfatizado(True)
                        c.EscribirTexto("Sucursal: "+nombreSucursal+"\n")
                        c.EstablecerEnfatizado(False)
                        c.EscribirTexto("TEL: "+telefonoSucursal+"\n")
                        c.TextoSegunPaginaDeCodigos(2, "cp850", direccionSucursal+"\n")

                        c.EstablecerEnfatizado(True)
                        c.EscribirTexto("================================================\n")
                        c.EstablecerTamañoFuente(2, 2)
                        c.EscribirTexto("PAGO DE VENTA #"+str(idVentaCredito)+"\n")
                        c.EscribirTexto("CRÉDITO #"+str(idCreditoAPagar)+"\n")
                        c.EstablecerEnfatizado(False)
                        c.EstablecerAlineacion(Conector.ALINEACION_IZQUIERDA)
                        c.EstablecerTamañoFuente(1, 1)
                        c.EscribirTexto("\n")
                        c.EscribirTexto(" "+str(hoyFormato)+" - "+str(horaVenta)+" hrs.\n")
                        c.EscribirTexto("Atendida por: "+nombreCompletoEmpleadoVendedor+".\n")
                        c.EscribirTexto("\n")

                        #Listado de productos 
                        #Productos vendidos en ese credito

                        consultaVenta = Ventas.objects.filter(id_venta = idVentaCredito)
                        for datoVenta in consultaVenta:
                            codigosProductosVenta = datoVenta.ids_productos
                            cantidadesProductosVenta = datoVenta.cantidades_productos
                            idsServiciosCorporales = datoVenta.ids_servicios_corporales
                            cantidadServiciosCorporales = datoVenta.cantidades_servicios_corporales
                            idsServiciosFaciales = datoVenta.ids_servicios_faciales
                            cantidadServiciosFaciales = datoVenta.cantidades_servicios_faciales
                            descuento = datoVenta.descuento
                            costoTotalAPagar = datoVenta.monto_pagar
                            cliente = datoVenta.cliente_id

                        if cliente == None:
                            nombreClienteTicket = "Momentaneo"
                            idCienteTicket="Sin id"
                        else:
                            consultaCliente = Clientes.objects.filter(id_cliente = cliente)
                            for datoCliente in consultaCliente:
                                idCienteTicket = datoCliente.id_cliente
                                nombreCliente = datoCliente.nombre_cliente
                                apellidoCliente = datoCliente.apellidoPaterno_cliente
                            nombreClienteTicket = nombreCliente + " "+apellidoCliente
                            
                            

                        listaCodigosProductos = codigosProductosVenta.split(",")
                        listaCantidadesProductos = cantidadesProductosVenta.split(",")
                        listaIdsServiciosCorporales = idsServiciosCorporales.split(",")
                        listaCantidadesServiciosCorporales = cantidadServiciosCorporales.split(",")
                        listaIdsServiciosFaciales = idsServiciosFaciales.split(",")
                        listaCantidadesServiciosFaciales = cantidadServiciosFaciales.split(",")
                        
                        longitudProductos = len(listaCodigosProductos)
                        longitudServiciosCorporales = len(listaIdsServiciosCorporales)
                        longitudServiciosFaciales = len(listaIdsServiciosFaciales)


                        listaProductos = zip(listaCodigosProductos,listaCantidadesProductos)
                        listaServiciosCorporales = zip(listaIdsServiciosCorporales, listaCantidadesServiciosCorporales)
                        listaServiciosFaciales = zip(listaIdsServiciosFaciales, listaCantidadesServiciosFaciales)

                        if longitudProductos >= 1:
                            for codigo, cantidad in listaProductos:
                                if codigo != "":
                                    strCodigo = str(codigo)
                                    strCantidad = str(cantidad)
                                    consultaProductoVenta = ProductosVenta.objects.filter(codigo_producto = strCodigo)
                                    for datoProductoVenta in consultaProductoVenta:
                                        nombreProducto = datoProductoVenta.nombre_producto
                                        costoIndividualProducto = datoProductoVenta.costo_venta

                                    floatCantidad = float(cantidad)
                                    costototalProducto = costoIndividualProducto * floatCantidad
                                    costototalProductoDosDecimales = round(costototalProducto, 2)
                                    costototalProductoDosDecimales = str(costototalProductoDosDecimales)

                                    costoTotalProductoDivididoEnElPunto = costototalProductoDosDecimales.split(".")
                                    longitudCostoTotal = len(str(costoTotalProductoDivididoEnElPunto[0]))
                                    longitudCostoTotal = int(longitudCostoTotal)

                                    
                                    caracteresProducto = len(nombreProducto)

                                    if longitudCostoTotal == 2:
                                        espacio = 38
                                    if longitudCostoTotal == 2:
                                        espacio = 37
                                    elif longitudCostoTotal == 3:
                                        espacio = 36
                                    elif longitudCostoTotal == 4:
                                        espacio = 35
                                    elif longitudCostoTotal == 5:
                                        espacio = 34
                                    elif longitudCostoTotal == 6:
                                        espacio = 33
                                    numeroEspacios = espacio - int(caracteresProducto)
                                    
                                    espaciosTicket = ""
                                    for x in range(numeroEspacios):
                                        espacioMini = " "
                                        espaciosTicket = espaciosTicket + espacioMini
                                    c.EscribirTexto(strCantidad+" x "+nombreProducto+espaciosTicket+str(costototalProductoDosDecimales)+"\n")
                        
                        if longitudServiciosCorporales >=1:
                            for idd, cantidad in listaServiciosCorporales:
                                if idd != "":
                                    idServicio = int(idd)
                                    strCantidad = str(cantidad)
                                    consultaServicio = Servicios.objects.filter(id_servicio = idServicio)
                                    for datoServicio in consultaServicio:
                                        nombreServicio = datoServicio.nombre_servicio
                                        costoServicio = datoServicio.precio_venta

                                    floatCantidad = float(cantidad)
                                    costototalProducto = costoServicio * floatCantidad
                                    costototalProductoDosDecimales = round(costototalProducto, 2)
                                    costototalProductoDosDecimales = str(costototalProductoDosDecimales)

                                    costoTotalProductoDivididoEnElPunto = costototalProductoDosDecimales.split(".")
                                    longitudCostoTotal = len(str(costoTotalProductoDivididoEnElPunto[0]))
                                    longitudCostoTotal = int(longitudCostoTotal)

                                    
                                    caracteresProducto = len(nombreServicio)

                                    if longitudCostoTotal == 2:
                                        espacio = 38
                                    if longitudCostoTotal == 2:
                                        espacio = 37
                                    elif longitudCostoTotal == 3:
                                        espacio = 36
                                    elif longitudCostoTotal == 4:
                                        espacio = 35
                                    elif longitudCostoTotal == 5:
                                        espacio = 34
                                    elif longitudCostoTotal == 6:
                                        espacio = 33
                                    numeroEspacios = espacio - int(caracteresProducto)
                                    
                                    espaciosTicket = ""
                                    for x in range(numeroEspacios):
                                        espacioMini = " "
                                        espaciosTicket = espaciosTicket + espacioMini
                                    c.EscribirTexto(strCantidad+" x "+nombreServicio+espaciosTicket+str(costototalProductoDosDecimales)+"\n")

                        if longitudServiciosFaciales >=1:
                            for idd, cantidad in listaServiciosFaciales:
                                if idd != "":
                                    idServicio = int(idd)
                                    strCantidad = str(cantidad)
                                    consultaServicio = Servicios.objects.filter(id_servicio = idServicio)
                                    for datoServicio in consultaServicio:
                                        nombreServicio = datoServicio.nombre_servicio
                                        costoServicio = datoServicio.precio_venta

                                    floatCantidad = float(cantidad)
                                    costototalProducto = costoServicio * floatCantidad
                                    costototalProductoDosDecimales = round(costototalProducto, 2)
                                    costototalProductoDosDecimales = str(costototalProductoDosDecimales)

                                    costoTotalProductoDivididoEnElPunto = costototalProductoDosDecimales.split(".")
                                    longitudCostoTotal = len(str(costoTotalProductoDivididoEnElPunto[0]))
                                    longitudCostoTotal = int(longitudCostoTotal)

                                    
                                    caracteresProducto = len(nombreServicio)

                                    if longitudCostoTotal == 2:
                                        espacio = 38
                                    if longitudCostoTotal == 2:
                                        espacio = 37
                                    elif longitudCostoTotal == 3:
                                        espacio = 36
                                    elif longitudCostoTotal == 4:
                                        espacio = 35
                                    elif longitudCostoTotal == 5:
                                        espacio = 34
                                    elif longitudCostoTotal == 6:
                                        espacio = 33
                                    numeroEspacios = espacio - int(caracteresProducto)
                                    
                                    espaciosTicket = ""
                                    for x in range(numeroEspacios):
                                        espacioMini = " "
                                        espaciosTicket = espaciosTicket + espacioMini
                                    c.EscribirTexto(strCantidad+" x "+nombreServicio+espaciosTicket+str(costototalProductoDosDecimales)+"\n")
                        
                        

                        c.EscribirTexto("\n")
                        c.EscribirTexto("\n")

                        if descuento == None:
                            c.EstablecerTamañoFuente(2, 2)
                            c.EstablecerAlineacion(Conector.ALINEACION_DERECHA)
                            c.EscribirTexto("TOTAL:  $"+str(costoTotalAPagar)+"\n")
                            costoTotalPagarCredito = costoTotalAPagar
                            c.EscribirTexto("ABONADO: $"+str(cantidadPago3)+"\n")
                            c.EscribirTexto("RESTANTE: $"+str(restante)+"\n")
                        else:
                            intDescuento = int(descuento)
                            consultaDescuentos = Descuentos.objects.filter(porcentaje = intDescuento)
                            for datoDescuento in consultaDescuentos:
                                nombreDescuento = datoDescuento.nombre_descuento
                                porcentajeDescuento = datoDescuento.porcentaje

                            porcentajePagado = 100 - porcentajeDescuento #85
                            totalSinDescuento1 = 100 * costoTotalAPagar
                            totalSinDescuento2 = totalSinDescuento1/porcentajePagado
                            totalSinDescuento2 = round(totalSinDescuento2)

                            primerMulti = porcentajeDescuento * float(totalSinDescuento2)
                            primerDivision = primerMulti/100
                            resultadoDescuento = round(primerDivision)
                            
                            costoTotalAPagarConDescuento = totalSinDescuento2 - resultadoDescuento

                            c.EstablecerTamañoFuente(1, 1)
                            c.EstablecerAlineacion(Conector.ALINEACION_DERECHA)
                            c.EscribirTexto("Subtotal:  $"+str(totalSinDescuento2)+"\n")
                            c.EscribirTexto("Descuento:  $"+str(resultadoDescuento)+"\n")
                            c.EstablecerTamañoFuente(2, 2)
                            c.EscribirTexto("TOTAL:  $"+str(costoTotalAPagarConDescuento)+"\n")
                            c.EstablecerTamañoFuente(1, 1)
                            c.EscribirTexto("Descuento aplicado: -"+str(porcentajeDescuento)+"%- "+str(nombreDescuento)+"\n")
                            c.EscribirTexto("ABONADO: $"+str(cantidadPago3)+"\n")
                            c.EscribirTexto("RESTANTE: $"+str(restante)+"\n")
                            costoTotalPagarCredito = costoTotalAPagarConDescuento

                        c.EscribirTexto("\n")
                        c.EstablecerEnfatizado(True)
                        c.EstablecerTamañoFuente(1, 1)
                        c.EscribirTexto("========== IVA incluido en el precio ==========\n")
                        c.EscribirTexto("\n")
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        c.TextoSegunPaginaDeCodigos(2, "cp850", "INFORMACION DE PAGO.\n")
                        c.EstablecerEnfatizado(False)
                        c.EscribirTexto("\n")
                        c.EstablecerEnfatizado(True)
                        c.EscribirTexto("Pago en con Transferencia.\n")
                        c.EstablecerEnfatizado(False)
                        c.EscribirTexto("Transferencia.\n")
                        c.EscribirTexto("Clave de rastreo: "+str(clave_transferencia)+".\n")
                        c.EscribirTexto("Tercer pago recibido.\n")
                        c.EstablecerEnfatizado(False)
                        if restante == 0:
                            c.EscribirTexto("PAGO LIQUIDADO\n")
                        else:
                            restantePorPagar = float(restante)/2
                            restantePorPagar = round(restantePorPagar,2)
                            c.EscribirTexto("Abonos restantes de: $"+str(restantePorPagar)+" MXN.\n")
                            ahora = datetime.now()
                            fechaSegundoPago = ahora + timedelta(days=15)
                            fechaSegundoPago = fechaSegundoPago.strftime('%Y-%m-%d')
                            c.EscribirTexto("Cuarto pago el día: "+str(fechaSegundoPago)+".\n")
                        
                    
                        c.EscribirTexto("\n")
                        c.EstablecerEnfatizado(True)
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        c.TextoSegunPaginaDeCodigos(2, "cp850", "INFORMACIÓN DE CLIENTE.\n")

                        if nombreClienteTicket == "Momentaneo":
                            c.EstablecerEnfatizado(False)
                            c.EscribirTexto("Cliente momentaneo.\n")
                        else:
                            c.EstablecerEnfatizado(False)
                            c.EscribirTexto("ID:"+str(idCienteTicket)+" - "+nombreClienteTicket+".\n")
                        c.EscribirTexto("=========== Gracias por su compra!! ===========\n")
                        c.EstablecerTamañoFuente(2, 2)
                        c.EstablecerEnfatizado(True)
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        if contadorTickets == 1:
                            c.EscribirTexto("\n")
                            c.EscribirTexto("COPIA TIENDA.\n")
                            c.EscribirTexto("\n")
                            c.EstablecerTamañoFuente(1, 1)
                            c.EscribirTexto("________________________________________________\n")
                            c.EscribirTexto("Firma de cliente.\n")
                        else:
                            c.EscribirTexto("\n")
                            c.EscribirTexto("COPIA CLIENTE.\n")
                        c.EscribirTexto("\n")
                        c.EstablecerTamañoFuente(1, 1)
                        

                        c.Feed(1)
                        c.Corte(1)
                        #c.abrirCajon()
                        c.Pulso(48, 60, 120)
                        print("Imprimiendo...")
                        # Recuerda cambiar por el nombre de tu impresora
                        respuesta = c.imprimirEn("POS80 Printer")
                        if respuesta == True:
                            print("Impresión correcta")
                        else:
                            print(f"Error. El mensaje es: {respuesta}")

                

           
                    
                 
                            
                            
                            
            if actualizarEstadoCredito and registrarPago3:
                request.session['pago3Agregado'] = "Tercer pago de crédito Guardado correctamente!"
                return redirect('/verCreditosClientes/')
            else:
                request.session['pago3NoAgregado'] = "Error en la base de datos, intentelo más tarde.."
                return redirect('/verCreditosClientes/')
            
             
        

    else:
        return render(request,"1 Login/login.html")
    
    
    




def guardarPago4(request):
    if "idSesion" in request.session:
        # Variables de sesión
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        idPerfil = idEmpleado
        idConfig = idEmpleado
    
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']
        idEmpleado = request.session['idSesion']
        if request.method == "POST":
            
            
            

            idCreditoAPagar = request.POST['idCredito']
            idPagoCredito = request.POST['idPagoCredito']
            cantidadPago4 = request.POST['cantidadPago4']

            fechaPago4 = datetime.now()
            horaVenta= datetime.now().time()
             
            formaPago = request.POST['tipoPago'] #Efectivo,  tarjeta o transferencia
            
            datosCredito = Creditos.objects.filter(id_credito = idCreditoAPagar)
            for dato in datosCredito:
                montoTotalCredito = dato.monto_pagar
                montoRestante = dato.monto_restante
                montoPagado = dato.monto_pagado
                sucursal = dato.sucursal_id
                idVentaCredito = dato.venta_id

            floatCantidadPago4 = float(cantidadPago4)
            floatRestante = float(montoRestante)
                
                
           
                
            if floatCantidadPago4 == floatRestante:
                restante = 0
                estado = "Finalizado"
            
            else:
                restante = montoRestante - float(cantidadPago4)
                estado = "Pendiente"
                
            actualMontoPagado = float(montoPagado) + float(cantidadPago4)
                 
                    
            esConEfectivo = False
            esConTarjeta = False
            esConTransferencia = False

            if formaPago == "Efectivo":
                esConEfectivo = True
            elif formaPago == "Tarjeta":
                esConTarjeta = True
                tipo_tarjeta = request.POST['tipoTarjeta']    
                referencia_tarjeta = request.POST['referenciaTarjeta'] 
                        
            elif formaPago == "Transferencia":
                esConTransferencia = True
                clave_transferencia = request.POST['claveRastreoTransferencia'] 

                    


            if esConEfectivo:
                        
                registrarPago4 = PagosCreditos.objects.filter(id_historialCredito = idPagoCredito).update(fecha_pago4 = fechaPago4,tipo_pago4 ="Efectivo",monto_pago4 =cantidadPago4) 
                
                if registrarPago4:
                    
                    
                    actualizarEstadoCreditoPago4 = Creditos.objects.filter(id_credito = idCreditoAPagar).update(monto_pagado = actualMontoPagado,monto_restante =restante,estatus =estado) 
                    if actualizarEstadoCreditoPago4:
                         
                        tipoMovimiento ="IN"
                        montoMovimiento = float(cantidadPago4)
                        descripcionMovimiento ="Movimiento por abono de crédito " + str(idCreditoAPagar) 
                        fechaMovimiento = datetime.today().strftime('%Y-%m-%d')
                        horaMovimiento = datetime.now().time()
                        ingresarCantidadEfectivoAcaja =MovimientosCaja(fecha =fechaMovimiento,hora = horaMovimiento,tipo=tipoMovimiento,monto =montoMovimiento, descripcion=descripcionMovimiento,sucursal =  Sucursales.objects.get(id_sucursal = sucursal),
                                                                            realizado_por = Empleados.objects.get(id_empleado = idEmpleado))
                        ingresarCantidadEfectivoAcaja.save()

                         #IMPRESION DE TICKEEETSSSS

                        #Fecha
                        hoy = datetime.now()
                        hoyFormato = hoy.strftime('%Y/%m/%d')

                        #Consulta de venta
                        consultaVenta = Ventas.objects.filter(id_venta = idVentaCredito)
                        for datoVenta in consultaVenta:
                            empleadoVendedor = datoVenta.empleado_vendedor_id
                            sucursal = datoVenta.sucursal_id
                            cliente = datoVenta.cliente_id
                        #Empleado vendedor
                        consultaEmpleadoVendedor = Empleados.objects.filter(id_empleado = empleadoVendedor)
                        for datoVendedor in consultaEmpleadoVendedor:
                            nombreEmpleado = datoVendedor.nombres
                            apellidoPatEmpleado = datoVendedor.apellido_paterno

                        nombreCompletoEmpleadoVendedor = nombreEmpleado + " "+ apellidoPatEmpleado

                        #Datos sucurssal
                        consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursal)
                        for datoSucursal in consultaSucursal:
                            nombreSucursal = datoSucursal.nombre
                            telefonoSucursal = datoSucursal.telefono
                            direccionSucursal = datoSucursal.direccion

                        
                        
                        
                        #Hora bien
                        horaVenta = horaVenta.strftime("%H:%M:%S")

                        # Esto es para obtener las impresoras. No es obligatorio hacerlo siempre que se quiera imprimir
                        impresoras = Conector.ConectorV3.obtenerImpresoras()
                        print(f"Las impresoras son: {impresoras}")
                        
                        contadorTickets = 0
                        for x in range(2):
                            contadorTickets = contadorTickets + 1

                            
                            c = Conector.ConectorV3()
                            c.Iniciar()
                            c.Corte(1)
                            
                            c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                            # Recuerda que la imagen debe existir y debe ser legible para el plugin. Si no, comenta las líneas
                            c.CargarImagenLocalEImprimir("C:\\COSTABELLA\\sistemaCostabella\\static\\images\\anegragrande.png", 0, 216)
                            c.EscribirTexto("\n")
                            c.EstablecerTamañoFuente(1, 1)
                            c.EstablecerEnfatizado(True)
                            c.EscribirTexto("Sucursal: "+nombreSucursal+"\n")
                            c.EstablecerEnfatizado(False)
                            c.EscribirTexto("TEL: "+telefonoSucursal+"\n")
                            c.TextoSegunPaginaDeCodigos(2, "cp850", direccionSucursal+"\n")

                            c.EstablecerEnfatizado(True)
                            c.EscribirTexto("================================================\n")
                            c.EstablecerTamañoFuente(2, 2)
                            c.EscribirTexto("PAGO DE VENTA #"+str(idVentaCredito)+"\n")
                            c.EscribirTexto("CRÉDITO #"+str(idCreditoAPagar)+"\n")
                            c.EstablecerEnfatizado(False)
                            c.EstablecerAlineacion(Conector.ALINEACION_IZQUIERDA)
                            c.EstablecerTamañoFuente(1, 1)
                            c.EscribirTexto("\n")
                            c.EscribirTexto(" "+str(hoyFormato)+" - "+str(horaVenta)+" hrs.\n")
                            c.EscribirTexto("Atendida por: "+nombreCompletoEmpleadoVendedor+".\n")
                            c.EscribirTexto("\n")

                            #Listado de productos 
                            #Productos vendidos en ese credito

                            consultaVenta = Ventas.objects.filter(id_venta = idVentaCredito)
                            for datoVenta in consultaVenta:
                                codigosProductosVenta = datoVenta.ids_productos
                                cantidadesProductosVenta = datoVenta.cantidades_productos
                                idsServiciosCorporales = datoVenta.ids_servicios_corporales
                                cantidadServiciosCorporales = datoVenta.cantidades_servicios_corporales
                                idsServiciosFaciales = datoVenta.ids_servicios_faciales
                                cantidadServiciosFaciales = datoVenta.cantidades_servicios_faciales
                                descuento = datoVenta.descuento
                                costoTotalAPagar = datoVenta.monto_pagar
                                cliente = datoVenta.cliente_id

                            if cliente == None:
                                nombreClienteTicket = "Momentaneo"
                                idCienteTicket="Sin id"
                            else:
                                consultaCliente = Clientes.objects.filter(id_cliente = cliente)
                                for datoCliente in consultaCliente:
                                    idCienteTicket = datoCliente.id_cliente
                                    nombreCliente = datoCliente.nombre_cliente
                                    apellidoCliente = datoCliente.apellidoPaterno_cliente
                                nombreClienteTicket = nombreCliente + " "+apellidoCliente
                                
                                

                            listaCodigosProductos = codigosProductosVenta.split(",")
                            listaCantidadesProductos = cantidadesProductosVenta.split(",")
                            listaIdsServiciosCorporales = idsServiciosCorporales.split(",")
                            listaCantidadesServiciosCorporales = cantidadServiciosCorporales.split(",")
                            listaIdsServiciosFaciales = idsServiciosFaciales.split(",")
                            listaCantidadesServiciosFaciales = cantidadServiciosFaciales.split(",")
                            
                            longitudProductos = len(listaCodigosProductos)
                            longitudServiciosCorporales = len(listaIdsServiciosCorporales)
                            longitudServiciosFaciales = len(listaIdsServiciosFaciales)


                            listaProductos = zip(listaCodigosProductos,listaCantidadesProductos)
                            listaServiciosCorporales = zip(listaIdsServiciosCorporales, listaCantidadesServiciosCorporales)
                            listaServiciosFaciales = zip(listaIdsServiciosFaciales, listaCantidadesServiciosFaciales)

                            if longitudProductos >= 1:
                                for codigo, cantidad in listaProductos:
                                    if codigo != "":
                                        strCodigo = str(codigo)
                                        strCantidad = str(cantidad)
                                        consultaProductoVenta = ProductosVenta.objects.filter(codigo_producto = strCodigo)
                                        for datoProductoVenta in consultaProductoVenta:
                                            nombreProducto = datoProductoVenta.nombre_producto
                                            costoIndividualProducto = datoProductoVenta.costo_venta

                                        floatCantidad = float(cantidad)
                                        costototalProducto = costoIndividualProducto * floatCantidad
                                        costototalProductoDosDecimales = round(costototalProducto, 2)
                                        costototalProductoDosDecimales = str(costototalProductoDosDecimales)

                                        costoTotalProductoDivididoEnElPunto = costototalProductoDosDecimales.split(".")
                                        longitudCostoTotal = len(str(costoTotalProductoDivididoEnElPunto[0]))
                                        longitudCostoTotal = int(longitudCostoTotal)

                                        
                                        caracteresProducto = len(nombreProducto)

                                        if longitudCostoTotal == 2:
                                            espacio = 38
                                        if longitudCostoTotal == 2:
                                            espacio = 37
                                        elif longitudCostoTotal == 3:
                                            espacio = 36
                                        elif longitudCostoTotal == 4:
                                            espacio = 35
                                        elif longitudCostoTotal == 5:
                                            espacio = 34
                                        elif longitudCostoTotal == 6:
                                            espacio = 33
                                        numeroEspacios = espacio - int(caracteresProducto)
                                        
                                        espaciosTicket = ""
                                        for x in range(numeroEspacios):
                                            espacioMini = " "
                                            espaciosTicket = espaciosTicket + espacioMini
                                        c.EscribirTexto(strCantidad+" x "+nombreProducto+espaciosTicket+str(costototalProductoDosDecimales)+"\n")
                            
                            if longitudServiciosCorporales >=1:
                                for idd, cantidad in listaServiciosCorporales:
                                    if idd != "":
                                        idServicio = int(idd)
                                        strCantidad = str(cantidad)
                                        consultaServicio = Servicios.objects.filter(id_servicio = idServicio)
                                        for datoServicio in consultaServicio:
                                            nombreServicio = datoServicio.nombre_servicio
                                            costoServicio = datoServicio.precio_venta

                                        floatCantidad = float(cantidad)
                                        costototalProducto = costoServicio * floatCantidad
                                        costototalProductoDosDecimales = round(costototalProducto, 2)
                                        costototalProductoDosDecimales = str(costototalProductoDosDecimales)

                                        costoTotalProductoDivididoEnElPunto = costototalProductoDosDecimales.split(".")
                                        longitudCostoTotal = len(str(costoTotalProductoDivididoEnElPunto[0]))
                                        longitudCostoTotal = int(longitudCostoTotal)

                                        
                                        caracteresProducto = len(nombreServicio)

                                        if longitudCostoTotal == 2:
                                            espacio = 38
                                        if longitudCostoTotal == 2:
                                            espacio = 37
                                        elif longitudCostoTotal == 3:
                                            espacio = 36
                                        elif longitudCostoTotal == 4:
                                            espacio = 35
                                        elif longitudCostoTotal == 5:
                                            espacio = 34
                                        elif longitudCostoTotal == 6:
                                            espacio = 33
                                        numeroEspacios = espacio - int(caracteresProducto)
                                        
                                        espaciosTicket = ""
                                        for x in range(numeroEspacios):
                                            espacioMini = " "
                                            espaciosTicket = espaciosTicket + espacioMini
                                        c.EscribirTexto(strCantidad+" x "+nombreServicio+espaciosTicket+str(costototalProductoDosDecimales)+"\n")

                            if longitudServiciosFaciales >=1:
                                for idd, cantidad in listaServiciosFaciales:
                                    if idd != "":
                                        idServicio = int(idd)
                                        strCantidad = str(cantidad)
                                        consultaServicio = Servicios.objects.filter(id_servicio = idServicio)
                                        for datoServicio in consultaServicio:
                                            nombreServicio = datoServicio.nombre_servicio
                                            costoServicio = datoServicio.precio_venta

                                        floatCantidad = float(cantidad)
                                        costototalProducto = costoServicio * floatCantidad
                                        costototalProductoDosDecimales = round(costototalProducto, 2)
                                        costototalProductoDosDecimales = str(costototalProductoDosDecimales)

                                        costoTotalProductoDivididoEnElPunto = costototalProductoDosDecimales.split(".")
                                        longitudCostoTotal = len(str(costoTotalProductoDivididoEnElPunto[0]))
                                        longitudCostoTotal = int(longitudCostoTotal)

                                        
                                        caracteresProducto = len(nombreServicio)

                                        if longitudCostoTotal == 2:
                                            espacio = 38
                                        if longitudCostoTotal == 2:
                                            espacio = 37
                                        elif longitudCostoTotal == 3:
                                            espacio = 36
                                        elif longitudCostoTotal == 4:
                                            espacio = 35
                                        elif longitudCostoTotal == 5:
                                            espacio = 34
                                        elif longitudCostoTotal == 6:
                                            espacio = 33
                                        numeroEspacios = espacio - int(caracteresProducto)
                                        
                                        espaciosTicket = ""
                                        for x in range(numeroEspacios):
                                            espacioMini = " "
                                            espaciosTicket = espaciosTicket + espacioMini
                                        c.EscribirTexto(strCantidad+" x "+nombreServicio+espaciosTicket+str(costototalProductoDosDecimales)+"\n")
                            
                            

                            c.EscribirTexto("\n")
                            c.EscribirTexto("\n")

                            if descuento == None:
                                c.EstablecerTamañoFuente(2, 2)
                                c.EstablecerAlineacion(Conector.ALINEACION_DERECHA)
                                c.EscribirTexto("TOTAL:  $"+str(costoTotalAPagar)+"\n")
                                costoTotalPagarCredito = costoTotalAPagar
                                c.EscribirTexto("ABONADO: $"+str(cantidadPago4)+"\n")
                                c.EscribirTexto("RESTANTE: $"+str(restante)+"\n")
                            else:
                                intDescuento = int(descuento)
                                consultaDescuentos = Descuentos.objects.filter(porcentaje = intDescuento)
                                for datoDescuento in consultaDescuentos:
                                    nombreDescuento = datoDescuento.nombre_descuento
                                    porcentajeDescuento = datoDescuento.porcentaje

                                porcentajePagado = 100 - porcentajeDescuento #85
                                totalSinDescuento1 = 100 * costoTotalAPagar
                                totalSinDescuento2 = totalSinDescuento1/porcentajePagado
                                totalSinDescuento2 = round(totalSinDescuento2)

                                primerMulti = porcentajeDescuento * float(totalSinDescuento2)
                                primerDivision = primerMulti/100
                                resultadoDescuento = round(primerDivision)
                                
                                costoTotalAPagarConDescuento = totalSinDescuento2 - resultadoDescuento

                                c.EstablecerTamañoFuente(1, 1)
                                c.EstablecerAlineacion(Conector.ALINEACION_DERECHA)
                                c.EscribirTexto("Subtotal:  $"+str(totalSinDescuento2)+"\n")
                                c.EscribirTexto("Descuento:  $"+str(resultadoDescuento)+"\n")
                                c.EstablecerTamañoFuente(2, 2)
                                c.EscribirTexto("TOTAL:  $"+str(costoTotalAPagarConDescuento)+"\n")
                                c.EstablecerTamañoFuente(1, 1)
                                c.EscribirTexto("Descuento aplicado: -"+str(porcentajeDescuento)+"%- "+str(nombreDescuento)+"\n")
                                c.EscribirTexto("ABONADO: $"+str(cantidadPago4)+"\n")
                                c.EscribirTexto("RESTANTE: $"+str(restante)+"\n")
                                costoTotalPagarCredito = costoTotalAPagarConDescuento

                            c.EscribirTexto("\n")
                            c.EstablecerEnfatizado(True)
                            c.EstablecerTamañoFuente(1, 1)
                            c.EscribirTexto("========== IVA incluido en el precio ==========\n")
                            c.EscribirTexto("\n")
                            c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                            c.TextoSegunPaginaDeCodigos(2, "cp850", "INFORMACION DE PAGO.\n")
                            c.EstablecerEnfatizado(False)
                            c.EscribirTexto("\n")
                            c.EstablecerEnfatizado(True)
                            c.EscribirTexto("Pago en efectivo.\n")
                            c.EscribirTexto("Cuarto pago recibido.\n")
                            c.EstablecerEnfatizado(False)
                            if restante == 0:
                                c.EscribirTexto("PAGO LIQUIDADO\n")
                            
                            
                        
                            c.EscribirTexto("\n")
                            c.EstablecerEnfatizado(True)
                            c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                            c.TextoSegunPaginaDeCodigos(2, "cp850", "INFORMACIÓN DE CLIENTE.\n")

                            if nombreClienteTicket == "Momentaneo":
                                c.EstablecerEnfatizado(False)
                                c.EscribirTexto("Cliente momentaneo.\n")
                            else:
                                c.EstablecerEnfatizado(False)
                                c.EscribirTexto("ID:"+str(idCienteTicket)+" - "+nombreClienteTicket+".\n")
                            c.EscribirTexto("=========== Gracias por su compra!! ===========\n")
                            c.EstablecerTamañoFuente(2, 2)
                            c.EstablecerEnfatizado(True)
                            c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                            if contadorTickets == 1:
                                c.EscribirTexto("\n")
                                c.EscribirTexto("COPIA TIENDA.\n")
                                c.EscribirTexto("\n")
                                c.EstablecerTamañoFuente(1, 1)
                                c.EscribirTexto("________________________________________________\n")
                                c.EscribirTexto("Firma de cliente.\n")
                            else:
                                c.EscribirTexto("\n")
                                c.EscribirTexto("COPIA CLIENTE.\n")
                            c.EscribirTexto("\n")
                            c.EstablecerTamañoFuente(1, 1)
                            

                            c.Feed(1)
                            c.Corte(1)
                            #c.abrirCajon()
                            c.Pulso(48, 60, 120)
                            print("Imprimiendo...")
                            # Recuerda cambiar por el nombre de tu impresora
                            respuesta = c.imprimirEn("POS80 Printer")
                            if respuesta == True:
                                print("Impresión correcta")
                            else:
                                print(f"Error. El mensaje es: {respuesta}")
                
                

            if esConTarjeta:
                    
                        
                registrarPago4 = PagosCreditos.objects.filter(id_historialCredito = idPagoCredito).update(fecha_pago4 = fechaPago4,tipo_pago4="Tarjeta",tipo_tarjeta4=tipo_tarjeta,referencia_pago_tarjeta4=referencia_tarjeta,monto_pago4 =cantidadPago4) 
                
                if registrarPago4:
                    
                    
                    actualizarEstadoCreditoPago4 = Creditos.objects.filter(id_credito = idCreditoAPagar).update(monto_pagado = actualMontoPagado,monto_restante =restante,estatus =estado) 

                    #IMPRESION DE TICKEEETSSSS

                    #Fecha
                    hoy = datetime.now()
                    hoyFormato = hoy.strftime('%Y/%m/%d')

                    #Consulta de venta
                    consultaVenta = Ventas.objects.filter(id_venta = idVentaCredito)
                    for datoVenta in consultaVenta:
                        empleadoVendedor = datoVenta.empleado_vendedor_id
                        sucursal = datoVenta.sucursal_id
                        cliente = datoVenta.cliente_id
                    #Empleado vendedor
                    consultaEmpleadoVendedor = Empleados.objects.filter(id_empleado = empleadoVendedor)
                    for datoVendedor in consultaEmpleadoVendedor:
                        nombreEmpleado = datoVendedor.nombres
                        apellidoPatEmpleado = datoVendedor.apellido_paterno

                    nombreCompletoEmpleadoVendedor = nombreEmpleado + " "+ apellidoPatEmpleado

                    #Datos sucurssal
                    consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursal)
                    for datoSucursal in consultaSucursal:
                        nombreSucursal = datoSucursal.nombre
                        telefonoSucursal = datoSucursal.telefono
                        direccionSucursal = datoSucursal.direccion

                    
                    
                    
                    #Hora bien
                    horaVenta = horaVenta.strftime("%H:%M:%S")

                    # Esto es para obtener las impresoras. No es obligatorio hacerlo siempre que se quiera imprimir
                    impresoras = Conector.ConectorV3.obtenerImpresoras()
                    print(f"Las impresoras son: {impresoras}")
                    
                    contadorTickets = 0
                    for x in range(2):
                        contadorTickets = contadorTickets + 1

                        
                        c = Conector.ConectorV3()
                        c.Iniciar()
                        c.Corte(1)
                        
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        # Recuerda que la imagen debe existir y debe ser legible para el plugin. Si no, comenta las líneas
                        c.CargarImagenLocalEImprimir("C:\\COSTABELLA\\sistemaCostabella\\static\\images\\anegragrande.png", 0, 216)
                        c.EscribirTexto("\n")
                        c.EstablecerTamañoFuente(1, 1)
                        c.EstablecerEnfatizado(True)
                        c.EscribirTexto("Sucursal: "+nombreSucursal+"\n")
                        c.EstablecerEnfatizado(False)
                        c.EscribirTexto("TEL: "+telefonoSucursal+"\n")
                        c.TextoSegunPaginaDeCodigos(2, "cp850", direccionSucursal+"\n")

                        c.EstablecerEnfatizado(True)
                        c.EscribirTexto("================================================\n")
                        c.EstablecerTamañoFuente(2, 2)
                        c.EscribirTexto("PAGO DE VENTA #"+str(idVentaCredito)+"\n")
                        c.EscribirTexto("CRÉDITO #"+str(idCreditoAPagar)+"\n")
                        c.EstablecerEnfatizado(False)
                        c.EstablecerAlineacion(Conector.ALINEACION_IZQUIERDA)
                        c.EstablecerTamañoFuente(1, 1)
                        c.EscribirTexto("\n")
                        c.EscribirTexto(" "+str(hoyFormato)+" - "+str(horaVenta)+" hrs.\n")
                        c.EscribirTexto("Atendida por: "+nombreCompletoEmpleadoVendedor+".\n")
                        c.EscribirTexto("\n")

                        #Listado de productos 
                        #Productos vendidos en ese credito

                        consultaVenta = Ventas.objects.filter(id_venta = idVentaCredito)
                        for datoVenta in consultaVenta:
                            codigosProductosVenta = datoVenta.ids_productos
                            cantidadesProductosVenta = datoVenta.cantidades_productos
                            idsServiciosCorporales = datoVenta.ids_servicios_corporales
                            cantidadServiciosCorporales = datoVenta.cantidades_servicios_corporales
                            idsServiciosFaciales = datoVenta.ids_servicios_faciales
                            cantidadServiciosFaciales = datoVenta.cantidades_servicios_faciales
                            descuento = datoVenta.descuento
                            costoTotalAPagar = datoVenta.monto_pagar
                            cliente = datoVenta.cliente_id

                        if cliente == None:
                            nombreClienteTicket = "Momentaneo"
                            idCienteTicket="Sin id"
                        else:
                            consultaCliente = Clientes.objects.filter(id_cliente = cliente)
                            for datoCliente in consultaCliente:
                                idCienteTicket = datoCliente.id_cliente
                                nombreCliente = datoCliente.nombre_cliente
                                apellidoCliente = datoCliente.apellidoPaterno_cliente
                            nombreClienteTicket = nombreCliente + " "+apellidoCliente
                            
                            

                        listaCodigosProductos = codigosProductosVenta.split(",")
                        listaCantidadesProductos = cantidadesProductosVenta.split(",")
                        listaIdsServiciosCorporales = idsServiciosCorporales.split(",")
                        listaCantidadesServiciosCorporales = cantidadServiciosCorporales.split(",")
                        listaIdsServiciosFaciales = idsServiciosFaciales.split(",")
                        listaCantidadesServiciosFaciales = cantidadServiciosFaciales.split(",")
                        
                        longitudProductos = len(listaCodigosProductos)
                        longitudServiciosCorporales = len(listaIdsServiciosCorporales)
                        longitudServiciosFaciales = len(listaIdsServiciosFaciales)


                        listaProductos = zip(listaCodigosProductos,listaCantidadesProductos)
                        listaServiciosCorporales = zip(listaIdsServiciosCorporales, listaCantidadesServiciosCorporales)
                        listaServiciosFaciales = zip(listaIdsServiciosFaciales, listaCantidadesServiciosFaciales)

                        if longitudProductos >= 1:
                            for codigo, cantidad in listaProductos:
                                if codigo != "":
                                    strCodigo = str(codigo)
                                    strCantidad = str(cantidad)
                                    consultaProductoVenta = ProductosVenta.objects.filter(codigo_producto = strCodigo)
                                    for datoProductoVenta in consultaProductoVenta:
                                        nombreProducto = datoProductoVenta.nombre_producto
                                        costoIndividualProducto = datoProductoVenta.costo_venta

                                    floatCantidad = float(cantidad)
                                    costototalProducto = costoIndividualProducto * floatCantidad
                                    costototalProductoDosDecimales = round(costototalProducto, 2)
                                    costototalProductoDosDecimales = str(costototalProductoDosDecimales)

                                    costoTotalProductoDivididoEnElPunto = costototalProductoDosDecimales.split(".")
                                    longitudCostoTotal = len(str(costoTotalProductoDivididoEnElPunto[0]))
                                    longitudCostoTotal = int(longitudCostoTotal)

                                    
                                    caracteresProducto = len(nombreProducto)

                                    if longitudCostoTotal == 2:
                                        espacio = 38
                                    if longitudCostoTotal == 2:
                                        espacio = 37
                                    elif longitudCostoTotal == 3:
                                        espacio = 36
                                    elif longitudCostoTotal == 4:
                                        espacio = 35
                                    elif longitudCostoTotal == 5:
                                        espacio = 34
                                    elif longitudCostoTotal == 6:
                                        espacio = 33
                                    numeroEspacios = espacio - int(caracteresProducto)
                                    
                                    espaciosTicket = ""
                                    for x in range(numeroEspacios):
                                        espacioMini = " "
                                        espaciosTicket = espaciosTicket + espacioMini
                                    c.EscribirTexto(strCantidad+" x "+nombreProducto+espaciosTicket+str(costototalProductoDosDecimales)+"\n")
                        
                        if longitudServiciosCorporales >=1:
                            for idd, cantidad in listaServiciosCorporales:
                                if idd != "":
                                    idServicio = int(idd)
                                    strCantidad = str(cantidad)
                                    consultaServicio = Servicios.objects.filter(id_servicio = idServicio)
                                    for datoServicio in consultaServicio:
                                        nombreServicio = datoServicio.nombre_servicio
                                        costoServicio = datoServicio.precio_venta

                                    floatCantidad = float(cantidad)
                                    costototalProducto = costoServicio * floatCantidad
                                    costototalProductoDosDecimales = round(costototalProducto, 2)
                                    costototalProductoDosDecimales = str(costototalProductoDosDecimales)

                                    costoTotalProductoDivididoEnElPunto = costototalProductoDosDecimales.split(".")
                                    longitudCostoTotal = len(str(costoTotalProductoDivididoEnElPunto[0]))
                                    longitudCostoTotal = int(longitudCostoTotal)

                                    
                                    caracteresProducto = len(nombreServicio)

                                    if longitudCostoTotal == 2:
                                        espacio = 38
                                    if longitudCostoTotal == 2:
                                        espacio = 37
                                    elif longitudCostoTotal == 3:
                                        espacio = 36
                                    elif longitudCostoTotal == 4:
                                        espacio = 35
                                    elif longitudCostoTotal == 5:
                                        espacio = 34
                                    elif longitudCostoTotal == 6:
                                        espacio = 33
                                    numeroEspacios = espacio - int(caracteresProducto)
                                    
                                    espaciosTicket = ""
                                    for x in range(numeroEspacios):
                                        espacioMini = " "
                                        espaciosTicket = espaciosTicket + espacioMini
                                    c.EscribirTexto(strCantidad+" x "+nombreServicio+espaciosTicket+str(costototalProductoDosDecimales)+"\n")

                        if longitudServiciosFaciales >=1:
                            for idd, cantidad in listaServiciosFaciales:
                                if idd != "":
                                    idServicio = int(idd)
                                    strCantidad = str(cantidad)
                                    consultaServicio = Servicios.objects.filter(id_servicio = idServicio)
                                    for datoServicio in consultaServicio:
                                        nombreServicio = datoServicio.nombre_servicio
                                        costoServicio = datoServicio.precio_venta

                                    floatCantidad = float(cantidad)
                                    costototalProducto = costoServicio * floatCantidad
                                    costototalProductoDosDecimales = round(costototalProducto, 2)
                                    costototalProductoDosDecimales = str(costototalProductoDosDecimales)

                                    costoTotalProductoDivididoEnElPunto = costototalProductoDosDecimales.split(".")
                                    longitudCostoTotal = len(str(costoTotalProductoDivididoEnElPunto[0]))
                                    longitudCostoTotal = int(longitudCostoTotal)

                                    
                                    caracteresProducto = len(nombreServicio)

                                    if longitudCostoTotal == 2:
                                        espacio = 38
                                    if longitudCostoTotal == 2:
                                        espacio = 37
                                    elif longitudCostoTotal == 3:
                                        espacio = 36
                                    elif longitudCostoTotal == 4:
                                        espacio = 35
                                    elif longitudCostoTotal == 5:
                                        espacio = 34
                                    elif longitudCostoTotal == 6:
                                        espacio = 33
                                    numeroEspacios = espacio - int(caracteresProducto)
                                    
                                    espaciosTicket = ""
                                    for x in range(numeroEspacios):
                                        espacioMini = " "
                                        espaciosTicket = espaciosTicket + espacioMini
                                    c.EscribirTexto(strCantidad+" x "+nombreServicio+espaciosTicket+str(costototalProductoDosDecimales)+"\n")
                        
                        

                        c.EscribirTexto("\n")
                        c.EscribirTexto("\n")

                        if descuento == None:
                            c.EstablecerTamañoFuente(2, 2)
                            c.EstablecerAlineacion(Conector.ALINEACION_DERECHA)
                            c.EscribirTexto("TOTAL:  $"+str(costoTotalAPagar)+"\n")
                            costoTotalPagarCredito = costoTotalAPagar
                            c.EscribirTexto("ABONADO: $"+str(cantidadPago4)+"\n")
                            c.EscribirTexto("RESTANTE: $"+str(restante)+"\n")
                        else:
                            intDescuento = int(descuento)
                            consultaDescuentos = Descuentos.objects.filter(porcentaje = intDescuento)
                            for datoDescuento in consultaDescuentos:
                                nombreDescuento = datoDescuento.nombre_descuento
                                porcentajeDescuento = datoDescuento.porcentaje

                            porcentajePagado = 100 - porcentajeDescuento #85
                            totalSinDescuento1 = 100 * costoTotalAPagar
                            totalSinDescuento2 = totalSinDescuento1/porcentajePagado
                            totalSinDescuento2 = round(totalSinDescuento2)

                            primerMulti = porcentajeDescuento * float(totalSinDescuento2)
                            primerDivision = primerMulti/100
                            resultadoDescuento = round(primerDivision)
                            
                            costoTotalAPagarConDescuento = totalSinDescuento2 - resultadoDescuento

                            c.EstablecerTamañoFuente(1, 1)
                            c.EstablecerAlineacion(Conector.ALINEACION_DERECHA)
                            c.EscribirTexto("Subtotal:  $"+str(totalSinDescuento2)+"\n")
                            c.EscribirTexto("Descuento:  $"+str(resultadoDescuento)+"\n")
                            c.EstablecerTamañoFuente(2, 2)
                            c.EscribirTexto("TOTAL:  $"+str(costoTotalAPagarConDescuento)+"\n")
                            c.EstablecerTamañoFuente(1, 1)
                            c.EscribirTexto("Descuento aplicado: -"+str(porcentajeDescuento)+"%- "+str(nombreDescuento)+"\n")
                            c.EscribirTexto("ABONADO: $"+str(cantidadPago4)+"\n")
                            c.EscribirTexto("RESTANTE: $"+str(restante)+"\n")
                            costoTotalPagarCredito = costoTotalAPagarConDescuento

                        c.EscribirTexto("\n")
                        c.EstablecerEnfatizado(True)
                        c.EstablecerTamañoFuente(1, 1)
                        c.EscribirTexto("========== IVA incluido en el precio ==========\n")
                        c.EscribirTexto("\n")
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        c.TextoSegunPaginaDeCodigos(2, "cp850", "INFORMACION DE PAGO.\n")
                        c.EstablecerEnfatizado(False)
                        c.EscribirTexto("\n")
                        c.EstablecerEnfatizado(True)
                        c.EscribirTexto("Pago en con tarjeta.\n")
                        c.EstablecerEnfatizado(False)
                        c.EscribirTexto("Pago con "+str(tipo_tarjeta)+".\n")
                        c.EscribirTexto("Referencia: "+referencia_tarjeta+".\n")
                        c.EscribirTexto("Cuarto pago recibido.\n")
                        c.EstablecerEnfatizado(False)
                        if restante == 0:
                            c.EscribirTexto("PAGO LIQUIDADO\n")
                       
                        
                    
                        c.EscribirTexto("\n")
                        c.EstablecerEnfatizado(True)
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        c.TextoSegunPaginaDeCodigos(2, "cp850", "INFORMACIÓN DE CLIENTE.\n")

                        if nombreClienteTicket == "Momentaneo":
                            c.EstablecerEnfatizado(False)
                            c.EscribirTexto("Cliente momentaneo.\n")
                        else:
                            c.EstablecerEnfatizado(False)
                            c.EscribirTexto("ID:"+str(idCienteTicket)+" - "+nombreClienteTicket+".\n")
                        c.EscribirTexto("=========== Gracias por su compra!! ===========\n")
                        c.EstablecerTamañoFuente(2, 2)
                        c.EstablecerEnfatizado(True)
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        if contadorTickets == 1:
                            c.EscribirTexto("\n")
                            c.EscribirTexto("COPIA TIENDA.\n")
                            c.EscribirTexto("\n")
                            c.EstablecerTamañoFuente(1, 1)
                            c.EscribirTexto("________________________________________________\n")
                            c.EscribirTexto("Firma de cliente.\n")
                        else:
                            c.EscribirTexto("\n")
                            c.EscribirTexto("COPIA CLIENTE.\n")
                        c.EscribirTexto("\n")
                        c.EstablecerTamañoFuente(1, 1)
                        

                        c.Feed(1)
                        c.Corte(1)
                        #c.abrirCajon()
                        c.Pulso(48, 60, 120)
                        print("Imprimiendo...")
                        # Recuerda cambiar por el nombre de tu impresora
                        respuesta = c.imprimirEn("POS80 Printer")
                        if respuesta == True:
                            print("Impresión correcta")
                        else:
                            print(f"Error. El mensaje es: {respuesta}")
                    

            if esConTransferencia:
            
                registrarPago4 = PagosCreditos.objects.filter(id_historialCredito = idPagoCredito).update(fecha_pago4 = fechaPago4,tipo_pago4 ="Transferencia",clave_rastreo_pago_transferencia4=clave_transferencia,monto_pago4 =cantidadPago4) 
                
                if registrarPago4:
                    
                    
                    actualizarEstadoCreditoPago4 = Creditos.objects.filter(id_credito = idCreditoAPagar).update(monto_pagado = actualMontoPagado,monto_restante =restante,estatus =estado) 


                     #Fecha
                    hoy = datetime.now()
                    hoyFormato = hoy.strftime('%Y/%m/%d')

                    #Consulta de venta
                    consultaVenta = Ventas.objects.filter(id_venta = idVentaCredito)
                    for datoVenta in consultaVenta:
                        empleadoVendedor = datoVenta.empleado_vendedor_id
                        sucursal = datoVenta.sucursal_id
                        cliente = datoVenta.cliente_id
                    #Empleado vendedor
                    consultaEmpleadoVendedor = Empleados.objects.filter(id_empleado = empleadoVendedor)
                    for datoVendedor in consultaEmpleadoVendedor:
                        nombreEmpleado = datoVendedor.nombres
                        apellidoPatEmpleado = datoVendedor.apellido_paterno

                    nombreCompletoEmpleadoVendedor = nombreEmpleado + " "+ apellidoPatEmpleado

                    #Datos sucurssal
                    consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursal)
                    for datoSucursal in consultaSucursal:
                        nombreSucursal = datoSucursal.nombre
                        telefonoSucursal = datoSucursal.telefono
                        direccionSucursal = datoSucursal.direccion

                    
                    
                    
                    #Hora bien
                    horaVenta = horaVenta.strftime("%H:%M:%S")

                    # Esto es para obtener las impresoras. No es obligatorio hacerlo siempre que se quiera imprimir
                    impresoras = Conector.ConectorV3.obtenerImpresoras()
                    print(f"Las impresoras son: {impresoras}")
                    
                    contadorTickets = 0
                    for x in range(2):
                        contadorTickets = contadorTickets + 1

                        
                        c = Conector.ConectorV3()
                        c.Iniciar()
                        c.Corte(1)
                        
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        # Recuerda que la imagen debe existir y debe ser legible para el plugin. Si no, comenta las líneas
                        c.CargarImagenLocalEImprimir("C:\\COSTABELLA\\sistemaCostabella\\static\\images\\anegragrande.png", 0, 216)
                        c.EscribirTexto("\n")
                        c.EstablecerTamañoFuente(1, 1)
                        c.EstablecerEnfatizado(True)
                        c.EscribirTexto("Sucursal: "+nombreSucursal+"\n")
                        c.EstablecerEnfatizado(False)
                        c.EscribirTexto("TEL: "+telefonoSucursal+"\n")
                        c.TextoSegunPaginaDeCodigos(2, "cp850", direccionSucursal+"\n")

                        c.EstablecerEnfatizado(True)
                        c.EscribirTexto("================================================\n")
                        c.EstablecerTamañoFuente(2, 2)
                        c.EscribirTexto("PAGO DE VENTA #"+str(idVentaCredito)+"\n")
                        c.EscribirTexto("CRÉDITO #"+str(idCreditoAPagar)+"\n")
                        c.EstablecerEnfatizado(False)
                        c.EstablecerAlineacion(Conector.ALINEACION_IZQUIERDA)
                        c.EstablecerTamañoFuente(1, 1)
                        c.EscribirTexto("\n")
                        c.EscribirTexto(" "+str(hoyFormato)+" - "+str(horaVenta)+" hrs.\n")
                        c.EscribirTexto("Atendida por: "+nombreCompletoEmpleadoVendedor+".\n")
                        c.EscribirTexto("\n")

                        #Listado de productos 
                        #Productos vendidos en ese credito

                        consultaVenta = Ventas.objects.filter(id_venta = idVentaCredito)
                        for datoVenta in consultaVenta:
                            codigosProductosVenta = datoVenta.ids_productos
                            cantidadesProductosVenta = datoVenta.cantidades_productos
                            idsServiciosCorporales = datoVenta.ids_servicios_corporales
                            cantidadServiciosCorporales = datoVenta.cantidades_servicios_corporales
                            idsServiciosFaciales = datoVenta.ids_servicios_faciales
                            cantidadServiciosFaciales = datoVenta.cantidades_servicios_faciales
                            descuento = datoVenta.descuento
                            costoTotalAPagar = datoVenta.monto_pagar
                            cliente = datoVenta.cliente_id

                        if cliente == None:
                            nombreClienteTicket = "Momentaneo"
                            idCienteTicket="Sin id"
                        else:
                            consultaCliente = Clientes.objects.filter(id_cliente = cliente)
                            for datoCliente in consultaCliente:
                                idCienteTicket = datoCliente.id_cliente
                                nombreCliente = datoCliente.nombre_cliente
                                apellidoCliente = datoCliente.apellidoPaterno_cliente
                            nombreClienteTicket = nombreCliente + " "+apellidoCliente
                            
                            

                        listaCodigosProductos = codigosProductosVenta.split(",")
                        listaCantidadesProductos = cantidadesProductosVenta.split(",")
                        listaIdsServiciosCorporales = idsServiciosCorporales.split(",")
                        listaCantidadesServiciosCorporales = cantidadServiciosCorporales.split(",")
                        listaIdsServiciosFaciales = idsServiciosFaciales.split(",")
                        listaCantidadesServiciosFaciales = cantidadServiciosFaciales.split(",")
                        
                        longitudProductos = len(listaCodigosProductos)
                        longitudServiciosCorporales = len(listaIdsServiciosCorporales)
                        longitudServiciosFaciales = len(listaIdsServiciosFaciales)


                        listaProductos = zip(listaCodigosProductos,listaCantidadesProductos)
                        listaServiciosCorporales = zip(listaIdsServiciosCorporales, listaCantidadesServiciosCorporales)
                        listaServiciosFaciales = zip(listaIdsServiciosFaciales, listaCantidadesServiciosFaciales)

                        if longitudProductos >= 1:
                            for codigo, cantidad in listaProductos:
                                if codigo != "":
                                    strCodigo = str(codigo)
                                    strCantidad = str(cantidad)
                                    consultaProductoVenta = ProductosVenta.objects.filter(codigo_producto = strCodigo)
                                    for datoProductoVenta in consultaProductoVenta:
                                        nombreProducto = datoProductoVenta.nombre_producto
                                        costoIndividualProducto = datoProductoVenta.costo_venta

                                    floatCantidad = float(cantidad)
                                    costototalProducto = costoIndividualProducto * floatCantidad
                                    costototalProductoDosDecimales = round(costototalProducto, 2)
                                    costototalProductoDosDecimales = str(costototalProductoDosDecimales)

                                    costoTotalProductoDivididoEnElPunto = costototalProductoDosDecimales.split(".")
                                    longitudCostoTotal = len(str(costoTotalProductoDivididoEnElPunto[0]))
                                    longitudCostoTotal = int(longitudCostoTotal)

                                    
                                    caracteresProducto = len(nombreProducto)

                                    if longitudCostoTotal == 2:
                                        espacio = 38
                                    if longitudCostoTotal == 2:
                                        espacio = 37
                                    elif longitudCostoTotal == 3:
                                        espacio = 36
                                    elif longitudCostoTotal == 4:
                                        espacio = 35
                                    elif longitudCostoTotal == 5:
                                        espacio = 34
                                    elif longitudCostoTotal == 6:
                                        espacio = 33
                                    numeroEspacios = espacio - int(caracteresProducto)
                                    
                                    espaciosTicket = ""
                                    for x in range(numeroEspacios):
                                        espacioMini = " "
                                        espaciosTicket = espaciosTicket + espacioMini
                                    c.EscribirTexto(strCantidad+" x "+nombreProducto+espaciosTicket+str(costototalProductoDosDecimales)+"\n")
                        
                        if longitudServiciosCorporales >=1:
                            for idd, cantidad in listaServiciosCorporales:
                                if idd != "":
                                    idServicio = int(idd)
                                    strCantidad = str(cantidad)
                                    consultaServicio = Servicios.objects.filter(id_servicio = idServicio)
                                    for datoServicio in consultaServicio:
                                        nombreServicio = datoServicio.nombre_servicio
                                        costoServicio = datoServicio.precio_venta

                                    floatCantidad = float(cantidad)
                                    costototalProducto = costoServicio * floatCantidad
                                    costototalProductoDosDecimales = round(costototalProducto, 2)
                                    costototalProductoDosDecimales = str(costototalProductoDosDecimales)

                                    costoTotalProductoDivididoEnElPunto = costototalProductoDosDecimales.split(".")
                                    longitudCostoTotal = len(str(costoTotalProductoDivididoEnElPunto[0]))
                                    longitudCostoTotal = int(longitudCostoTotal)

                                    
                                    caracteresProducto = len(nombreServicio)

                                    if longitudCostoTotal == 2:
                                        espacio = 38
                                    if longitudCostoTotal == 2:
                                        espacio = 37
                                    elif longitudCostoTotal == 3:
                                        espacio = 36
                                    elif longitudCostoTotal == 4:
                                        espacio = 35
                                    elif longitudCostoTotal == 5:
                                        espacio = 34
                                    elif longitudCostoTotal == 6:
                                        espacio = 33
                                    numeroEspacios = espacio - int(caracteresProducto)
                                    
                                    espaciosTicket = ""
                                    for x in range(numeroEspacios):
                                        espacioMini = " "
                                        espaciosTicket = espaciosTicket + espacioMini
                                    c.EscribirTexto(strCantidad+" x "+nombreServicio+espaciosTicket+str(costototalProductoDosDecimales)+"\n")

                        if longitudServiciosFaciales >=1:
                            for idd, cantidad in listaServiciosFaciales:
                                if idd != "":
                                    idServicio = int(idd)
                                    strCantidad = str(cantidad)
                                    consultaServicio = Servicios.objects.filter(id_servicio = idServicio)
                                    for datoServicio in consultaServicio:
                                        nombreServicio = datoServicio.nombre_servicio
                                        costoServicio = datoServicio.precio_venta

                                    floatCantidad = float(cantidad)
                                    costototalProducto = costoServicio * floatCantidad
                                    costototalProductoDosDecimales = round(costototalProducto, 2)
                                    costototalProductoDosDecimales = str(costototalProductoDosDecimales)

                                    costoTotalProductoDivididoEnElPunto = costototalProductoDosDecimales.split(".")
                                    longitudCostoTotal = len(str(costoTotalProductoDivididoEnElPunto[0]))
                                    longitudCostoTotal = int(longitudCostoTotal)

                                    
                                    caracteresProducto = len(nombreServicio)

                                    if longitudCostoTotal == 2:
                                        espacio = 38
                                    if longitudCostoTotal == 2:
                                        espacio = 37
                                    elif longitudCostoTotal == 3:
                                        espacio = 36
                                    elif longitudCostoTotal == 4:
                                        espacio = 35
                                    elif longitudCostoTotal == 5:
                                        espacio = 34
                                    elif longitudCostoTotal == 6:
                                        espacio = 33
                                    numeroEspacios = espacio - int(caracteresProducto)
                                    
                                    espaciosTicket = ""
                                    for x in range(numeroEspacios):
                                        espacioMini = " "
                                        espaciosTicket = espaciosTicket + espacioMini
                                    c.EscribirTexto(strCantidad+" x "+nombreServicio+espaciosTicket+str(costototalProductoDosDecimales)+"\n")
                        
                        

                        c.EscribirTexto("\n")
                        c.EscribirTexto("\n")

                        if descuento == None:
                            c.EstablecerTamañoFuente(2, 2)
                            c.EstablecerAlineacion(Conector.ALINEACION_DERECHA)
                            c.EscribirTexto("TOTAL:  $"+str(costoTotalAPagar)+"\n")
                            costoTotalPagarCredito = costoTotalAPagar
                            c.EscribirTexto("ABONADO: $"+str(cantidadPago4)+"\n")
                            c.EscribirTexto("RESTANTE: $"+str(restante)+"\n")
                        else:
                            intDescuento = int(descuento)
                            consultaDescuentos = Descuentos.objects.filter(porcentaje = intDescuento)
                            for datoDescuento in consultaDescuentos:
                                nombreDescuento = datoDescuento.nombre_descuento
                                porcentajeDescuento = datoDescuento.porcentaje

                            porcentajePagado = 100 - porcentajeDescuento #85
                            totalSinDescuento1 = 100 * costoTotalAPagar
                            totalSinDescuento2 = totalSinDescuento1/porcentajePagado
                            totalSinDescuento2 = round(totalSinDescuento2)

                            primerMulti = porcentajeDescuento * float(totalSinDescuento2)
                            primerDivision = primerMulti/100
                            resultadoDescuento = round(primerDivision)
                            
                            costoTotalAPagarConDescuento = totalSinDescuento2 - resultadoDescuento

                            c.EstablecerTamañoFuente(1, 1)
                            c.EstablecerAlineacion(Conector.ALINEACION_DERECHA)
                            c.EscribirTexto("Subtotal:  $"+str(totalSinDescuento2)+"\n")
                            c.EscribirTexto("Descuento:  $"+str(resultadoDescuento)+"\n")
                            c.EstablecerTamañoFuente(2, 2)
                            c.EscribirTexto("TOTAL:  $"+str(costoTotalAPagarConDescuento)+"\n")
                            c.EstablecerTamañoFuente(1, 1)
                            c.EscribirTexto("Descuento aplicado: -"+str(porcentajeDescuento)+"%- "+str(nombreDescuento)+"\n")
                            c.EscribirTexto("ABONADO: $"+str(cantidadPago4)+"\n")
                            c.EscribirTexto("RESTANTE: $"+str(restante)+"\n")
                            costoTotalPagarCredito = costoTotalAPagarConDescuento

                        c.EscribirTexto("\n")
                        c.EstablecerEnfatizado(True)
                        c.EstablecerTamañoFuente(1, 1)
                        c.EscribirTexto("========== IVA incluido en el precio ==========\n")
                        c.EscribirTexto("\n")
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        c.TextoSegunPaginaDeCodigos(2, "cp850", "INFORMACION DE PAGO.\n")
                        c.EstablecerEnfatizado(False)
                        c.EscribirTexto("\n")
                        c.EstablecerEnfatizado(True)
                        c.EscribirTexto("Pago en con Transferencia.\n")
                        c.EstablecerEnfatizado(False)
                        c.EscribirTexto("Transferencia.\n")
                        c.EscribirTexto("Clave de rastreo: "+str(clave_transferencia)+".\n")
                        c.EscribirTexto("Cuarto pago recibido.\n")
                        c.EstablecerEnfatizado(False)
                        if restante == 0:
                            c.EscribirTexto("PAGO LIQUIDADO\n")
                        
                        
                    
                        c.EscribirTexto("\n")
                        c.EstablecerEnfatizado(True)
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        c.TextoSegunPaginaDeCodigos(2, "cp850", "INFORMACIÓN DE CLIENTE.\n")

                        if nombreClienteTicket == "Momentaneo":
                            c.EstablecerEnfatizado(False)
                            c.EscribirTexto("Cliente momentaneo.\n")
                        else:
                            c.EstablecerEnfatizado(False)
                            c.EscribirTexto("ID:"+str(idCienteTicket)+" - "+nombreClienteTicket+".\n")
                        c.EscribirTexto("=========== Gracias por su compra!! ===========\n")
                        c.EstablecerTamañoFuente(2, 2)
                        c.EstablecerEnfatizado(True)
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        if contadorTickets == 1:
                            c.EscribirTexto("\n")
                            c.EscribirTexto("COPIA TIENDA.\n")
                            c.EscribirTexto("\n")
                            c.EstablecerTamañoFuente(1, 1)
                            c.EscribirTexto("________________________________________________\n")
                            c.EscribirTexto("Firma de cliente.\n")
                        else:
                            c.EscribirTexto("\n")
                            c.EscribirTexto("COPIA CLIENTE.\n")
                        c.EscribirTexto("\n")
                        c.EstablecerTamañoFuente(1, 1)
                        

                        c.Feed(1)
                        c.Corte(1)
                        #c.abrirCajon()
                        c.Pulso(48, 60, 120)
                        print("Imprimiendo...")
                        # Recuerda cambiar por el nombre de tu impresora
                        respuesta = c.imprimirEn("POS80 Printer")
                        if respuesta == True:
                            print("Impresión correcta")
                        else:
                            print(f"Error. El mensaje es: {respuesta}") 

                

           
                    
                 
                            
                            
                            
            if actualizarEstadoCreditoPago4 and registrarPago4:
                request.session['pago4Agregado'] = "Pago de crédito Guardado correctamente!"
                return redirect('/verCreditosClientes/')
            else:
                request.session['pago4NoAgregado'] = "Error en la base de datos, intentelo más tarde.."
                return redirect('/verCreditosClientes/')
            
            
            

             
        

    else:
        return render(request,"1 Login/login.html")
    
    
def verPanelAdministrativo(request):

    if "idSesion" in request.session:

        # Variables de sesión
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']
        idPerfil = idEmpleado
        idConfig = idEmpleado
       

        

        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
           #notificacionRentas
        notificacionRenta = notificacionRentas(request)

        #notificacionCitas
        notificacionCita = notificacionCitas(request)
        
        #permisosEmpleado
        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)

        #permisos
        tablas_modulos =["Panel administrativo","Empleados","Clientes","Sucursales","Ventas","Descuentos","Configuracion caja", "Movimientos","Movimiento semanal","Rentas","Calendario rentas","Productos",
                                     "Servicios","Paquetes","Creditos","Configuracion credito","Pagos creditos","Compras","Citas","Calendario citas","Codigos de barras", "Tratamientos", "Certificado"]
                    
        
        
        modulos = []
        modulosIconosJS = []
        contadorEmpleados1 = []
        contadorEmpleadosJS = []
        for tabla in tablas_modulos:
            
            consultaPermisosTabla = Permisos.objects.filter(tabla_modulo = tabla)
            
            registrosTabla = []
            contadorEmpleadosEnTabla = 0
            for permiso in consultaPermisosTabla:
                idPermiso = permiso.id_permiso
                idEmpleado = permiso.id_empleado_id
                nombreTabla = permiso.tabla_modulo
                consultaEmpleado = Empleados.objects.filter(id_empleado = idEmpleado)
                for datoEmpleado in consultaEmpleado:
                    nombre = datoEmpleado.nombres
                    apellidoPaterno = datoEmpleado.apellido_paterno

                    nombreCompletoEmpleado = nombre + " "+ apellidoPaterno

                    id_sucursal = datoEmpleado.id_sucursal_id

                    if id_sucursal == None:
                        nombreSucursal = "Sin sucursal"
                    else:
                        consultaSucursal = Sucursales.objects.filter(id_sucursal = id_sucursal)
                        for datoSucursal in consultaSucursal:
                            nombreSucursal = datoSucursal.nombre
                    
                ver = permiso.ver
                if ver == "Si":
                    contadorEmpleadosEnTabla = contadorEmpleadosEnTabla + 1
                agregar = permiso.agregar
                editar = permiso.editar
                bloquear = permiso.bloquear
                ver_detalles = permiso.ver_detalles
                activar = permiso.activar
                comprar = permiso.comprar
                recibir_pago = permiso.recibir_pagos

                registrosTabla.append([idPermiso,idEmpleado,nombreCompletoEmpleado,nombreSucursal,ver,agregar,editar,bloquear,ver_detalles,activar,comprar,recibir_pago])

            modulos.append([nombreTabla,registrosTabla])
            modulosIconosJS.append([nombreTabla,registrosTabla])
            contadorEmpleados1.append(contadorEmpleadosEnTabla)
            contadorEmpleadosJS.append(contadorEmpleadosEnTabla)
            
            
        if 'PermisosPanelAdminActualizados' in request.session:
            permisoPanelAdministracion = True
            mensaje =  request.session['PermisosPanelAdminActualizados'] 
            del  request.session['PermisosPanelAdminActualizados'] 
                
            return render(request, "16 Panel administrativo/verPanelAdministrativo.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado,
        "notificacionRenta":notificacionRenta, "modulos":modulos, "modulosIconosJS":modulosIconosJS,"permisoPanelAdministracion":permisoPanelAdministracion,"mensaje":mensaje,"consultaPermisos":consultaPermisos, "contadorEmpleados1":contadorEmpleados1,"contadorEmpleadosJS":contadorEmpleadosJS,"notificacionCita":notificacionCita})
        
        if "permisoPanelAdministracionNo" in request.session:
            permisoPanelAdministracionNo = True
            mensaje =  request.session['PermisosPanelAdminActualizados'] 
            del  request.session['permisoPanelAdministracionNo'] 
            return render(request, "16 Panel administrativo/verPanelAdministrativo.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado,
        "notificacionRenta":notificacionRenta, "modulos":modulos, "modulosIconosJS":modulosIconosJS,"permisoPanelAdministracionNo":permisoPanelAdministracionNo,"mensaje":mensaje,"consultaPermisos":consultaPermisos, "contadorEmpleados1":contadorEmpleados1,"contadorEmpleadosJS":contadorEmpleadosJS,"notificacionCita":notificacionCita})
               

        
       
        return render(request, "16 Panel administrativo/verPanelAdministrativo.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig,"consultaPermisos":consultaPermisos, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado,
        "notificacionRenta":notificacionRenta, "modulos":modulos, "modulosIconosJS":modulosIconosJS, "contadorEmpleados1":contadorEmpleados1, "contadorEmpleadosJS":contadorEmpleadosJS, "notificacionCita":notificacionCita})
    else:
        return render(request,"1 Login/login.html")
    
    
#Listo!!
def actualizarPermisosPanelAdministraativo(request):
    if "idSesion" in request.session:
     
        if request.method == "POST":
            
            
            permisos = Permisos.objects.filter(tabla_modulo = "Panel administrativo")
            for permiso in permisos:
                name = "ver"
                idPermiso = permiso.id_permiso
                stringIdPermido = str(idPermiso)
                nameJunto = name + stringIdPermido
                permiso = ""
                if request.POST.get(nameJunto,False): #checkbox chequeado
                    permiso = "Si"
                elif request.POST.get(nameJunto,True): #checkbox deschequeado
                    permiso = "No"
                
                actualizacionPermiso = Permisos.objects.filter(id_permiso = idPermiso).update(ver = permiso)
            if actualizacionPermiso:
                
                
                
                request.session['PermisosPanelAdminActualizados'] = "Se han actualizado los permisos del panel de administracion satisfactoriamente!"
                return redirect('/verPanelAdministrativo/')
            else:
                request.session['permisoPanelAdministracionNo'] = "Error en la base de datos! Intente más tarde!"
                return redirect('/verPanelAdministrativo/')
            
    else:
        return render(request,"1 Login/login.html")     

#Listo!!
def actualizarPermisosEmpleados(request):
    if "idSesion" in request.session:
     
        if request.method == "POST":
            
            
            permisos = Permisos.objects.filter(tabla_modulo = "Empleados")
            for permiso in permisos:
                nameVer = "ver"
                nameEditar = "editar"
                nameAgregar = "agregar"
                
                idPermiso = permiso.id_permiso
                stringIdPermido = str(idPermiso)
                nameJunto = nameVer + stringIdPermido
                
                nameJuntoEditar = nameEditar + stringIdPermido
                nameJuntoAgregar = nameAgregar + stringIdPermido
                
                
                permisoVer = ""
                if request.POST.get(nameJunto,False): #checkbox chequeado
                    permisoVer = "Si"
                elif request.POST.get(nameJunto,True): #checkbox deschequeado
                    permisoVer = "No"
                    
                permisoEditar = ""
                if request.POST.get(nameJuntoEditar,False): #checkbox chequeado
                    permisoEditar = "Si"
                elif request.POST.get(nameJuntoEditar,True): #checkbox deschequeado
                    permisoEditar = "No"
                
                permisoAgregar = ""
                if request.POST.get(nameJuntoAgregar,False): #checkbox chequeado
                    permisoAgregar = "Si"
                elif request.POST.get(nameJuntoAgregar,True): #checkbox deschequeado
                    permisoAgregar = "No"
                
                actualizacionPermiso = Permisos.objects.filter(id_permiso = idPermiso).update(ver = permisoVer, editar = permisoEditar,  agregar= permisoAgregar)
            if actualizacionPermiso:
                request.session['PermisosPanelAdminActualizados'] = "Se han actualizado los permisos del módulo Empleados satisfactoriamente!"
                return redirect('/verPanelAdministrativo/')
            else:
                request.session['permisoPanelAdministracionNo'] = "Error en la base de datos! Intente más tarde!"
                return redirect('/verPanelAdministrativo/')
    
    
    else:
        return render(request,"1 Login/login.html")
            
#Listo!!
def actualizarPermisosClientes(request):
    if "idSesion" in request.session:
     
        if request.method == "POST":
            
            
            permisos = Permisos.objects.filter(tabla_modulo = "Clientes")
            for permiso in permisos:
                nameVer = "ver"
                nameEditar = "editar"
                nameAgregar = "agregar"
                nameBloquear = "bloquear"
                nameVerDetalles = "verDetalles"
                
                idPermiso = permiso.id_permiso
                stringIdPermido = str(idPermiso)
                nameJunto = nameVer + stringIdPermido
                nameJuntoEditar = nameEditar + stringIdPermido
                nameJuntoAgregar = nameAgregar + stringIdPermido
                nameJuntoBloquear = nameBloquear + stringIdPermido
                nameJuntoVerDetalles = nameVerDetalles + stringIdPermido
                
                
                permisoVer = ""
                if request.POST.get(nameJunto,False): #checkbox chequeado
                    permisoVer = "Si"
                elif request.POST.get(nameJunto,True): #checkbox deschequeado
                    permisoVer = "No"
                    
                permisoEditar = ""
                if request.POST.get(nameJuntoEditar,False): #checkbox chequeado
                    permisoEditar = "Si"
                elif request.POST.get(nameJuntoEditar,True): #checkbox deschequeado
                    permisoEditar = "No"
                
                permisoAgregar = ""
                if request.POST.get(nameJuntoAgregar,False): #checkbox chequeado
                    permisoAgregar = "Si"
                elif request.POST.get(nameJuntoAgregar,True): #checkbox deschequeado
                    permisoAgregar = "No"
                    
                permisoBloquear = ""
                if request.POST.get(nameJuntoBloquear,False): #checkbox chequeado
                    permisoBloquear = "Si"
                elif request.POST.get(nameJuntoBloquear,True): #checkbox deschequeado
                    permisoBloquear = "No"
                    
                permisoVerDetalles = ""
                if request.POST.get(nameJuntoVerDetalles,False): #checkbox chequeado
                    permisoVerDetalles = "Si"
                elif request.POST.get(nameJuntoVerDetalles,True): #checkbox deschequeado
                    permisoVerDetalles = "No"
                
                actualizacionPermiso = Permisos.objects.filter(id_permiso = idPermiso).update(ver = permisoVer, editar = permisoEditar,  agregar= permisoAgregar, bloquear = permisoBloquear, ver_detalles = permisoVerDetalles)
            if actualizacionPermiso:
                request.session['PermisosPanelAdminActualizados'] = "Se han actualizado los permisos del módulo Clientes satisfactoriamente!"
                return redirect('/verPanelAdministrativo/')
            else:
                request.session['permisoPanelAdministracionNo'] = "Error en la base de datos! Intente más tarde!"
                return redirect('/verPanelAdministrativo/')
    
    
    else:
        return render(request,"1 Login/login.html")
             
#Listo!!
def actualizarPermisosSucursales(request):
    if "idSesion" in request.session:
     
        if request.method == "POST":
            
            
            permisos = Permisos.objects.filter(tabla_modulo = "Sucursales")
            for permiso in permisos:
                nameVer = "ver"
                nameAgregar = "agregar"
                nameVerDetalles = "verDetalles"
                
                idPermiso = permiso.id_permiso
                stringIdPermido = str(idPermiso)
                nameJunto = nameVer + stringIdPermido
                nameJuntoAgregar = nameAgregar + stringIdPermido
                nameJuntoVerDetalles = nameVerDetalles + stringIdPermido
                
                
                permisoVer = ""
                if request.POST.get(nameJunto,False): #checkbox chequeado
                    permisoVer = "Si"
                elif request.POST.get(nameJunto,True): #checkbox deschequeado
                    permisoVer = "No"
                    
               
                
                permisoAgregar = ""
                if request.POST.get(nameJuntoAgregar,False): #checkbox chequeado
                    permisoAgregar = "Si"
                elif request.POST.get(nameJuntoAgregar,True): #checkbox deschequeado
                    permisoAgregar = "No"
                    
                
                    
                permisoVerDetalles = ""
                if request.POST.get(nameJuntoVerDetalles,False): #checkbox chequeado
                    permisoVerDetalles = "Si"
                elif request.POST.get(nameJuntoVerDetalles,True): #checkbox deschequeado
                    permisoVerDetalles = "No"
                
                actualizacionPermiso = Permisos.objects.filter(id_permiso = idPermiso).update(ver = permisoVer, agregar= permisoAgregar, ver_detalles = permisoVerDetalles)
            if actualizacionPermiso:
                request.session['PermisosPanelAdminActualizados'] = "Se han actualizado los permisos del módulo Sucursales satisfactoriamente!"
                return redirect('/verPanelAdministrativo/')
            else:
                request.session['permisoPanelAdministracionNo'] = "Error en la base de datos! Intente más tarde!"
                return redirect('/verPanelAdministrativo/')
    
    
    else:
        return render(request,"1 Login/login.html")

#Listo!!
def actualizarPermisosVentas(request):
    if "idSesion" in request.session:
     
        if request.method == "POST":
            
            
            permisos = Permisos.objects.filter(tabla_modulo = "Ventas")
            for permiso in permisos:
                nameVer = "ver"
                nameAgregar = "agregar"
                
                
                idPermiso = permiso.id_permiso
                stringIdPermido = str(idPermiso)
                nameJunto = nameVer + stringIdPermido
                nameJuntoAgregar = nameAgregar + stringIdPermido
               
                
                permisoVer = ""
                if request.POST.get(nameJunto,False): #checkbox chequeado
                    permisoVer = "Si"
                elif request.POST.get(nameJunto,True): #checkbox deschequeado
                    permisoVer = "No"
                    
               
                
                permisoAgregar = ""
                if request.POST.get(nameJuntoAgregar,False): #checkbox chequeado
                    permisoAgregar = "Si"
                elif request.POST.get(nameJuntoAgregar,True): #checkbox deschequeado
                    permisoAgregar = "No"
                    
                
                    
                
                
                actualizacionPermiso = Permisos.objects.filter(id_permiso = idPermiso).update(ver = permisoVer, agregar= permisoAgregar)
            if actualizacionPermiso:
                request.session['PermisosPanelAdminActualizados'] = "Se han actualizado los permisos del módulo Ventas satisfactoriamente!"
                return redirect('/verPanelAdministrativo/')
            else:
                request.session['permisoPanelAdministracionNo'] = "Error en la base de datos! Intente más tarde!"
                return redirect('/verPanelAdministrativo/')
    
    
    else:
        return render(request,"1 Login/login.html")
            
#Listo!!
def actualizarPermisosDescuentos(request):
    if "idSesion" in request.session:
     
        if request.method == "POST":
            
            
            permisos = Permisos.objects.filter(tabla_modulo = "Descuentos")
            for permiso in permisos:
                nameVer = "ver"
                nameEditar = "editar"
                nameAgregar = "agregar"
                
                idPermiso = permiso.id_permiso
                stringIdPermido = str(idPermiso)
                nameJunto = nameVer + stringIdPermido
                
                nameJuntoEditar = nameEditar + stringIdPermido
                nameJuntoAgregar = nameAgregar + stringIdPermido
                
                
                permisoVer = ""
                if request.POST.get(nameJunto,False): #checkbox chequeado
                    permisoVer = "Si"
                elif request.POST.get(nameJunto,True): #checkbox deschequeado
                    permisoVer = "No"
                    
                permisoEditar = ""
                if request.POST.get(nameJuntoEditar,False): #checkbox chequeado
                    permisoEditar = "Si"
                elif request.POST.get(nameJuntoEditar,True): #checkbox deschequeado
                    permisoEditar = "No"
                
                permisoAgregar = ""
                if request.POST.get(nameJuntoAgregar,False): #checkbox chequeado
                    permisoAgregar = "Si"
                elif request.POST.get(nameJuntoAgregar,True): #checkbox deschequeado
                    permisoAgregar = "No"
                
                actualizacionPermiso = Permisos.objects.filter(id_permiso = idPermiso).update(ver = permisoVer, editar = permisoEditar,  agregar= permisoAgregar)
            if actualizacionPermiso:
                request.session['PermisosPanelAdminActualizados'] = "Se han actualizado los permisos del módulo Descuentos satisfactoriamente!"
                return redirect('/verPanelAdministrativo/')
            else:
                request.session['permisoPanelAdministracionNo'] = "Error en la base de datos! Intente más tarde!"
                return redirect('/verPanelAdministrativo/')
    
    
    else:
        return render(request,"1 Login/login.html")
              
#Listo!!
def actualizarPermisosCaja(request):
    if "idSesion" in request.session:
     
        if request.method == "POST":
            
            
            permisos = Permisos.objects.filter(tabla_modulo = "Configuracion caja")
            for permiso in permisos:
                nameVer = "ver"
                nameActivar = "activar"
                nameAgregar = "agregar"
                
                idPermiso = permiso.id_permiso
                stringIdPermido = str(idPermiso)
                nameJunto = nameVer + stringIdPermido
                
                nameJuntoActivar = nameActivar + stringIdPermido
                nameJuntoAgregar = nameAgregar + stringIdPermido
                
                
                permisoVer = ""
                if request.POST.get(nameJunto,False): #checkbox chequeado
                    permisoVer = "Si"
                elif request.POST.get(nameJunto,True): #checkbox deschequeado
                    permisoVer = "No"
                    
                permisoActivar = ""
                if request.POST.get(nameJuntoActivar,False): #checkbox chequeado
                    permisoActivar = "Si"
                elif request.POST.get(nameJuntoActivar,True): #checkbox deschequeado
                    permisoActivar = "No"
                
                permisoAgregar = ""
                if request.POST.get(nameJuntoAgregar,False): #checkbox chequeado
                    permisoAgregar = "Si"
                elif request.POST.get(nameJuntoAgregar,True): #checkbox deschequeado
                    permisoAgregar = "No"
                
                actualizacionPermiso = Permisos.objects.filter(id_permiso = idPermiso).update(ver = permisoVer, activar = permisoActivar,  agregar= permisoAgregar)
            if actualizacionPermiso:
                request.session['PermisosPanelAdminActualizados'] = "Se han actualizado los permisos del módulo Configuración Caja satisfactoriamente!"
                return redirect('/verPanelAdministrativo/')
            else:
                request.session['permisoPanelAdministracionNo'] = "Error en la base de datos! Intente más tarde!"
                return redirect('/verPanelAdministrativo/')
    
    
    else:
        return render(request,"1 Login/login.html")
    
#Listo!!
def actualizarPermisosMovimientosTotalesCaja(request):
    if "idSesion" in request.session:
     
        if request.method == "POST":
            
            
            permisos = Permisos.objects.filter(tabla_modulo = "Movimientos")
            for permiso in permisos:
                nameVer = "ver"
                nameAgregar = "agregar"
                
                idPermiso = permiso.id_permiso
                stringIdPermido = str(idPermiso)
                nameJunto = nameVer + stringIdPermido
                
                nameJuntoAgregar = nameAgregar + stringIdPermido
                
                
                permisoVer = ""
                if request.POST.get(nameJunto,False): #checkbox chequeado
                    permisoVer = "Si"
                elif request.POST.get(nameJunto,True): #checkbox deschequeado
                    permisoVer = "No"
                    
               
                permisoAgregar = ""
                if request.POST.get(nameJuntoAgregar,False): #checkbox chequeado
                    permisoAgregar = "Si"
                elif request.POST.get(nameJuntoAgregar,True): #checkbox deschequeado
                    permisoAgregar = "No"
                
                actualizacionPermiso = Permisos.objects.filter(id_permiso = idPermiso).update(ver = permisoVer,  agregar= permisoAgregar)
            if actualizacionPermiso:
                request.session['PermisosPanelAdminActualizados'] = "Se han actualizado los permisos del módulo Movimientos de Caja satidfactoriamente"
                return redirect('/verPanelAdministrativo/')
            else:
                request.session['permisoPanelAdministracionNo'] = "Error en la base de datos! Intente más tarde!"
                return redirect('/verPanelAdministrativo/')
    
    
    else:
        return render(request,"1 Login/login.html") 

#Listo!!
def actualizarPermisosMovimientosSemanalCaja(request):
    if "idSesion" in request.session:
     
        if request.method == "POST":
            
            
            permisos = Permisos.objects.filter(tabla_modulo = "Movimiento semanal")
            for permiso in permisos:
                nameVer = "ver"
                nameAgregar = "agregar"
                
                idPermiso = permiso.id_permiso
                stringIdPermido = str(idPermiso)
                nameJunto = nameVer + stringIdPermido
                
                nameJuntoAgregar = nameAgregar + stringIdPermido
                
                
                permisoVer = ""
                if request.POST.get(nameJunto,False): #checkbox chequeado
                    permisoVer = "Si"
                elif request.POST.get(nameJunto,True): #checkbox deschequeado
                    permisoVer = "No"
                    
               
                permisoAgregar = ""
                if request.POST.get(nameJuntoAgregar,False): #checkbox chequeado
                    permisoAgregar = "Si"
                elif request.POST.get(nameJuntoAgregar,True): #checkbox deschequeado
                    permisoAgregar = "No"
                
                actualizacionPermiso = Permisos.objects.filter(id_permiso = idPermiso).update(ver = permisoVer,  agregar= permisoAgregar)
            if actualizacionPermiso:
                request.session['PermisosPanelAdminActualizados'] = "Se han actualizado los permisos del módulo Movimientos Semanales de Caja satisfactoriamente!"
                return redirect('/verPanelAdministrativo/')
            else:
                request.session['permisoPanelAdministracionNo'] = "Error en la base de datos! Intente más tarde!"
                return redirect('/verPanelAdministrativo/')
    
    
    else:
        return render(request,"1 Login/login.html") 

#Listo!!
def actualizarPermisosRentas(request):
    if "idSesion" in request.session:
     
        if request.method == "POST":
            
            
            permisos = Permisos.objects.filter(tabla_modulo = "Rentas")
            for permiso in permisos:
                nameVer = "ver"
                nameAgregar = "agregar"
                
                idPermiso = permiso.id_permiso
                stringIdPermido = str(idPermiso)
                nameJunto = nameVer + stringIdPermido
                
                nameJuntoAgregar = nameAgregar + stringIdPermido
                
                
                permisoVer = ""
                if request.POST.get(nameJunto,False): #checkbox chequeado
                    permisoVer = "Si"
                elif request.POST.get(nameJunto,True): #checkbox deschequeado
                    permisoVer = "No"
                    
               
                permisoAgregar = ""
                if request.POST.get(nameJuntoAgregar,False): #checkbox chequeado
                    permisoAgregar = "Si"
                elif request.POST.get(nameJuntoAgregar,True): #checkbox deschequeado
                    permisoAgregar = "No"
                
                actualizacionPermiso = Permisos.objects.filter(id_permiso = idPermiso).update(ver = permisoVer,  agregar= permisoAgregar)
            if actualizacionPermiso:
                request.session['PermisosPanelAdminActualizados'] = "Se han actualizado los permisos del módulo Rentas satisfactoriamente!"
                return redirect('/verPanelAdministrativo/')
            else:
                request.session['permisoPanelAdministracionNo'] = "Error en la base de datos! Intente más tarde!"
                return redirect('/verPanelAdministrativo/')
    
    
    else:
        return render(request,"1 Login/login.html") 
            
#Listo!!
def actualizarPermisosCalendarioRentas(request):
    if "idSesion" in request.session:
     
        if request.method == "POST":
            
            
            permisos = Permisos.objects.filter(tabla_modulo = "Calendario rentas")
            for permiso in permisos:
                nameVer = "ver"
                
                idPermiso = permiso.id_permiso
                stringIdPermido = str(idPermiso)
                nameJunto = nameVer + stringIdPermido
                
                
                
                permisoVer = ""
                if request.POST.get(nameJunto,False): #checkbox chequeado
                    permisoVer = "Si"
                elif request.POST.get(nameJunto,True): #checkbox deschequeado
                    permisoVer = "No"
                    
               
                
                actualizacionPermiso = Permisos.objects.filter(id_permiso = idPermiso).update(ver = permisoVer)
            if actualizacionPermiso:
                request.session['PermisosPanelAdminActualizados'] = "Se han actualizado los permisos del módulo Calendario Rentas satisfactoriamente!"
                return redirect('/verPanelAdministrativo/')
            else:
                request.session['permisoPanelAdministracionNo'] = "Error en la base de datos! Intente más tarde!"
                return redirect('/verPanelAdministrativo/')
    
    
    else:
        return render(request,"1 Login/login.html")   
            
#Listo!!
def actualizarPermisosProductos(request):
    if "idSesion" in request.session:
     
        if request.method == "POST":
            
            
            permisos = Permisos.objects.filter(tabla_modulo = "Productos")
            for permiso in permisos:
                nameVer = "ver"
                nameAgregar = "agregar"
                nameEditar = "editar"
                nameComprar = "comprar"
                
                idPermiso = permiso.id_permiso
                stringIdPermido = str(idPermiso)
                nameJunto = nameVer + stringIdPermido
                
                nameJuntoAgregar = nameAgregar + stringIdPermido
                nameJuntoEditar = nameEditar + stringIdPermido
                nameJuntoComprar = nameComprar + stringIdPermido
                
                
                permisoVer = ""
                if request.POST.get(nameJunto,False): #checkbox chequeado
                    permisoVer = "Si"
                elif request.POST.get(nameJunto,True): #checkbox deschequeado
                    permisoVer = "No"
                    
               
                permisoAgregar = ""
                if request.POST.get(nameJuntoAgregar,False): #checkbox chequeado
                    permisoAgregar = "Si"
                elif request.POST.get(nameJuntoAgregar,True): #checkbox deschequeado
                    permisoAgregar = "No"
                    
                permisoEditar = ""
                if request.POST.get(nameJuntoEditar,False): #checkbox chequeado
                    permisoEditar = "Si"
                elif request.POST.get(nameJuntoEditar,True): #checkbox deschequeado
                    permisoEditar = "No"
                    
                    
                permisoComprar = ""
                if request.POST.get(nameJuntoComprar,False): #checkbox chequeado
                    permisoComprar = "Si"
                elif request.POST.get(nameJuntoComprar,True): #checkbox deschequeado
                    permisoComprar = "No"
                
                actualizacionPermiso = Permisos.objects.filter(id_permiso = idPermiso).update(ver = permisoVer,  agregar= permisoAgregar, editar = permisoEditar, comprar = permisoComprar)
            if actualizacionPermiso:
                request.session['PermisosPanelAdminActualizados'] = "Se han actualizado los permisos del módulo Productos satisfactoriamente!"
                return redirect('/verPanelAdministrativo/')
            else:
                request.session['permisoPanelAdministracionNo'] = "Error en la base de datos! Intente más tarde!"
                return redirect('/verPanelAdministrativo/')
    
    
    else:
        return render(request,"1 Login/login.html")       
                   
#Listo!!
def actualizarPermisosServicios(request):
    if "idSesion" in request.session:
     
        if request.method == "POST":
            
            
            permisos = Permisos.objects.filter(tabla_modulo = "Servicios")
            for permiso in permisos:
                nameVer = "ver"
                nameEditar = "editar"
                nameAgregar = "agregar"
                
                idPermiso = permiso.id_permiso
                stringIdPermido = str(idPermiso)
                nameJunto = nameVer + stringIdPermido
                
                nameJuntoEditar = nameEditar + stringIdPermido
                nameJuntoAgregar = nameAgregar + stringIdPermido
                
                
                permisoVer = ""
                if request.POST.get(nameJunto,False): #checkbox chequeado
                    permisoVer = "Si"
                elif request.POST.get(nameJunto,True): #checkbox deschequeado
                    permisoVer = "No"
                    
                permisoEditar = ""
                if request.POST.get(nameJuntoEditar,False): #checkbox chequeado
                    permisoEditar = "Si"
                elif request.POST.get(nameJuntoEditar,True): #checkbox deschequeado
                    permisoEditar = "No"
                
                permisoAgregar = ""
                if request.POST.get(nameJuntoAgregar,False): #checkbox chequeado
                    permisoAgregar = "Si"
                elif request.POST.get(nameJuntoAgregar,True): #checkbox deschequeado
                    permisoAgregar = "No"
                
                actualizacionPermiso = Permisos.objects.filter(id_permiso = idPermiso).update(ver = permisoVer, editar = permisoEditar,  agregar= permisoAgregar)
            if actualizacionPermiso:
                request.session['PermisosPanelAdminActualizados'] = "Se han actualizado los permisos del módulo Servicios satisfactoriamente!"
                return redirect('/verPanelAdministrativo/')
            else:
                request.session['permisoPanelAdministracionNo'] = "Error en la base de datos! Intente más tarde!"
                return redirect('/verPanelAdministrativo/')
    
    
    else:
        return render(request,"1 Login/login.html")   
            
#Listo!!
def actualizarPermisosPaquetesServicios(request):
    if "idSesion" in request.session:
     
        if request.method == "POST":
            
            
            permisos = Permisos.objects.filter(tabla_modulo = "Paquetes")
            for permiso in permisos:
                nameVer = "ver"
                nameEditar = "editar"
                nameAgregar = "agregar"
                
                idPermiso = permiso.id_permiso
                stringIdPermido = str(idPermiso)
                nameJunto = nameVer + stringIdPermido
                
                nameJuntoEditar = nameEditar + stringIdPermido
                nameJuntoAgregar = nameAgregar + stringIdPermido
                
                
                permisoVer = ""
                if request.POST.get(nameJunto,False): #checkbox chequeado
                    permisoVer = "Si"
                elif request.POST.get(nameJunto,True): #checkbox deschequeado
                    permisoVer = "No"
                    
                permisoEditar = ""
                if request.POST.get(nameJuntoEditar,False): #checkbox chequeado
                    permisoEditar = "Si"
                elif request.POST.get(nameJuntoEditar,True): #checkbox deschequeado
                    permisoEditar = "No"
                
                permisoAgregar = ""
                if request.POST.get(nameJuntoAgregar,False): #checkbox chequeado
                    permisoAgregar = "Si"
                elif request.POST.get(nameJuntoAgregar,True): #checkbox deschequeado
                    permisoAgregar = "No"
                
                actualizacionPermiso = Permisos.objects.filter(id_permiso = idPermiso).update(ver = permisoVer, editar = permisoEditar,  agregar= permisoAgregar)
            if actualizacionPermiso:
                request.session['PermisosPanelAdminActualizados'] = "Se han actualizado los permisos del módulo Paquetes de servicios satisfactoriamente!"
                return redirect('/verPanelAdministrativo/')
            else:
                request.session['permisoPanelAdministracionNo'] = "Error en la base de datos! Intente más tarde!"
                return redirect('/verPanelAdministrativo/')
    
    
    else:
        return render(request,"1 Login/login.html")     
            
#Listo!!
def actualizarPermisosCreditos(request):
    if "idSesion" in request.session:
     
        if request.method == "POST":
            
            
            permisos = Permisos.objects.filter(tabla_modulo = "Creditos")
            for permiso in permisos:
                nameVer = "ver"
                nameEditar = "editar"
                nameAgregar = "agregar"
                
                idPermiso = permiso.id_permiso
                stringIdPermido = str(idPermiso)
                nameJunto = nameVer + stringIdPermido
                
                
                
                permisoVer = ""
                if request.POST.get(nameJunto,False): #checkbox chequeado
                    permisoVer = "Si"
                elif request.POST.get(nameJunto,True): #checkbox deschequeado
                    permisoVer = "No"
                    
               
                
                actualizacionPermiso = Permisos.objects.filter(id_permiso = idPermiso).update(ver = permisoVer)
            if actualizacionPermiso:
                request.session['PermisosPanelAdminActualizados'] = "Se han actualizado los permisos del módulo Créditos satisfactoriamente!"
                return redirect('/verPanelAdministrativo/')
            else:
                request.session['permisoPanelAdministracionNo'] = "Error en la base de datos! Intente más tarde!"
                return redirect('/verPanelAdministrativo/')
    
    
    else:
        return render(request,"1 Login/login.html")     
       
#Listo!!
def actualizarPermisosConfiguracionCreditos(request):
    if "idSesion" in request.session:
     
        if request.method == "POST":
            
            
            permisos = Permisos.objects.filter(tabla_modulo = "Configuracion credito")
            for permiso in permisos:
                nameVer = "ver"
                nameActivar = "activar"
                nameAgregar = "agregar"
                
                idPermiso = permiso.id_permiso
                stringIdPermido = str(idPermiso)
                nameJunto = nameVer + stringIdPermido
                
                nameJuntoActivar = nameActivar + stringIdPermido
                nameJuntoAgregar = nameAgregar + stringIdPermido
                
                
                permisoVer = ""
                if request.POST.get(nameJunto,False): #checkbox chequeado
                    permisoVer = "Si"
                elif request.POST.get(nameJunto,True): #checkbox deschequeado
                    permisoVer = "No"
                    
                permisoActivar = ""
                if request.POST.get(nameJuntoActivar,False): #checkbox chequeado
                    permisoActivar = "Si"
                elif request.POST.get(nameJuntoActivar,True): #checkbox deschequeado
                    permisoActivar = "No"
                
                permisoAgregar = ""
                if request.POST.get(nameJuntoAgregar,False): #checkbox chequeado
                    permisoAgregar = "Si"
                elif request.POST.get(nameJuntoAgregar,True): #checkbox deschequeado
                    permisoAgregar = "No"
                
                actualizacionPermiso = Permisos.objects.filter(id_permiso = idPermiso).update(ver = permisoVer, activar = permisoActivar,  agregar= permisoAgregar)
            if actualizacionPermiso:
                request.session['PermisosPanelAdminActualizados'] = "Se han actualizado los permisos del módulo Configuración de Crédito satisfactoriamente!s"
                return redirect('/verPanelAdministrativo/')
            else:
                request.session['permisoPanelAdministracionNo'] = "Error en la base de datos! Intente más tarde!"
                return redirect('/verPanelAdministrativo/')
    
    
    else:
        return render(request,"1 Login/login.html")
            
#Listo!!
def actualizarPermisosPagosCreditos(request):
    if "idSesion" in request.session:
     
        if request.method == "POST":
            
            
            permisos = Permisos.objects.filter(tabla_modulo = "Pagos creditos")
            for permiso in permisos:
                nameVer = "ver"
                nameRecibirPagos = "recibirPagos"
                
                idPermiso = permiso.id_permiso
                stringIdPermido = str(idPermiso)
                nameJunto = nameVer + stringIdPermido
                
                nameJuntoRecibirPagos = nameRecibirPagos + stringIdPermido
                
                
                permisoVer = ""
                if request.POST.get(nameJunto,False): #checkbox chequeado
                    permisoVer = "Si"
                elif request.POST.get(nameJunto,True): #checkbox deschequeado
                    permisoVer = "No"
                    
                permisoRecibirPagos = ""
                if request.POST.get(nameJuntoRecibirPagos,False): #checkbox chequeado
                    permisoRecibirPagos = "Si"
                elif request.POST.get(nameJuntoRecibirPagos,True): #checkbox deschequeado
                    permisoRecibirPagos = "No"
                
               
                
                actualizacionPermiso = Permisos.objects.filter(id_permiso = idPermiso).update(ver = permisoVer, recibir_pagos = permisoRecibirPagos)
            if actualizacionPermiso:
                request.session['PermisosPanelAdminActualizados'] = "Se han actualizado los permisos del módulo Pagos de Crédito satisfactoriamente!"
                return redirect('/verPanelAdministrativo/')
            else:
                request.session['permisoPanelAdministracionNo'] = "Error en la base de datos! Intente más tarde!"
                return redirect('/verPanelAdministrativo/')
    
    
    else:
        return render(request,"1 Login/login.html")
    
#Listo!!  
def actualizarPermisosCompras(request):
    if "idSesion" in request.session:
     
        if request.method == "POST":
            
            
            permisos = Permisos.objects.filter(tabla_modulo = "Compras")
            for permiso in permisos:
                nameVer = "ver"
                nameRecibirPagos = "recibirPagos"
                
                idPermiso = permiso.id_permiso
                stringIdPermido = str(idPermiso)
                nameJunto = nameVer + stringIdPermido
                
                
                
                permisoVer = ""
                if request.POST.get(nameJunto,False): #checkbox chequeado
                    permisoVer = "Si"
                elif request.POST.get(nameJunto,True): #checkbox deschequeado
                    permisoVer = "No"
                    
                
               
                
                actualizacionPermiso = Permisos.objects.filter(id_permiso = idPermiso).update(ver = permisoVer)
            if actualizacionPermiso:
                request.session['PermisosPanelAdminActualizados'] = "Se han actualizado los permisos del módulo Compras satisfactoriamente!"
                return redirect('/verPanelAdministrativo/')
            else:
                request.session['permisoPanelAdministracionNo'] = "Error en la base de datos! Intente más tarde!"
                return redirect('/verPanelAdministrativo/')
    
    
    else:
        return render(request,"1 Login/login.html") 

#Listo!!
def actualizarPermisosCitas(request):
    if "idSesion" in request.session:
     
        if request.method == "POST":
            
            
            permisos = Permisos.objects.filter(tabla_modulo = "Citas")
            for permiso in permisos:
                nameVer = "ver"
                nameEditar = "editar"
                nameAgregar = "agregar"
                
                idPermiso = permiso.id_permiso
                stringIdPermido = str(idPermiso)
                nameJunto = nameVer + stringIdPermido
                
                nameJuntoEditar = nameEditar + stringIdPermido
                nameJuntoAgregar = nameAgregar + stringIdPermido
                
                
                permisoVer = ""
                if request.POST.get(nameJunto,False): #checkbox chequeado
                    permisoVer = "Si"
                elif request.POST.get(nameJunto,True): #checkbox deschequeado
                    permisoVer = "No"
                    
                permisoEditar = ""
                if request.POST.get(nameJuntoEditar,False): #checkbox chequeado
                    permisoEditar = "Si"
                elif request.POST.get(nameJuntoEditar,True): #checkbox deschequeado
                    permisoEditar = "No"
                
                permisoAgregar = ""
                if request.POST.get(nameJuntoAgregar,False): #checkbox chequeado
                    permisoAgregar = "Si"
                elif request.POST.get(nameJuntoAgregar,True): #checkbox deschequeado
                    permisoAgregar = "No"
                
                actualizacionPermiso = Permisos.objects.filter(id_permiso = idPermiso).update(ver = permisoVer, editar = permisoEditar,  agregar= permisoAgregar)
            if actualizacionPermiso:
                request.session['PermisosPanelAdminActualizados'] = "Se han actualizado los permisos del módulo Citas satisfactoriamente!"
                return redirect('/verPanelAdministrativo/')
            else:
                request.session['permisoPanelAdministracionNo'] = "Error en la base de datos! Intente más tarde!"
                return redirect('/verPanelAdministrativo/')
    
    
    else:
        return render(request,"1 Login/login.html")    

#Listo!!
def actualizarPermisosCalendarioCitas(request):
    
    if "idSesion" in request.session:
     
        if request.method == "POST":
            
            
            permisos = Permisos.objects.filter(tabla_modulo = "Calendario citas")
            for permiso in permisos:
                nameVer = "ver"
                
                idPermiso = permiso.id_permiso
                stringIdPermido = str(idPermiso)
                nameJunto = nameVer + stringIdPermido
                
               
                
                
                permisoVer = ""
                if request.POST.get(nameJunto,False): #checkbox chequeado
                    permisoVer = "Si"
                elif request.POST.get(nameJunto,True): #checkbox deschequeado
                    permisoVer = "No"
                    
               
                
                actualizacionPermiso = Permisos.objects.filter(id_permiso = idPermiso).update(ver = permisoVer)
            if actualizacionPermiso:
                request.session['PermisosPanelAdminActualizados'] = "Se han actualizado los permisos del módulo Calendario Citas satisfactoriamente!"
                return redirect('/verPanelAdministrativo/')
            else:
                request.session['permisoPanelAdministracionNo'] = "Error en la base de datos! Intente más tarde!"
                return redirect('/verPanelAdministrativo/')
    
    
    else:
        return render(request,"1 Login/login.html")  
    
#Listo!!    
def actualizarPermisosCodigoBarras(request):
    if "idSesion" in request.session:
     
        if request.method == "POST":
            
            
            permisos = Permisos.objects.filter(tabla_modulo = "Codigos de barras")
            for permiso in permisos:
                nameVer = "ver"
                
                idPermiso = permiso.id_permiso
                stringIdPermido = str(idPermiso)
                nameJunto = nameVer + stringIdPermido
                
               
                
                
                permisoVer = ""
                if request.POST.get(nameJunto,False): #checkbox chequeado
                    permisoVer = "Si"
                elif request.POST.get(nameJunto,True): #checkbox deschequeado
                    permisoVer = "No"
                    
               
                
                actualizacionPermiso = Permisos.objects.filter(id_permiso = idPermiso).update(ver = permisoVer)
            if actualizacionPermiso:
                request.session['PermisosPanelAdminActualizados'] = "Se han actualizado los permisos del módulo Código de barras satisfactoriamente!"
                return redirect('/verPanelAdministrativo/')
            else:
                request.session['permisoPanelAdministracionNo'] = "Error en la base de datos! Intente más tarde!"
                return redirect('/verPanelAdministrativo/')
    
    
    else:
        return render(request,"1 Login/login.html")  
    
    
#Actualizar Tratamientos
def actualizarPermisosTratamientos(request):
    if "idSesion" in request.session:
     
        if request.method == "POST":
            
            
            permisos = Permisos.objects.filter(tabla_modulo = "Tratamientos")
            for permiso in permisos:
                nameVer = "ver"
                nameEditar = "editar"
                nameAgregar = "agregar"
                
                idPermiso = permiso.id_permiso
                stringIdPermido = str(idPermiso)
                
                
                nameJunto = nameVer + stringIdPermido
                nameJuntoEditar = nameEditar + stringIdPermido
                nameJuntoAgregar = nameAgregar + stringIdPermido
                
                
                permisoVer = ""
                if request.POST.get(nameJunto,False): #checkbox chequeado
                    permisoVer = "Si"
                elif request.POST.get(nameJunto,True): #checkbox deschequeado
                    permisoVer = "No"
                    
                permisoEditar = ""
                if request.POST.get(nameJuntoEditar,False): #checkbox chequeado
                    permisoEditar = "Si"
                elif request.POST.get(nameJuntoEditar,True): #checkbox deschequeado
                    permisoEditar = "No"
                
                permisoAgregar = ""
                if request.POST.get(nameJuntoAgregar,False): #checkbox chequeado
                    permisoAgregar = "Si"
                elif request.POST.get(nameJuntoAgregar,True): #checkbox deschequeado
                    permisoAgregar = "No"
                
                actualizacionPermiso = Permisos.objects.filter(id_permiso = idPermiso).update(ver = permisoVer, editar = permisoEditar,  agregar= permisoAgregar)
            if actualizacionPermiso:
                request.session['PermisosPanelAdminActualizados'] = "Se han actualizado los permisos del módulo Tratamientos satisfactoriamente!"
                return redirect('/verPanelAdministrativo/')
            else:
                request.session['permisoPanelAdministracionNo'] = "Error en la base de datos! Intente más tarde!"
                return redirect('/verPanelAdministrativo/')
    
    
    else:
        return render(request,"1 Login/login.html")  
    
#Listo!!    
def actualizarPermisosCertificados(request):
    if "idSesion" in request.session:
     
        if request.method == "POST":
            
            
            permisos = Permisos.objects.filter(tabla_modulo = "Certificado")
            for permiso in permisos:
                nameVer = "ver"
                nameAgregar = "agregar"
                
                idPermiso = permiso.id_permiso
                stringIdPermido = str(idPermiso)
                nameJunto = nameVer + stringIdPermido
                nameJuntoAgregar = nameAgregar + stringIdPermido
                
               
                
                
                permisoVer = ""
                if request.POST.get(nameJunto,False): #checkbox chequeado
                    permisoVer = "Si"
                elif request.POST.get(nameJunto,True): #checkbox deschequeado
                    permisoVer = "No"
                    
                    
                permisoAgregar = ""
                if request.POST.get(nameJuntoAgregar,False): #checkbox chequeado
                    permisoAgregar = "Si"
                elif request.POST.get(nameJuntoAgregar,True): #checkbox deschequeado
                    permisoAgregar = "No"
                    
               
                
                actualizacionPermiso = Permisos.objects.filter(id_permiso = idPermiso).update(ver = permisoVer, agregar = permisoAgregar)
            if actualizacionPermiso:
                request.session['PermisosPanelAdminActualizados'] = "Se han actualizado los permisos del módulo de Certificados de regalos satisfactoriamente!"
                return redirect('/verPanelAdministrativo/')
            else:
                request.session['permisoPanelAdministracionNo'] = "Error en la base de datos! Intente más tarde!"
                return redirect('/verPanelAdministrativo/')
    
    
    else:
        return render(request,"1 Login/login.html")  

def informeDeVentas(request):

    if "idSesion" in request.session:

        # Variables de sesión
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']
        idPerfil = idEmpleado
        idConfig = idEmpleado

        

        

        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
        
           #notificacionRentas
        notificacionRenta = notificacionRentas(request)

        #notificacionCitas
        notificacionCita = notificacionCitas(request)

        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)

        hoy = datetime.now()
        
        mesdehoynumero = hoy.strftime('%m') #06
        
        mesesDic = {
            "01":'Enero',
            "02":'Febrero',
            "03":'Marzo',
            "04":'Abril',
            "05":'Mayo',
            "06":'Junio',
            "07":'Julio',
            "08":'Agosto',
            "09":'Septiembre',
            "10":'Octubre',
            "11":'Noviembre',
            "12":'Diciembre'
        }
        
        diasMeses = {
            'Enero':'31',
            'Febrero':'28',
            'Marzo':'31',
            'Abril':'30',
            'Mayo':'31',
            'Junio':'30',
            'Julio':'31',
            'Agosto':'31',
            'Septiembre':'30',
            'Octubre':'31',
            'Noviembre':'30',
            'Diciembre':'31'
        }
        #Mes actual
        diadehoy = hoy.strftime('%d')
        añoHoy = hoy.strftime('%Y')
        mesdehoy = mesesDic[str(mesdehoynumero)]
        
        fechaDiaMesActual = añoHoy+"-"+mesdehoynumero+"-"+diadehoy  #Día actual  2022-06-07
        fechaInicioMesActual = añoHoy+"-"+mesdehoynumero+"-01"  #Primer día del mes 2022-06-01  
        
        #Ingresos totales de mes actual, ventas, creditos y rentas
        consultaVentasMesActual = Ventas.objects.filter(fecha_venta__range=[fechaInicioMesActual,fechaDiaMesActual], credito="N")
        
        montoIngresoMesActual = 0
        contadorVentasmesActual = 0
        contadorRentasmesActual =0
        contadorCreditosmesActual =0

        numeroCreditos = 0
        numeroVentas =0
        numeroRentas =0



        
        if consultaVentasMesActual:
            for ventaRealizada in consultaVentasMesActual:
                montoVenta = ventaRealizada.monto_pagar
                montoIngresoMesActual = montoIngresoMesActual + montoVenta
                contadorVentasmesActual = contadorVentasmesActual + montoVenta
                numeroVentas = numeroVentas +1
        
        consultaCreditosMesActual = Creditos.objects.filter(fecha_venta_credito__range=[fechaInicioMesActual,fechaDiaMesActual], renta_id__isnull=True)
        
        if consultaCreditosMesActual:
            for crceditoRealizado in consultaCreditosMesActual:
                montoPagadoCredito = crceditoRealizado.monto_pagado
                montoIngresoMesActual = montoIngresoMesActual + montoPagadoCredito
                contadorCreditosmesActual = contadorCreditosmesActual + montoPagadoCredito
                numeroCreditos = numeroCreditos +1
            
        consultaRentasMesActual = Rentas.objects.filter(fecha_apartado__range=[fechaInicioMesActual,fechaDiaMesActual])
        
        if consultaRentasMesActual:
            for rentaRealizada in consultaRentasMesActual:
                montoPagadoApartado = rentaRealizada.monto_pago_apartado
                montoPagadoRestante = rentaRealizada.monto_restante
                
                sumaPagosRenta = 0
                if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                    sumaPagosRenta = rentaRealizada.monto_total_renta
                else: #Si ya se pago el restante
                    sumaPagosRenta = montoPagadoApartado 
                montoIngresoMesActual = montoIngresoMesActual + sumaPagosRenta

                contadorRentasmesActual = contadorRentasmesActual + sumaPagosRenta
                numeroRentas = numeroRentas +1

        
        #totales efectivo, tarjeta, transferencia

        #EFECTIVO
        consultaVentasMesEfectivo = Ventas.objects.filter(fecha_venta__range=[fechaInicioMesActual,fechaDiaMesActual],tipo_pago="Efectivo",credito="N")
        totalEfectivo =0
        for efectivo in consultaVentasMesEfectivo:
            monto_efectivo = efectivo.monto_pagar
            totalEfectivo = totalEfectivo + monto_efectivo

       

        
        #TARJETA
        consultaVentasMesTarjeta = Ventas.objects.filter(fecha_venta__range=[fechaInicioMesActual,fechaDiaMesActual],tipo_pago="Tarjeta",credito="N")
        totalTarjeta =0
        for tarjeta in consultaVentasMesTarjeta:
            montoTarjeta = tarjeta.monto_pagar
            totalTarjeta = totalTarjeta + montoTarjeta
        
        #TRANSFERENCIA 
        consultaVentasMesTransferencia = Ventas.objects.filter(fecha_venta__range=[fechaInicioMesActual,fechaDiaMesActual],tipo_pago="Transferencia",credito="N")
        totalTransferencia =0
        for transferencia in consultaVentasMesTransferencia:
            montoTransferencia = transferencia.monto_pagar
            totalTransferencia = totalTransferencia + montoTransferencia
        
        #PAGOS DE LOS CREDITOS
        creditosEfectivo = Creditos.objects.filter(fecha_venta_credito__range=[fechaInicioMesActual,fechaDiaMesActual])
        for credito in creditosEfectivo:
            idCredito = credito.id_credito
        
            pagosCredito = PagosCreditos.objects.filter(id_credito_id__id_credito=idCredito)
            for pago in pagosCredito:
                tipoPago1 = pago.tipo_pago1
                tipoPago2 = pago.tipo_pago2
                tipoPago3 = pago.tipo_pago3
                tipoPago4 = pago.tipo_pago4

                if tipoPago1:
                    montoPagado1 = pago.monto_pago1
                    if tipoPago1 == "Efectivo":
                        totalEfectivo = totalEfectivo + montoPagado1
                    elif tipoPago1 == "Tarjeta":
                        totalTarjeta = totalTarjeta + montoPagado1
                    elif tipoPago1 == "Transferencia":
                        totalTransferencia = totalTransferencia + montoPagado1
                
                elif tipoPago2:
                    montoPagado2 = pago.monto_pago2
                    if tipoPago2 == "Efectivo":
                        totalEfectivo = totalEfectivo + montoPagado2
                    elif tipoPago2 == "Tarjeta":
                        totalTarjeta = totalTarjeta + montoPagado2
                    elif tipoPago2 == "Transferencia":
                        totalTransferencia = totalTransferencia + montoPagado2
                
                elif tipoPago3:
                    montoPagado3 =pago.monto_pago3
                    if tipoPago3 == "Efectivo":
                        totalEfectivo = totalEfectivo + montoPagado3
                    elif tipoPago3 == "Tarjeta":
                        totalTarjeta = totalTarjeta + montoPagado3
                    elif tipoPago3 == "Transferencia":
                        totalTransferencia = totalTransferencia + montoPagado3
                        
                elif tipoPago4:
                    montoPagado4 = pago.monto_pago4
                    if tipoPago4 == "Efectivo":
                        totalEfectivo = totalEfectivo + montoPagado4
                    elif tipoPago4 == "Tarjeta":
                        totalTarjeta = totalTarjeta + montoPagado4
                    elif tipoPago4 == "Transferencia":
                        totalTransferencia = totalTransferencia + montoPagado4
        
        
        
        #TOP CLIENTES CON MAS COMPRAS

        consultaVentasMesClientes = Ventas.objects.filter(fecha_venta__range=[fechaInicioMesActual,fechaDiaMesActual], cliente__isnull=False)

        clientesTop = []
        montosTop = []
        clientesMontosTotales = []
        clientesIds = []
        contadorClientesArray = []
        if consultaVentasMesClientes:
            for clienteVentas in consultaVentasMesClientes:
                cliente_ventas = clienteVentas.cliente_id
                monto_total_cliente = clienteVentas.monto_pagar
                clientesMontosTotales.append(monto_total_cliente) #180,600
                clientesIds.append(cliente_ventas) #1,1
                
            listaClientesCompradores = zip(clientesIds, clientesMontosTotales)
            
            listaClientes = []
            montoPorCliente = []
            contadorClientesArray = []
            
            
            for idcliente, montoTotalCliente in listaClientesCompradores:
                
                strIdCliente = str(idcliente)
                intMonto = float(montoTotalCliente)
                
                if strIdCliente in listaClientes:
                    indice = listaClientes.index(strIdCliente)
                    montoASumar = montoPorCliente[indice]
                    nuevaSumatoria = float(montoASumar) + intMonto
                    montoPorCliente[indice] = str(nuevaSumatoria)
                else:
                    listaClientes.append(strIdCliente)
                    montoPorCliente.append(str(intMonto))
            
            listaZipClientes = zip(listaClientes, montoPorCliente)
            
            listaOrdenadaMayorAMenor = sorted(listaZipClientes, key = lambda t: t[-1], reverse=True)
            tuples = zip(*listaOrdenadaMayorAMenor)
            listaClientesOrdenados, listaMontosOrdenados = [ list(tuple) for tuple in  tuples]
           
                    
            infoCliente = []

            
            cotadorClientes = 0
            for cliente in listaClientesOrdenados:
                cotadorClientes = cotadorClientes + 1
                contadorClientesArray.append(cotadorClientes)
                id_cliente_top = cliente
                clienteDatos = Clientes.objects.filter(id_cliente= id_cliente_top)
                for c in clienteDatos:

                    nombre_cliente_top = c.nombre_cliente
                    apellido =  c.apellidoPaterno_cliente
                    apellido2 = c.apellidoMaterno_cliente
                infoCliente.append([nombre_cliente_top,apellido,apellido2])

            clientesTops = zip (listaClientesOrdenados,listaMontosOrdenados,contadorClientesArray,infoCliente)
            clientesTopsModal =zip (listaClientesOrdenados,listaMontosOrdenados,contadorClientesArray,infoCliente) 
        else:
            clientesTops = None
            clientesTopsModal = None
            
        
        #TOP EMPLEADOS CON MÁS VENTAS

        consultaTodasLasVentasDelMes = Ventas.objects.filter(fecha_venta__range=[fechaInicioMesActual,fechaDiaMesActual])

        idsEmpleados = []
        montosTotalesDeVentaEmpleados = []
        if consultaTodasLasVentasDelMes:
            for venta in consultaTodasLasVentasDelMes:
                idEmpleado = venta.empleado_vendedor_id
                idsEmpleados.append(idEmpleado) #1,1
                montoVendido = venta.monto_pagar
                montosTotalesDeVentaEmpleados.append(montoVendido)
                
            
            listaEmpleados = []
            contadorVentasEmpleado = []
            contadorEmpleado = []
            listaMontosPorEmpleados = []
            
            listaEmpleadosVentas = zip(idsEmpleados, montosTotalesDeVentaEmpleados)
            
            contadorEmpleados = 0
            for idEmpleado, montoVentita in listaEmpleadosVentas:
                
                strIdEmpleado = str(idEmpleado)
                floatMontoVendido = float(montoVentita)
                
                if strIdEmpleado in listaEmpleados:
                    indice = listaEmpleados.index(strIdEmpleado)
                    ventaASumar = contadorVentasEmpleado[indice]
                    nuevaSumatoria = int(ventaASumar) + 1
                    contadorVentasEmpleado[indice] = nuevaSumatoria
                    
                    montoASumar = listaMontosPorEmpleados[indice]
                    nuevaSumatoriaMonto = float(montoASumar) + floatMontoVendido
                    listaMontosPorEmpleados[indice] = nuevaSumatoriaMonto
                else:
                    listaEmpleados.append(strIdEmpleado)
                    
                    contadorVentasEmpleado.append("1")
                    listaMontosPorEmpleados.append(floatMontoVendido)
            
            for montoVendido in listaMontosPorEmpleados:
                print(str(montoVendido))

            listaZipEmpleados = zip(listaEmpleados, contadorVentasEmpleado, listaMontosPorEmpleados)
            
            listaOrdenadaEmpleadosMayorAMenor = sorted(listaZipEmpleados, key = lambda t: t[-1], reverse=True)
            tuplesEmpleados = zip(*listaOrdenadaEmpleadosMayorAMenor)
            listaEmpleadosOrdenados, listaContadoresEmpleadosOrdenados, listaMontosEmpleadosOrdenados = [ list(tuple) for tuple in  tuplesEmpleados]
            
            for monto in listaMontosEmpleadosOrdenados:
                print("Monto:"+str(monto))
            
            infoEmpleado = []

            

            for empleado in listaEmpleadosOrdenados:
                
                contadorEmpleados = contadorEmpleados + 1
                contadorEmpleado.append(contadorEmpleados)
                idEmpleado = int(empleado)
                datosEmpleado = Empleados.objects.filter(id_empleado = idEmpleado)
                
                for datoEmpleado in datosEmpleado:

                    nombresEm = datoEmpleado.nombres
                infoEmpleado.append(nombresEm)

            empleadosTops = zip (listaEmpleadosOrdenados,listaContadoresEmpleadosOrdenados,contadorEmpleado,infoEmpleado, listaMontosEmpleadosOrdenados)
            empleadosTopsModal =  zip (listaEmpleadosOrdenados,listaContadoresEmpleadosOrdenados,contadorEmpleado,infoEmpleado, listaMontosEmpleadosOrdenados)
        else:
            empleadosTops = None
            empleadosTopsModal = None
     
        








            









            
        
        
        
        
        
       
        
        #Mes anterior
        haceUnMes = hoy - relativedelta(months=1)  #2022-05-07
        mesHaceUnMes = haceUnMes.strftime('%m') #05
        añoHaceUnMes = haceUnMes.strftime('%Y')
        mesHaceUnMesLetra = mesesDic[str(mesHaceUnMes)]
        
        diasDeUltimoMes = diasMeses[str(mesHaceUnMesLetra)]
        
        fechaPrimerDiaMesAnterior = añoHaceUnMes + "-"+mesHaceUnMes+"-01"   #2022-05-01
        fechaUltimoDiaMesAnterior = añoHaceUnMes + "-"+mesHaceUnMes+"-"+diasDeUltimoMes  #2022-05-31


         #Ingresos totales de mes actual, ventas, creditos y rentas
        consultaVentasMesAnterior = Ventas.objects.filter(fecha_venta__range=[fechaPrimerDiaMesAnterior,fechaUltimoDiaMesAnterior], credito="N")
        
        montoIngresoMesAnterior = 0
        
        if consultaVentasMesAnterior:
            for ventaRealizada in consultaVentasMesAnterior:
                montoVenta = ventaRealizada.monto_pagar
                montoIngresoMesAnterior = montoIngresoMesAnterior + montoVenta
        
        consultaCreditosMesAnterior = Creditos.objects.filter(fecha_venta_credito__range=[fechaPrimerDiaMesAnterior,fechaUltimoDiaMesAnterior],  renta_id__isnull=True)
        
        if consultaCreditosMesAnterior:
            for crceditoRealizado in consultaCreditosMesAnterior:
                montoPagadoCredito = crceditoRealizado.monto_pagado
                montoIngresoMesAnterior = montoIngresoMesAnterior + montoPagadoCredito
            
        consultaRentasMesAnterior = Rentas.objects.filter(fecha_apartado__range=[fechaPrimerDiaMesAnterior,fechaUltimoDiaMesAnterior])
        
        if consultaRentasMesAnterior:
            for rentaRealizada in consultaRentasMesAnterior:
                montoPagadoApartado = rentaRealizada.monto_pago_apartado
                montoPagadoRestante = rentaRealizada.monto_restante
                sumaPagosRenta = 0
                if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                    sumaPagosRenta = rentaRealizada.monto_total_renta
                else: #Si ya se pago el restante
                    sumaPagosRenta = montoPagadoApartado
                montoIngresoMesAnterior = montoIngresoMesAnterior + sumaPagosRenta
        
        #comparativa de ingresos totales mensuales

        esMayor = False

        if montoIngresoMesAnterior == 0:
            porcentajeIngresosMes = 100
        else:
            porcentajeIngresosMes = (montoIngresoMesActual / montoIngresoMesAnterior)
            porcentajeIngresosMes = porcentajeIngresosMes - 1
            porcentajeIngresosMes = porcentajeIngresosMes *100
            
            
        if porcentajeIngresosMes > 0:
            esMayor = True
            
        else:
            esMayor = False
        porcentajeIngresosMes = round(porcentajeIngresosMes,2)
        
        
        #INGRESOS TOTALES SEMANAL
        fechaActual = datetime.today().strftime('%Y-%m-%d') #2022-06-07
        diaActual = datetime.today().isoweekday() #2 martes
        intdiaActual = int(diaActual)
        diaLunes = intdiaActual-1 #3 dias para el lunes
        diaDomingo = 7-intdiaActual # 2 dias para el sabado
        
    #Montos totales de semana actual
        fechaLunes = datetime.now()-timedelta(days =diaLunes)
        fechaDomingo = datetime.now() + timedelta(days =diaDomingo)
        
        #Ingresos totales de mes actual, ventas, creditos y rentas
        consultaVentasSemanaActual = Ventas.objects.filter(fecha_venta__range=[fechaLunes,fechaDomingo], credito="N")
        
        montoIngresoSemanaActual = 0
        
        if consultaVentasSemanaActual:
            for ventaRealizada in consultaVentasSemanaActual:
                montoVenta = ventaRealizada.monto_pagar
                montoIngresoSemanaActual = montoIngresoSemanaActual + montoVenta
        
        consultaCreditosSemanaActual = Creditos.objects.filter(fecha_venta_credito__range=[fechaLunes,fechaDomingo],  renta_id__isnull=True)
        
        if consultaCreditosSemanaActual:
            for crceditoRealizado in consultaCreditosSemanaActual:
                montoPagadoCredito = crceditoRealizado.monto_pagado
                montoIngresoSemanaActual = montoIngresoSemanaActual + montoPagadoCredito
            
        consultaRentasSemanaActual = Rentas.objects.filter(fecha_apartado__range=[fechaLunes,fechaDomingo])
        
        if consultaRentasSemanaActual:
            for rentaRealizada in consultaRentasSemanaActual:
                montoPagadoApartado = rentaRealizada.monto_pago_apartado
                montoPagadoRestante = rentaRealizada.monto_restante
                sumaPagosRenta = 0
                if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                    sumaPagosRenta = rentaRealizada.monto_total_renta
                else: #Si ya se pago el restante
                    sumaPagosRenta = montoPagadoApartado
                montoIngresoSemanaActual = montoIngresoSemanaActual + sumaPagosRenta
                
        
    #Montos totales de semana anterior
        fechaLunesAnterior = fechaLunes-timedelta(days =7)
        fechaDomingoAnterior = fechaLunes - timedelta(days =1)
        
        #Ingresos totales de mes actual, ventas, creditos y rentas
        consultaVentasSemanaAnterior = Ventas.objects.filter(fecha_venta__range=[fechaLunesAnterior,fechaDomingoAnterior], credito="N")
        
        montoIngresoSemanaAnterior = 0
        
        if consultaVentasSemanaAnterior:
            for ventaRealizada in consultaVentasSemanaAnterior:
                montoVenta = ventaRealizada.monto_pagar
                montoIngresoSemanaAnterior = montoIngresoSemanaAnterior + montoVenta
        
        consultaCreditosSemanaAnterior = Creditos.objects.filter(fecha_venta_credito__range=[fechaLunesAnterior,fechaDomingoAnterior],  renta_id__isnull=True)
        
        if consultaCreditosSemanaAnterior:
            for crceditoRealizado in consultaCreditosSemanaAnterior:
                montoPagadoCredito = crceditoRealizado.monto_pagado
                montoIngresoSemanaAnterior = montoIngresoSemanaAnterior + montoPagadoCredito
            
        consultaRentasSemanaAnterior = Rentas.objects.filter(fecha_apartado__range=[fechaLunesAnterior,fechaDomingoAnterior])
        
        if consultaRentasSemanaAnterior:
            for rentaRealizada in consultaRentasSemanaAnterior:
                montoPagadoApartado = rentaRealizada.monto_pago_apartado
                montoPagadoRestante = rentaRealizada.monto_restante
                sumaPagosRenta = 0
                if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                    sumaPagosRenta = rentaRealizada.monto_total_renta
                else: #Si ya se pago el restante
                    sumaPagosRenta = montoPagadoApartado
                montoIngresoSemanaAnterior = montoIngresoSemanaAnterior + sumaPagosRenta
        
        #comparativa de ingresos totales mensuales

        esMayorSemana = False

        if montoIngresoSemanaAnterior == 0:
            porcentajeIngresosSemana = 100
        else:
            porcentajeIngresosSemana = (montoIngresoSemanaActual / montoIngresoSemanaAnterior)
            porcentajeIngresosSemana = porcentajeIngresosSemana - 1
            porcentajeIngresosSemana = porcentajeIngresosSemana *100

        
        if porcentajeIngresosSemana > 0:
            esMayorSemana = True
        else:
            esMayorSemana = False
        porcentajeIngresosSemana = round(porcentajeIngresosSemana,2)

        
        
        
        #Fechas para chart de meses
        inicioMesEnero = añoHoy+"-01-01"
        finMesEnero = añoHoy+"-01-31"
        consultaVentasEnero = Ventas.objects.filter(fecha_venta__range=[inicioMesEnero,finMesEnero], credito="N")
        montoIngresoEnero = 0
        if consultaVentasEnero:
            for ventaRealizada in consultaVentasEnero:
                montoVenta = ventaRealizada.monto_pagar
                montoIngresoEnero = montoIngresoEnero + montoVenta
        consultaCreditosEnero = Creditos.objects.filter(fecha_venta_credito__range=[inicioMesEnero,finMesEnero],  renta_id__isnull=True)
        if consultaCreditosEnero:
            for crceditoRealizado in consultaCreditosEnero:
                montoPagadoCredito = crceditoRealizado.monto_pagado
                montoIngresoEnero = montoIngresoEnero + montoPagadoCredito
        consultaRentasEnero = Rentas.objects.filter(fecha_apartado__range=[inicioMesEnero,finMesEnero])
        if  consultaRentasEnero:
            for rentaRealizada in consultaRentasFebrero:
                montoPagadoApartado = rentaRealizada.monto_pago_apartado
                montoPagadoRestante = rentaRealizada.monto_restante
                sumaPagosRenta = 0
                if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                    sumaPagosRenta = rentaRealizada.monto_total_renta
                else: #Si ya se pago el restante
                    sumaPagosRenta = montoPagadoApartado
                montoIngresoEnero = montoIngresoEnero + sumaPagosRenta
        
        
        
        inicioMesFebrero = añoHoy+"-02-01"
        finMesFebrero = añoHoy+"-02-28"
        consultaVentasFebrero = Ventas.objects.filter(fecha_venta__range=[inicioMesFebrero,finMesFebrero], credito="N")
        montoIngresoFebrero = 0
        if consultaVentasFebrero:
            for ventaRealizada in consultaVentasFebrero:
                montoVenta = ventaRealizada.monto_pagar
                montoIngresoFebrero = montoIngresoFebrero + montoVenta
        consultaCreditosFebrero = Creditos.objects.filter(fecha_venta_credito__range=[inicioMesFebrero,finMesFebrero],  renta_id__isnull=True)
        if consultaCreditosFebrero:
            for crceditoRealizado in consultaCreditosFebrero:
                montoPagadoCredito = crceditoRealizado.monto_pagado
                montoIngresoFebrero = montoIngresoFebrero + montoPagadoCredito
        consultaRentasFebrero = Rentas.objects.filter(fecha_apartado__range=[inicioMesFebrero,finMesFebrero])
        if consultaRentasFebrero:
            for rentaRealizada in consultaRentasFebrero:
                montoPagadoApartado = rentaRealizada.monto_pago_apartado
                montoPagadoRestante = rentaRealizada.monto_restante
                sumaPagosRenta = 0
                if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                    sumaPagosRenta = rentaRealizada.monto_total_renta
                else: #Si ya se pago el restante
                    sumaPagosRenta = montoPagadoApartado
                montoIngresoFebrero = montoIngresoFebrero + sumaPagosRenta
        
        inicioMesMarzo = añoHoy+"-03-01"
        finMesMarzo = añoHoy+"-03-31"
        consultaVentasMarzo = Ventas.objects.filter(fecha_venta__range=[inicioMesMarzo,finMesMarzo], credito="N")
        montoIngresoMarzo = 0
        if consultaVentasMarzo:
            for ventaRealizada in consultaVentasMarzo:
                montoVenta = ventaRealizada.monto_pagar
                montoIngresoMarzo = montoIngresoMarzo + montoVenta
        consultaCreditosMarzo = Creditos.objects.filter(fecha_venta_credito__range=[inicioMesMarzo,finMesMarzo],  renta_id__isnull=True)
        if consultaCreditosMarzo:
            for crceditoRealizado in consultaCreditosMarzo:
                montoPagadoCredito = crceditoRealizado.monto_pagado
                montoIngresoMarzo = montoIngresoMarzo + montoPagadoCredito
        consultaRentasMarzo = Rentas.objects.filter(fecha_apartado__range=[inicioMesMarzo,finMesMarzo])
        if consultaRentasMarzo:
            for rentaRealizada in consultaRentasMarzo:
                montoPagadoApartado = rentaRealizada.monto_pago_apartado
                montoPagadoRestante = rentaRealizada.monto_restante
                sumaPagosRenta = 0
                if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                    sumaPagosRenta = rentaRealizada.monto_total_renta
                else: #Si ya se pago el restante
                    sumaPagosRenta = montoPagadoApartado
                montoIngresoMarzo = montoIngresoMarzo + sumaPagosRenta
        
        inicioMesAbril = añoHoy+"-04-01"
        finMesAbril = añoHoy+"-04-30"
        consultaVentasAbril = Ventas.objects.filter(fecha_venta__range=[inicioMesAbril,finMesAbril], credito="N")
        montoIngresoAbril = 0
        if consultaVentasAbril:
            for ventaRealizada in consultaVentasAbril:
                montoVenta = ventaRealizada.monto_pagar
                montoIngresoAbril = montoIngresoAbril + montoVenta
        consultaCreditosAbril = Creditos.objects.filter(fecha_venta_credito__range=[inicioMesAbril,finMesAbril],  renta_id__isnull=True)
        if consultaCreditosAbril:
            for crceditoRealizado in consultaCreditosAbril:
                montoPagadoCredito = crceditoRealizado.monto_pagado
                montoIngresoAbril = montoIngresoAbril + montoPagadoCredito
        consultaRentasAbril = Rentas.objects.filter(fecha_apartado__range=[inicioMesAbril,finMesAbril])
        if consultaRentasAbril:
            for rentaRealizada in consultaRentasAbril:
                montoPagadoApartado = rentaRealizada.monto_pago_apartado
                montoPagadoRestante = rentaRealizada.monto_restante
                sumaPagosRenta = 0
                if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                    sumaPagosRenta = rentaRealizada.monto_total_renta
                else: #Si ya se pago el restante
                    sumaPagosRenta = montoPagadoApartado
                montoIngresoAbril = montoIngresoAbril + sumaPagosRenta
        
        inicioMesMayo = añoHoy+"-05-01"
        finMesMayo = añoHoy+"-05-31"
        consultaVentasMayo = Ventas.objects.filter(fecha_venta__range=[inicioMesMayo,finMesMayo], credito="N")
        montoIngresoMayo = 0
        if consultaVentasMayo:
            for ventaRealizada in consultaVentasMayo:
                montoVenta = ventaRealizada.monto_pagar
                montoIngresoMayo = montoIngresoMayo + montoVenta
        consultaCreditosMayo = Creditos.objects.filter(fecha_venta_credito__range=[inicioMesMayo,finMesMayo],  renta_id__isnull=True)
        if consultaCreditosMayo:
            for crceditoRealizado in consultaCreditosMayo:
                montoPagadoCredito = crceditoRealizado.monto_pagado
                montoIngresoMayo = montoIngresoMayo + montoPagadoCredito
        consultaRentasMayo = Rentas.objects.filter(fecha_apartado__range=[inicioMesMayo,finMesMayo])
        if consultaRentasMayo:
            for rentaRealizada in consultaRentasMayo:
                montoPagadoApartado = rentaRealizada.monto_pago_apartado
                montoPagadoRestante = rentaRealizada.monto_restante
                sumaPagosRenta = 0
                if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                    sumaPagosRenta = rentaRealizada.monto_total_renta
                else: #Si ya se pago el restante
                    sumaPagosRenta = montoPagadoApartado
                montoIngresoMayo = montoIngresoMayo + sumaPagosRenta
        
        inicioMesJunio = añoHoy+"-06-01"
        finMesJunio = añoHoy+"-06-30"
        consultaVentasJunio = Ventas.objects.filter(fecha_venta__range=[inicioMesJunio,finMesJunio], credito="N")
        montoIngresoJunio = 0
        if consultaVentasJunio:
            for ventaRealizada in consultaVentasJunio:
                montoVenta = ventaRealizada.monto_pagar
                montoIngresoJunio = montoIngresoJunio + montoVenta
        consultaCreditosJunio = Creditos.objects.filter(fecha_venta_credito__range=[inicioMesJunio,finMesJunio],  renta_id__isnull=True)
        if consultaCreditosJunio:
            for crceditoRealizado in consultaCreditosJunio:
                montoPagadoCredito = crceditoRealizado.monto_pagado
                montoIngresoJunio = montoIngresoJunio + montoPagadoCredito
        consultaRentasJunio = Rentas.objects.filter(fecha_apartado__range=[inicioMesJunio,finMesJunio])
        if consultaRentasJunio:
            for rentaRealizada in consultaRentasJunio:
                montoPagadoApartado = rentaRealizada.monto_pago_apartado
                montoPagadoRestante = rentaRealizada.monto_restante
                sumaPagosRenta = 0
                if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                    sumaPagosRenta = rentaRealizada.monto_total_renta
                else: #Si ya se pago el restante
                    sumaPagosRenta = montoPagadoApartado
                montoIngresoJunio = montoIngresoJunio + sumaPagosRenta
        
        inicioMesJulio = añoHoy+"-07-01"
        finMesJulio = añoHoy+"-07-31"
        consultaVentasJulio = Ventas.objects.filter(fecha_venta__range=[inicioMesJulio,finMesJulio], credito="N")
        montoIngresoJulio = 0
        if consultaVentasJulio:
            for ventaRealizada in consultaVentasJulio:
                montoVenta = ventaRealizada.monto_pagar
                montoIngresoJulio = montoIngresoJulio + montoVenta
        consultaCreditosJulio = Creditos.objects.filter(fecha_venta_credito__range=[inicioMesJulio,finMesJulio],  renta_id__isnull=True)
        if consultaCreditosJulio:
            for crceditoRealizado in consultaCreditosJulio:
                montoPagadoCredito = crceditoRealizado.monto_pagado
                montoIngresoJulio = montoIngresoJulio + montoPagadoCredito
        consultaRentasJulio = Rentas.objects.filter(fecha_apartado__range=[inicioMesJulio,finMesJulio])
        if consultaRentasJulio:
            for rentaRealizada in consultaRentasJulio:
                montoPagadoApartado = rentaRealizada.monto_pago_apartado
                montoPagadoRestante = rentaRealizada.monto_restante
                sumaPagosRenta = 0
                if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                    sumaPagosRenta = rentaRealizada.monto_total_renta
                else: #Si ya se pago el restante
                    sumaPagosRenta = montoPagadoApartado
                montoIngresoJulio = montoIngresoJulio + sumaPagosRenta
        
        inicioMesAgosto = añoHoy+"-08-01"
        finMesAgosto = añoHoy+"-08-31"
        consultaVentasAgosto = Ventas.objects.filter(fecha_venta__range=[inicioMesAgosto,finMesAgosto], credito="N")
        montoIngresoAgosto = 0
        if consultaVentasAgosto:
            for ventaRealizada in consultaVentasAgosto:
                montoVenta = ventaRealizada.monto_pagar
                montoIngresoAgosto = montoIngresoAgosto + montoVenta
        consultaCreditosAgosto = Creditos.objects.filter(fecha_venta_credito__range=[inicioMesAgosto,finMesAgosto],  renta_id__isnull=True)
        if consultaCreditosAgosto:
            for crceditoRealizado in consultaCreditosAgosto:
                montoPagadoCredito = crceditoRealizado.monto_pagado
                montoIngresoAgosto = montoIngresoAgosto + montoPagadoCredito
        consultaRentasAgosto = Rentas.objects.filter(fecha_apartado__range=[inicioMesAgosto,finMesAgosto])
        if consultaRentasAgosto:
            for rentaRealizada in consultaRentasAgosto:
                montoPagadoApartado = rentaRealizada.monto_pago_apartado
                montoPagadoRestante = rentaRealizada.monto_restante
                sumaPagosRenta = 0
                if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                    sumaPagosRenta = rentaRealizada.monto_total_renta
                else: #Si ya se pago el restante
                    sumaPagosRenta = montoPagadoApartado
                montoIngresoAgosto = montoIngresoAgosto + sumaPagosRenta
        
        inicioMesSeptiembre = añoHoy+"-09-01"
        finMesSeptiembre = añoHoy+"-09-30"
        consultaVentasSeptiembre = Ventas.objects.filter(fecha_venta__range=[inicioMesSeptiembre,finMesSeptiembre], credito="N")
        montoIngresoSeptiembre = 0
        if consultaVentasSeptiembre:
            for ventaRealizada in consultaVentasSeptiembre:
                montoVenta = ventaRealizada.monto_pagar
                montoIngresoSeptiembre = montoIngresoSeptiembre + montoVenta
        consultaCreditosSeptiembre = Creditos.objects.filter(fecha_venta_credito__range=[inicioMesSeptiembre,finMesSeptiembre],  renta_id__isnull=True)
        if consultaCreditosSeptiembre:
            for crceditoRealizado in consultaCreditosSeptiembre:
                montoPagadoCredito = crceditoRealizado.monto_pagado
                montoIngresoSeptiembre = montoIngresoSeptiembre + montoPagadoCredito
        consultaRentasSeptiembre = Rentas.objects.filter(fecha_apartado__range=[inicioMesSeptiembre,finMesSeptiembre])
        if consultaRentasSeptiembre:
            for rentaRealizada in consultaRentasSeptiembre:
                montoPagadoApartado = rentaRealizada.monto_pago_apartado
                montoPagadoRestante = rentaRealizada.monto_restante
                sumaPagosRenta = 0
                if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                    sumaPagosRenta = rentaRealizada.monto_total_renta
                else: #Si ya se pago el restante
                    sumaPagosRenta = montoPagadoApartado
                montoIngresoSeptiembre = montoIngresoSeptiembre + sumaPagosRenta
        
        inicioMesOctubre = añoHoy+"-10-01"
        finMesOctubre = añoHoy+"-10-31"
        consultaVentasOctubre = Ventas.objects.filter(fecha_venta__range=[inicioMesOctubre,finMesOctubre], credito="N")
        montoIngresoOctubre = 0
        if consultaVentasOctubre:
            for ventaRealizada in consultaVentasOctubre:
                montoVenta = ventaRealizada.monto_pagar
                montoIngresoOctubre = montoIngresoOctubre + montoVenta
        consultaCreditosOctubre = Creditos.objects.filter(fecha_venta_credito__range=[inicioMesOctubre,finMesOctubre],  renta_id__isnull=True)
        if consultaCreditosOctubre:
            for crceditoRealizado in consultaCreditosOctubre:
                montoPagadoCredito = crceditoRealizado.monto_pagado
                montoIngresoOctubre = montoIngresoOctubre + montoPagadoCredito
        consultaRentasOctubre = Rentas.objects.filter(fecha_apartado__range=[inicioMesOctubre,finMesOctubre])
        if consultaRentasOctubre:
            for rentaRealizada in consultaRentasOctubre:
                montoPagadoApartado = rentaRealizada.monto_pago_apartado
                montoPagadoRestante = rentaRealizada.monto_restante
                sumaPagosRenta = 0
                if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                    sumaPagosRenta = rentaRealizada.monto_total_renta
                else: #Si ya se pago el restante
                    sumaPagosRenta = montoPagadoApartado
                montoIngresoOctubre = montoIngresoOctubre + sumaPagosRenta
        
        inicioMesNoviembre = añoHoy+"-11-01"
        finMesNoviembre = añoHoy+"-11-30"
        consultaVentasNoviembre = Ventas.objects.filter(fecha_venta__range=[inicioMesNoviembre,finMesNoviembre], credito="N")
        montoIngresoNoviembre = 0
        if consultaVentasNoviembre:
            for ventaRealizada in consultaVentasNoviembre:
                montoVenta = ventaRealizada.monto_pagar
                montoIngresoNoviembre = montoIngresoNoviembre + montoVenta
        consultaCreditosNoviembre = Creditos.objects.filter(fecha_venta_credito__range=[inicioMesNoviembre,finMesNoviembre],  renta_id__isnull=True)
        if consultaCreditosNoviembre:
            for crceditoRealizado in consultaCreditosNoviembre:
                montoPagadoCredito = crceditoRealizado.monto_pagado
                montoIngresoNoviembre = montoIngresoNoviembre + montoPagadoCredito
        consultaRentasNoviembre = Rentas.objects.filter(fecha_apartado__range=[inicioMesNoviembre,finMesNoviembre])
        if consultaRentasNoviembre:
            for rentaRealizada in consultaRentasNoviembre:
                montoPagadoApartado = rentaRealizada.monto_pago_apartado
                montoPagadoRestante = rentaRealizada.monto_restante
                sumaPagosRenta = 0
                if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                    sumaPagosRenta = rentaRealizada.monto_total_renta
                else: #Si ya se pago el restante
                    sumaPagosRenta = montoPagadoApartado 
                montoIngresoNoviembre = montoIngresoNoviembre + sumaPagosRenta
        
        inicioMesDiciembre = añoHoy+"-12-01"
        finMesDiciembre = añoHoy+"-12-31"
        consultaVentasDiciembre = Ventas.objects.filter(fecha_venta__range=[inicioMesDiciembre,finMesDiciembre], credito="N")
        montoIngresoDiciembre = 0
        if consultaVentasDiciembre:
            for ventaRealizada in consultaVentasDiciembre:
                montoVenta = ventaRealizada.monto_pagar
                montoIngresoDiciembre = montoIngresoDiciembre + montoVenta
        consultaCreditosDiciembre = Creditos.objects.filter(fecha_venta_credito__range=[inicioMesDiciembre,finMesDiciembre],  renta_id__isnull=True)
        if consultaCreditosDiciembre:
            for crceditoRealizado in consultaCreditosDiciembre:
                montoPagadoCredito = crceditoRealizado.monto_pagado
                montoIngresoDiciembre = montoIngresoDiciembre + montoPagadoCredito
        consultaRentasDiciembre = Rentas.objects.filter(fecha_apartado__range=[inicioMesDiciembre,finMesDiciembre])
        if consultaRentasDiciembre:
            for rentaRealizada in consultaRentasDiciembre:
                montoPagadoApartado = rentaRealizada.monto_pago_apartado
                montoPagadoRestante = rentaRealizada.monto_restante
                sumaPagosRenta = 0
                if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                    sumaPagosRenta = rentaRealizada.monto_total_renta
                else: #Si ya se pago el restante
                    sumaPagosRenta = montoPagadoApartado
                montoIngresoDiciembre = montoIngresoDiciembre + sumaPagosRenta
        
        
        
        
        # - COMPRAS DEL MEES ...................................................
        totalComprasMesGasto = 0
        totalComprasMesVenta = 0
        totalComprasMesRenta= 0
        numeroComprasGasto = 0
        numeroComprasVenta = 0
        numeroComprasRenta = 0
        
        comprasProductosGastos = []
        comprasGastoDelMes = ComprasGastos.objects.filter(fecha_compra__range=[fechaInicioMesActual,fechaDiaMesActual])
        if comprasGastoDelMes:
            for compra in comprasGastoDelMes:
                montoComprado = compra.total_costoCompra
                totalComprasMesGasto = totalComprasMesGasto + montoComprado
                numeroComprasGasto = numeroComprasGasto +1
                
                idCompra = compra.id_compraGasto
                idProducto = compra.id_productoComprado_id
                consultaProducto = ProductosGasto.objects.filter(id_producto = idProducto)
                
                for datoProducto in consultaProducto:
                    nombreProducto = datoProducto.nombre_producto
                    codigoProducto = datoProducto.codigo_producto
                    imagenProducto = datoProducto.imagen_producto
                    sucursalProducto = datoProducto.sucursal_id
                nombreCompletoProducto = codigoProducto + " - "+nombreProducto
                
                fechaCompra = compra.fecha_compra
                costoUnitarioCompra = compra.costo_unitario
                cantidadComprada = compra.cantidad_comprada
                totalMontoCompra = compra.total_costoCompra
                
                consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursalProducto)
                for datoSucursal in consultaSucursal:
                    nombreSucursal = datoSucursal.nombre
                
                
                
                comprasProductosGastos.append([idCompra,nombreCompletoProducto,imagenProducto,fechaCompra,nombreSucursal,costoUnitarioCompra,cantidadComprada,totalMontoCompra])
        else:
            comprasProductosGastos = None
            
        
        comprasProductosVentas = []
        comprasVentaDelMes = ComprasVentas.objects.filter(fecha_compra__range=[fechaInicioMesActual,fechaDiaMesActual])
        if comprasVentaDelMes:
            for compra in comprasVentaDelMes:
                montoComprado = compra.total_costoCompra
                totalComprasMesVenta = totalComprasMesVenta + montoComprado
                numeroComprasVenta = numeroComprasVenta +1
                
                idCompra = compra.id_compraVenta
                idProducto = compra.id_productoComprado_id
                consultaProducto = ProductosVenta.objects.filter(id_producto = idProducto)
                
                for datoProducto in consultaProducto:
                    nombreProducto = datoProducto.nombre_producto
                    codigoProducto = datoProducto.codigo_producto
                    imagenProducto = datoProducto.imagen_producto
                    sucursalProducto = datoProducto.sucursal_id
                nombreCompletoProducto = codigoProducto + " - "+nombreProducto
                
                fechaCompra = compra.fecha_compra
                costoUnitarioCompra = compra.costo_unitario
                cantidadComprada = compra.cantidad_comprada
                totalMontoCompra = compra.total_costoCompra
                
                consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursalProducto)
                for datoSucursal in consultaSucursal:
                    nombreSucursal = datoSucursal.nombre
                
                
                comprasProductosVentas.append([idCompra,nombreCompletoProducto,imagenProducto,fechaCompra,nombreSucursal,costoUnitarioCompra,cantidadComprada,totalMontoCompra])
        else:
            comprasProductosVentas = None
        
        
        comprasProductosRentas = []
        comprasRentasDelMes = ComprasRentas.objects.filter(fecha_compra__range=[fechaInicioMesActual,fechaDiaMesActual])
        if comprasRentasDelMes:
            for compra in comprasRentasDelMes:
                montoComprado = compra.total_costoCompra
                totalComprasMesRenta = totalComprasMesRenta + montoComprado
                numeroComprasRenta = numeroComprasRenta +1
                
                idCompra = compra.id_compraRenta
                idProducto = compra.id_productoComprado_id
                consultaProducto = ProductosRenta.objects.filter(id_producto = idProducto)
                
                for datoProducto in consultaProducto:
                    nombreProducto = datoProducto.nombre_producto
                    codigoProducto = datoProducto.codigo_producto
                    imagenProducto = datoProducto.imagen_producto
                    sucursalProducto = datoProducto.sucursal_id
                nombreCompletoProducto = codigoProducto + " - "+nombreProducto
                
                fechaCompra = compra.fecha_compra
                costoUnitarioCompra = compra.costo_unitario
                cantidadComprada = compra.cantidad_comprada
                totalMontoCompra = compra.total_costoCompra
                
                consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursalProducto)
                for datoSucursal in consultaSucursal:
                    nombreSucursal = datoSucursal.nombre
                
                
                comprasProductosRentas.append([idCompra,nombreCompletoProducto,imagenProducto,fechaCompra,nombreSucursal,costoUnitarioCompra,cantidadComprada,totalMontoCompra])
        else:
            comprasProductosRentas = None            

        sumaTotalesCompras = totalComprasMesGasto + totalComprasMesVenta + totalComprasMesRenta
        
        
        
        
        #PRODUCTOS TOOOOOPP ------------------------------------------
      
        consultaVentasMesActual = Ventas.objects.filter(fecha_venta__range=[fechaInicioMesActual,fechaDiaMesActual])
        
       
        productosCantidades = []
        productosVenta =[]
        cantidadesProductosVenta =[]
        sinProductos = False
       
        
        for ventaMensual in consultaVentasMesActual:
            
            ids_productos = ventaMensual.ids_productos
            if ids_productos == "":
                sinProductos = True
            else:
                sinProductos = False
            
                productos = ids_productos.split(',')
                cantidades_productos = ventaMensual.cantidades_productos
                cantidades = cantidades_productos.split(',')

                productosCantidades = zip(productos, cantidades)
            
            if sinProductos == False:
                for idP,cant in productosCantidades:
                    productoVenta= str(idP)
                    cantidadProductoVenta = str(cant)
            
                
                    if "PV" in productoVenta:
                        productosVenta.append(productoVenta)   #['PV0001']
                        cantidadesProductosVenta.append(cantidadProductoVenta) #['1']
        
           
            
        if not productosVenta:
            listaFinalProductosMesTabla = None
            
        else:
                lProductos =zip(productosVenta,cantidadesProductosVenta)   #(['PV1000'],['1']) 
            
                
                
                listaFinalProductos = []
                listaFinalProductosSoloStrings = []
                for pr,ca in lProductos:
                    
                    stringProducto =str(pr)
                    stringCantidad =ca
                    
                    numero = productosVenta.count(stringProducto)
                    
                    if numero >1:
                        if stringProducto in listaFinalProductosSoloStrings:
                            elProductoYaFueAgregado = True
                        else:
                            contadorCantidadesDeProductos = 0
                            contadorProductos = 0
                            for producto in productosVenta:  #3
                                
                                contadorProductos = contadorProductos + 1
                                stringProducto2 = productosVenta[contadorProductos-1]
                                cantidadProducto2 = cantidadesProductosVenta[contadorProductos-1]

                                if stringProducto == stringProducto2:
                                    contadorCantidadesDeProductos = contadorCantidadesDeProductos + int(cantidadProducto2)

                            stringCantidad = str(contadorCantidadesDeProductos)
                            listaFinalProductosSoloStrings.append(stringProducto)
                            listaFinalProductos.append([stringProducto,stringCantidad])
                        #Borrar todos los elementos de las dos listas de strings y cantidades correspondientes a ese producto
                        
                    else:
                        listaFinalProductos.append([stringProducto,stringCantidad])

                    
                    listaProductosOrdenada = sorted(listaFinalProductos, key = lambda elemento:elemento[1])

                    listaProductosOrdenadaMayorAMenor = listaProductosOrdenada[::-1]


                    contadorParaTablaProductosMes = 0
                    arrayContadores = []
                    arrayInfoProducto = []
                    for producto in listaProductosOrdenadaMayorAMenor:
                        
                        contadorParaTablaProductosMes = contadorParaTablaProductosMes + 1
                        arrayContadores.append(contadorParaTablaProductosMes)

                        #info producto
                        codigoProducto = producto[0]
                        cantidadVendida = producto[1]
                        consultaProducto = ProductosVenta.objects.filter(codigo_producto = codigoProducto)
                        for datoProducto in consultaProducto:
                            nombre = datoProducto.nombre_producto
                            costoVenta = datoProducto.costo_venta
                            imagen = datoProducto.imagen_producto
                        
                        costoTotalVendidoProducto = costoVenta * float(cantidadVendida)
                        arrayInfoProducto.append([nombre, costoVenta, costoTotalVendidoProducto, imagen])


                    listaFinalProductosMesTabla = zip(listaProductosOrdenadaMayorAMenor, arrayContadores, arrayInfoProducto)


        
        #SERVICIOS TOOOPP------------------------------------------------
        
        consultaVentasServiciosMesActual = Ventas.objects.filter(fecha_venta__range=[fechaInicioMesActual,fechaDiaMesActual])
        
       
        serviciosCantidades = []
        serviciosVenta =[]
        cantidadesServiciosVenta =[]
        sinServicioscorporales = False
        sinServiciosfaciales = False
       
        
        for ventaMensual in consultaVentasServiciosMesActual:
            
            ids_servicios_corporales = ventaMensual.ids_servicios_corporales #""
            if ids_servicios_corporales == "":
                sinServicioscorporales = True
            else:
                sinServicioscorporales = False
                serviciosCorporales = ids_servicios_corporales.split(',')
                cantidades_servicios_corporales = ventaMensual.cantidades_servicios_corporales
                cantidades_corporales = cantidades_servicios_corporales.split(',')

                serviciosCorporalesCantidades = zip(serviciosCorporales, cantidades_corporales)
            
            ids_servicios_faciales = ventaMensual.ids_servicios_faciales
            if ids_servicios_faciales == "":
                sinServiciosfaciales = True
            else:
                serviciosFaciales = ids_servicios_faciales.split(',')
                cantidades_servicios_faciales = ventaMensual.cantidades_servicios_faciales
                cantidades_faciales = cantidades_servicios_faciales.split(',')

                serviciosFacialesCantidades = zip(serviciosFaciales, cantidades_faciales)
                
            if sinServicioscorporales == False:
                for idServicioCorporal,cantCorporal in serviciosCorporalesCantidades:
                    servicioVenta= str(idServicioCorporal)
                    cantidadServicioVenta = str(cantCorporal)
            
            
            
                    serviciosVenta.append(servicioVenta)   #['PV0001']
                    cantidadesServiciosVenta.append(cantidadServicioVenta) #['1']
                
        
            if sinServiciosfaciales == False:
                for idServicioFacial,cantFacial in serviciosFacialesCantidades:
                    servicioVenta= str(idServicioFacial)
                    cantidadServicioVenta = str(cantFacial)
            
            
            
                    serviciosVenta.append(servicioVenta)   #['PV0001']
                    cantidadesServiciosVenta.append(cantidadServicioVenta) #['1'] for idServicioCorporal,cantCorporal in serviciosCorporalesCantidades:
                
        if not serviciosVenta:
            listaFinalServiciosMesTabla = None
        else:
            lServicios =zip(serviciosVenta,cantidadesServiciosVenta)   #(['PV1000'],['1']) 
        
            
            
            listaFinalServicios = []
            listaFinalServiciosSoloStrings = []
            for ser,can in lServicios:
                
                intIdServicio =ser
                stringCantidad =can
                
                numero = serviciosVenta.count(intIdServicio)
                
                if numero >1:
                    if intIdServicio in listaFinalServiciosSoloStrings:
                        elServicioYaFueAgregado = True
                    else:
                        contadorCantidadesDeServicios = 0
                        contadorServicios = 0
                        for servicio in serviciosVenta:  #3
                            
                            contadorServicios = contadorServicios + 1
                            idServicio2 = serviciosVenta[contadorServicios-1]
                            cantidadServicio2 = cantidadesServiciosVenta[contadorServicios-1]

                            if intIdServicio == idServicio2:
                                contadorCantidadesDeServicios = contadorCantidadesDeServicios + int(cantidadServicio2)

                        stringCantidad = str(contadorCantidadesDeServicios)
                        listaFinalServiciosSoloStrings.append(intIdServicio)
                        listaFinalServicios.append([intIdServicio,stringCantidad])
                    #Borrar todos los elementos de las dos listas de strings y cantidades correspondientes a ese producto
                    
                else:
                    listaFinalServicios.append([intIdServicio,stringCantidad])

                
                listaServiciosOrdenada = sorted(listaFinalServicios, key = lambda elemento:elemento[1])

                listaServiciosOrdenadaMayorAMenor = listaServiciosOrdenada[::-1]


                contadorParaTablaServiciosMes = 0
                arrayContadores = []
                arrayInfoServicio = []
                for servicio in listaServiciosOrdenadaMayorAMenor:
                    
                    contadorParaTablaServiciosMes = contadorParaTablaServiciosMes + 1
                    arrayContadores.append(contadorParaTablaServiciosMes)

                    #info producto
                    codigoServicio= servicio[0]
                    cantidadVendida = servicio[1]
                    consultaServicio = Servicios.objects.filter(id_servicio = codigoServicio)
                    for datoServicios in consultaServicio:
                        tipo = datoServicios.tipo_servicio
                        nombreServicio = datoServicios.nombre_servicio
                        costoVenta = datoServicios.precio_venta
                    
                    
                    costoTotalVendidoServicio = costoVenta * float(cantidadVendida)
                    arrayInfoServicio.append([tipo, nombreServicio, costoVenta,costoTotalVendidoServicio])


                listaFinalServiciosMesTabla = zip(listaServiciosOrdenadaMayorAMenor, arrayContadores, arrayInfoServicio)



        
        
        #PRODUCTOS RENTA TOPPP------------------------------------------

        consultaVentasRentasMesActual = Ventas.objects.filter(fecha_venta__range=[fechaInicioMesActual,fechaDiaMesActual])
        
       
        productosRentaCantidades = []
        productosRentaVenta =[]
        cantidadesProductosRentaVenta =[]
        sinProductosRenta = False
       
        
        for ventaMensual in consultaVentasRentasMesActual:
            
            ids_productos = ventaMensual.ids_productos
            if ids_productos == "":
                sinProductosRenta = True
            else: 
                sinProductosRenta = False
                productos = ids_productos.split(',')
                cantidades_productos = ventaMensual.cantidades_productos
                cantidades = cantidades_productos.split(',')

                productosCantidades = zip(productos, cantidades)
                
            if sinProductosRenta == False:
                for idP,cant in productosCantidades:
                    productoVenta= str(idP)
                    cantidadProductoVenta = str(cant)
            
                
                    if "PR" in productoVenta:
                        productosRentaVenta.append(productoVenta)   #['PV0001']
                        cantidadesProductosRentaVenta.append(cantidadProductoVenta) #['1']
            
        if not productosRentaVenta:
            listaFinalProductosRentaMesTabla = None
        else:

            lProductosRenta =zip(productosRentaVenta,cantidadesProductosRentaVenta)   #(['PV1000'],['1']) 
        
            
            
            listaFinalProductosRenta = []
            listaFinalProductosSoloStringsRenta = []
            for prren,caren in lProductosRenta:
                
                stringProducto =str(prren)
                stringCantidad =caren
                
                numero = productosRentaVenta.count(stringProducto)
                
                if numero >1:
                    if stringProducto in listaFinalProductosSoloStringsRenta:
                        elProductoYaFueAgregado = True
                    else:
                        contadorCantidadesDeProductosRenta = 0
                        contadorProductosRenta = 0
                        for producto in productosRentaVenta:  #3
                            
                            contadorProductosRenta = contadorProductosRenta + 1
                            stringProductorenta2 = productosRentaVenta[contadorProductosRenta-1]
                            cantidadProductorenta2 = cantidadesProductosRentaVenta[contadorProductosRenta-1]

                            if stringProducto == stringProductorenta2:
                                contadorCantidadesDeProductosRenta = contadorCantidadesDeProductosRenta + int(cantidadProductorenta2)

                        stringCantidad = str(contadorCantidadesDeProductosRenta)
                        listaFinalProductosSoloStringsRenta.append(stringProducto)
                        listaFinalProductosRenta.append([stringProducto,stringCantidad])
                    #Borrar todos los elementos de las dos listas de strings y cantidades correspondientes a ese producto
                    
                else:
                    listaFinalProductosRenta.append([stringProducto,stringCantidad])

                
                listaProductosRentaOrdenada = sorted(listaFinalProductosRenta, key = lambda elemento:elemento[1])

                listaProductosRentaOrdenadaMayorAMenor = listaProductosRentaOrdenada[::-1]


                contadorParaTablaProductosRentaMes = 0
                arrayContadores = []
                arrayInfoProductoRenta = []
                for productoRenta in listaProductosRentaOrdenadaMayorAMenor:
                    
                    contadorParaTablaProductosRentaMes = contadorParaTablaProductosRentaMes + 1
                    arrayContadores.append(contadorParaTablaProductosRentaMes)

                    #info producto
                    codigoProductoRenta = productoRenta[0]
                    cantidadVendidaRenta = productoRenta[1]
                    consultaProductoRenta = ProductosRenta.objects.filter(codigo_producto = codigoProductoRenta)
                    for datoProducto in consultaProductoRenta:
                        nombreRenta = datoProducto.nombre_producto
                        costoRenta = datoProducto.costo_renta
                        imagenRenta = datoProducto.imagen_producto
                    
                    costoTotalRentadoProducto = costoRenta * float(cantidadVendidaRenta)
                    arrayInfoProductoRenta.append([nombreRenta, costoRenta, costoTotalRentadoProducto, imagenRenta])


                listaFinalProductosRentaMesTabla = zip(listaProductosRentaOrdenadaMayorAMenor, arrayContadores, arrayInfoProductoRenta)
       
       

        return render(request, "17 Informe Ventas/informeDeVentas.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, "notificacionRenta":notificacionRenta, "diadehoy":diadehoy,"mesdehoy":mesdehoy,"añoHoy":añoHoy,
                                                                          "mesHaceUnMesLetra":mesHaceUnMesLetra, "diasDeUltimoMes":diasDeUltimoMes, "montoIngresoMesActual":montoIngresoMesActual,"montoIngresoMesAnterior":montoIngresoMesAnterior,"porcentajeIngresosMes":porcentajeIngresosMes,"esMayor":esMayor,
                                                                          "montoIngresoSemanaActual":montoIngresoSemanaActual,"montoIngresoSemanaAnterior":montoIngresoSemanaAnterior, "esMayorSemana":esMayorSemana,"porcentajeIngresosSemana":porcentajeIngresosSemana,
                                                                          "montoIngresoEnero":montoIngresoEnero, "montoIngresoFebrero":montoIngresoFebrero, "montoIngresoMarzo":montoIngresoMarzo, "montoIngresoAbril":montoIngresoAbril, "montoIngresoMayo":montoIngresoMayo, "montoIngresoJunio":montoIngresoJunio, "montoIngresoJulio":montoIngresoJulio, "montoIngresoAgosto":montoIngresoAgosto, "montoIngresoSeptiembre":montoIngresoSeptiembre, "montoIngresoOctubre":montoIngresoOctubre, "montoIngresoNoviembre":montoIngresoNoviembre, "montoIngresoDiciembre":montoIngresoDiciembre,
                                                                          "totalComprasMesGasto":totalComprasMesGasto,"totalComprasMesVenta":totalComprasMesVenta,"totalComprasMesRenta":totalComprasMesRenta,"contadorVentasmesActual":contadorVentasmesActual,"contadorRentasmesActual":contadorRentasmesActual,"contadorCreditosmesActual":contadorCreditosmesActual,"numeroVentas":numeroVentas,"numeroRentas":numeroRentas,"numeroCreditos":numeroCreditos,
                                                                          "numeroComprasGasto":numeroComprasGasto,"numeroComprasVenta":numeroComprasVenta,"numeroComprasRenta":numeroComprasRenta,"sumaTotalesCompras":sumaTotalesCompras,"totalEfectivo":totalEfectivo,"totalTarjeta":totalTarjeta,"totalTransferencia":totalTransferencia,"clientesTops":clientesTops,
                                                                          "clientesTop":clientesTop,"montosTop":montosTop,"contadorClientesArray":contadorClientesArray,"listaFinalProductosMesTabla":listaFinalProductosMesTabla,
                                                                          "listaFinalServiciosMesTabla":listaFinalServiciosMesTabla, "listaFinalProductosRentaMesTabla":listaFinalProductosRentaMesTabla, "empleadosTops":empleadosTops,
                                                                          "clientesTopsModal":clientesTopsModal, "empleadosTopsModal":empleadosTopsModal,
                                                                          "comprasProductosGastos":comprasProductosGastos, "comprasProductosVentas":comprasProductosVentas, "comprasProductosRentas":comprasProductosRentas, "notificacionCita":notificacionCita})
    else:
        return render(request,"1 Login/login.html")



    
def informeDeVentasAnual(request):

    if "idSesion" in request.session:

        # Variables de sesión
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']
        idPerfil = idEmpleado
        idConfig = idEmpleado
       

        

        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
        
           #notificacionRentas
        notificacionRenta = notificacionRentas(request)

        #notificacionCitas
        notificacionCita = notificacionCitas(request)

        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)

        hoy = datetime.now()
        
        #Mes actual
        añoHoy = hoy.strftime('%Y')
        añoAnterior = int(añoHoy)-1
        strAñoAnterior = str(añoAnterior)
        
        fechaPrimerDiaDelAño = añoHoy+"-01-01" #Primer dia del presente año
        fechaUltimoDiaDelAño = añoHoy+"-12-31" #Ultimo dia del presente año
        
        #Año anterior
        añoAnterior = int(añoHoy)-1
        
        fechaPrimerDiaMesAnterior = str(añoAnterior) + "-01-01"   #2022-05-01
        fechaUltimoDiaMesAnterior = str(añoAnterior) + "-12-31"
        
        haceDosAños = int(añoHoy)-2
        strHaceDosAños = str(haceDosAños)
        
        fechaPrimerDiaHaceDosAños = str(haceDosAños) + "-01-01"   #2022-05-01
        fechaUltimoDiaHaceDosAños = str(haceDosAños) + "-12-31"
        
        haceTresAños = int(añoHoy)-3
        strHaceTresAños = str(haceTresAños)
        
        fechaPrimerDiaHaceTresAños = str(haceTresAños) + "-01-01"   #2022-05-01
        fechaUltimoDiaHaceTresAños = str(haceTresAños) + "-12-31"
        
        
        #Ingresos totales de mes actual, ventas, creditos y rentas
        consultaVentasAñoActual = Ventas.objects.filter(fecha_venta__range=[fechaPrimerDiaDelAño,fechaUltimoDiaDelAño], credito="N")
        
        montoIngresoAñoActual = 0
        
        contadorVentasAñoActual = 0
        numeroVentas =0
        
        contadorRentasAñoActual =0
        numeroRentas =0
        
        contadorCreditosAñoActual =0
        numeroCreditos = 0
        
        if consultaVentasAñoActual:
            for ventaRealizada in consultaVentasAñoActual:
                montoVenta = ventaRealizada.monto_pagar
                montoIngresoAñoActual = montoIngresoAñoActual + montoVenta
                contadorVentasAñoActual = contadorVentasAñoActual + montoVenta
                numeroVentas = numeroVentas +1
        
        consultaCreditosAñoActual = Creditos.objects.filter(fecha_venta_credito__range=[fechaPrimerDiaDelAño,fechaUltimoDiaDelAño], renta_id__isnull=True)
        
        if consultaCreditosAñoActual:
            for crceditoRealizado in consultaCreditosAñoActual:
                montoPagadoCredito = crceditoRealizado.monto_pagado
                montoIngresoAñoActual = montoIngresoAñoActual + montoPagadoCredito
                contadorCreditosAñoActual = contadorCreditosAñoActual + montoPagadoCredito
                numeroCreditos = numeroCreditos +1
            
        consultaRentasAñoActual = Rentas.objects.filter(fecha_apartado__range=[fechaPrimerDiaDelAño,fechaUltimoDiaDelAño])
        
        if consultaRentasAñoActual:
            for rentaRealizada in consultaRentasAñoActual:
                montoPagadoApartado = rentaRealizada.monto_pago_apartado
                montoPagadoRestante = rentaRealizada.monto_restante
                
                sumaPagosRenta = 0
                if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                    sumaPagosRenta = rentaRealizada.monto_total_renta
                else: #Si ya se pago el restante
                    sumaPagosRenta = montoPagadoApartado
                montoIngresoAñoActual = montoIngresoAñoActual + sumaPagosRenta

                contadorRentasAñoActual = contadorRentasAñoActual + sumaPagosRenta
                numeroRentas = numeroRentas +1

        
        #totales efectivo, tarjeta, transferencia

        #EFECTIVO
        consultaVentasAnualEfectivo = Ventas.objects.filter(fecha_venta__range=[fechaPrimerDiaDelAño,fechaUltimoDiaDelAño],tipo_pago="Efectivo",credito="N")
        totalEfectivo =0
        for efectivo in consultaVentasAnualEfectivo:
            monto_efectivo = efectivo.monto_pagar
            totalEfectivo = totalEfectivo + monto_efectivo
            
        #TARJETA
        consultaVentasAnualTarjeta = Ventas.objects.filter(fecha_venta__range=[fechaPrimerDiaDelAño,fechaUltimoDiaDelAño],tipo_pago="Tarjeta",credito="N")
        totalTarjeta =0
        for tarjeta in consultaVentasAnualTarjeta:
            montoTarjeta = tarjeta.monto_pagar
            totalTarjeta = totalTarjeta + montoTarjeta
        
        #TRANSFERENCIA 
        consultaVentasAnualTransferencia = Ventas.objects.filter(fecha_venta__range=[fechaPrimerDiaDelAño,fechaUltimoDiaDelAño],tipo_pago="Transferencia",credito="N")
        totalTransferencia =0
        for transferencia in consultaVentasAnualTransferencia:
            montoTransferencia = transferencia.monto_pagar
            totalTransferencia = totalTransferencia + montoTransferencia
        
        #PAGOS DE LOS CREDITOS
        creditosEfectivo = Creditos.objects.filter(fecha_venta_credito__range=[fechaPrimerDiaDelAño,fechaUltimoDiaDelAño])
        for credito in creditosEfectivo:
            idCredito = credito.id_credito
        
            pagosCredito = PagosCreditos.objects.filter(id_credito_id__id_credito=idCredito)
            for pago in pagosCredito:
                tipoPago1 = pago.tipo_pago1
                tipoPago2 = pago.tipo_pago2
                tipoPago3 = pago.tipo_pago3
                tipoPago4 = pago.tipo_pago4

                if tipoPago1:
                    montoPagado1 = pago.monto_pago1
                    if tipoPago1 == "Efectivo":
                        totalEfectivo = totalEfectivo + montoPagado1
                    elif tipoPago1 == "Tarjeta":
                        totalTarjeta = totalTarjeta + montoPagado1
                    elif tipoPago1 == "Transferencia":
                        totalTransferencia = totalTransferencia + montoPagado1
                
                elif tipoPago2:
                    montoPagado2 = pago.monto_pago2
                    if tipoPago2 == "Efectivo":
                        totalEfectivo = totalEfectivo + montoPagado2
                    elif tipoPago2 == "Tarjeta":
                        totalTarjeta = totalTarjeta + montoPagado2
                    elif tipoPago2 == "Transferencia":
                        totalTransferencia = totalTransferencia + montoPagado2
                
                elif tipoPago3:
                    montoPagado3 =pago.monto_pago3
                    if tipoPago3 == "Efectivo":
                        totalEfectivo = totalEfectivo + montoPagado3
                    elif tipoPago3 == "Tarjeta":
                        totalTarjeta = totalTarjeta + montoPagado3
                    elif tipoPago3 == "Transferencia":
                        totalTransferencia = totalTransferencia + montoPagado3
                        
                elif tipoPago4:
                    montoPagado4 = pago.monto_pago4
                    if tipoPago4 == "Efectivo":
                        totalEfectivo = totalEfectivo + montoPagado4
                    elif tipoPago4 == "Tarjeta":
                        totalTarjeta = totalTarjeta + montoPagado4
                    elif tipoPago4 == "Transferencia":
                        totalTransferencia = totalTransferencia + montoPagado4
        
        
        
        #TOP CLIENTES CON MAS COMPRAS

        consultaVentasAnualClientes = Ventas.objects.filter(fecha_venta__range=[fechaPrimerDiaDelAño,fechaUltimoDiaDelAño], cliente__isnull=False)

        clientesTop = []
        montosTop = []
        clientesMontosTotales = []
        clientesIds = []
        contadorClientesArray = []
        if consultaVentasAnualClientes:
            for clienteVentas in consultaVentasAnualClientes:
                cliente_ventas = clienteVentas.cliente_id
                monto_total_cliente = clienteVentas.monto_pagar
                clientesMontosTotales.append(monto_total_cliente) #180,600
                clientesIds.append(cliente_ventas) #1,1
                
            listaClientesCompradores = zip(clientesIds, clientesMontosTotales)
            
            listaClientes = []
            montoPorCliente = []
            contadorClientesArray = []
            
            
            for idcliente, montoTotalCliente in listaClientesCompradores:
                
                strIdCliente = str(idcliente)
                intMonto = float(montoTotalCliente)
                
                if strIdCliente in listaClientes:
                    indice = listaClientes.index(strIdCliente)
                    montoASumar = montoPorCliente[indice]
                    nuevaSumatoria = float(montoASumar) + intMonto
                    montoPorCliente[indice] = str(nuevaSumatoria)
                else:
                    listaClientes.append(strIdCliente)
                    montoPorCliente.append(str(intMonto))
            
            listaZipClientes = zip(listaClientes, montoPorCliente)
            
            listaOrdenadaMayorAMenor = sorted(listaZipClientes, key = lambda t: t[-1], reverse=True)
            tuples = zip(*listaOrdenadaMayorAMenor)
            listaClientesOrdenados, listaMontosOrdenados = [ list(tuple) for tuple in  tuples]
           
                    
            infoCliente = []

            
            cotadorClientes = 0
            for cliente in listaClientesOrdenados:
                cotadorClientes = cotadorClientes + 1
                contadorClientesArray.append(cotadorClientes)
                id_cliente_top = cliente
                clienteDatos = Clientes.objects.filter(id_cliente= id_cliente_top)
                for c in clienteDatos:

                    nombre_cliente_top = c.nombre_cliente
                    apellido =  c.apellidoPaterno_cliente
                    apellido2 = c.apellidoMaterno_cliente
                infoCliente.append([nombre_cliente_top,apellido,apellido2])

            clientesTops = zip (listaClientesOrdenados,listaMontosOrdenados,contadorClientesArray,infoCliente)
            clientesTopsModal =zip (listaClientesOrdenados,listaMontosOrdenados,contadorClientesArray,infoCliente) 
        else:
            clientesTops = None
            clientesTopsModal = None
            listaZipClientes = None
        
        #TOP EMPLEADOS CON MÁS VENTAS

        consultaTodasLasVentasDelAño = Ventas.objects.filter(fecha_venta__range=[fechaPrimerDiaDelAño,fechaUltimoDiaDelAño])

        idsEmpleados = []
        montosTotalesDeVentaEmpleados = []
        if consultaTodasLasVentasDelAño:
            for venta in consultaTodasLasVentasDelAño:
                idEmpleado = venta.empleado_vendedor_id
                idsEmpleados.append(idEmpleado) #1,1
                montoVendido = venta.monto_pagar
                montosTotalesDeVentaEmpleados.append(montoVendido)
                
            
            listaEmpleados = []
            contadorVentasEmpleado = []
            contadorEmpleado = []
            listaMontosPorEmpleados = []
            
            listaEmpleadosVentas = zip(idsEmpleados, montosTotalesDeVentaEmpleados)
            
            contadorEmpleados = 0
            for idEmpleado, montoVentita in listaEmpleadosVentas:
                
                strIdEmpleado = str(idEmpleado)
                floatMontoVendido = float(montoVentita)
                
                if strIdEmpleado in listaEmpleados:
                    indice = listaEmpleados.index(strIdEmpleado)
                    ventaASumar = contadorVentasEmpleado[indice]
                    nuevaSumatoria = int(ventaASumar) + 1
                    contadorVentasEmpleado[indice] = nuevaSumatoria
                    
                    montoASumar = listaMontosPorEmpleados[indice]
                    nuevaSumatoriaMonto = float(montoASumar) + floatMontoVendido
                    listaMontosPorEmpleados[indice] = nuevaSumatoriaMonto
                else:
                    listaEmpleados.append(strIdEmpleado)
                    
                    contadorVentasEmpleado.append("1")
                    listaMontosPorEmpleados.append(floatMontoVendido)
            
            for montoVendido in listaMontosPorEmpleados:
                print(str(montoVendido))

            listaZipEmpleados = zip(listaEmpleados, contadorVentasEmpleado, listaMontosPorEmpleados)
            
            listaOrdenadaEmpleadosMayorAMenor = sorted(listaZipEmpleados, key = lambda t: t[-1], reverse=True)
            tuplesEmpleados = zip(*listaOrdenadaEmpleadosMayorAMenor)
            listaEmpleadosOrdenados, listaContadoresEmpleadosOrdenados, listaMontosEmpleadosOrdenados = [ list(tuple) for tuple in  tuplesEmpleados]
            
            for monto in listaMontosEmpleadosOrdenados:
                print("Monto:"+str(monto))
            
            infoEmpleado = []

            

            for empleado in listaEmpleadosOrdenados:
                
                contadorEmpleados = contadorEmpleados + 1
                contadorEmpleado.append(contadorEmpleados)
                idEmpleado = int(empleado)
                datosEmpleado = Empleados.objects.filter(id_empleado = idEmpleado)
                
                for datoEmpleado in datosEmpleado:

                    nombresEm = datoEmpleado.nombres
                infoEmpleado.append(nombresEm)

            empleadosTops = zip (listaEmpleadosOrdenados,listaContadoresEmpleadosOrdenados,contadorEmpleado,infoEmpleado, listaMontosEmpleadosOrdenados)
            empleadosTopsModal =  zip (listaEmpleadosOrdenados,listaContadoresEmpleadosOrdenados,contadorEmpleado,infoEmpleado, listaMontosEmpleadosOrdenados)
        else:
            empleadosTops = None
            empleadosTopsModal = None
     
        
        


        #Ingresos totales año anterior
        consultaVentasMesAnterior = Ventas.objects.filter(fecha_venta__range=[fechaPrimerDiaMesAnterior,fechaUltimoDiaMesAnterior], credito="N")
        
        montoIngresoAñoAnterior = 0
        
        if consultaVentasMesAnterior:
            for ventaRealizada in consultaVentasMesAnterior:
                montoVenta = ventaRealizada.monto_pagar
                montoIngresoAñoAnterior = montoIngresoAñoAnterior + montoVenta
        
        consultaCreditosMesAnterior = Creditos.objects.filter(fecha_venta_credito__range=[fechaPrimerDiaMesAnterior,fechaUltimoDiaMesAnterior],  renta_id__isnull=True)
        
        if consultaCreditosMesAnterior:
            for crceditoRealizado in consultaCreditosMesAnterior:
                montoPagadoCredito = crceditoRealizado.monto_pagado
                montoIngresoAñoAnterior = montoIngresoAñoAnterior + montoPagadoCredito
            
        consultaRentasMesAnterior = Rentas.objects.filter(fecha_apartado__range=[fechaPrimerDiaMesAnterior,fechaUltimoDiaMesAnterior])
        
        if consultaRentasMesAnterior:
            for rentaRealizada in consultaRentasMesAnterior:
                montoPagadoApartado = rentaRealizada.monto_pago_apartado
                montoPagadoRestante = rentaRealizada.monto_restante
                sumaPagosRenta = 0
                if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                    sumaPagosRenta = rentaRealizada.monto_total_renta
                else: #Si ya se pago el restante
                    sumaPagosRenta = montoPagadoApartado
                montoIngresoAñoAnterior = montoIngresoAñoAnterior + sumaPagosRenta
                
        #Ingresos totales haceDosAños
        consultaVentasHaceDosAños = Ventas.objects.filter(fecha_venta__range=[fechaPrimerDiaHaceDosAños,fechaUltimoDiaHaceDosAños], credito="N")
        
        montoIngresoHaceDosAños = 0
        
        if consultaVentasHaceDosAños:
            for ventaRealizada in consultaVentasHaceDosAños:
                montoVenta = ventaRealizada.monto_pagar
                montoIngresoHaceDosAños = montoIngresoHaceDosAños + montoVenta
        
        consultaCreditosHaceDosAños = Creditos.objects.filter(fecha_venta_credito__range=[fechaPrimerDiaHaceDosAños,fechaUltimoDiaHaceDosAños],  renta_id__isnull=True)
        
        if consultaCreditosHaceDosAños:
            for crceditoRealizado in consultaCreditosHaceDosAños:
                montoPagadoCredito = crceditoRealizado.monto_pagado
                montoIngresoHaceDosAños = montoIngresoHaceDosAños + montoPagadoCredito
            
        consultaRentasHaceDosAños = Rentas.objects.filter(fecha_apartado__range=[fechaPrimerDiaHaceDosAños,fechaUltimoDiaHaceDosAños])
        
        if consultaRentasHaceDosAños:
            for rentaRealizada in consultaRentasHaceDosAños:
                montoPagadoApartado = rentaRealizada.monto_pago_apartado
                montoPagadoRestante = rentaRealizada.monto_restante
                sumaPagosRenta = 0
                if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                    sumaPagosRenta = rentaRealizada.monto_total_renta
                else: #Si ya se pago el restante
                    sumaPagosRenta = montoPagadoApartado
                montoIngresoHaceDosAños = montoIngresoHaceDosAños + sumaPagosRenta
                
                
        #Ingresos totales año anterior
        consultaVentasHaceTresAños = Ventas.objects.filter(fecha_venta__range=[fechaPrimerDiaHaceTresAños,fechaUltimoDiaHaceTresAños], credito="N")
        
        montoIngresoHaceTresAños = 0
        
        if consultaVentasHaceTresAños:
            for ventaRealizada in consultaVentasHaceTresAños:
                montoVenta = ventaRealizada.monto_pagar
                montoIngresoHaceTresAños = montoIngresoHaceTresAños + montoVenta
        
        consultaCreditosHaceTresAños = Creditos.objects.filter(fecha_venta_credito__range=[fechaPrimerDiaHaceTresAños,fechaUltimoDiaHaceTresAños],  renta_id__isnull=True)
        
        if consultaCreditosHaceTresAños:
            for crceditoRealizado in consultaCreditosHaceTresAños:
                montoPagadoCredito = crceditoRealizado.monto_pagado
                montoIngresoHaceTresAños = montoIngresoHaceTresAños + montoPagadoCredito
            
        consultaRentasHaceTresAños= Rentas.objects.filter(fecha_apartado__range=[fechaPrimerDiaHaceTresAños,fechaUltimoDiaHaceTresAños])
        
        if consultaRentasHaceTresAños:
            for rentaRealizada in consultaRentasHaceTresAños:
                montoPagadoApartado = rentaRealizada.monto_pago_apartado
                montoPagadoRestante = rentaRealizada.monto_restante
                sumaPagosRenta = 0
                if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                    sumaPagosRenta = rentaRealizada.monto_total_renta
                else: #Si ya se pago el restante
                    sumaPagosRenta = montoPagadoApartado
                montoIngresoHaceTresAños = montoIngresoHaceTresAños + sumaPagosRenta
        
        #comparativa de ingresos totales mensuales

        esMayor = False

        if montoIngresoAñoAnterior == 0:
            porcentajeIngresosAño = 100
        else:
            porcentajeIngresosAño = (montoIngresoAñoActual / montoIngresoAñoAnterior)
            porcentajeIngresosAño = porcentajeIngresosAño - 1
            porcentajeIngresosAño = porcentajeIngresosAño *100
            
            
        if porcentajeIngresosAño > 0:
            esMayor = True
            
        else:
            esMayor = False
        porcentajeIngresosAño = round(porcentajeIngresosAño,2)
        
        
        #INGRESOS TOTALES SEMANAL
        fechaActual = datetime.today().strftime('%Y-%m-%d') #2022-06-07
        diaActual = datetime.today().isoweekday() #2 martes
        intdiaActual = int(diaActual)
        diaLunes = intdiaActual-1 #3 dias para el lunes
        diaDomingo = 7-intdiaActual # 2 dias para el sabado
        
    #Montos totales de semana actual
        fechaLunes = datetime.now()-timedelta(days =diaLunes)
        fechaDomingo = datetime.now() + timedelta(days =diaDomingo)
        
        #Ingresos totales de mes actual, ventas, creditos y rentas
        consultaVentasSemanaActual = Ventas.objects.filter(fecha_venta__range=[fechaLunes,fechaDomingo], credito="N")
        
        montoIngresoSemanaActual = 0
        
        if consultaVentasSemanaActual:
            for ventaRealizada in consultaVentasSemanaActual:
                montoVenta = ventaRealizada.monto_pagar
                montoIngresoSemanaActual = montoIngresoSemanaActual + montoVenta
        
        consultaCreditosSemanaActual = Creditos.objects.filter(fecha_venta_credito__range=[fechaLunes,fechaDomingo],  renta_id__isnull=True)
        
        if consultaCreditosSemanaActual:
            for crceditoRealizado in consultaCreditosSemanaActual:
                montoPagadoCredito = crceditoRealizado.monto_pagado
                montoIngresoSemanaActual = montoIngresoSemanaActual + montoPagadoCredito
            
        consultaRentasSemanaActual = Rentas.objects.filter(fecha_apartado__range=[fechaLunes,fechaDomingo])
        
        if consultaRentasSemanaActual:
            for rentaRealizada in consultaRentasSemanaActual:
                montoPagadoApartado = rentaRealizada.monto_pago_apartado
                montoPagadoRestante = rentaRealizada.monto_restante
                sumaPagosRenta = 0
                if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                    sumaPagosRenta = rentaRealizada.monto_total_renta
                else: #Si ya se pago el restante
                    sumaPagosRenta = montoPagadoApartado
                montoIngresoSemanaActual = montoIngresoSemanaActual + sumaPagosRenta
                
        
    #Montos totales de semana anterior
        fechaLunesAnterior = fechaLunes-timedelta(days =7)
        fechaDomingoAnterior = fechaLunes - timedelta(days =1)
        
        #Ingresos totales de mes actual, ventas, creditos y rentas
        consultaVentasSemanaAnterior = Ventas.objects.filter(fecha_venta__range=[fechaLunesAnterior,fechaDomingoAnterior], credito="N")
        
        montoIngresoSemanaAnterior = 0
        
        if consultaVentasSemanaAnterior:
            for ventaRealizada in consultaVentasSemanaAnterior:
                montoVenta = ventaRealizada.monto_pagar
                montoIngresoSemanaAnterior = montoIngresoSemanaAnterior + montoVenta
        
        consultaCreditosSemanaAnterior = Creditos.objects.filter(fecha_venta_credito__range=[fechaLunesAnterior,fechaDomingoAnterior],  renta_id__isnull=True)
        
        if consultaCreditosSemanaAnterior:
            for crceditoRealizado in consultaCreditosSemanaAnterior:
                montoPagadoCredito = crceditoRealizado.monto_pagado
                montoIngresoSemanaAnterior = montoIngresoSemanaAnterior + montoPagadoCredito
            
        consultaRentasSemanaAnterior = Rentas.objects.filter(fecha_apartado__range=[fechaLunesAnterior,fechaDomingoAnterior])
        
        if consultaRentasSemanaAnterior:
            for rentaRealizada in consultaRentasSemanaAnterior:
                montoPagadoApartado = rentaRealizada.monto_pago_apartado
                montoPagadoRestante = rentaRealizada.monto_restante
                sumaPagosRenta = 0
                if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                    sumaPagosRenta = rentaRealizada.monto_total_renta
                else: #Si ya se pago el restante
                    sumaPagosRenta = montoPagadoApartado
                montoIngresoSemanaAnterior = montoIngresoSemanaAnterior + sumaPagosRenta
        
        #comparativa de ingresos totales mensuales

        esMayorSemana = False

        if montoIngresoSemanaAnterior == 0:
            porcentajeIngresosSemana = 100
        else:
            porcentajeIngresosSemana = (montoIngresoSemanaActual / montoIngresoSemanaAnterior)
            porcentajeIngresosSemana = porcentajeIngresosSemana - 1
            porcentajeIngresosSemana = porcentajeIngresosSemana *100

        
        if porcentajeIngresosSemana > 0:
            esMayorSemana = True
        else:
            esMayorSemana = False
        porcentajeIngresosSemana = round(porcentajeIngresosSemana,2)

        
        
        
        #Fechas para chart de meses
        inicioMesEnero = añoHoy+"-01-01"
        finMesEnero = añoHoy+"-01-31"
        consultaVentasEnero = Ventas.objects.filter(fecha_venta__range=[inicioMesEnero,finMesEnero], credito="N")
        montoIngresoEnero = 0
        if consultaVentasEnero:
            for ventaRealizada in consultaVentasEnero:
                montoVenta = ventaRealizada.monto_pagar
                montoIngresoEnero = montoIngresoEnero + montoVenta
        consultaCreditosEnero = Creditos.objects.filter(fecha_venta_credito__range=[inicioMesEnero,finMesEnero],  renta_id__isnull=True)
        if consultaCreditosEnero:
            for crceditoRealizado in consultaCreditosEnero:
                montoPagadoCredito = crceditoRealizado.monto_pagado
                montoIngresoEnero = montoIngresoEnero + montoPagadoCredito
        consultaRentasEnero = Rentas.objects.filter(fecha_apartado__range=[inicioMesEnero,finMesEnero])
        if  consultaRentasEnero:
            for rentaRealizada in consultaRentasFebrero:
                montoPagadoApartado = rentaRealizada.monto_pago_apartado
                montoPagadoRestante = rentaRealizada.monto_restante
                sumaPagosRenta = 0
                if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                    sumaPagosRenta = rentaRealizada.monto_total_renta
                else: #Si ya se pago el restante
                    sumaPagosRenta = montoPagadoApartado
                montoIngresoEnero = montoIngresoEnero + sumaPagosRenta
        
        
        
        inicioMesFebrero = añoHoy+"-02-01"
        finMesFebrero = añoHoy+"-02-28"
        consultaVentasFebrero = Ventas.objects.filter(fecha_venta__range=[inicioMesFebrero,finMesFebrero], credito="N")
        montoIngresoFebrero = 0
        if consultaVentasFebrero:
            for ventaRealizada in consultaVentasFebrero:
                montoVenta = ventaRealizada.monto_pagar
                montoIngresoFebrero = montoIngresoFebrero + montoVenta
        consultaCreditosFebrero = Creditos.objects.filter(fecha_venta_credito__range=[inicioMesFebrero,finMesFebrero],  renta_id__isnull=True)
        if consultaCreditosFebrero:
            for crceditoRealizado in consultaCreditosFebrero:
                montoPagadoCredito = crceditoRealizado.monto_pagado
                montoIngresoFebrero = montoIngresoFebrero + montoPagadoCredito
        consultaRentasFebrero = Rentas.objects.filter(fecha_apartado__range=[inicioMesFebrero,finMesFebrero])
        if consultaRentasFebrero:
            for rentaRealizada in consultaRentasFebrero:
                montoPagadoApartado = rentaRealizada.monto_pago_apartado
                montoPagadoRestante = rentaRealizada.monto_restante
                sumaPagosRenta = 0
                if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                    sumaPagosRenta = rentaRealizada.monto_total_renta
                else: #Si ya se pago el restante
                    sumaPagosRenta = montoPagadoApartado
                montoIngresoFebrero = montoIngresoFebrero + sumaPagosRenta
        
        inicioMesMarzo = añoHoy+"-03-01"
        finMesMarzo = añoHoy+"-03-31"
        consultaVentasMarzo = Ventas.objects.filter(fecha_venta__range=[inicioMesMarzo,finMesMarzo], credito="N")
        montoIngresoMarzo = 0
        if consultaVentasMarzo:
            for ventaRealizada in consultaVentasMarzo:
                montoVenta = ventaRealizada.monto_pagar
                montoIngresoMarzo = montoIngresoMarzo + montoVenta
        consultaCreditosMarzo = Creditos.objects.filter(fecha_venta_credito__range=[inicioMesMarzo,finMesMarzo],  renta_id__isnull=True)
        if consultaCreditosMarzo:
            for crceditoRealizado in consultaCreditosMarzo:
                montoPagadoCredito = crceditoRealizado.monto_pagado
                montoIngresoMarzo = montoIngresoMarzo + montoPagadoCredito
        consultaRentasMarzo = Rentas.objects.filter(fecha_apartado__range=[inicioMesMarzo,finMesMarzo])
        if consultaRentasMarzo:
            for rentaRealizada in consultaRentasMarzo:
                montoPagadoApartado = rentaRealizada.monto_pago_apartado
                montoPagadoRestante = rentaRealizada.monto_restante
                sumaPagosRenta = 0
                if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                    sumaPagosRenta = rentaRealizada.monto_total_renta
                else: #Si ya se pago el restante
                    sumaPagosRenta = montoPagadoApartado
                montoIngresoMarzo = montoIngresoMarzo + sumaPagosRenta
        
        inicioMesAbril = añoHoy+"-04-01"
        finMesAbril = añoHoy+"-04-30"
        consultaVentasAbril = Ventas.objects.filter(fecha_venta__range=[inicioMesAbril,finMesAbril], credito="N")
        montoIngresoAbril = 0
        if consultaVentasAbril:
            for ventaRealizada in consultaVentasAbril:
                montoVenta = ventaRealizada.monto_pagar
                montoIngresoAbril = montoIngresoAbril + montoVenta
        consultaCreditosAbril = Creditos.objects.filter(fecha_venta_credito__range=[inicioMesAbril,finMesAbril],  renta_id__isnull=True)
        if consultaCreditosAbril:
            for crceditoRealizado in consultaCreditosAbril:
                montoPagadoCredito = crceditoRealizado.monto_pagado
                montoIngresoAbril = montoIngresoAbril + montoPagadoCredito
        consultaRentasAbril = Rentas.objects.filter(fecha_apartado__range=[inicioMesAbril,finMesAbril])
        if consultaRentasAbril:
            for rentaRealizada in consultaRentasAbril:
                montoPagadoApartado = rentaRealizada.monto_pago_apartado
                montoPagadoRestante = rentaRealizada.monto_restante
                sumaPagosRenta = 0
                if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                    sumaPagosRenta = rentaRealizada.monto_total_renta
                else: #Si ya se pago el restante
                    sumaPagosRenta = montoPagadoApartado
                montoIngresoAbril = montoIngresoAbril + sumaPagosRenta
        
        inicioMesMayo = añoHoy+"-05-01"
        finMesMayo = añoHoy+"-05-31"
        consultaVentasMayo = Ventas.objects.filter(fecha_venta__range=[inicioMesMayo,finMesMayo], credito="N")
        montoIngresoMayo = 0
        if consultaVentasMayo:
            for ventaRealizada in consultaVentasMayo:
                montoVenta = ventaRealizada.monto_pagar
                montoIngresoMayo = montoIngresoMayo + montoVenta
        consultaCreditosMayo = Creditos.objects.filter(fecha_venta_credito__range=[inicioMesMayo,finMesMayo],  renta_id__isnull=True)
        if consultaCreditosMayo:
            for crceditoRealizado in consultaCreditosMayo:
                montoPagadoCredito = crceditoRealizado.monto_pagado
                montoIngresoMayo = montoIngresoMayo + montoPagadoCredito
        consultaRentasMayo = Rentas.objects.filter(fecha_apartado__range=[inicioMesMayo,finMesMayo])
        if consultaRentasMayo:
            for rentaRealizada in consultaRentasMayo:
                montoPagadoApartado = rentaRealizada.monto_pago_apartado
                montoPagadoRestante = rentaRealizada.monto_restante
                sumaPagosRenta = 0
                if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                    sumaPagosRenta = rentaRealizada.monto_total_renta
                else: #Si ya se pago el restante
                    sumaPagosRenta = montoPagadoApartado
                montoIngresoMayo = montoIngresoMayo + sumaPagosRenta
        
        inicioMesJunio = añoHoy+"-06-01"
        finMesJunio = añoHoy+"-06-30"
        consultaVentasJunio = Ventas.objects.filter(fecha_venta__range=[inicioMesJunio,finMesJunio], credito="N")
        montoIngresoJunio = 0
        if consultaVentasJunio:
            for ventaRealizada in consultaVentasJunio:
                montoVenta = ventaRealizada.monto_pagar
                montoIngresoJunio = montoIngresoJunio + montoVenta
        consultaCreditosJunio = Creditos.objects.filter(fecha_venta_credito__range=[inicioMesJunio,finMesJunio],  renta_id__isnull=True)
        if consultaCreditosJunio:
            for crceditoRealizado in consultaCreditosJunio:
                montoPagadoCredito = crceditoRealizado.monto_pagado
                montoIngresoJunio = montoIngresoJunio + montoPagadoCredito
        consultaRentasJunio = Rentas.objects.filter(fecha_apartado__range=[inicioMesJunio,finMesJunio])
        if consultaRentasJunio:
            for rentaRealizada in consultaRentasJunio:
                montoPagadoApartado = rentaRealizada.monto_pago_apartado
                montoPagadoRestante = rentaRealizada.monto_restante
                sumaPagosRenta = 0
                if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                    sumaPagosRenta = rentaRealizada.monto_total_renta
                else: #Si ya se pago el restante
                    sumaPagosRenta = montoPagadoApartado
                montoIngresoJunio = montoIngresoJunio + sumaPagosRenta
        
        inicioMesJulio = añoHoy+"-07-01"
        finMesJulio = añoHoy+"-07-31"
        consultaVentasJulio = Ventas.objects.filter(fecha_venta__range=[inicioMesJulio,finMesJulio], credito="N")
        montoIngresoJulio = 0
        if consultaVentasJulio:
            for ventaRealizada in consultaVentasJulio:
                montoVenta = ventaRealizada.monto_pagar
                montoIngresoJulio = montoIngresoJulio + montoVenta
        consultaCreditosJulio = Creditos.objects.filter(fecha_venta_credito__range=[inicioMesJulio,finMesJulio],  renta_id__isnull=True)
        if consultaCreditosJulio:
            for crceditoRealizado in consultaCreditosJulio:
                montoPagadoCredito = crceditoRealizado.monto_pagado
                montoIngresoJulio = montoIngresoJulio + montoPagadoCredito
        consultaRentasJulio = Rentas.objects.filter(fecha_apartado__range=[inicioMesJulio,finMesJulio])
        if consultaRentasJulio:
            for rentaRealizada in consultaRentasJulio:
                montoPagadoApartado = rentaRealizada.monto_pago_apartado
                montoPagadoRestante = rentaRealizada.monto_restante
                sumaPagosRenta = 0
                if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                    sumaPagosRenta = rentaRealizada.monto_total_renta
                else: #Si ya se pago el restante
                    sumaPagosRenta = montoPagadoApartado
                montoIngresoJulio = montoIngresoJulio + sumaPagosRenta
        
        inicioMesAgosto = añoHoy+"-08-01"
        finMesAgosto = añoHoy+"-08-31"
        consultaVentasAgosto = Ventas.objects.filter(fecha_venta__range=[inicioMesAgosto,finMesAgosto], credito="N")
        montoIngresoAgosto = 0
        if consultaVentasAgosto:
            for ventaRealizada in consultaVentasAgosto:
                montoVenta = ventaRealizada.monto_pagar
                montoIngresoAgosto = montoIngresoAgosto + montoVenta
        consultaCreditosAgosto = Creditos.objects.filter(fecha_venta_credito__range=[inicioMesAgosto,finMesAgosto],  renta_id__isnull=True)
        if consultaCreditosAgosto:
            for crceditoRealizado in consultaCreditosAgosto:
                montoPagadoCredito = crceditoRealizado.monto_pagado
                montoIngresoAgosto = montoIngresoAgosto + montoPagadoCredito
        consultaRentasAgosto = Rentas.objects.filter(fecha_apartado__range=[inicioMesAgosto,finMesAgosto])
        if consultaRentasAgosto:
            for rentaRealizada in consultaRentasAgosto:
                montoPagadoApartado = rentaRealizada.monto_pago_apartado
                montoPagadoRestante = rentaRealizada.monto_restante
                sumaPagosRenta = 0
                if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                    sumaPagosRenta = rentaRealizada.monto_total_renta
                else: #Si ya se pago el restante
                    sumaPagosRenta = montoPagadoApartado
                montoIngresoAgosto = montoIngresoAgosto + sumaPagosRenta
        
        inicioMesSeptiembre = añoHoy+"-09-01"
        finMesSeptiembre = añoHoy+"-09-30"
        consultaVentasSeptiembre = Ventas.objects.filter(fecha_venta__range=[inicioMesSeptiembre,finMesSeptiembre], credito="N")
        montoIngresoSeptiembre = 0
        if consultaVentasSeptiembre:
            for ventaRealizada in consultaVentasSeptiembre:
                montoVenta = ventaRealizada.monto_pagar
                montoIngresoSeptiembre = montoIngresoSeptiembre + montoVenta
        consultaCreditosSeptiembre = Creditos.objects.filter(fecha_venta_credito__range=[inicioMesSeptiembre,finMesSeptiembre],  renta_id__isnull=True)
        if consultaCreditosSeptiembre:
            for crceditoRealizado in consultaCreditosSeptiembre:
                montoPagadoCredito = crceditoRealizado.monto_pagado
                montoIngresoSeptiembre = montoIngresoSeptiembre + montoPagadoCredito
        consultaRentasSeptiembre = Rentas.objects.filter(fecha_apartado__range=[inicioMesSeptiembre,finMesSeptiembre])
        if consultaRentasSeptiembre:
            for rentaRealizada in consultaRentasSeptiembre:
                montoPagadoApartado = rentaRealizada.monto_pago_apartado
                montoPagadoRestante = rentaRealizada.monto_restante
                sumaPagosRenta = 0
                if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                    sumaPagosRenta = rentaRealizada.monto_total_renta
                else: #Si ya se pago el restante
                    sumaPagosRenta = montoPagadoApartado
                montoIngresoSeptiembre = montoIngresoSeptiembre + sumaPagosRenta
        
        inicioMesOctubre = añoHoy+"-10-01"
        finMesOctubre = añoHoy+"-10-31"
        consultaVentasOctubre = Ventas.objects.filter(fecha_venta__range=[inicioMesOctubre,finMesOctubre], credito="N")
        montoIngresoOctubre = 0
        if consultaVentasOctubre:
            for ventaRealizada in consultaVentasOctubre:
                montoVenta = ventaRealizada.monto_pagar
                montoIngresoOctubre = montoIngresoOctubre + montoVenta
        consultaCreditosOctubre = Creditos.objects.filter(fecha_venta_credito__range=[inicioMesOctubre,finMesOctubre],  renta_id__isnull=True)
        if consultaCreditosOctubre:
            for crceditoRealizado in consultaCreditosOctubre:
                montoPagadoCredito = crceditoRealizado.monto_pagado
                montoIngresoOctubre = montoIngresoOctubre + montoPagadoCredito
        consultaRentasOctubre = Rentas.objects.filter(fecha_apartado__range=[inicioMesOctubre,finMesOctubre])
        if consultaRentasOctubre:
            for rentaRealizada in consultaRentasOctubre:
                montoPagadoApartado = rentaRealizada.monto_pago_apartado
                montoPagadoRestante = rentaRealizada.monto_restante
                sumaPagosRenta = 0
                if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                    sumaPagosRenta = rentaRealizada.monto_total_renta
                else: #Si ya se pago el restante
                    sumaPagosRenta = montoPagadoApartado
                montoIngresoOctubre = montoIngresoOctubre + sumaPagosRenta
        
        inicioMesNoviembre = añoHoy+"-11-01"
        finMesNoviembre = añoHoy+"-11-30"
        consultaVentasNoviembre = Ventas.objects.filter(fecha_venta__range=[inicioMesNoviembre,finMesNoviembre], credito="N")
        montoIngresoNoviembre = 0
        if consultaVentasNoviembre:
            for ventaRealizada in consultaVentasNoviembre:
                montoVenta = ventaRealizada.monto_pagar
                montoIngresoNoviembre = montoIngresoNoviembre + montoVenta
        consultaCreditosNoviembre = Creditos.objects.filter(fecha_venta_credito__range=[inicioMesNoviembre,finMesNoviembre],  renta_id__isnull=True)
        if consultaCreditosNoviembre:
            for crceditoRealizado in consultaCreditosNoviembre:
                montoPagadoCredito = crceditoRealizado.monto_pagado
                montoIngresoNoviembre = montoIngresoNoviembre + montoPagadoCredito
        consultaRentasNoviembre = Rentas.objects.filter(fecha_apartado__range=[inicioMesNoviembre,finMesNoviembre])
        if consultaRentasNoviembre:
            for rentaRealizada in consultaRentasNoviembre:
                montoPagadoApartado = rentaRealizada.monto_pago_apartado
                montoPagadoRestante = rentaRealizada.monto_restante
                sumaPagosRenta = 0
                if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                    sumaPagosRenta = rentaRealizada.monto_total_renta
                else: #Si ya se pago el restante
                    sumaPagosRenta = montoPagadoApartado 
                montoIngresoNoviembre = montoIngresoNoviembre + sumaPagosRenta
        
        inicioMesDiciembre = añoHoy+"-12-01"
        finMesDiciembre = añoHoy+"-12-31"
        consultaVentasDiciembre = Ventas.objects.filter(fecha_venta__range=[inicioMesDiciembre,finMesDiciembre], credito="N")
        montoIngresoDiciembre = 0
        if consultaVentasDiciembre:
            for ventaRealizada in consultaVentasDiciembre:
                montoVenta = ventaRealizada.monto_pagar
                montoIngresoDiciembre = montoIngresoDiciembre + montoVenta
        consultaCreditosDiciembre = Creditos.objects.filter(fecha_venta_credito__range=[inicioMesDiciembre,finMesDiciembre],  renta_id__isnull=True)
        if consultaCreditosDiciembre:
            for crceditoRealizado in consultaCreditosDiciembre:
                montoPagadoCredito = crceditoRealizado.monto_pagado
                montoIngresoDiciembre = montoIngresoDiciembre + montoPagadoCredito
        consultaRentasDiciembre = Rentas.objects.filter(fecha_apartado__range=[inicioMesDiciembre,finMesDiciembre])
        if consultaRentasDiciembre:
            for rentaRealizada in consultaRentasDiciembre:
                montoPagadoApartado = rentaRealizada.monto_pago_apartado
                montoPagadoRestante = rentaRealizada.monto_restante
                sumaPagosRenta = 0
                if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                    sumaPagosRenta = rentaRealizada.monto_total_renta
                else: #Si ya se pago el restante
                    sumaPagosRenta = montoPagadoApartado
                montoIngresoDiciembre = montoIngresoDiciembre + sumaPagosRenta
        
        
        
        
        # - COMPRAS DEL MEES ...................................................
        totalComprasMesGasto = 0
        totalComprasMesVenta = 0
        totalComprasMesRenta= 0
        numeroComprasGasto = 0
        numeroComprasVenta = 0
        numeroComprasRenta = 0
        
        comprasProductosGastos = []
        comprasGastoDelMes = ComprasGastos.objects.filter(fecha_compra__range=[fechaPrimerDiaDelAño,fechaUltimoDiaDelAño])
        if comprasGastoDelMes:
            for compra in comprasGastoDelMes:
                montoComprado = compra.total_costoCompra
                totalComprasMesGasto = totalComprasMesGasto + montoComprado
                numeroComprasGasto = numeroComprasGasto +1
                
                idCompra = compra.id_compraGasto
                idProducto = compra.id_productoComprado_id
                consultaProducto = ProductosGasto.objects.filter(id_producto = idProducto)
                
                for datoProducto in consultaProducto:
                    nombreProducto = datoProducto.nombre_producto
                    codigoProducto = datoProducto.codigo_producto
                    imagenProducto = datoProducto.imagen_producto
                    sucursalProducto = datoProducto.sucursal_id
                nombreCompletoProducto = codigoProducto + " - "+nombreProducto
                
                fechaCompra = compra.fecha_compra
                costoUnitarioCompra = compra.costo_unitario
                cantidadComprada = compra.cantidad_comprada
                totalMontoCompra = compra.total_costoCompra
                
                consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursalProducto)
                for datoSucursal in consultaSucursal:
                    nombreSucursal = datoSucursal.nombre
                
                
                
                comprasProductosGastos.append([idCompra,nombreCompletoProducto,imagenProducto,fechaCompra,nombreSucursal,costoUnitarioCompra,cantidadComprada,totalMontoCompra])
        else:
            comprasProductosGastos = None
            
        
        comprasProductosVentas = []
        comprasVentaDelMes = ComprasVentas.objects.filter(fecha_compra__range=[fechaPrimerDiaDelAño,fechaUltimoDiaDelAño])
        if comprasVentaDelMes:
            for compra in comprasVentaDelMes:
                montoComprado = compra.total_costoCompra
                totalComprasMesVenta = totalComprasMesVenta + montoComprado
                numeroComprasVenta = numeroComprasVenta +1
                
                idCompra = compra.id_compraVenta
                idProducto = compra.id_productoComprado_id
                consultaProducto = ProductosVenta.objects.filter(id_producto = idProducto)
                
                for datoProducto in consultaProducto:
                    nombreProducto = datoProducto.nombre_producto
                    codigoProducto = datoProducto.codigo_producto
                    imagenProducto = datoProducto.imagen_producto
                    sucursalProducto = datoProducto.sucursal_id
                nombreCompletoProducto = codigoProducto + " - "+nombreProducto
                
                fechaCompra = compra.fecha_compra
                costoUnitarioCompra = compra.costo_unitario
                cantidadComprada = compra.cantidad_comprada
                totalMontoCompra = compra.total_costoCompra
                
                consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursalProducto)
                for datoSucursal in consultaSucursal:
                    nombreSucursal = datoSucursal.nombre
                
                
                comprasProductosVentas.append([idCompra,nombreCompletoProducto,imagenProducto,fechaCompra,nombreSucursal,costoUnitarioCompra,cantidadComprada,totalMontoCompra])
        else:
            comprasProductosVentas = None
        
        
        comprasProductosRentas = []
        comprasRentasDelMes = ComprasRentas.objects.filter(fecha_compra__range=[fechaPrimerDiaDelAño,fechaUltimoDiaDelAño])
        if comprasRentasDelMes:
            for compra in comprasRentasDelMes:
                montoComprado = compra.total_costoCompra
                totalComprasMesRenta = totalComprasMesRenta + montoComprado
                numeroComprasRenta = numeroComprasRenta +1
                
                idCompra = compra.id_compraRenta
                idProducto = compra.id_productoComprado_id
                consultaProducto = ProductosRenta.objects.filter(id_producto = idProducto)
                
                for datoProducto in consultaProducto:
                    nombreProducto = datoProducto.nombre_producto
                    codigoProducto = datoProducto.codigo_producto
                    imagenProducto = datoProducto.imagen_producto
                    sucursalProducto = datoProducto.sucursal_id
                nombreCompletoProducto = codigoProducto + " - "+nombreProducto
                
                fechaCompra = compra.fecha_compra
                costoUnitarioCompra = compra.costo_unitario
                cantidadComprada = compra.cantidad_comprada
                totalMontoCompra = compra.total_costoCompra
                
                consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursalProducto)
                for datoSucursal in consultaSucursal:
                    nombreSucursal = datoSucursal.nombre
                
                
                comprasProductosRentas.append([idCompra,nombreCompletoProducto,imagenProducto,fechaCompra,nombreSucursal,costoUnitarioCompra,cantidadComprada,totalMontoCompra])
        else:
            comprasProductosRentas = None            

        sumaTotalesCompras = totalComprasMesGasto + totalComprasMesVenta + totalComprasMesRenta
        
        
        
        
        #PRODUCTOS TOOOOOPP ------------------------------------------
      
        consultaVentasMesActual = Ventas.objects.filter(fecha_venta__range=[fechaPrimerDiaDelAño,fechaUltimoDiaDelAño])
        
       
        productosCantidades = []
        productosVenta =[]
        cantidadesProductosVenta =[]
        sinProductos = False
       
        
        for ventaMensual in consultaVentasMesActual:
            
            ids_productos = ventaMensual.ids_productos
            if ids_productos == "":
                sinProductos = True
            else:
                sinProductos = False
            
                productos = ids_productos.split(',')
                cantidades_productos = ventaMensual.cantidades_productos
                cantidades = cantidades_productos.split(',')

                productosCantidades = zip(productos, cantidades)
            
            if sinProductos == False:
                for idP,cant in productosCantidades:
                    productoVenta= str(idP)
                    cantidadProductoVenta = str(cant)
            
                
                    if "PV" in productoVenta:
                        productosVenta.append(productoVenta)   #['PV0001']
                        cantidadesProductosVenta.append(cantidadProductoVenta) #['1']
        
           
            
        if not productosVenta:
            listaFinalProductosMesTabla = None
            
        else:
                lProductos =zip(productosVenta,cantidadesProductosVenta)   #(['PV1000'],['1']) 
            
                
                
                listaFinalProductos = []
                listaFinalProductosSoloStrings = []
                for pr,ca in lProductos:
                    
                    stringProducto =str(pr)
                    stringCantidad =ca
                    
                    numero = productosVenta.count(stringProducto)
                    
                    if numero >1:
                        if stringProducto in listaFinalProductosSoloStrings:
                            elProductoYaFueAgregado = True
                        else:
                            contadorCantidadesDeProductos = 0
                            contadorProductos = 0
                            for producto in productosVenta:  #3
                                
                                contadorProductos = contadorProductos + 1
                                stringProducto2 = productosVenta[contadorProductos-1]
                                cantidadProducto2 = cantidadesProductosVenta[contadorProductos-1]

                                if stringProducto == stringProducto2:
                                    contadorCantidadesDeProductos = contadorCantidadesDeProductos + int(cantidadProducto2)

                            stringCantidad = str(contadorCantidadesDeProductos)
                            listaFinalProductosSoloStrings.append(stringProducto)
                            listaFinalProductos.append([stringProducto,stringCantidad])
                        #Borrar todos los elementos de las dos listas de strings y cantidades correspondientes a ese producto
                        
                    else:
                        listaFinalProductos.append([stringProducto,stringCantidad])

                    
                    listaProductosOrdenada = sorted(listaFinalProductos, key = lambda elemento:elemento[1])

                    listaProductosOrdenadaMayorAMenor = listaProductosOrdenada[::-1]


                    contadorParaTablaProductosMes = 0
                    arrayContadores = []
                    arrayInfoProducto = []
                    for producto in listaProductosOrdenadaMayorAMenor:
                        
                        contadorParaTablaProductosMes = contadorParaTablaProductosMes + 1
                        arrayContadores.append(contadorParaTablaProductosMes)

                        #info producto
                        codigoProducto = producto[0]
                        cantidadVendida = producto[1]
                        consultaProducto = ProductosVenta.objects.filter(codigo_producto = codigoProducto)
                        for datoProducto in consultaProducto:
                            nombre = datoProducto.nombre_producto
                            costoVenta = datoProducto.costo_venta
                            imagen = datoProducto.imagen_producto
                        
                        costoTotalVendidoProducto = costoVenta * float(cantidadVendida)
                        arrayInfoProducto.append([nombre, costoVenta, costoTotalVendidoProducto, imagen])


                    listaFinalProductosMesTabla = zip(listaProductosOrdenadaMayorAMenor, arrayContadores, arrayInfoProducto)


        
        #SERVICIOS TOOOPP------------------------------------------------
        
        consultaVentasServiciosMesActual = Ventas.objects.filter(fecha_venta__range=[fechaPrimerDiaDelAño,fechaUltimoDiaDelAño])
        
       
        serviciosCantidades = []
        serviciosVenta =[]
        cantidadesServiciosVenta =[]
        sinServicioscorporales = False
        sinServiciosfaciales = False
       
        
        for ventaMensual in consultaVentasServiciosMesActual:
            
            ids_servicios_corporales = ventaMensual.ids_servicios_corporales #""
            if ids_servicios_corporales == "":
                sinServicioscorporales = True
            else:
                sinServicioscorporales = False
                serviciosCorporales = ids_servicios_corporales.split(',')
                cantidades_servicios_corporales = ventaMensual.cantidades_servicios_corporales
                cantidades_corporales = cantidades_servicios_corporales.split(',')

                serviciosCorporalesCantidades = zip(serviciosCorporales, cantidades_corporales)
            
            ids_servicios_faciales = ventaMensual.ids_servicios_faciales
            if ids_servicios_faciales == "":
                sinServiciosfaciales = True
            else:
                serviciosFaciales = ids_servicios_faciales.split(',')
                cantidades_servicios_faciales = ventaMensual.cantidades_servicios_faciales
                cantidades_faciales = cantidades_servicios_faciales.split(',')

                serviciosFacialesCantidades = zip(serviciosFaciales, cantidades_faciales)
                
            if sinServicioscorporales == False:
                for idServicioCorporal,cantCorporal in serviciosCorporalesCantidades:
                    servicioVenta= str(idServicioCorporal)
                    cantidadServicioVenta = str(cantCorporal)
            
            
            
                    serviciosVenta.append(servicioVenta)   #['PV0001']
                    cantidadesServiciosVenta.append(cantidadServicioVenta) #['1']
                
        
            if sinServiciosfaciales == False:
                for idServicioFacial,cantFacial in serviciosFacialesCantidades:
                    servicioVenta= str(idServicioFacial)
                    cantidadServicioVenta = str(cantFacial)
            
            
            
                    serviciosVenta.append(servicioVenta)   #['PV0001']
                    cantidadesServiciosVenta.append(cantidadServicioVenta) #['1'] for idServicioCorporal,cantCorporal in serviciosCorporalesCantidades:
                
        if not serviciosVenta:
            listaFinalServiciosMesTabla = None
        else:
            lServicios =zip(serviciosVenta,cantidadesServiciosVenta)   #(['PV1000'],['1']) 
        
            
            
            listaFinalServicios = []
            listaFinalServiciosSoloStrings = []
            for ser,can in lServicios:
                
                intIdServicio =ser
                stringCantidad =can
                
                numero = serviciosVenta.count(intIdServicio)
                
                if numero >1:
                    if intIdServicio in listaFinalServiciosSoloStrings:
                        elServicioYaFueAgregado = True
                    else:
                        contadorCantidadesDeServicios = 0
                        contadorServicios = 0
                        for servicio in serviciosVenta:  #3
                            
                            contadorServicios = contadorServicios + 1
                            idServicio2 = serviciosVenta[contadorServicios-1]
                            cantidadServicio2 = cantidadesServiciosVenta[contadorServicios-1]

                            if intIdServicio == idServicio2:
                                contadorCantidadesDeServicios = contadorCantidadesDeServicios + int(cantidadServicio2)

                        stringCantidad = str(contadorCantidadesDeServicios)
                        listaFinalServiciosSoloStrings.append(intIdServicio)
                        listaFinalServicios.append([intIdServicio,stringCantidad])
                    #Borrar todos los elementos de las dos listas de strings y cantidades correspondientes a ese producto
                    
                else:
                    listaFinalServicios.append([intIdServicio,stringCantidad])

                
                listaServiciosOrdenada = sorted(listaFinalServicios, key = lambda elemento:elemento[1])

                listaServiciosOrdenadaMayorAMenor = listaServiciosOrdenada[::-1]


                contadorParaTablaServiciosMes = 0
                arrayContadores = []
                arrayInfoServicio = []
                for servicio in listaServiciosOrdenadaMayorAMenor:
                    
                    contadorParaTablaServiciosMes = contadorParaTablaServiciosMes + 1
                    arrayContadores.append(contadorParaTablaServiciosMes)

                    #info producto
                    codigoServicio= servicio[0]
                    cantidadVendida = servicio[1]
                    consultaServicio = Servicios.objects.filter(id_servicio = codigoServicio)
                    for datoServicios in consultaServicio:
                        tipo = datoServicios.tipo_servicio
                        nombreServicio = datoServicios.nombre_servicio
                        costoVenta = datoServicios.precio_venta
                    
                    
                    costoTotalVendidoServicio = costoVenta * float(cantidadVendida)
                    arrayInfoServicio.append([tipo, nombreServicio, costoVenta,costoTotalVendidoServicio])


                listaFinalServiciosMesTabla = zip(listaServiciosOrdenadaMayorAMenor, arrayContadores, arrayInfoServicio)



        
        
        #PRODUCTOS RENTA TOPPP------------------------------------------

        consultaVentasRentasMesActual = Ventas.objects.filter(fecha_venta__range=[fechaPrimerDiaDelAño,fechaUltimoDiaDelAño])
        
       
        productosRentaCantidades = []
        productosRentaVenta =[]
        cantidadesProductosRentaVenta =[]
        sinProductosRenta = False
       
        
        for ventaMensual in consultaVentasRentasMesActual:
            
            ids_productos = ventaMensual.ids_productos
            if ids_productos == "":
                sinProductosRenta = True
            else: 
                sinProductosRenta = False
                productos = ids_productos.split(',')
                cantidades_productos = ventaMensual.cantidades_productos
                cantidades = cantidades_productos.split(',')

                productosCantidades = zip(productos, cantidades)
                
            if sinProductosRenta == False:
                for idP,cant in productosCantidades:
                    productoVenta= str(idP)
                    cantidadProductoVenta = str(cant)
            
                
                    if "PR" in productoVenta:
                        productosRentaVenta.append(productoVenta)   #['PV0001']
                        cantidadesProductosRentaVenta.append(cantidadProductoVenta) #['1']
            
        if not productosRentaVenta:
            listaFinalProductosRentaMesTabla = None
        else:

            lProductosRenta =zip(productosRentaVenta,cantidadesProductosRentaVenta)   #(['PV1000'],['1']) 
        
            
            
            listaFinalProductosRenta = []
            listaFinalProductosSoloStringsRenta = []
            for prren,caren in lProductosRenta:
                
                stringProducto =str(prren)
                stringCantidad =caren
                
                numero = productosRentaVenta.count(stringProducto)
                
                if numero >1:
                    if stringProducto in listaFinalProductosSoloStringsRenta:
                        elProductoYaFueAgregado = True
                    else:
                        contadorCantidadesDeProductosRenta = 0
                        contadorProductosRenta = 0
                        for producto in productosRentaVenta:  #3
                            
                            contadorProductosRenta = contadorProductosRenta + 1
                            stringProductorenta2 = productosRentaVenta[contadorProductosRenta-1]
                            cantidadProductorenta2 = cantidadesProductosRentaVenta[contadorProductosRenta-1]

                            if stringProducto == stringProductorenta2:
                                contadorCantidadesDeProductosRenta = contadorCantidadesDeProductosRenta + int(cantidadProductorenta2)

                        stringCantidad = str(contadorCantidadesDeProductosRenta)
                        listaFinalProductosSoloStringsRenta.append(stringProducto)
                        listaFinalProductosRenta.append([stringProducto,stringCantidad])
                    #Borrar todos los elementos de las dos listas de strings y cantidades correspondientes a ese producto
                    
                else:
                    listaFinalProductosRenta.append([stringProducto,stringCantidad])

                
                listaProductosRentaOrdenada = sorted(listaFinalProductosRenta, key = lambda elemento:elemento[1])

                listaProductosRentaOrdenadaMayorAMenor = listaProductosRentaOrdenada[::-1]


                contadorParaTablaProductosRentaMes = 0
                arrayContadores = []
                arrayInfoProductoRenta = []
                for productoRenta in listaProductosRentaOrdenadaMayorAMenor:
                    
                    contadorParaTablaProductosRentaMes = contadorParaTablaProductosRentaMes + 1
                    arrayContadores.append(contadorParaTablaProductosRentaMes)

                    #info producto
                    codigoProductoRenta = productoRenta[0]
                    cantidadVendidaRenta = productoRenta[1]
                    consultaProductoRenta = ProductosRenta.objects.filter(codigo_producto = codigoProductoRenta)
                    for datoProducto in consultaProductoRenta:
                        nombreRenta = datoProducto.nombre_producto
                        costoRenta = datoProducto.costo_renta
                        imagenRenta = datoProducto.imagen_producto
                    
                    costoTotalRentadoProducto = costoRenta * float(cantidadVendidaRenta)
                    arrayInfoProductoRenta.append([nombreRenta, costoRenta, costoTotalRentadoProducto, imagenRenta])


                listaFinalProductosRentaMesTabla = zip(listaProductosRentaOrdenadaMayorAMenor, arrayContadores, arrayInfoProductoRenta)
       
       

        return render(request, "17 Informe Ventas/informeDeVentasAnual.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, "notificacionRenta":notificacionRenta,"añoHoy":añoHoy,"strAñoAnterior":strAñoAnterior,"strHaceDosAños":strHaceDosAños, "strHaceTresAños":strHaceTresAños,
                                                                          "montoIngresoAñoActual":montoIngresoAñoActual,"montoIngresoAñoAnterior":montoIngresoAñoAnterior,"porcentajeIngresosAño":porcentajeIngresosAño,"esMayor":esMayor,
                                                                          "montoIngresoSemanaActual":montoIngresoSemanaActual,"montoIngresoSemanaAnterior":montoIngresoSemanaAnterior, "esMayorSemana":esMayorSemana,"porcentajeIngresosSemana":porcentajeIngresosSemana,
                                                                          "montoIngresoEnero":montoIngresoEnero, "montoIngresoFebrero":montoIngresoFebrero, "montoIngresoMarzo":montoIngresoMarzo, "montoIngresoAbril":montoIngresoAbril, "montoIngresoMayo":montoIngresoMayo, "montoIngresoJunio":montoIngresoJunio, "montoIngresoJulio":montoIngresoJulio, "montoIngresoAgosto":montoIngresoAgosto, "montoIngresoSeptiembre":montoIngresoSeptiembre, "montoIngresoOctubre":montoIngresoOctubre, "montoIngresoNoviembre":montoIngresoNoviembre, "montoIngresoDiciembre":montoIngresoDiciembre,
                                                                          "totalComprasMesGasto":totalComprasMesGasto,"totalComprasMesVenta":totalComprasMesVenta,"totalComprasMesRenta":totalComprasMesRenta,"contadorVentasAñoActual":contadorVentasAñoActual,"contadorRentasAñoActual":contadorRentasAñoActual,"contadorCreditosAñoActual":contadorCreditosAñoActual,"numeroVentas":numeroVentas,"numeroRentas":numeroRentas,"numeroCreditos":numeroCreditos,
                                                                          "numeroComprasGasto":numeroComprasGasto,"numeroComprasVenta":numeroComprasVenta,"numeroComprasRenta":numeroComprasRenta,"sumaTotalesCompras":sumaTotalesCompras,"totalEfectivo":totalEfectivo,"totalTarjeta":totalTarjeta,"totalTransferencia":totalTransferencia,"clientesTops":clientesTops,
                                                                          "clientesTop":clientesTop,"montosTop":montosTop,"contadorClientesArray":contadorClientesArray,"listaFinalProductosMesTabla":listaFinalProductosMesTabla,
                                                                          "listaFinalServiciosMesTabla":listaFinalServiciosMesTabla, "listaFinalProductosRentaMesTabla":listaFinalProductosRentaMesTabla, "empleadosTops":empleadosTops,
                                                                          "listaZipClientes":listaZipClientes, "clientesTopsModal":clientesTopsModal, "empleadosTopsModal":empleadosTopsModal,
                                                                          "comprasProductosGastos":comprasProductosGastos, "comprasProductosVentas":comprasProductosVentas, "comprasProductosRentas":comprasProductosRentas,
                                                                          "montoIngresoHaceTresAños":montoIngresoHaceTresAños, "montoIngresoHaceDosAños":montoIngresoHaceDosAños, "notificacionCita":notificacionCita})
    else:
        return render(request,"1 Login/login.html")
    
    


def infoVenta(request):

    if "idSesion" in request.session:

        # Variables de sesión
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        idPerfil = idEmpleado
        idConfig = idEmpleado
    
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']

        # Variable para Menu
        estaEnAltaEmpleado = True

        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
        
           #notificacionRentas
        notificacionRenta = notificacionRentas(request)

        #notificacionCitas
        notificacionCita = notificacionCitas(request)

        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)

       
        if request.method == "POST":
            idVenta = request.POST['idVenta']
            consultaVenta = Ventas.objects.filter(id_venta = idVenta)
            
            for datoVenta in consultaVenta:
                #Datos sucursal
                idSucursal = datoVenta.sucursal_id
                consultaSucursal = Sucursales.objects.filter(id_sucursal = idSucursal)
                for datoSucursal in consultaSucursal:
                    nombreSucursal = datoSucursal.nombre
                    direccionSucursal = datoSucursal.direccion
                
                #Datos vendedor
                idEmpleadoVendedor = datoVenta.empleado_vendedor_id
                consultaEmpleado = Empleados.objects.filter(id_empleado = idEmpleadoVendedor)
                for datoEmpleado in consultaEmpleado:
                    nombreEmpleado = datoEmpleado.nombres
                    apellidoPaterno = datoEmpleado.apellido_paterno
                    puestoEmpleado = datoEmpleado.puesto
                nombreCompletoEmpleadoVendedor = nombreEmpleado + " " + apellidoPaterno
                
                #Fecha y hora venta
                fechaVenta = datoVenta.fecha_venta
                horaVenta = datoVenta.hora_venta
                
                #Datos del cliente
                idCliente = datoVenta.cliente_id
                if idCliente == None:
                    nombreCliente = "Sin cliente"
                    telefonoCliente = "Sin telefono"
                    correoCliente = "Sin correo"
                    tipoCliente = "Sin tipo cliente"
                else:
                    consultaCliente = Clientes.objects.filter(id_cliente = idCliente)
                    for datoCliente in consultaCliente:
                        nombreCliente = datoCliente.nombre_cliente
                        apellidoPaternoCliente = datoCliente.apellidoPaterno_cliente
                        nombreCliente = nombreCliente +" "+apellidoPaternoCliente
                        telefonoCliente = datoCliente.telefono
                        if telefonoCliente == None:
                           telefonoCliente = "Sin telefono"
                            
                        correoCliente = datoCliente.correo
                        if correoCliente == None:
                           correoCliente = "Sin telefono"
                           
                    #Tipo de cliente
                    tipoCliente = ""
                    
                    cantidadCompras = 0
                    consultaCompras = Ventas.objects.filter(cliente_id__id_cliente = idCliente, credito="N")
                    for compra in consultaCompras:
                        cantidadCompras = cantidadCompras + 1

                    numeroCreditos = 0
                    creditosCliente = Creditos.objects.filter(cliente_id__id_cliente = idCliente , concepto_credito = "Venta")
                    for credito in creditosCliente:
                        numeroCreditos = numeroCreditos +1
                        
                    numeroRentas = 0
                    rentasCliente = Rentas.objects.filter(cliente_id__id_cliente =idCliente)
                    for renta in rentasCliente:
                        numeroRentas = numeroRentas + 1
                
                    sumaCantidades = int(cantidadCompras) + int(numeroCreditos) + int(numeroRentas)
                    if sumaCantidades <= 3:
                        tipoCliente = "POSIBLE CONSUMIDOR"
                    elif sumaCantidades > 3 and sumaCantidades <=6:
                        tipoCliente = "CLIENTE POTENCIAL"
                    elif sumaCantidades > 6 and sumaCantidades <=9:
                        tipoCliente = "CLIENTE FRECUENTE"
                    elif sumaCantidades > 9:
                        tipoCliente = "SUPER CLIENTE"
                        
                #Datos de los productos
                boolVentaProductos = False
                boolVentaServicios = False
                codigosProductos = datoVenta.ids_productos
                infoProductos = []
                boolProductoRenta = False
                if codigosProductos == "":
                    boolVentaProductos = False
                    infoProductos = None
                else:
                    boolVentaProductos = True
                    cantidadProductos = datoVenta.cantidades_productos
                    
                    arrayProductos = codigosProductos.split(",")
                    arrayCantidadesProductos = cantidadProductos.split(",")
                    
                    listaProductosCantidades = zip(arrayProductos,arrayCantidadesProductos)
                    
                    for producto, cantidad in listaProductosCantidades:
                        codigoProducto = str(producto)
                        cantidadStringProducto = str(cantidad)  
                        cantidadIntProducto = int(cantidad)
                        
                        if "PR" in codigoProducto:
                            boolProductoRenta = True
                            boolVentaServicios = False
                            consultaProducto = ProductosRenta.objects.filter(codigo_producto = codigoProducto)
                            for datoProducto in consultaProducto:
                                idProducto = datoProducto.id_producto
                                nombreProducto = datoProducto.nombre_producto   
                                imagenProducto = datoProducto.imagen_producto
                                costoVenta = datoProducto.costo_renta
                        else:
                            boolProductoRenta = False
                        
                            consultaProducto = ProductosVenta.objects.filter(codigo_producto = codigoProducto)
                            for datoProducto in consultaProducto:
                                idProducto = datoProducto.id_producto
                                nombreProducto = datoProducto.nombre_producto   
                                imagenProducto = datoProducto.imagen_producto
                                costoVenta = datoProducto.costo_venta
                        subtotalProducto = costoVenta * float(cantidadIntProducto)
                        infoProductos.append([idProducto,codigoProducto, nombreProducto,imagenProducto,costoVenta, cantidadStringProducto, subtotalProducto])
                        
                                       
                
                #Datos de los servicios
                idServiciosCorporales = datoVenta.ids_servicios_corporales
                idServiciosFaciales = datoVenta.ids_servicios_faciales
                infoServicios = []
                if idServiciosCorporales == "" and idServiciosCorporales == "":
                    boolVentaServicios = False
                    infoServicios = None
                else:
                    boolVentaServicios = True
                    
                    
                    if idServiciosCorporales == "":
                        serviciosCorporales = False
                    else:
                        serviciosCorporales = True
                        
                    if idServiciosFaciales == "":
                        serviciosFaciales = False
                    else:
                        serviciosFaciales = False
                    
                    if serviciosCorporales:
                        cantidadServiciosCorporales = datoVenta.cantidades_servicios_corporales
                        
                        arrayServiciosCorporales = idServiciosCorporales.split(",")
                        arrayCantidadServiciosCorporales = cantidadServiciosCorporales.split(",")
                        
                        listaServiciosCorporales = zip(arrayServiciosCorporales,arrayCantidadServiciosCorporales)
                        
                        #Servicios corporales
                        for sc, csc in listaServiciosCorporales:
                            idServicioCorporal = int(sc)
                            cantidadStringServicioCorporal = str(csc)  
                            cantidadIntServicioCorporal = int(csc)
                            
                            consultaServicio = Servicios.objects.filter(id_servicio = idServicioCorporal)
                            for datoServicio in consultaServicio:
                                idServicio = datoServicio.id_servicio
                                nombreServicio = datoServicio.nombre_servicio 
                                tipoServicio = datoServicio.tipo_servicio
                                descripcionServicio = datoServicio.descripcion_servicio
                                costoVenta = datoServicio.precio_venta
                            subtotalServicio = costoVenta * float(cantidadIntServicioCorporal)
                            infoServicios.append([idServicio, tipoServicio,nombreServicio,descripcionServicio,costoVenta, cantidadStringServicioCorporal, subtotalServicio])
                    
                    if serviciosFaciales:
                        
                        
                        cantidadServiciosFaciales = datoVenta.cantidades_servicios_faciales
                        
                    
                        
                        
                        arrayServiciosFaciales = idServiciosFaciales.split(",")
                        arrayCantidadServiciosFaciales = cantidadServiciosFaciales.split(",")
                        
                        listaServiciosFaciales = zip(arrayServiciosFaciales,arrayCantidadServiciosFaciales)
                        
                    
                        #Servicios corporales
                        for sf, csf in listaServiciosFaciales:
                            idServicioFacial = int(sf)
                            cantidadStringServicioFacial = str(csf)  
                            cantidadIntServicioFacial = int(csf)
                            
                            consultaServicio = Servicios.objects.filter(id_servicio = idServicioFacial)
                            for datoServicio in consultaServicio:
                                idServicio = datoServicio.id_servicio
                                nombreServicio = datoServicio.nombre_servicio 
                                tipoServicio = datoServicio.tipo_servicio
                                descripcionServicio = datoServicio.descripcion_servicio
                                costoVenta = datoServicio.precio_venta
                            subtotalServicio = costoVenta * float(cantidadIntServicioCorporal)
                            infoServicios.append([idServicio,tipoServicio,nombreServicio ,descripcionServicio,costoVenta, cantidadStringServicioCorporal, subtotalServicio])
                    
                #Comentarios
                comentarios = datoVenta.comentariosVenta

                #Tipo de pago
                tipoPago = datoVenta.tipo_pago
                tipo_tarjeta = datoVenta.tipo_tarjeta
                referencia_pago_tarjeta = datoVenta.referencia_pago_tarjeta
                clave_rastreo_transferencia = datoVenta.clave_rastreo_transferencia
                
                
                totalPagado = datoVenta.monto_pagar
                descuento = datoVenta.descuento_id
                boolDescuento = False
                
                nombreDescuento = ""
                totalDescuento = 0
                totalSinDescuento = 0
                
                
                if descuento == None:
                    boolDescuento = False
                    
                    
                    nombreDescuento = ""
                    totalDescuento = 0
                    totalSinDescuento = 0
                else:
                    boolDescuento = True
                    consultaDescuento = Descuentos.objects.filter(id_descuento = descuento)
                    for datoDescuento in consultaDescuento:
                        nombre_descuento = datoDescuento.nombre_descuento
                        montoDescuento = datoDescuento.porcentaje
                        
                    nombreDescuento = nombre_descuento + " - " + str(montoDescuento)+"%"
                    restita = (100 - montoDescuento)
                    totalSinDescuento = (100 * totalPagado) / restita  #60
                    
                    porcentaje = "."+str(montoDescuento)
                    floatPorcentaje = float(porcentaje)
                    totalDescuento = totalSinDescuento * floatPorcentaje
                    
                    
            

            
          
          
            return render(request, "13 Ventas/infoVenta.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado,"estaEnAltaEmpleado":estaEnAltaEmpleado,"notificacionRenta":notificacionRenta,
                                                                "idVenta":idVenta, "nombreSucursal":nombreSucursal, "direccionSucursal":direccionSucursal,
                                                                "nombreCompletoEmpleadoVendedor":nombreCompletoEmpleadoVendedor, "puestoEmpleado":puestoEmpleado,
                                                                "fechaVenta":fechaVenta, "horaVenta":horaVenta,"nombreCliente":nombreCliente, "telefonoCliente":telefonoCliente,
                                                                "correoCliente":correoCliente, "tipoCliente":tipoCliente, "comentarios":comentarios,
                                                                "boolVentaProductos":boolVentaProductos,"boolProductoRenta":boolProductoRenta,"infoProductos":infoProductos, "boolVentaServicios":boolVentaServicios, "infoServicios":infoServicios, "tipoPago":tipoPago,
                                                                "tipo_tarjeta":tipo_tarjeta,"referencia_pago_tarjeta":referencia_pago_tarjeta,"clave_rastreo_transferencia":clave_rastreo_transferencia,
                                                                "boolDescuento":boolDescuento, "nombreDescuento":nombreDescuento,"totalDescuento":totalDescuento, "totalSinDescuento":totalSinDescuento, "totalPagado":totalPagado, "notificacionCita":notificacionCita})
    else:
        return render(request,"1 Login/login.html")


def informeEmpleado(request):

    if "idSesion" in request.session:

        # Variables de sesión
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']
        idPerfil = idEmpleado
        idConfig = idEmpleado
       
        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
        
           #notificacionRentas
        notificacionRenta = notificacionRentas(request)

        #notificacionCitas
        notificacionCita = notificacionCitas(request)
        
         #permisosEmpleado
        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)
        
        if request.method == "POST":
            idEmpleadoConfigurar = request.POST['idEmpleadoInforme']

            consultaEmpleado = Empleados.objects.filter(id_empleado = idEmpleadoConfigurar)

            for dato in consultaEmpleado:
                idEmpleadoEditar2 = dato.id_empleado
                idEmpleadoEditar3 = dato.id_empleado
                idEmpleadoEditar4 = dato.id_empleado
                nombreUsuario = dato.nombre_usuario
                nombres = dato.nombres
                apellidoPaterno = dato.apellido_paterno
                apellidoMaterno = dato.apellido_materno
                telefono = dato.telefono
                puesto = dato.puesto
                estatus = dato.estado_contratacion
                fecha_alta = dato.fecha_alta

                fecha_baja = dato.fecha_baja
                if dato.id_sucursal_id == None:
                    sucursalEmpleado = "Todas"
                    idsucursal = ""
                    tipo = "Administrador"
                else:
                    
                    idsucursal = dato.id_sucursal_id
                    tipo ="Empleado"
                    sucursales = Sucursales.objects.filter(id_sucursal = idsucursal)
                    for dato in sucursales:
                        sucursalEmpleado = dato.nombre


                letrasEmpleado = nombres[0] + apellidoPaterno[0] + apellidoMaterno[0]
            
            if estatus == "A":
                activo = True
            elif estatus == "I":
                activo = False

            totalVentas = 0
            contadorVentas = 0
            consultaVentas = Ventas.objects.filter(empleado_vendedor_id__id_empleado = idEmpleadoConfigurar)  
            for venta in consultaVentas:
                montoVendido = venta.monto_pagar
                contadorVentas = contadorVentas + 1
                totalVentas = totalVentas + montoVendido   
                
                
                
            # INFORME DE VENTAS DEL MES -----------------------------------------------------------------------------------------------------------------------------
            hoy = datetime.now()
        
            mesdehoynumero = hoy.strftime('%m') #06
            
            mesesDic = {
                "01":'Enero',
                "02":'Febrero',
                "03":'Marzo',
                "04":'Abril',
                "05":'Mayo',
                "06":'Junio',
                "07":'Julio',
                "08":'Agosto',
                "09":'Septiembre',
                "10":'Octubre',
                "11":'Noviembre',
                "12":'Diciembre'
            }
            
            diasMeses = {
                'Enero':'31',
                'Febrero':'28',
                'Marzo':'31',
                'Abril':'30',
                'Mayo':'31',
                'Junio':'30',
                'Julio':'31',
                'Agosto':'31',
                'Septiembre':'30',
                'Octubre':'31',
                'Noviembre':'30',
                'Diciembre':'31'
            }
            #Mes actual
            diadehoy = hoy.strftime('%d')
            añoHoy = hoy.strftime('%Y')
            mesdehoy = mesesDic[str(mesdehoynumero)]
            
            fechaDiaMesActual = añoHoy+"-"+mesdehoynumero+"-"+diadehoy  #Día actual  2022-06-07
            fechaInicioMesActual = añoHoy+"-"+mesdehoynumero+"-01"  #Primer día del mes 2022-06-01  
            
            
            ventasEmpleadoEnElMes = Ventas.objects.filter(fecha_venta__range=[fechaInicioMesActual,fechaDiaMesActual], empleado_vendedor_id__id_empleado = idEmpleadoConfigurar)
            #arreglosTabla
            sucursales = []
            clientes = []
            boolProductos = []
            productos = []
            boolServCorporal = []
            servicioCorporal = []
            boolServFacial = []
            servicioFacial = []
            boolCredito = []
            idsCreditos = []
            boolPagado = []
            montos = []
            boolDescuentos = []
            datosDescuento = []
            costoReal = []
            descuentos = []
            tipoVenta = []
            
            ventasEnElMesActual = 0
            montoVentasEnElMesActual = 0
            for venta in ventasEmpleadoEnElMes:
                ventasEnElMesActual = ventasEnElMesActual + 1
                idVenta = venta.id_venta

                #montos
                montoVendido = venta.monto_pagar
                montoVentasEnElMesActual = montoVentasEnElMesActual + montoVendido
                
                #Para tabla de ventas
                sucursal = venta.sucursal_id
                consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursal)
                for suc in consultaSucursal:
                    nombreSucursal = suc.nombre
                sucursales.append(nombreSucursal)
                
                cliente = venta.cliente_id
                if cliente == None:
                    clientes.append(["x","Cliente momentaneo"])
                else:
                    consultaCliente = Clientes.objects.filter(id_cliente = cliente)
                    for datoCliente in consultaCliente:
                        nombreCliente = datoCliente.nombre_cliente
                        apellido = datoCliente.apellidoPaterno_cliente
                    
                    nombreCompletoCliente = nombreCliente + " "+apellido
                    
                    clientes.append([cliente,nombreCompletoCliente])
                
                #Productos
                codigosProductos = venta.ids_productos
                if codigosProductos == "":
                    boolProductos.append("Sin productos comprados")
                    productos.append("x")
                else:
                    boolProductos.append("Se compraron productos")
                    cantidadesProductos = venta.cantidades_productos
                    arregloCodigosProductos = codigosProductos.split(",")
                    arregloCantidadesProductos = cantidadesProductos.split(",")
                    
                    listaProductos = zip(arregloCodigosProductos,arregloCantidadesProductos)
                    
                    productitos = []
                    for producto, cantidades in listaProductos:
                        idcodigoProducto = str(producto)
                        cantidad = str(cantidades)
                        
                        if "PV" in idcodigoProducto:
                            #Producto para venta
                            tipoVenta.append("Venta")
                            consultaProducto = ProductosVenta.objects.filter(codigo_producto = idcodigoProducto)
                        else:
                            #Producto para renta
                            tipoVenta.append("Renta")
                            consultaProducto = ProductosRenta.objects.filter(codigo_producto = idcodigoProducto)
                        
                        for datoProducto in consultaProducto:
                            nombreProducto = datoProducto.nombre_producto
                        productitos.append([idcodigoProducto, nombreProducto,cantidad ])
                    productos.append(productitos)
                
                #ServiciosCorporales
                serviciosCorporales = venta.ids_servicios_corporales
                if serviciosCorporales == "":
                    boolServCorporal.append("Sin servicios coorporales")
                    servicioCorporal.append("x")
                else:
                    boolServCorporal.append("Se compraron servicios")
                    cantidadesServiciosCorporales = venta.cantidades_servicios_corporales
                    arregloIdsServiciosCorporales = serviciosCorporales.split(",")
                    arregloCantidadesServiciosCorporales = cantidadesServiciosCorporales.split(",")
                    
                    listaServiciosCorporales = zip(arregloIdsServiciosCorporales,arregloCantidadesServiciosCorporales)
                    
                    serviciosCorporales = []
                    for idServicioCorporal, cantidadServiciosCorporal in listaServiciosCorporales:
                        intId = int(idServicioCorporal)
                        strId = str(idServicioCorporal)
                        cantidad = str(cantidadServiciosCorporal)
                        
                       
                        consultaServicio = Servicios.objects.filter(id_servicio = intId)
                        
                        for datoServicio in consultaServicio:
                            nombreDeServicio = datoServicio.nombre_servicio
                        serviciosCorporales.append([strId, nombreDeServicio,cantidad ])
                    servicioCorporal.append(serviciosCorporales)
                
                #ServiciosFaciales
                serviciosFaciales = venta.ids_servicios_faciales
                if serviciosFaciales == "":
                    boolServFacial.append("Sin servicios faciales")
                    servicioFacial.append("x")
                else:
                    boolServFacial.append("Se compraron servicios")
                    cantiadesServiciosFaciales = venta.cantidades_servicios_faciales
                    arregloIdsServiciosFaciales = serviciosFaciales.split(",")
                    arregloCantidadesServiciosFaciales = cantiadesServiciosFaciales.split(",")
                    
                    listaServiciosFaciales = zip(arregloIdsServiciosFaciales, arregloCantidadesServiciosFaciales)
                    
                    serviciosFaciales = []
                    for idServiciosFacial, cantidadServicioFacial in listaServiciosFaciales:
                        intId = int(idServiciosFacial)
                        strId = str(idServiciosFacial)
                        cantidad = str(cantidadServicioFacial)
                        
                       
                        consultaServicio = Servicios.objects.filter(id_servicio = intId)
                        
                        for datoServicio in consultaServicio:
                            nombreDeServicio = datoServicio.nombre_servicio
                        serviciosFaciales.append([strId, nombreDeServicio,cantidad ])
                    servicioFacial.append(serviciosFaciales)
                credito = venta.credito
                if credito == "S":
                    boolCredito.append("Si")
                    consultaCredito = Creditos.objects.filter(venta_id__id_venta = idVenta)
                    if consultaCredito:
                        for datoCredito in consultaCredito:
                            idCredito = datoCredito.id_credito
                            restante = datoCredito.monto_restante
                        idsCreditos.append(idCredito)
                        if restante == 0:
                            boolPagado.append("Si")
                        else:
                            boolPagado.append("No")
                    else:
                        idsCreditos.append("error")
                        
                else:
                    boolCredito.append("No")
                    idsCreditos.append("No")
                    boolPagado.append("No")
                
                montoPagado = venta.monto_pagar #1360
                montos.append(montoPagado)
                
                descuento = venta.descuento_id
                if descuento == None:
                    boolDescuentos.append("Sin descuento")
                    datosDescuento.append("Sin descuento")
                    descuentos.append("Sin descuento")
                    costoReal.append("Sin descuento")
                else:
                    boolDescuentos.append("Con descuento")
                    consultaDescuento = Descuentos.objects.filter(id_descuento = descuento)
                    for datoDescuento in consultaDescuento:
                        nombreDescuento = datoDescuento.nombre_descuento
                        porcentajeDescuento = datoDescuento.porcentaje
                    porcentajeTotalDescuento = 100 - float(porcentajeDescuento)
                    totalSinDescuento = (100*montoPagado)/porcentajeTotalDescuento
                    totalDescuento = totalSinDescuento - montoPagado
                
                
                    datosDescuento.append([porcentajeDescuento,nombreDescuento])
                    descuentos.append(totalDescuento)
                    costoReal.append(totalSinDescuento)

                    
                
            listaVentasMes = zip(ventasEmpleadoEnElMes, sucursales, clientes,boolProductos,productos, boolServCorporal, servicioCorporal, boolServFacial, servicioFacial, boolCredito, idsCreditos, boolPagado, montos, boolDescuentos, datosDescuento, descuentos, costoReal, tipoVenta)
                
                
            #Mes anterior
            haceUnMes = hoy - relativedelta(months=1)  #2022-05-07
            mesHaceUnMes = haceUnMes.strftime('%m') #05
            añoHaceUnMes = haceUnMes.strftime('%Y')
            mesAnteriorTexto = mesesDic[str(mesHaceUnMes)]
            
            diasDeUltimoMes = diasMeses[str(mesAnteriorTexto)]
            
            fechaPrimerDiaMesAnterior = añoHaceUnMes + "-"+mesHaceUnMes+"-01"   #2022-05-01
            fechaUltimoDiaMesAnterior = añoHaceUnMes + "-"+mesHaceUnMes+"-"+diasDeUltimoMes  #2022-05-31
            
            
            ventasEmpleadoEnElMesAnterior = Ventas.objects.filter(fecha_venta__range=[fechaPrimerDiaMesAnterior,fechaUltimoDiaMesAnterior],empleado_vendedor_id__id_empleado = idEmpleadoConfigurar)
            
            ventasEnElMesAnterior = 0
            montoTotalDeVentaMesAnterior = 0
            for ventaMesAnterior in ventasEmpleadoEnElMesAnterior:
                montoTotalVenta = ventaMesAnterior.monto_pagar
                montoTotalDeVentaMesAnterior = montoTotalDeVentaMesAnterior + montoTotalVenta
                
                ventasEnElMesAnterior = ventasEnElMesAnterior + 1
                
            #Verificación contra el mes anterior
            ventasEnElMesEsMayorAlMesAnterior = False
            if ventasEnElMesAnterior == 0:
                porcentajeVentasMes = 100
            else:
                porcentajeVentasMes = (ventasEnElMesActual / ventasEnElMesAnterior)
                porcentajeVentasMes = porcentajeVentasMes - 1
                porcentajeVentasMes = porcentajeVentasMes *100

            if porcentajeVentasMes > 0:
                ventasEnElMesEsMayorAlMesAnterior = True
                
            else:
                ventasEnElMesEsMayorAlMesAnterior = False
            porcentajeVentasMes = round(porcentajeVentasMes,2)
            
            
            #Semana actual
            diaActual = datetime.today().isoweekday() #2 martes
            intdiaActual = int(diaActual)
            diaLunes = intdiaActual-1 #3 dias para el lunes
            diaDomingo = 7-intdiaActual # 2 dias para el sabado
            
            #Montos totales de semana actual
            fechaLunes = datetime.now()-timedelta(days =diaLunes)
            fechaDomingo = datetime.now() + timedelta(days =diaDomingo)
            
            ventasEmpleadoEnLaSemana = Ventas.objects.filter(fecha_venta__range=[fechaLunes,fechaDomingo], empleado_vendedor_id__id_empleado = idEmpleadoConfigurar)
            
            ventasEnEnLaSemana = 0
            for ventaSemana in ventasEmpleadoEnLaSemana:
                ventasEnEnLaSemana = ventasEnEnLaSemana + 1
                    
            
            #Montos totales de semana anterior
            fechaLunesAnterior = fechaLunes-timedelta(days =7)
            fechaDomingoAnterior = fechaLunes - timedelta(days =1)
            
            ventasEmpleadoEnLaSemanaAnterior = Ventas.objects.filter(fecha_venta__range=[fechaLunesAnterior,fechaDomingoAnterior], empleado_vendedor_id__id_empleado = idEmpleadoConfigurar)
            
            ventasEnEnLaSemanaAnterior = 0
            for ventaSemanaAnterior in ventasEmpleadoEnLaSemanaAnterior:
                ventasEnEnLaSemanaAnterior = ventasEnEnLaSemanaAnterior + 1
                
            #Verificación contra la semana anterior
            ventasEnLaSemanaEsMayorALaSemanaAnterior = False

            if ventasEnEnLaSemanaAnterior == 0:
                porcentajeVentasSemanal = 100
            else:
                porcentajeVentasSemanal = (ventasEnEnLaSemana / ventasEnEnLaSemanaAnterior)
                porcentajeVentasSemanal = porcentajeVentasSemanal - 1
                porcentajeVentasSemanal = porcentajeVentasSemanal *100

            if porcentajeVentasSemanal > 0:
                ventasEnLaSemanaEsMayorALaSemanaAnterior = True
                
            else:
                ventasEnLaSemanaEsMayorALaSemanaAnterior = False
            porcentajeVentasSemanal = round(porcentajeVentasSemanal,2)
            
            
            
            #Meses para gráfica por mes
            inicioMesEnero = añoHoy+"-01-01"
            finMesEnero = añoHoy+"-01-31"
            contadorVentasEnero = 0
            ventasEnEnero = Ventas.objects.filter(fecha_venta__range=[inicioMesEnero,finMesEnero], empleado_vendedor_id__id_empleado = idEmpleadoConfigurar)
            for ventaEnero in ventasEnEnero:
                contadorVentasEnero = contadorVentasEnero + 1
            
            
            inicioMesFebrero = añoHoy+"-02-01"
            finMesFebrero = añoHoy+"-02-28"
            contadorVentasFebrero = 0
            ventasEnFebrero = Ventas.objects.filter(fecha_venta__range=[inicioMesFebrero,finMesFebrero], empleado_vendedor_id__id_empleado = idEmpleadoConfigurar)
            for ventaFebrero in ventasEnFebrero:
                contadorVentasFebrero = contadorVentasFebrero + 1
            
            inicioMesMarzo = añoHoy+"-03-01"
            finMesMarzo = añoHoy+"-03-31"
            contadorVentasMarzo = 0
            ventasEnMarzo = Ventas.objects.filter(fecha_venta__range=[inicioMesMarzo,finMesMarzo], empleado_vendedor_id__id_empleado = idEmpleadoConfigurar)
            for ventaMarzo in ventasEnMarzo:
                contadorVentasMarzo = contadorVentasMarzo + 1
            
            
            inicioMesAbril = añoHoy+"-04-01"
            finMesAbril = añoHoy+"-04-30"
            contadorVentasAbril = 0
            ventasEnAbril = Ventas.objects.filter(fecha_venta__range=[inicioMesAbril,finMesAbril], empleado_vendedor_id__id_empleado = idEmpleadoConfigurar)
            for ventaAbril in ventasEnAbril:
                contadorVentasAbril = contadorVentasAbril + 1
            
            inicioMesMayo = añoHoy+"-05-01"
            finMesMayo = añoHoy+"-05-31"
            contadorVentasMayo = 0
            ventasEnMayo = Ventas.objects.filter(fecha_venta__range=[inicioMesMayo,finMesMayo], empleado_vendedor_id__id_empleado = idEmpleadoConfigurar)
            for ventaMayo in ventasEnMayo:
                contadorVentasMayo = contadorVentasMayo + 1
            
            inicioMesJunio = añoHoy+"-06-01"
            finMesJunio = añoHoy+"-06-30"
            contadorVentasJunio = 0
            ventasEnJunio = Ventas.objects.filter(fecha_venta__range=[inicioMesJunio,finMesJunio], empleado_vendedor_id__id_empleado = idEmpleadoConfigurar)
            for ventaJunio in ventasEnJunio:
                contadorVentasJunio = contadorVentasJunio + 1
            
            inicioMesJulio = añoHoy+"-07-01"
            finMesJulio = añoHoy+"-07-31"
            contadorVentasJulio = 0
            ventasEnJulio = Ventas.objects.filter(fecha_venta__range=[inicioMesJulio,finMesJulio], empleado_vendedor_id__id_empleado = idEmpleadoConfigurar)
            for ventaJulio in ventasEnJulio:
                contadorVentasJulio = contadorVentasJulio + 1
            
            inicioMesAgosto = añoHoy+"-08-01"
            finMesAgosto = añoHoy+"-08-31"
            contadorVentasAgosto = 0
            ventasEnAgosto = Ventas.objects.filter(fecha_venta__range=[inicioMesAgosto,finMesAgosto],empleado_vendedor_id__id_empleado = idEmpleadoConfigurar)
            for ventaAgosto in ventasEnAgosto:
                contadorVentasAgosto = contadorVentasAgosto + 1
            
            inicioMesSeptiembre = añoHoy+"-09-01"
            finMesSeptiembre = añoHoy+"-09-30"
            contadorVentasSeptiembre = 0
            ventasEnSeptiembre = Ventas.objects.filter(fecha_venta__range=[inicioMesSeptiembre,finMesSeptiembre], empleado_vendedor_id__id_empleado = idEmpleadoConfigurar)
            for ventaSeptiembre in ventasEnSeptiembre:
                contadorVentasSeptiembre = contadorVentasSeptiembre + 1
            
            inicioMesOctubre = añoHoy+"-10-01"
            finMesOctubre = añoHoy+"-10-31"
            contadorVentasOctubre = 0
            ventasEnOctubre = Ventas.objects.filter(fecha_venta__range=[inicioMesOctubre,finMesOctubre], empleado_vendedor_id__id_empleado = idEmpleadoConfigurar)
            for ventaOctubre in ventasEnOctubre:
                contadorVentasOctubre = contadorVentasOctubre + 1
            
            inicioMesNoviembre = añoHoy+"-11-01"
            finMesNoviembre = añoHoy+"-11-30"
            contadorVentasNoviembre = 0
            ventasEnNoviembre = Ventas.objects.filter(fecha_venta__range=[inicioMesNoviembre,finMesNoviembre], empleado_vendedor_id__id_empleado = idEmpleadoConfigurar)
            for ventaNoviembre in ventasEnNoviembre:
                contadorVentasNoviembre = contadorVentasNoviembre + 1
            
            inicioMesDiciembre = añoHoy+"-12-01"
            finMesDiciembre = añoHoy+"-12-31"
            contadorVentasDiciembre = 0
            ventasEnDiciembre = Ventas.objects.filter(fecha_venta__range=[inicioMesDiciembre,finMesDiciembre], empleado_vendedor_id__id_empleado = idEmpleadoConfigurar)
            for ventaDiciembre in ventasEnDiciembre:
                contadorVentasDiciembre = contadorVentasDiciembre + 1
                
            
            if tipo == "Administrador":
            #Ventas totales
                ventasTotalesDeEmpleadosEnElMes = Ventas.objects.filter(fecha_venta__range=[fechaInicioMesActual,fechaDiaMesActual])
            else:
                ventasTotalesDeEmpleadosEnElMes = Ventas.objects.filter(fecha_venta__range=[fechaInicioMesActual,fechaDiaMesActual], sucursal_id__id_sucursal = idsucursal)
            
            contadorVentasTotalesMes = 0
            for ventaMes in ventasTotalesDeEmpleadosEnElMes:
                contadorVentasTotalesMes = contadorVentasTotalesMes + 1

            if contadorVentasTotalesMes == 0:
                porcentajeVentasDelEmpleado = 0
            else:
                porcentajeVentasDelEmpleado = (ventasEnElMesActual * 100)/contadorVentasTotalesMes
            
            porcentajeDemasEmpleados = 100 - porcentajeVentasDelEmpleado
            
            
            if montoTotalDeVentaMesAnterior == 0:
                porcentajeMontoVentas = 100
            else:
                porcentajeMontoVentas = (montoVentasEnElMesActual / montoTotalDeVentaMesAnterior)
                porcentajeMontoVentas = porcentajeMontoVentas - 1
                porcentajeMontoVentas = porcentajeMontoVentas *100

            if porcentajeMontoVentas > 0:
                esteMesVendioMas = True
                
            else:
                esteMesVendioMas = False
            
            
            
            #INFORME DE EMPLEADO EN EL AÑO------------------------------------------------------------------------------------------------------------
            
            primeroDeEnero = añoHoy+"-01-01"
            ultimoDiciemte = añoHoy+"-12-31"
            
            ventasEmpleadoEnElAño = Ventas.objects.filter(fecha_venta__range=[primeroDeEnero,ultimoDiciemte], empleado_vendedor_id__id_empleado = idEmpleadoConfigurar)
            
            contadorVentasEnElAño = 0
            montoVentaEnElAño = 0
            for ventaAnual in ventasEmpleadoEnElAño:
                contadorVentasEnElAño = contadorVentasEnElAño+1
                montoVenta = ventaAnual.monto_pagar
                montoVentaEnElAño = montoVentaEnElAño + montoVenta
            
            añoAnterior = int(añoHoy)-1
            primeroDeEneroAnterior = str(añoAnterior)+"-01-01"
            ultimoDiciemteAnterior = str(añoAnterior)+"-12-31"
            
            ventasEmpleadoEnElAñoAnterior = Ventas.objects.filter(fecha_venta__range=[primeroDeEneroAnterior,ultimoDiciemteAnterior], empleado_vendedor_id__id_empleado = idEmpleadoConfigurar)
            
            contadorVentasEnElAñoAnterior = 0
            montoVentaEnElAñoAnterior = 0
            for ventaAnualAnterior in ventasEmpleadoEnElAñoAnterior:
                contadorVentasEnElAñoAnterior = contadorVentasEnElAñoAnterior+1
                montoVenta = ventaAnual.monto_pagar
                montoVentaEnElAñoAnterior = montoVentaEnElAñoAnterior + montoVenta
                
                
            if contadorVentasEnElAñoAnterior == 0:
                porcentajeVentaAnual = 100
            else:
                porcentajeVentaAnual = (contadorVentasEnElAño / contadorVentasEnElAñoAnterior)
                porcentajeVentaAnual = porcentajeVentaAnual - 1
                porcentajeVentaAnual = porcentajeVentaAnual *100

            if porcentajeVentaAnual > 0:
                ventasMayores = True
                
            else:
                ventasMayores = False
                
            primerAñoAntes = int(añoHoy)-1
            segundoAñoAntes = int(añoHoy)-2
            tercerAñoAntes = int(añoHoy)-3
            
            eneroHaceDosAños = str(segundoAñoAntes)+"-01-01"
            diciembreHaceDosAños = str(segundoAñoAntes)+"-12-31"
            ventasEmpleadoHaceDosAños = Ventas.objects.filter(fecha_venta__range=[eneroHaceDosAños,diciembreHaceDosAños], empleado_vendedor_id__id_empleado = idEmpleadoConfigurar)
            
            contadorVentasHaceDosAños = 0
            for venta in ventasEmpleadoHaceDosAños:
                contadorVentasHaceDosAños = contadorVentasHaceDosAños+1
            
            eneroHaceTresAños = str(tercerAñoAntes)+"-01-01"
            diciembreHaceTresAños = str(tercerAñoAntes)+"-12-31"
            ventasEmpleadoHaceTresAños = Ventas.objects.filter(fecha_venta__range=[eneroHaceTresAños,diciembreHaceTresAños], empleado_vendedor_id__id_empleado = idEmpleadoConfigurar)
            
            contadorVentasHaceTresAños = 0
            for venta in ventasEmpleadoHaceTresAños:
                contadorVentasHaceTresAños = contadorVentasHaceTresAños+1

            #pie chart
            if tipo == "Administrador":
            #Ventas totales
                ventasTotalesDeEmpleadosEnElAño= Ventas.objects.filter(fecha_venta__range=[primeroDeEnero,ultimoDiciemte])
            else:
                ventasTotalesDeEmpleadosEnElAño = Ventas.objects.filter(fecha_venta__range=[primeroDeEnero,ultimoDiciemte], sucursal_id__id_sucursal = idsucursal)
            
            contadorVentasTotalesDelAño = 0
            for ventaMes in ventasTotalesDeEmpleadosEnElAño:
                contadorVentasTotalesDelAño = contadorVentasTotalesDelAño + 1

            if contadorVentasTotalesDelAño == 0:
                porcentajeVentasDelEmpleadoEnElAño = 0
            else:
                
                porcentajeVentasDelEmpleadoEnElAño = (contadorVentasEnElAño * 100)/contadorVentasTotalesDelAño
            
            porcentajeDemasEmpleadosEnElAño = 100 - porcentajeVentasDelEmpleadoEnElAño
                
            if montoVentaEnElAñoAnterior == 0:
                porcentajeMontoVentaAnual = 100
            else:
                porcentajeMontoVentaAnual = (montoVentaEnElAño / montoVentaEnElAñoAnterior)
                porcentajeMontoVentaAnual = porcentajeMontoVentaAnual - 1
                porcentajeMontoVentaAnual = porcentajeMontoVentaAnual *100
            
            if porcentajeMontoVentaAnual > 0:
                esteAñoVendioMas = True
                
            else:
                esteAñoVendioMas = False
                
                
            ventasEmpleadoEnElAño2 = Ventas.objects.filter(fecha_venta__range=[primeroDeEnero,ultimoDiciemte], empleado_vendedor_id__id_empleado = idEmpleadoConfigurar)
            sucursalesAño = []
            clientesAño = []
            boolProductosAño = []
            productosAño = []
            boolServCorporalAño = []
            servicioCorporalAño = []
            boolServFacialAño = []
            servicioFacialAño = []
            boolCreditoAño = []
            idsCreditosAño = []
            boolPagadoAño = []
            montosAño = []
            boolDescuentosAño = []
            datosDescuentoAño = []
            costoRealAño = []
            descuentosAño = []
            tipoVentaAño = []
            
            for venta in ventasEmpleadoEnElAño2:
                idVenta = venta.id_venta
                
                #Para tabla de ventas
                sucursal = venta.sucursal_id
                consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursal)
                for suc in consultaSucursal:
                    nombreSucursal = suc.nombre
                sucursalesAño.append(nombreSucursal)
                
                cliente = venta.cliente_id
                if cliente == None:
                    clientesAño.append(["x","Cliente momentaneo"])
                else:
                    consultaCliente = Clientes.objects.filter(id_cliente = cliente)
                    for datoCliente in consultaCliente:
                        nombreCliente = datoCliente.nombre_cliente
                        apellido = datoCliente.apellidoPaterno_cliente
                    
                    nombreCompletoCliente = nombreCliente + " "+apellido
                    
                    clientesAño.append([cliente,nombreCompletoCliente])
                
                #Productos
                codigosProductos = venta.ids_productos
                if codigosProductos == "":
                    boolProductosAño.append("Sin productos comprados")
                    productosAño.append("x")
                else:
                    boolProductosAño.append("Se compraron productos")
                    cantidadesProductos = venta.cantidades_productos
                    arregloCodigosProductos = codigosProductos.split(",")
                    arregloCantidadesProductos = cantidadesProductos.split(",")
                    
                    listaProductos = zip(arregloCodigosProductos,arregloCantidadesProductos)
                    
                    productitos = []
                    for producto, cantidades in listaProductos:
                        idcodigoProducto = str(producto)
                        cantidad = str(cantidades)
                        
                        if "PV" in idcodigoProducto:
                            #Producto para venta
                            tipoVentaAño.append("Venta")
                            consultaProducto = ProductosVenta.objects.filter(codigo_producto = idcodigoProducto)
                        else:
                            #Producto para renta
                            tipoVentaAño.append("Renta")
                            consultaProducto = ProductosRenta.objects.filter(codigo_producto = idcodigoProducto)
                        
                        for datoProducto in consultaProducto:
                            nombreProducto = datoProducto.nombre_producto
                        productitos.append([idcodigoProducto, nombreProducto,cantidad ])
                    productosAño.append(productitos)
                
                #ServiciosCorporales
                serviciosCorporales = venta.ids_servicios_corporales
                if serviciosCorporales == "":
                    boolServCorporalAño.append("Sin servicios coorporales")
                    servicioCorporalAño.append("x")
                else:
                    boolServCorporalAño.append("Se compraron servicios")
                    cantidadesServiciosCorporales = venta.cantidades_servicios_corporales
                    arregloIdsServiciosCorporales = serviciosCorporales.split(",")
                    arregloCantidadesServiciosCorporales = cantidadesServiciosCorporales.split(",")
                    
                    listaServiciosCorporales = zip(arregloIdsServiciosCorporales,arregloCantidadesServiciosCorporales)
                    
                    serviciosCorporales = []
                    for idServicioCorporal, cantidadServiciosCorporal in listaServiciosCorporales:
                        intId = int(idServicioCorporal)
                        strId = str(idServicioCorporal)
                        cantidad = str(cantidadServiciosCorporal)
                        
                       
                        consultaServicio = Servicios.objects.filter(id_servicio = intId)
                        
                        for datoServicio in consultaServicio:
                            nombreDeServicio = datoServicio.nombre_servicio
                        serviciosCorporales.append([strId, nombreDeServicio,cantidad ])
                    servicioCorporalAño.append(serviciosCorporales)
                
                #ServiciosFaciales
                serviciosFaciales = venta.ids_servicios_faciales
                if serviciosFaciales == "":
                    boolServFacialAño.append("Sin servicios faciales")
                    servicioFacialAño.append("x")
                else:
                    boolServFacialAño.append("Se compraron servicios")
                    cantiadesServiciosFaciales = venta.cantidades_servicios_faciales
                    arregloIdsServiciosFaciales = serviciosFaciales.split(",")
                    arregloCantidadesServiciosFaciales = cantiadesServiciosFaciales.split(",")
                    
                    listaServiciosFaciales = zip(arregloIdsServiciosFaciales, arregloCantidadesServiciosFaciales)
                    
                    serviciosFaciales = []
                    for idServiciosFacial, cantidadServicioFacial in listaServiciosFaciales:
                        intId = int(idServiciosFacial)
                        strId = str(idServiciosFacial)
                        cantidad = str(cantidadServicioFacial)
                        
                       
                        consultaServicio = Servicios.objects.filter(id_servicio = intId)
                        
                        for datoServicio in consultaServicio:
                            nombreDeServicio = datoServicio.nombre_servicio
                        serviciosFaciales.append([strId, nombreDeServicio,cantidad ])
                    servicioFacialAño.append(serviciosFaciales)
                credito = venta.credito
                if credito == "S":
                    boolCreditoAño.append("Si")
                    consultaCredito = Creditos.objects.filter(venta_id__id_venta = idVenta)
                    if consultaCredito:
                        for datoCredito in consultaCredito:
                            idCredito = datoCredito.id_credito
                            restante = datoCredito.monto_restante
                        idsCreditosAño.append(idCredito)
                        if restante == 0:
                            boolPagadoAño.append("Si")
                        else:
                            boolPagadoAño.append("No")
                    else:
                        idsCreditosAño.append("error")
                        
                else:
                    boolCreditoAño.append("No")
                    idsCreditosAño.append("No")
                    boolPagadoAño.append("No")
                
                montoPagado = venta.monto_pagar
                montosAño.append(montoPagado)
                
                descuento = venta.descuento_id
                if descuento == None:
                    boolDescuentosAño.append("Sin descuento")
                    datosDescuentoAño.append("Sin descuento")
                    descuentosAño.append("Sin descuento")
                    costoRealAño.append("Sin descuento")
                else:
                    boolDescuentosAño.append("Con descuento")
                    consultaDescuento = Descuentos.objects.filter(id_descuento = descuento)
                    for datoDescuento in consultaDescuento:
                        nombreDescuento = datoDescuento.nombre_descuento
                        porcentajeDescuento = datoDescuento.porcentaje
                    porcentajeTotalDescuento = 100 - float(porcentajeDescuento)
                    totalSinDescuento = (100*montoPagado)/porcentajeTotalDescuento
                    totalDescuento = totalSinDescuento - montoPagado
                
                
                    datosDescuentoAño.append([porcentajeDescuento,nombreDescuento])
                    descuentosAño.append(totalDescuento)
                    costoRealAño.append(totalSinDescuento)

                    
                
            listaVentasAño = zip(ventasEmpleadoEnElAño2, sucursalesAño, clientesAño,boolProductosAño,productosAño, boolServCorporalAño, servicioCorporalAño
                                 , boolServFacialAño, servicioFacialAño, boolCreditoAño, idsCreditosAño, boolPagadoAño, montosAño, boolDescuentosAño
                                 , datosDescuentoAño, descuentosAño, costoRealAño, tipoVentaAño)

            for nombreSucursal in boolDescuentosAño:
                print(nombreSucursal)

            
            
            
            
            
            
            



            return render(request, "3 Empleados/informeEmpleado.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado, "idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado,
        "nombres":nombres,"apellidoPaterno":apellidoPaterno, "apellidoMaterno":apellidoMaterno, "telefono":telefono,
        "puesto":puesto, "nombreUsuario":nombreUsuario, "letrasEmpleado":letrasEmpleado, "tipo":tipo,"sucursalEmpleado":sucursalEmpleado, "idsucursal":idsucursal, "idEmpleadoEditar2":idEmpleadoEditar2, "activo":activo, "fecha_alta":fecha_alta, 
        "fecha_baja":fecha_baja, "idEmpleadoEditar3":idEmpleadoEditar3, "idEmpleadoEditar4":idEmpleadoEditar4, "totalVentas":totalVentas, "contadorVentas":contadorVentas,"notificacionRenta":notificacionRenta,
        "diadehoy":diadehoy,"mesdehoy":mesdehoy,"añoHoy":añoHoy, "ventasEnElMesActual":ventasEnElMesActual, "ventasEnElMesAnterior":ventasEnElMesAnterior, "mesAnteriorTexto":mesAnteriorTexto, "ventasEnElMesEsMayorAlMesAnterior":ventasEnElMesEsMayorAlMesAnterior,"porcentajeVentasMes":porcentajeVentasMes,
        "ventasEnEnLaSemana":ventasEnEnLaSemana, "ventasEnEnLaSemanaAnterior":ventasEnEnLaSemanaAnterior, "porcentajeVentasSemanal":porcentajeVentasSemanal, "ventasEnLaSemanaEsMayorALaSemanaAnterior":ventasEnLaSemanaEsMayorALaSemanaAnterior,
        "contadorVentasEnero":contadorVentasEnero, "contadorVentasFebrero":contadorVentasFebrero, "contadorVentasMarzo":contadorVentasMarzo,
        "contadorVentasAbril":contadorVentasAbril, "contadorVentasMayo":contadorVentasMayo, "contadorVentasJunio":contadorVentasJunio, "contadorVentasJulio":contadorVentasJulio,
        "contadorVentasAgosto":contadorVentasAgosto, "contadorVentasSeptiembre":contadorVentasSeptiembre, "contadorVentasOctubre":contadorVentasOctubre,
        "contadorVentasNoviembre":contadorVentasNoviembre, "contadorVentasDiciembre":contadorVentasDiciembre, "porcentajeVentasDelEmpleado":porcentajeVentasDelEmpleado, "porcentajeDemasEmpleados":porcentajeDemasEmpleados, "contadorVentasTotalesMes":contadorVentasTotalesMes,
        "listaVentasMes":listaVentasMes, "montoVentasEnElMesActual":montoVentasEnElMesActual, "montoTotalDeVentaMesAnterior":montoTotalDeVentaMesAnterior, "porcentajeMontoVentas":porcentajeMontoVentas, "esteMesVendioMas":esteMesVendioMas,
        "contadorVentasEnElAño":contadorVentasEnElAño, "contadorVentasEnElAñoAnterior":contadorVentasEnElAñoAnterior, "porcentajeVentaAnual":porcentajeVentaAnual, "ventasMayores":ventasMayores,
        "primerAñoAntes":primerAñoAntes, "segundoAñoAntes":segundoAñoAntes, "tercerAñoAntes":tercerAñoAntes, "contadorVentasHaceDosAños":contadorVentasHaceDosAños, "contadorVentasHaceTresAños":contadorVentasHaceTresAños,
        "porcentajeVentasDelEmpleadoEnElAño":porcentajeVentasDelEmpleadoEnElAño, "porcentajeDemasEmpleadosEnElAño":porcentajeDemasEmpleadosEnElAño,
        "montoVentaEnElAño":montoVentaEnElAño, "montoVentaEnElAñoAnterior":montoVentaEnElAñoAnterior, "porcentajeMontoVentaAnual":porcentajeMontoVentaAnual, "esteAñoVendioMas":esteAñoVendioMas, "listaVentasAño":listaVentasAño, "idEmpleadoConfigurar":idEmpleadoConfigurar,"notificacionCita":notificacionCita})

        return redirect('/verEmpleados/')
    else:
        return render(request,"1 Login/login.html")

def informeDeVentasRangoFechasEmpleado(request):
    if "idSesion" in request.session:

        # Variables de sesión
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']
        idPerfil = idEmpleado
        idConfig = idEmpleado
       
        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
        
           #notificacionRentas
        notificacionRenta = notificacionRentas(request)

        #notificacionCitas
        notificacionCita = notificacionCitas(request)
        
         #permisosEmpleado
        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)
        
        if request.method == "POST":
            idEmpleadoConfigurar = request.POST['idEmpleadoInforme']
            
            fechaInicio = request.POST['fechaInicio']
            fechaFinal = request.POST['fechaFinal']

            consultaEmpleado = Empleados.objects.filter(id_empleado = idEmpleadoConfigurar)

            for dato in consultaEmpleado:
                idEmpleadoEditar2 = dato.id_empleado
                idEmpleadoEditar3 = dato.id_empleado
                idEmpleadoEditar4 = dato.id_empleado
                nombreUsuario = dato.nombre_usuario
                nombres = dato.nombres
                apellidoPaterno = dato.apellido_paterno
                apellidoMaterno = dato.apellido_materno
                telefono = dato.telefono
                puesto = dato.puesto
                estatus = dato.estado_contratacion
                fecha_alta = dato.fecha_alta

                fecha_baja = dato.fecha_baja
                if dato.id_sucursal_id == None:
                    sucursalEmpleado = "Todas"
                    idsucursal = ""
                    tipo = "Administrador"
                else:
                    
                    idsucursal = dato.id_sucursal_id
                    tipo ="Empleado"
                    sucursales = Sucursales.objects.filter(id_sucursal = idsucursal)
                    for dato in sucursales:
                        sucursalEmpleado = dato.nombre


                letrasEmpleado = nombres[0] + apellidoPaterno[0] + apellidoMaterno[0]
            
            if estatus == "A":
                activo = True
            elif estatus == "I":
                activo = False

            totalVentas = 0
            contadorVentas = 0
            consultaVentas = Ventas.objects.filter(empleado_vendedor_id__id_empleado = idEmpleadoConfigurar)  
            for venta in consultaVentas:
                montoVendido = venta.monto_pagar
                contadorVentas = contadorVentas + 1
                totalVentas = totalVentas + montoVendido   
                
                
                
            # INFORME DE VENTAS DEL MES -----------------------------------------------------------------------------------------------------------------------------
            hoy = datetime.now()
        
            mesdehoynumero = hoy.strftime('%m') #06
            
            mesesDic = {
                "01":'Enero',
                "02":'Febrero',
                "03":'Marzo',
                "04":'Abril',
                "05":'Mayo',
                "06":'Junio',
                "07":'Julio',
                "08":'Agosto',
                "09":'Septiembre',
                "10":'Octubre',
                "11":'Noviembre',
                "12":'Diciembre'
            }
            
            diasMeses = {
                'Enero':'31',
                'Febrero':'28',
                'Marzo':'31',
                'Abril':'30',
                'Mayo':'31',
                'Junio':'30',
                'Julio':'31',
                'Agosto':'31',
                'Septiembre':'30',
                'Octubre':'31',
                'Noviembre':'30',
                'Diciembre':'31'
            }
            #Mes actual
            diadehoy = hoy.strftime('%d')
            añoHoy = hoy.strftime('%Y')
            mesdehoy = mesesDic[str(mesdehoynumero)]
            
            fechaDiaMesActual = añoHoy+"-"+mesdehoynumero+"-"+diadehoy  #Día actual  2022-06-07
            fechaInicioMesActual = añoHoy+"-"+mesdehoynumero+"-01"  #Primer día del mes 2022-06-01  
            
            
            ventasEmpleadoEnElMes = Ventas.objects.filter(fecha_venta__range=[fechaInicioMesActual,fechaDiaMesActual], empleado_vendedor_id__id_empleado = idEmpleadoConfigurar)
            #arreglosTabla
            sucursales = []
            clientes = []
            boolProductos = []
            productos = []
            boolServCorporal = []
            servicioCorporal = []
            boolServFacial = []
            servicioFacial = []
            boolCredito = []
            idsCreditos = []
            boolPagado = []
            montos = []
            boolDescuentos = []
            datosDescuento = []
            costoReal = []
            descuentos = []
            tipoVenta = []
            
            ventasEnElMesActual = 0
            montoVentasEnElMesActual = 0
            for venta in ventasEmpleadoEnElMes:
                ventasEnElMesActual = ventasEnElMesActual + 1
                idVenta = venta.id_venta

                #montos
                montoVendido = venta.monto_pagar
                montoVentasEnElMesActual = montoVentasEnElMesActual + montoVendido
                
                #Para tabla de ventas
                sucursal = venta.sucursal_id
                consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursal)
                for suc in consultaSucursal:
                    nombreSucursal = suc.nombre
                sucursales.append(nombreSucursal)
                
                cliente = venta.cliente_id
                if cliente == None:
                    clientes.append(["x","Cliente momentaneo"])
                else:
                    consultaCliente = Clientes.objects.filter(id_cliente = cliente)
                    for datoCliente in consultaCliente:
                        nombreCliente = datoCliente.nombre_cliente
                        apellido = datoCliente.apellidoPaterno_cliente
                    
                    nombreCompletoCliente = nombreCliente + " "+apellido
                    
                    clientes.append([cliente,nombreCompletoCliente])
                
                #Productos
                codigosProductos = venta.ids_productos
                if codigosProductos == "":
                    boolProductos.append("Sin productos comprados")
                    productos.append("x")
                else:
                    boolProductos.append("Se compraron productos")
                    cantidadesProductos = venta.cantidades_productos
                    arregloCodigosProductos = codigosProductos.split(",")
                    arregloCantidadesProductos = cantidadesProductos.split(",")
                    
                    listaProductos = zip(arregloCodigosProductos,arregloCantidadesProductos)
                    
                    productitos = []
                    for producto, cantidades in listaProductos:
                        idcodigoProducto = str(producto)
                        cantidad = str(cantidades)
                        
                        if "PV" in idcodigoProducto:
                            #Producto para venta
                            tipoVenta.append("Venta")
                            consultaProducto = ProductosVenta.objects.filter(codigo_producto = idcodigoProducto)
                        else:
                            #Producto para renta
                            tipoVenta.append("Renta")
                            consultaProducto = ProductosRenta.objects.filter(codigo_producto = idcodigoProducto)
                        
                        for datoProducto in consultaProducto:
                            nombreProducto = datoProducto.nombre_producto
                        productitos.append([idcodigoProducto, nombreProducto,cantidad ])
                    productos.append(productitos)
                
                #ServiciosCorporales
                serviciosCorporales = venta.ids_servicios_corporales
                if serviciosCorporales == "":
                    boolServCorporal.append("Sin servicios coorporales")
                    servicioCorporal.append("x")
                else:
                    boolServCorporal.append("Se compraron servicios")
                    cantidadesServiciosCorporales = venta.cantidades_servicios_corporales
                    arregloIdsServiciosCorporales = serviciosCorporales.split(",")
                    arregloCantidadesServiciosCorporales = cantidadesServiciosCorporales.split(",")
                    
                    listaServiciosCorporales = zip(arregloIdsServiciosCorporales,arregloCantidadesServiciosCorporales)
                    
                    serviciosCorporales = []
                    for idServicioCorporal, cantidadServiciosCorporal in listaServiciosCorporales:
                        intId = int(idServicioCorporal)
                        strId = str(idServicioCorporal)
                        cantidad = str(cantidadServiciosCorporal)
                        
                       
                        consultaServicio = Servicios.objects.filter(id_servicio = intId)
                        
                        for datoServicio in consultaServicio:
                            nombreDeServicio = datoServicio.nombre_servicio
                        serviciosCorporales.append([strId, nombreDeServicio,cantidad ])
                    servicioCorporal.append(serviciosCorporales)
                
                #ServiciosFaciales
                serviciosFaciales = venta.ids_servicios_faciales
                if serviciosFaciales == "":
                    boolServFacial.append("Sin servicios faciales")
                    servicioFacial.append("x")
                else:
                    boolServFacial.append("Se compraron servicios")
                    cantiadesServiciosFaciales = venta.cantidades_servicios_faciales
                    arregloIdsServiciosFaciales = serviciosFaciales.split(",")
                    arregloCantidadesServiciosFaciales = cantiadesServiciosFaciales.split(",")
                    
                    listaServiciosFaciales = zip(arregloIdsServiciosFaciales, arregloCantidadesServiciosFaciales)
                    
                    serviciosFaciales = []
                    for idServiciosFacial, cantidadServicioFacial in listaServiciosFaciales:
                        intId = int(idServiciosFacial)
                        strId = str(idServiciosFacial)
                        cantidad = str(cantidadServicioFacial)
                        
                       
                        consultaServicio = Servicios.objects.filter(id_servicio = intId)
                        
                        for datoServicio in consultaServicio:
                            nombreDeServicio = datoServicio.nombre_servicio
                        serviciosFaciales.append([strId, nombreDeServicio,cantidad ])
                    servicioFacial.append(serviciosFaciales)
                credito = venta.credito
                if credito == "S":
                    boolCredito.append("Si")
                    consultaCredito = Creditos.objects.filter(venta_id__id_venta = idVenta)
                    if consultaCredito:
                        for datoCredito in consultaCredito:
                            idCredito = datoCredito.id_credito
                            restante = datoCredito.monto_restante
                        idsCreditos.append(idCredito)
                        if restante == 0:
                            boolPagado.append("Si")
                        else:
                            boolPagado.append("No")
                    else:
                        idsCreditos.append("error")
                        
                else:
                    boolCredito.append("No")
                    idsCreditos.append("No")
                    boolPagado.append("No")
                
                montoPagado = venta.monto_pagar
                montos.append(montoPagado)
                
                descuento = venta.descuento_id
                if descuento == None:
                    boolDescuentos.append("Sin descuento")
                    datosDescuento.append("Sin descuento")
                    descuentos.append("Sin descuento")
                    costoReal.append("Sin descuento")
                else:
                    boolDescuentos.append("Con descuento")
                    consultaDescuento = Descuentos.objects.filter(id_descuento = descuento)
                    for datoDescuento in consultaDescuento:
                        nombreDescuento = datoDescuento.nombre_descuento
                        porcentajeDescuento = datoDescuento.porcentaje
                    porcentajeTotalDescuento = 100 - float(porcentajeDescuento)
                    totalSinDescuento = (100*montoPagado)/porcentajeTotalDescuento
                    totalDescuento = totalSinDescuento - montoPagado
                
                
                    datosDescuento.append([porcentajeDescuento,nombreDescuento])
                    descuentos.append(totalDescuento)
                    costoReal.append(totalSinDescuento)

                    
                
            listaVentasMes = zip(ventasEmpleadoEnElMes, sucursales, clientes,boolProductos,productos, boolServCorporal, servicioCorporal, boolServFacial, servicioFacial, boolCredito, idsCreditos, boolPagado, montos, boolDescuentos, datosDescuento, descuentos, costoReal, tipoVenta)
                
                
            #Mes anterior
            haceUnMes = hoy - relativedelta(months=1)  #2022-05-07
            mesHaceUnMes = haceUnMes.strftime('%m') #05
            añoHaceUnMes = haceUnMes.strftime('%Y')
            mesAnteriorTexto = mesesDic[str(mesHaceUnMes)]
            
            diasDeUltimoMes = diasMeses[str(mesAnteriorTexto)]
            
            fechaPrimerDiaMesAnterior = añoHaceUnMes + "-"+mesHaceUnMes+"-01"   #2022-05-01
            fechaUltimoDiaMesAnterior = añoHaceUnMes + "-"+mesHaceUnMes+"-"+diasDeUltimoMes  #2022-05-31
            
            
            ventasEmpleadoEnElMesAnterior = Ventas.objects.filter(fecha_venta__range=[fechaPrimerDiaMesAnterior,fechaUltimoDiaMesAnterior],empleado_vendedor_id__id_empleado = idEmpleadoConfigurar)
            
            ventasEnElMesAnterior = 0
            montoTotalDeVentaMesAnterior = 0
            for ventaMesAnterior in ventasEmpleadoEnElMesAnterior:
                montoTotalVenta = ventaMesAnterior.monto_pagar
                montoTotalDeVentaMesAnterior = montoTotalDeVentaMesAnterior + montoTotalVenta
                
                ventasEnElMesAnterior = ventasEnElMesAnterior + 1
                
            #Verificación contra el mes anterior
            ventasEnElMesEsMayorAlMesAnterior = False
            if ventasEnElMesAnterior == 0:
                porcentajeVentasMes = 100
            else:
                porcentajeVentasMes = (ventasEnElMesActual / ventasEnElMesAnterior)
                porcentajeVentasMes = porcentajeVentasMes - 1
                porcentajeVentasMes = porcentajeVentasMes *100

            if porcentajeVentasMes > 0:
                ventasEnElMesEsMayorAlMesAnterior = True
                
            else:
                ventasEnElMesEsMayorAlMesAnterior = False
            porcentajeVentasMes = round(porcentajeVentasMes,2)
            
            
            #Semana actual
            diaActual = datetime.today().isoweekday() #2 martes
            intdiaActual = int(diaActual)
            diaLunes = intdiaActual-1 #3 dias para el lunes
            diaDomingo = 7-intdiaActual # 2 dias para el sabado
            
            #Montos totales de semana actual
            fechaLunes = datetime.now()-timedelta(days =diaLunes)
            fechaDomingo = datetime.now() + timedelta(days =diaDomingo)
            
            ventasEmpleadoEnLaSemana = Ventas.objects.filter(fecha_venta__range=[fechaLunes,fechaDomingo], empleado_vendedor_id__id_empleado = idEmpleadoConfigurar)
            
            ventasEnEnLaSemana = 0
            for ventaSemana in ventasEmpleadoEnLaSemana:
                ventasEnEnLaSemana = ventasEnEnLaSemana + 1
                    
            
            #Montos totales de semana anterior
            fechaLunesAnterior = fechaLunes-timedelta(days =7)
            fechaDomingoAnterior = fechaLunes - timedelta(days =1)
            
            ventasEmpleadoEnLaSemanaAnterior = Ventas.objects.filter(fecha_venta__range=[fechaLunesAnterior,fechaDomingoAnterior], empleado_vendedor_id__id_empleado = idEmpleadoConfigurar)
            
            ventasEnEnLaSemanaAnterior = 0
            for ventaSemanaAnterior in ventasEmpleadoEnLaSemanaAnterior:
                ventasEnEnLaSemanaAnterior = ventasEnEnLaSemanaAnterior + 1
                
            #Verificación contra la semana anterior
            ventasEnLaSemanaEsMayorALaSemanaAnterior = False

            if ventasEnEnLaSemanaAnterior == 0:
                porcentajeVentasSemanal = 100
            else:
                porcentajeVentasSemanal = (ventasEnEnLaSemana / ventasEnEnLaSemanaAnterior)
                porcentajeVentasSemanal = porcentajeVentasSemanal - 1
                porcentajeVentasSemanal = porcentajeVentasSemanal *100

            if porcentajeVentasSemanal > 0:
                ventasEnLaSemanaEsMayorALaSemanaAnterior = True
                
            else:
                ventasEnLaSemanaEsMayorALaSemanaAnterior = False
            porcentajeVentasSemanal = round(porcentajeVentasSemanal,2)
            
            
            
            #Meses para gráfica por mes
            inicioMesEnero = añoHoy+"-01-01"
            finMesEnero = añoHoy+"-01-31"
            contadorVentasEnero = 0
            ventasEnEnero = Ventas.objects.filter(fecha_venta__range=[inicioMesEnero,finMesEnero], empleado_vendedor_id__id_empleado = idEmpleadoConfigurar)
            for ventaEnero in ventasEnEnero:
                contadorVentasEnero = contadorVentasEnero + 1
            
            
            inicioMesFebrero = añoHoy+"-02-01"
            finMesFebrero = añoHoy+"-02-28"
            contadorVentasFebrero = 0
            ventasEnFebrero = Ventas.objects.filter(fecha_venta__range=[inicioMesFebrero,finMesFebrero], empleado_vendedor_id__id_empleado = idEmpleadoConfigurar)
            for ventaFebrero in ventasEnFebrero:
                contadorVentasFebrero = contadorVentasFebrero + 1
            
            inicioMesMarzo = añoHoy+"-03-01"
            finMesMarzo = añoHoy+"-03-31"
            contadorVentasMarzo = 0
            ventasEnMarzo = Ventas.objects.filter(fecha_venta__range=[inicioMesMarzo,finMesMarzo], empleado_vendedor_id__id_empleado = idEmpleadoConfigurar)
            for ventaMarzo in ventasEnMarzo:
                contadorVentasMarzo = contadorVentasMarzo + 1
            
            
            inicioMesAbril = añoHoy+"-04-01"
            finMesAbril = añoHoy+"-04-30"
            contadorVentasAbril = 0
            ventasEnAbril = Ventas.objects.filter(fecha_venta__range=[inicioMesAbril,finMesAbril], empleado_vendedor_id__id_empleado = idEmpleadoConfigurar)
            for ventaAbril in ventasEnAbril:
                contadorVentasAbril = contadorVentasAbril + 1
            
            inicioMesMayo = añoHoy+"-05-01"
            finMesMayo = añoHoy+"-05-31"
            contadorVentasMayo = 0
            ventasEnMayo = Ventas.objects.filter(fecha_venta__range=[inicioMesMayo,finMesMayo], empleado_vendedor_id__id_empleado = idEmpleadoConfigurar)
            for ventaMayo in ventasEnMayo:
                contadorVentasMayo = contadorVentasMayo + 1
            
            inicioMesJunio = añoHoy+"-06-01"
            finMesJunio = añoHoy+"-06-30"
            contadorVentasJunio = 0
            ventasEnJunio = Ventas.objects.filter(fecha_venta__range=[inicioMesJunio,finMesJunio], empleado_vendedor_id__id_empleado = idEmpleadoConfigurar)
            for ventaJunio in ventasEnJunio:
                contadorVentasJunio = contadorVentasJunio + 1
            
            inicioMesJulio = añoHoy+"-07-01"
            finMesJulio = añoHoy+"-07-31"
            contadorVentasJulio = 0
            ventasEnJulio = Ventas.objects.filter(fecha_venta__range=[inicioMesJulio,finMesJulio], empleado_vendedor_id__id_empleado = idEmpleadoConfigurar)
            for ventaJulio in ventasEnJulio:
                contadorVentasJulio = contadorVentasJulio + 1
            
            inicioMesAgosto = añoHoy+"-08-01"
            finMesAgosto = añoHoy+"-08-31"
            contadorVentasAgosto = 0
            ventasEnAgosto = Ventas.objects.filter(fecha_venta__range=[inicioMesAgosto,finMesAgosto],empleado_vendedor_id__id_empleado = idEmpleadoConfigurar)
            for ventaAgosto in ventasEnAgosto:
                contadorVentasAgosto = contadorVentasAgosto + 1
            
            inicioMesSeptiembre = añoHoy+"-09-01"
            finMesSeptiembre = añoHoy+"-09-30"
            contadorVentasSeptiembre = 0
            ventasEnSeptiembre = Ventas.objects.filter(fecha_venta__range=[inicioMesSeptiembre,finMesSeptiembre], empleado_vendedor_id__id_empleado = idEmpleadoConfigurar)
            for ventaSeptiembre in ventasEnSeptiembre:
                contadorVentasSeptiembre = contadorVentasSeptiembre + 1
            
            inicioMesOctubre = añoHoy+"-10-01"
            finMesOctubre = añoHoy+"-10-31"
            contadorVentasOctubre = 0
            ventasEnOctubre = Ventas.objects.filter(fecha_venta__range=[inicioMesOctubre,finMesOctubre], empleado_vendedor_id__id_empleado = idEmpleadoConfigurar)
            for ventaOctubre in ventasEnOctubre:
                contadorVentasOctubre = contadorVentasOctubre + 1
            
            inicioMesNoviembre = añoHoy+"-11-01"
            finMesNoviembre = añoHoy+"-11-30"
            contadorVentasNoviembre = 0
            ventasEnNoviembre = Ventas.objects.filter(fecha_venta__range=[inicioMesNoviembre,finMesNoviembre], empleado_vendedor_id__id_empleado = idEmpleadoConfigurar)
            for ventaNoviembre in ventasEnNoviembre:
                contadorVentasNoviembre = contadorVentasNoviembre + 1
            
            inicioMesDiciembre = añoHoy+"-12-01"
            finMesDiciembre = añoHoy+"-12-31"
            contadorVentasDiciembre = 0
            ventasEnDiciembre = Ventas.objects.filter(fecha_venta__range=[inicioMesDiciembre,finMesDiciembre], empleado_vendedor_id__id_empleado = idEmpleadoConfigurar)
            for ventaDiciembre in ventasEnDiciembre:
                contadorVentasDiciembre = contadorVentasDiciembre + 1
                
            
            if tipo == "Administrador":
            #Ventas totales
                ventasTotalesDeEmpleadosEnElMes = Ventas.objects.filter(fecha_venta__range=[fechaInicioMesActual,fechaDiaMesActual])
            else:
                ventasTotalesDeEmpleadosEnElMes = Ventas.objects.filter(fecha_venta__range=[fechaInicioMesActual,fechaDiaMesActual], sucursal_id__id_sucursal = idsucursal)
            
            contadorVentasTotalesMes = 0
            for ventaMes in ventasTotalesDeEmpleadosEnElMes:
                contadorVentasTotalesMes = contadorVentasTotalesMes + 1
            
            if contadorVentasTotalesMes == 0:
                porcentajeVentasDelEmpleado = 0
            else:
                porcentajeVentasDelEmpleado = (ventasEnElMesActual * 100)/contadorVentasTotalesMes
            
            porcentajeDemasEmpleados = 100 - porcentajeVentasDelEmpleado
            
            
            if montoTotalDeVentaMesAnterior == 0:
                porcentajeMontoVentas = 100
            else:
                porcentajeMontoVentas = (montoVentasEnElMesActual / montoTotalDeVentaMesAnterior)
                porcentajeMontoVentas = porcentajeMontoVentas - 1
                porcentajeMontoVentas = porcentajeMontoVentas *100

            if porcentajeMontoVentas > 0:
                esteMesVendioMas = True
                
            else:
                esteMesVendioMas = False
            
            
            
            #INFORME DE EMPLEADO EN EL AÑO------------------------------------------------------------------------------------------------------------
            
            primeroDeEnero = añoHoy+"-01-01"
            ultimoDiciemte = añoHoy+"-12-31"
            
            ventasEmpleadoEnElAño = Ventas.objects.filter(fecha_venta__range=[primeroDeEnero,ultimoDiciemte], empleado_vendedor_id__id_empleado = idEmpleadoConfigurar)
            
            contadorVentasEnElAño = 0
            montoVentaEnElAño = 0
            for ventaAnual in ventasEmpleadoEnElAño:
                contadorVentasEnElAño = contadorVentasEnElAño+1
                montoVenta = ventaAnual.monto_pagar
                montoVentaEnElAño = montoVentaEnElAño + montoVenta
            
            añoAnterior = int(añoHoy)-1
            primeroDeEneroAnterior = str(añoAnterior)+"-01-01"
            ultimoDiciemteAnterior = str(añoAnterior)+"-12-31"
            
            ventasEmpleadoEnElAñoAnterior = Ventas.objects.filter(fecha_venta__range=[primeroDeEneroAnterior,ultimoDiciemteAnterior], empleado_vendedor_id__id_empleado = idEmpleadoConfigurar)
            
            contadorVentasEnElAñoAnterior = 0
            montoVentaEnElAñoAnterior = 0
            for ventaAnualAnterior in ventasEmpleadoEnElAñoAnterior:
                contadorVentasEnElAñoAnterior = contadorVentasEnElAñoAnterior+1
                montoVenta = ventaAnual.monto_pagar
                montoVentaEnElAñoAnterior = montoVentaEnElAñoAnterior + montoVenta
                
                
            if contadorVentasEnElAñoAnterior == 0:
                porcentajeVentaAnual = 100
            else:
                porcentajeVentaAnual = (contadorVentasEnElAño / contadorVentasEnElAñoAnterior)
                porcentajeVentaAnual = porcentajeVentaAnual - 1
                porcentajeVentaAnual = porcentajeVentaAnual *100

            if porcentajeVentaAnual > 0:
                ventasMayores = True
                
            else:
                ventasMayores = False
                
            primerAñoAntes = int(añoHoy)-1
            segundoAñoAntes = int(añoHoy)-2
            tercerAñoAntes = int(añoHoy)-3
            
            eneroHaceDosAños = str(segundoAñoAntes)+"-01-01"
            diciembreHaceDosAños = str(segundoAñoAntes)+"-12-31"
            ventasEmpleadoHaceDosAños = Ventas.objects.filter(fecha_venta__range=[eneroHaceDosAños,diciembreHaceDosAños], empleado_vendedor_id__id_empleado = idEmpleadoConfigurar)
            
            contadorVentasHaceDosAños = 0
            for venta in ventasEmpleadoHaceDosAños:
                contadorVentasHaceDosAños = contadorVentasHaceDosAños+1
            
            eneroHaceTresAños = str(tercerAñoAntes)+"-01-01"
            diciembreHaceTresAños = str(tercerAñoAntes)+"-12-31"
            ventasEmpleadoHaceTresAños = Ventas.objects.filter(fecha_venta__range=[eneroHaceTresAños,diciembreHaceTresAños], empleado_vendedor_id__id_empleado = idEmpleadoConfigurar)
            
            contadorVentasHaceTresAños = 0
            for venta in ventasEmpleadoHaceTresAños:
                contadorVentasHaceTresAños = contadorVentasHaceTresAños+1

            #pie chart
            if tipo == "Administrador":
            #Ventas totales
                ventasTotalesDeEmpleadosEnElAño= Ventas.objects.filter(fecha_venta__range=[primeroDeEnero,ultimoDiciemte])
            else:
                ventasTotalesDeEmpleadosEnElAño = Ventas.objects.filter(fecha_venta__range=[primeroDeEnero,ultimoDiciemte], sucursal_id__id_sucursal = idsucursal)
            
            contadorVentasTotalesDelAño = 0
            for ventaMes in ventasTotalesDeEmpleadosEnElAño:
                contadorVentasTotalesDelAño = contadorVentasTotalesDelAño + 1
            
            if contadorVentasTotalesDelAño == 0:
                porcentajeVentasDelEmpleadoEnElAño = 0
            else:
                porcentajeVentasDelEmpleadoEnElAño = (contadorVentasEnElAño * 100)/contadorVentasTotalesDelAño
            
            porcentajeDemasEmpleadosEnElAño = 100 - porcentajeVentasDelEmpleadoEnElAño
                
            if montoVentaEnElAñoAnterior == 0:
                porcentajeMontoVentaAnual = 100
            else:
                porcentajeMontoVentaAnual = (montoVentaEnElAño / montoVentaEnElAñoAnterior)
                porcentajeMontoVentaAnual = porcentajeMontoVentaAnual - 1
                porcentajeMontoVentaAnual = porcentajeMontoVentaAnual *100
            
            if porcentajeMontoVentaAnual > 0:
                esteAñoVendioMas = True
                
            else:
                esteAñoVendioMas = False
                
                
            ventasEmpleadoEnElAño2 = Ventas.objects.filter(fecha_venta__range=[primeroDeEnero,ultimoDiciemte], empleado_vendedor_id__id_empleado = idEmpleadoConfigurar)
            sucursalesAño = []
            clientesAño = []
            boolProductosAño = []
            productosAño = []
            boolServCorporalAño = []
            servicioCorporalAño = []
            boolServFacialAño = []
            servicioFacialAño = []
            boolCreditoAño = []
            idsCreditosAño = []
            boolPagadoAño = []
            montosAño = []
            boolDescuentosAño = []
            datosDescuentoAño = []
            costoRealAño = []
            descuentosAño = []
            tipoVentaAño = []
            
            for venta in ventasEmpleadoEnElAño2:
                idVenta = venta.id_venta
                
                #Para tabla de ventas
                sucursal = venta.sucursal_id
                consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursal)
                for suc in consultaSucursal:
                    nombreSucursal = suc.nombre
                sucursalesAño.append(nombreSucursal)
                
                cliente = venta.cliente_id
                if cliente == None:
                    clientesAño.append(["x","Cliente momentaneo"])
                else:
                    consultaCliente = Clientes.objects.filter(id_cliente = cliente)
                    for datoCliente in consultaCliente:
                        nombreCliente = datoCliente.nombre_cliente
                        apellido = datoCliente.apellidoPaterno_cliente
                    
                    nombreCompletoCliente = nombreCliente + " "+apellido
                    
                    clientesAño.append([cliente,nombreCompletoCliente])
                
                #Productos
                codigosProductos = venta.ids_productos
                if codigosProductos == "":
                    boolProductosAño.append("Sin productos comprados")
                    productosAño.append("x")
                else:
                    boolProductosAño.append("Se compraron productos")
                    cantidadesProductos = venta.cantidades_productos
                    arregloCodigosProductos = codigosProductos.split(",")
                    arregloCantidadesProductos = cantidadesProductos.split(",")
                    
                    listaProductos = zip(arregloCodigosProductos,arregloCantidadesProductos)
                    
                    productitos = []
                    for producto, cantidades in listaProductos:
                        idcodigoProducto = str(producto)
                        cantidad = str(cantidades)
                        
                        if "PV" in idcodigoProducto:
                            #Producto para venta
                            tipoVentaAño.append("Venta")
                            consultaProducto = ProductosVenta.objects.filter(codigo_producto = idcodigoProducto)
                        else:
                            #Producto para renta
                            tipoVentaAño.append("Renta")
                            consultaProducto = ProductosRenta.objects.filter(codigo_producto = idcodigoProducto)
                        
                        for datoProducto in consultaProducto:
                            nombreProducto = datoProducto.nombre_producto
                        productitos.append([idcodigoProducto, nombreProducto,cantidad ])
                    productosAño.append(productitos)
                
                #ServiciosCorporales
                serviciosCorporales = venta.ids_servicios_corporales
                if serviciosCorporales == "":
                    boolServCorporalAño.append("Sin servicios coorporales")
                    servicioCorporalAño.append("x")
                else:
                    boolServCorporalAño.append("Se compraron servicios")
                    cantidadesServiciosCorporales = venta.cantidades_servicios_corporales
                    arregloIdsServiciosCorporales = serviciosCorporales.split(",")
                    arregloCantidadesServiciosCorporales = cantidadesServiciosCorporales.split(",")
                    
                    listaServiciosCorporales = zip(arregloIdsServiciosCorporales,arregloCantidadesServiciosCorporales)
                    
                    serviciosCorporales = []
                    for idServicioCorporal, cantidadServiciosCorporal in listaServiciosCorporales:
                        intId = int(idServicioCorporal)
                        strId = str(idServicioCorporal)
                        cantidad = str(cantidadServiciosCorporal)
                        
                       
                        consultaServicio = Servicios.objects.filter(id_servicio = intId)
                        
                        for datoServicio in consultaServicio:
                            nombreDeServicio = datoServicio.nombre_servicio
                        serviciosCorporales.append([strId, nombreDeServicio,cantidad ])
                    servicioCorporalAño.append(serviciosCorporales)
                
                #ServiciosFaciales
                serviciosFaciales = venta.ids_servicios_faciales
                if serviciosFaciales == "":
                    boolServFacialAño.append("Sin servicios faciales")
                    servicioFacialAño.append("x")
                else:
                    boolServFacialAño.append("Se compraron servicios")
                    cantiadesServiciosFaciales = venta.cantidades_servicios_faciales
                    arregloIdsServiciosFaciales = serviciosFaciales.split(",")
                    arregloCantidadesServiciosFaciales = cantiadesServiciosFaciales.split(",")
                    
                    listaServiciosFaciales = zip(arregloIdsServiciosFaciales, arregloCantidadesServiciosFaciales)
                    
                    serviciosFaciales = []
                    for idServiciosFacial, cantidadServicioFacial in listaServiciosFaciales:
                        intId = int(idServiciosFacial)
                        strId = str(idServiciosFacial)
                        cantidad = str(cantidadServicioFacial)
                        
                       
                        consultaServicio = Servicios.objects.filter(id_servicio = intId)
                        
                        for datoServicio in consultaServicio:
                            nombreDeServicio = datoServicio.nombre_servicio
                        serviciosFaciales.append([strId, nombreDeServicio,cantidad ])
                    servicioFacialAño.append(serviciosFaciales)
                credito = venta.credito
                if credito == "S":
                    boolCreditoAño.append("Si")
                    consultaCredito = Creditos.objects.filter(venta_id__id_venta = idVenta)
                    if consultaCredito:
                        for datoCredito in consultaCredito:
                            idCredito = datoCredito.id_credito
                            restante = datoCredito.monto_restante
                        idsCreditosAño.append(idCredito)
                        if restante == 0:
                            boolPagadoAño.append("Si")
                        else:
                            boolPagadoAño.append("No")
                    else:
                        idsCreditosAño.append("error")
                        
                else:
                    boolCreditoAño.append("No")
                    idsCreditosAño.append("No")
                    boolPagadoAño.append("No")
                
                montoPagado = venta.monto_pagar
                montosAño.append(montoPagado)
                
                descuento = venta.descuento_id
                if descuento == None:
                    boolDescuentosAño.append("Sin descuento")
                    datosDescuentoAño.append("Sin descuento")
                    descuentosAño.append("Sin descuento")
                    costoRealAño.append("Sin descuento")
                else:
                    boolDescuentosAño.append("Con descuento")
                    consultaDescuento = Descuentos.objects.filter(id_descuento = descuento)
                    for datoDescuento in consultaDescuento:
                        nombreDescuento = datoDescuento.nombre_descuento
                        porcentajeDescuento = datoDescuento.porcentaje
                    porcentajeTotalDescuento = 100 - float(porcentajeDescuento)
                    totalSinDescuento = (100*montoPagado)/porcentajeTotalDescuento
                    totalDescuento = totalSinDescuento - montoPagado
                
                
                    datosDescuentoAño.append([porcentajeDescuento,nombreDescuento])
                    descuentosAño.append(totalDescuento)
                    costoRealAño.append(totalSinDescuento)

                    
                
            listaVentasAño = zip(ventasEmpleadoEnElAño2, sucursalesAño, clientesAño,boolProductosAño,productosAño, boolServCorporalAño, servicioCorporalAño
                                 , boolServFacialAño, servicioFacialAño, boolCreditoAño, idsCreditosAño, boolPagadoAño, montosAño, boolDescuentosAño
                                 , datosDescuentoAño, descuentosAño, costoRealAño, tipoVentaAño)
              
            
            
             #INFORME DE EMPLEADO EN LA FECHA ESPECIFICADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA------------------------------------------------------------------------------------------------------------
            
            
            #Rango de fechas de empleado
            rangoFechasEmpleado = True
            rangoFechasEmpleado2 = True
            
            fechaInicio = request.POST['fechaInicio']
            fechaFinal = request.POST['fechaFinal']
            
            #fecha con formato de fecha
            fechaInicioFormato=datetime.strptime(fechaInicio,"%Y-%m-%d")
            fechaFinalFormato=datetime.strptime(fechaFinal,"%Y-%m-%d") 

            diferenciaEnDias=fechaFinalFormato-fechaInicioFormato
            numeroDiasDiferencia=diferenciaEnDias.days
            fechaRestaInicio=fechaInicioFormato-timedelta(days=numeroDiasDiferencia)
            fechaSumaFinal=fechaFinalFormato+timedelta(days=numeroDiasDiferencia)
            
           
            ventasEmpleadoPeriodo = Ventas.objects.filter(fecha_venta__range=[fechaInicioFormato,fechaFinalFormato], empleado_vendedor_id__id_empleado = idEmpleadoConfigurar)
            
            contadorVentasPeriodo = 0
            montoVentaPeriodo = 0
            for ventaPeriodo in ventasEmpleadoPeriodo:
                contadorVentasPeriodo = contadorVentasPeriodo+1
                montoVenta = ventaPeriodo.monto_pagar
                montoVentaPeriodo = montoVentaPeriodo + montoVenta
            
            
            ventasEmpleadoEnElPeriodoAnterior = Ventas.objects.filter(fecha_venta__range=[fechaRestaInicio,fechaInicioFormato], empleado_vendedor_id__id_empleado = idEmpleadoConfigurar)
            
            contadorVentasPeriodoAnterior = 0
            montoVentaPeriodoAnterior = 0
            for ventaPeriodoAnterior in ventasEmpleadoEnElPeriodoAnterior:
                contadorVentasPeriodoAnterior = contadorVentasPeriodoAnterior+1
                montoVenta = ventaPeriodoAnterior.monto_pagar
                montoVentaPeriodoAnterior = montoVentaPeriodoAnterior + montoVenta
                
            ventasEmpleadoEnElPeriodoSiguiente = Ventas.objects.filter(fecha_venta__range=[fechaFinalFormato,fechaSumaFinal], empleado_vendedor_id__id_empleado = idEmpleadoConfigurar)
            
            contadorVentasPeriodoSiguiente = 0
            montoVentaPeriodoSiguiente = 0
            for ventaPeriodoSiguiente in ventasEmpleadoEnElPeriodoSiguiente:
                contadorVentasPeriodoSiguiente = contadorVentasPeriodoSiguiente+1
                montoVenta = ventaPeriodoSiguiente.monto_pagar
                montoVentaPeriodoSiguiente = montoVentaPeriodoSiguiente + montoVenta
            
            fechaInicioPartida = fechaInicio.split("-")
            mesNumeroInicio = fechaInicioPartida[1]
            
            
            fechaFinalPartida = fechaFinal.split("-")
            mesNumeroFinal = fechaFinalPartida[1]
            
            mesNumeroRestaInicio=fechaRestaInicio.strftime('%m')
            mesNumeroSumaFinal=fechaSumaFinal.strftime('%m')
            
            
            mesesTexto = {
            "01":'Enero',
            "02":'Febrero',
            "03":'Marzo',
            "04":'Abril',
            "05":'Mayo',
            "06":'Junio',
            "07":'Julio',
            "08":'Agosto',
            "09":'Septiembre',
            "10":'Octubre',
            "11":'Noviembre',
            "12":'Diciembre'
            }
            
            
            #Mes actual
            mesInicioTexto = mesesTexto[str(mesNumeroInicio)] #Junio
            mesFinalTexto = mesesTexto[str(mesNumeroFinal)]
            mesRestaInicioTexto = mesesTexto[str(mesNumeroRestaInicio)]
            mesSumaFinalTexto = mesesTexto[str(mesNumeroSumaFinal)]
            #fechas
            fefchaCompletaInicio = fechaInicioPartida[2] + " de "+ mesInicioTexto +" "+ fechaInicioPartida[0]
            fefchaCompletaFinal = fechaFinalPartida[2]+ " de " + mesFinalTexto +" "+ fechaFinalPartida[0]  
            fechaTextoInicioPeriodoAnterior = str(fechaRestaInicio.strftime('%d'))+ " de " + mesRestaInicioTexto +" "+ str(fechaRestaInicio.strftime('%Y'))  
            fechaTextoFinalPeriodoDespues=str(fechaSumaFinal.strftime('%d'))+ " de "+ mesFinalTexto + " de " + str(fechaSumaFinal.strftime('%Y'))
                
            
            if contadorVentasPeriodoAnterior == 0:
                porcentajeVentaPeriodo = 100
            else:
                porcentajeVentaPeriodo = (contadorVentas / contadorVentasPeriodoAnterior)
                porcentajeVentaPeriodo = porcentajeVentaPeriodo - 1
                porcentajeVentaPeriodo = porcentajeVentaPeriodo *100

            if porcentajeVentaPeriodo > 0:
                ventasMayoresPeriodo = True
                
            else:
                ventasMayoresPeriodo = False
                
            #Porcentajes para pie chart.
            
            if tipo == "Administrador":
            #Ventas totales
                ventasTotalesDeEmpleadosEnElPeriodo= Ventas.objects.filter(fecha_venta__range=[fechaInicioFormato,fechaFinalFormato])
            else:
                ventasTotalesDeEmpleadosEnElPeriodo = Ventas.objects.filter(fecha_venta__range=[fechaInicioFormato,fechaFinalFormato], sucursal_id__id_sucursal = idsucursal)
            
            contadorVentasTotalesDelPeriodo = 0
            for ventaMes in ventasTotalesDeEmpleadosEnElPeriodo:
                contadorVentasTotalesDelPeriodo = contadorVentasTotalesDelPeriodo + 1
            if contadorVentasTotalesDelPeriodo == 0:
                porcentajeVentasDelEmpleadoEnElPeriodo = 0
            else:
                porcentajeVentasDelEmpleadoEnElPeriodo = (contadorVentasPeriodo * 100)/contadorVentasTotalesDelPeriodo
            
            porcentajeDemasEmpleadosEnElPeriodo = 100 - porcentajeVentasDelEmpleadoEnElAño
            
            
                
                
            ventasEmpleadoEnElPeriodo2 = Ventas.objects.filter(fecha_venta__range=[fechaInicioFormato,fechaFinalFormato], empleado_vendedor_id__id_empleado = idEmpleadoConfigurar)
            
            #Arreglos RangoFecha Periodo
            sucursalesPeriodo = []
            clientesPeriodo = []
            boolProductosPeriodo = []
            productosPeriodo = []
            boolServCorporalPeriodo= []
            servicioCorporalPeriodo = []
            boolServFacialPeriodo = []
            servicioFacialPeriodo = []
            boolCreditoPeriodo = []
            idsCreditosPeriodo = []
            boolPagadoPeriodo= []
            montosPeriodo = []
            boolDescuentosPeriodo = []
            datosDescuentoPeriodo = []
            costoRealPeriodo = []
            descuentosPeriodo = []
            tipoVentaPeriodo = []
            
            for venta in ventasEmpleadoEnElPeriodo2:
                idVenta = venta.id_venta
                
                #Para tabla de ventas
                sucursal = venta.sucursal_id
                consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursal)
                for suc in consultaSucursal:
                    nombreSucursal = suc.nombre
                sucursalesPeriodo.append(nombreSucursal)
                
                cliente = venta.cliente_id
                if cliente == None:
                    clientesAño.append(["x","Cliente momentaneo"])
                else:
                    consultaCliente = Clientes.objects.filter(id_cliente = cliente)
                    for datoCliente in consultaCliente:
                        nombreCliente = datoCliente.nombre_cliente
                        apellido = datoCliente.apellidoPaterno_cliente
                    
                    nombreCompletoCliente = nombreCliente + " " +apellido
                    
                    clientesPeriodo.append([cliente,nombreCompletoCliente])
                
                #Productos
                codigosProductos = venta.ids_productos      
                if codigosProductos == "":
                    boolProductosPeriodo.append("Sin productos comprados")
                    productosPeriodo.append("x")
                else:
                    boolProductosPeriodo.append("Se compraron productos")
                    cantidadesProductos = venta.cantidades_productos
                    arregloCodigosProductos = codigosProductos.split(",")
                    arregloCantidadesProductos = cantidadesProductos.split(",")
                    
                    listaProductos = zip(arregloCodigosProductos,arregloCantidadesProductos)
                    
                    productitos = []
                    for producto, cantidades in listaProductos:
                        idcodigoProducto = str(producto)
                        cantidad = str(cantidades)
                        
                        if "PV" in idcodigoProducto:
                            #Producto para venta
                            tipoVentaPeriodo.append("Venta")
                            consultaProducto = ProductosVenta.objects.filter(codigo_producto = idcodigoProducto)
                        else:
                            #Producto para renta
                            tipoVentaPeriodo.append("Renta")
                            consultaProducto = ProductosRenta.objects.filter(codigo_producto = idcodigoProducto)
                        
                        for datoProducto in consultaProducto:
                            nombreProducto = datoProducto.nombre_producto
                        productitos.append([idcodigoProducto, nombreProducto,cantidad ])
                    productosPeriodo.append(productitos)
                
                #ServiciosCorporales
                serviciosCorporales = venta.ids_servicios_corporales
                if serviciosCorporales == "":
                    boolServCorporalPeriodo.append("Sin servicios coorporales")
                    servicioCorporalPeriodo.append("x")
                else:
                    boolServCorporalPeriodo.append("Se compraron servicios")
                    cantidadesServiciosCorporales = venta.cantidades_servicios_corporales
                    arregloIdsServiciosCorporales = serviciosCorporales.split(",")
                    arregloCantidadesServiciosCorporales = cantidadesServiciosCorporales.split(",")
                    
                    listaServiciosCorporales = zip(arregloIdsServiciosCorporales,arregloCantidadesServiciosCorporales)
                    
                    serviciosCorporales = []
                    for idServicioCorporal, cantidadServiciosCorporal in listaServiciosCorporales:
                        intId = int(idServicioCorporal)
                        strId = str(idServicioCorporal)
                        cantidad = str(cantidadServiciosCorporal)
                        
                       
                        consultaServicio = Servicios.objects.filter(id_servicio = intId)
                        
                        for datoServicio in consultaServicio:
                            nombreDeServicio = datoServicio.nombre_servicio
                        serviciosCorporales.append([strId, nombreDeServicio,cantidad ])
                    servicioCorporalPeriodo.append(serviciosCorporales)
                
                #ServiciosFaciales
                serviciosFaciales = venta.ids_servicios_faciales #consultamos la id de de servicios faciales
                if serviciosFaciales == "": #Si serviciosFaciales está vacía agregaremos dos campos a los arreglos que no hay servicios faciales
                    boolServFacialPeriodo.append("Sin servicios faciales")
                    servicioFacialPeriodo.append("x")
                else:
                    boolServFacialPeriodo.append("Se compraron servicios") #Si el campo no está vacío agregaremos en el arreglo, que se compraron servicios
                    cantiadesServiciosFaciales = venta.cantidades_servicios_faciales #Ahora tomaremos de venta las cantidades de servicios faciales
                    arregloIdsServiciosFaciales = serviciosFaciales.split(",") #Ahora juntaremos las id en un arreglo divididas entre comas
                    arregloCantidadesServiciosFaciales = cantiadesServiciosFaciales.split(",")#Haremos lo mismo pero ahora con las cantidades
                    
                    listaServiciosFaciales = zip(arregloIdsServiciosFaciales, arregloCantidadesServiciosFaciales)#Ahora haremos un arreglo contatenando los dos arreglos
                    
                    serviciosFaciales = [] #creamos un arreglo vacío
                    for idServiciosFacial, cantidadServicioFacial in listaServiciosFaciales: #hacemos un ciclo for el cual tome las id 
                        intId = int(idServiciosFacial)  	    #y cantidad de nuestro arreglo recién zipeado y nos regrese los valores en entero y string
                        strId = str(idServiciosFacial)          #de las Id Para usarlos después y de la cantidad en string
                        cantidad = str(cantidadServicioFacial)  
                        
                       
                        consultaServicio = Servicios.objects.filter(id_servicio = intId)
                        
                        for datoServicio in consultaServicio:
                            nombreDeServicio = datoServicio.nombre_servicio
                        serviciosFaciales.append([strId, nombreDeServicio,cantidad ])
                    servicioFacialPeriodo.append(serviciosFaciales)
                credito = venta.credito
                if credito == "S":
                    boolCreditoPeriodo.append("Si")
                    consultaCredito = Creditos.objects.filter(venta_id__id_venta = idVenta)
                    if consultaCredito:
                        for datoCredito in consultaCredito:
                            idCredito = datoCredito.id_credito
                            restante = datoCredito.monto_restante
                        idsCreditosPeriodo.append(idCredito)
                        if restante == 0:
                            boolPagadoPeriodo.append("Si")
                        else:
                            boolPagadoPeriodo.append("No")
                    else:
                        idsCreditosPeriodo.append("error")
                        
                else:
                    boolCreditoPeriodo.append("No")
                    idsCreditosPeriodo.append("No")
                    boolPagadoPeriodo.append("No")
                
                montoPagado = venta.monto_pagar
                montosPeriodo.append(montoPagado)
                
                descuento = venta.descuento_id
                if descuento == None:
                    boolDescuentosPeriodo.append("Sin descuento")
                    datosDescuentoPeriodo.append("Sin descuento")
                    descuentosPeriodo.append("Sin descuento")
                    costoRealPeriodo.append("Sin descuento")
                else:
                    boolDescuentosPeriodo.append("Con descuento")
                    consultaDescuento = Descuentos.objects.filter(id_descuento = descuento)
                    for datoDescuento in consultaDescuento:
                        nombreDescuento = datoDescuento.nombre_descuento
                        porcentajeDescuento = datoDescuento.porcentaje
                    porcentajeTotalDescuento = 100 - float(porcentajeDescuento)
                    totalDescuento = (100*montoPagado)/porcentajeTotalDescuento
                    totalSinDescuento = montoPagado + totalDescuento
                
                
                    datosDescuentoPeriodo.append([porcentajeDescuento,nombreDescuento])
                    descuentosPeriodo.append(totalDescuento)
                    costoRealPeriodo.append(totalSinDescuento)

                    
                
            listaVentasPeriodo = zip(ventasEmpleadoEnElPeriodo2, sucursalesPeriodo, clientesPeriodo,boolProductosPeriodo,productosPeriodo, boolServCorporalPeriodo, servicioCorporalPeriodo
                                 , boolServFacialPeriodo, servicioFacialPeriodo, boolCreditoPeriodo, idsCreditosPeriodo, boolPagadoPeriodo, montosPeriodo, boolDescuentosPeriodo
                                 , datosDescuentoPeriodo, descuentosPeriodo, costoRealPeriodo, tipoVentaPeriodo)
              
            
            
            

            return render(request, "3 Empleados/informeEmpleado.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado, "idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado,
        "nombres":nombres,"apellidoPaterno":apellidoPaterno, "apellidoMaterno":apellidoMaterno, "telefono":telefono,
        "puesto":puesto, "nombreUsuario":nombreUsuario, "letrasEmpleado":letrasEmpleado, "tipo":tipo,"sucursalEmpleado":sucursalEmpleado, "idsucursal":idsucursal, "idEmpleadoEditar2":idEmpleadoEditar2, "activo":activo, "fecha_alta":fecha_alta, 
        "fecha_baja":fecha_baja, "idEmpleadoEditar3":idEmpleadoEditar3, "idEmpleadoEditar4":idEmpleadoEditar4, "totalVentas":totalVentas, "contadorVentas":contadorVentas,"notificacionRenta":notificacionRenta,
        "diadehoy":diadehoy,"mesdehoy":mesdehoy,"añoHoy":añoHoy, "ventasEnElMesActual":ventasEnElMesActual, "ventasEnElMesAnterior":ventasEnElMesAnterior, "mesAnteriorTexto":mesAnteriorTexto, "ventasEnElMesEsMayorAlMesAnterior":ventasEnElMesEsMayorAlMesAnterior,"porcentajeVentasMes":porcentajeVentasMes,
        "ventasEnEnLaSemana":ventasEnEnLaSemana, "ventasEnEnLaSemanaAnterior":ventasEnEnLaSemanaAnterior, "porcentajeVentasSemanal":porcentajeVentasSemanal, "ventasEnLaSemanaEsMayorALaSemanaAnterior":ventasEnLaSemanaEsMayorALaSemanaAnterior,
        "contadorVentasEnero":contadorVentasEnero, "contadorVentasFebrero":contadorVentasFebrero, "contadorVentasMarzo":contadorVentasMarzo,
        "contadorVentasAbril":contadorVentasAbril, "contadorVentasMayo":contadorVentasMayo, "contadorVentasJunio":contadorVentasJunio, "contadorVentasJulio":contadorVentasJulio,
        "contadorVentasAgosto":contadorVentasAgosto, "contadorVentasSeptiembre":contadorVentasSeptiembre, "contadorVentasOctubre":contadorVentasOctubre,
        "contadorVentasNoviembre":contadorVentasNoviembre, "contadorVentasDiciembre":contadorVentasDiciembre, "porcentajeVentasDelEmpleado":porcentajeVentasDelEmpleado, "porcentajeDemasEmpleados":porcentajeDemasEmpleados, "contadorVentasTotalesMes":contadorVentasTotalesMes,
        "listaVentasMes":listaVentasMes, "montoVentasEnElMesActual":montoVentasEnElMesActual, "montoTotalDeVentaMesAnterior":montoTotalDeVentaMesAnterior, "porcentajeMontoVentas":porcentajeMontoVentas, "esteMesVendioMas":esteMesVendioMas,
        "contadorVentasEnElAño":contadorVentasEnElAño, "contadorVentasEnElAñoAnterior":contadorVentasEnElAñoAnterior, "porcentajeVentaAnual":porcentajeVentaAnual, "ventasMayores":ventasMayores,
        "primerAñoAntes":primerAñoAntes, "segundoAñoAntes":segundoAñoAntes, "tercerAñoAntes":tercerAñoAntes, "contadorVentasHaceDosAños":contadorVentasHaceDosAños, "contadorVentasHaceTresAños":contadorVentasHaceTresAños,
        "porcentajeVentasDelEmpleadoEnElAño":porcentajeVentasDelEmpleadoEnElAño, "porcentajeDemasEmpleadosEnElAño":porcentajeDemasEmpleadosEnElAño,
        "montoVentaEnElAño":montoVentaEnElAño, "montoVentaEnElAñoAnterior":montoVentaEnElAñoAnterior, "porcentajeMontoVentaAnual":porcentajeMontoVentaAnual, "esteAñoVendioMas":esteAñoVendioMas, "listaVentasAño":listaVentasAño,
        "rangoFechasEmpleado":rangoFechasEmpleado, "rangoFechasEmpleado2":rangoFechasEmpleado2, "fefchaCompletaInicio":fefchaCompletaInicio, "fefchaCompletaFinal":fefchaCompletaFinal, "contadorVentasPeriodo":contadorVentasPeriodo, "montoVentaPeriodo":montoVentaPeriodo, "contadorVentasPeriodoAnterior":contadorVentasPeriodoAnterior, "montoVentaPeriodoAnterior":montoVentaPeriodoAnterior, "contadorVentasPeriodoSiguiente":contadorVentasPeriodoSiguiente, "montoVentaPeriodoSiguiente":montoVentaPeriodoSiguiente, "fechaTextoInicioPeriodoAnterior":fechaTextoInicioPeriodoAnterior, "idEmpleadoConfigurar":idEmpleadoConfigurar,"fechaTextoFinalPeriodoDespues":fechaTextoFinalPeriodoDespues,
        "ventasMayoresPeriodo":ventasMayoresPeriodo, "porcentajeVentasDelEmpleadoEnElPeriodo":porcentajeVentasDelEmpleadoEnElPeriodo, "porcentajeDemasEmpleadosEnElPeriodo":porcentajeDemasEmpleadosEnElPeriodo,
        "contadorVentasTotalesDelPeriodo":contadorVentasTotalesDelPeriodo, "porcentajeVentaPeriodo":porcentajeVentaPeriodo, "listaVentasPeriodo":listaVentasPeriodo, "notificacionCita":notificacionCita})

        return redirect('/verEmpleados/')
    else:
        return render(request,"1 Login/login.html")

def informeDeVentasRangoFechas(request):
    if "idSesion" in request.session:
        #Empleado está logueado
        
        # Variables de sesión
        idEmpleado = request.session['idSesion']   #1
        nombresEmpleado = request.session['nombresSesion'] #
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']
        idPerfil = idEmpleado
        idConfig = idEmpleado
       

        

        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
        
           #notificacionRentas
        notificacionRenta = notificacionRentas(request)
        
        #notificacionCitas
        notificacionCita = notificacionCitas(request)

        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)
        
        if request.method == "POST": #Si le dio clic al botón y se mandaron variables..
            #fecha inicio
            fechaInicio = request.POST["fechaInicio"]    
            fechaInicioPartida = fechaInicio.split("-")    
            mesNumeroInicio = fechaInicioPartida[1]
            
            #Fecha final
            fechaFinal = request.POST["fechaFinal"] 
            fechaFinalPartida = fechaFinal.split("-")
            mesNumeroFinal = fechaFinalPartida[1]
            
            
            mesesTexto = {
            "01":'Enero',
            "02":'Febrero',
            "03":'Marzo',
            "04":'Abril',
            "05":'Mayo',
            "06":'Junio',
            "07":'Julio',
            "08":'Agosto',
            "09":'Septiembre',
            "10":'Octubre',
            "11":'Noviembre',
            "12":'Diciembre'
            }
            
            
            #Mes actual
            mesInicioTexto = mesesTexto[str(mesNumeroInicio)] #Junio
            mesFinalTexto = mesesTexto[str(mesNumeroFinal)]
            
            #fechas
            fefchaCompletaInicio = fechaInicioPartida[2] + " de "+ mesInicioTexto +" "+ fechaInicioPartida[0]
            fefchaCompletaFinal = fechaFinalPartida[2]+ " de " + mesFinalTexto +" "+ fechaFinalPartida[0]
            
            #fecha con formato de fecha
            fechaInicioFormato=datetime.strptime(fechaInicio,"%Y-%m-%d")
            fechaFinalFormato=datetime.strptime(fechaFinal,"%Y-%m-%d") 

            diferenciaEnDias=fechaFinalFormato-fechaInicioFormato
            numeroDiasDiferencia=diferenciaEnDias.days
            fechaRestaInicio=fechaInicioFormato-timedelta(days=numeroDiasDiferencia)
            fechaSumaFinal=fechaFinalFormato+timedelta(days=numeroDiasDiferencia)
            
            fechaRestaInicioFormato=fechaRestaInicio.strftime("%Y-%m-%d") 
            fechaSumaFinalFormato=fechaSumaFinal.strftime("%Y-%m-%d")
            
            #Formato de fecha inicio periodo anterior con texto
            
            fechaRestaInicioFormatoPartida = fechaRestaInicioFormato.split("-")
            fechaRestaInicioFormatoPartidaMes = fechaRestaInicioFormatoPartida[1]
            
            mesPeriodoAnterior = mesesTexto[str(fechaRestaInicioFormatoPartidaMes)]
            
            fechaTextoPeriodoAnterior = fechaRestaInicioFormatoPartida[2] + " de "+ mesPeriodoAnterior +" "+ fechaRestaInicioFormatoPartida[0]

            #Formato de fecha final periodo después con texto
            fechaSumaFinalFormatoPartida = fechaSumaFinalFormato.split("-")
            fechaSumaFinalFormatoPartidaMesDespues = fechaSumaFinalFormatoPartida[1]
            
            mesPeriodoDespues = mesesTexto[str(fechaSumaFinalFormatoPartidaMesDespues)]
            
            fechaTextoPeriodoDespues = fechaSumaFinalFormatoPartida[2] + " de "+ mesPeriodoDespues +" "+ fechaSumaFinalFormatoPartida[0]
            
            
            #ingresos por venta directa
            consultaVentasRangoFecha=Ventas.objects.filter(fecha_venta__range = [fechaInicioFormato,fechaFinalFormato],credito="N")
            montoIngresoRangoFecha=0
            montoVentasDirectas=0
            numeroVentasDirectas=0

            if consultaVentasRangoFecha:
                for venta in consultaVentasRangoFecha:
                    montoPagado=venta.monto_pagar
                    montoIngresoRangoFecha=montoIngresoRangoFecha+montoPagado
                    montoVentasDirectas=montoVentasDirectas+montoPagado
                    numeroVentasDirectas=numeroVentasDirectas+1
            
            #ingresos por pagos de creditos
            consultaCreditosRangoFecha=Creditos.objects.filter(fecha_venta_credito__range = [fechaInicioFormato,fechaFinalFormato],renta_id__isnull=True)

            montoCreditos=0
            numeroCreditos=0
            if consultaCreditosRangoFecha:
                for credito in consultaCreditosRangoFecha:
                    montoPagado=credito.monto_pagado
                    montoIngresoRangoFecha=montoIngresoRangoFecha+montoPagado
                    montoCreditos=montoCreditos+montoPagado
                    numeroCreditos=numeroCreditos+1
            #ingresos por rentas
            consultaRentasRangoFecha=Rentas.objects.filter(fecha_apartado__range = [fechaInicioFormato,fechaFinalFormato])
            montoRentas=0
            numeroRentas=0
            if consultaRentasRangoFecha:
                for renta in consultaRentasRangoFecha:
                    montoPagoApartado=renta.monto_pago_apartado
                    montoPagadoRestante=renta.monto_restante
                    sumaPagosRenta=0
                    if montoPagadoRestante == 0:
                        sumaPagosRenta=renta.monto_total_renta
                    else:
                        sumaPagosRenta=montoPagoApartado
                    montoIngresoRangoFecha=montoIngresoRangoFecha+sumaPagosRenta
                    montoRentas=montoRentas+sumaPagosRenta
                    numeroRentas=numeroRentas+1

            
            #rango fecha anterior
            
            #ingresos por venta directa
            consultaVentasRangoFechaAntes=Ventas.objects.filter(fecha_venta__range = [fechaRestaInicio,fechaInicioFormato],credito="N")
            montoIngresoRangoFechaAntes=0
            

            if consultaVentasRangoFechaAntes:
                for venta in consultaVentasRangoFechaAntes:
                    montoPagado=venta.monto_pagar
                    montoIngresoRangoFechaAntes=montoIngresoRangoFechaAntes+montoPagado
                   
            
            #ingresos por pagos de creditos
            consultaCreditosRangoFechaAntes=Creditos.objects.filter(fecha_venta_credito__range = [fechaRestaInicio,fechaInicioFormato],renta_id__isnull=True)

            
            if consultaCreditosRangoFechaAntes:
                for credito in consultaCreditosRangoFechaAntes:
                    montoPagado=credito.monto_pagado
                    montoIngresoRangoFechaAntes=montoIngresoRangoFechaAntes+montoPagado
                   
            #ingresos por rentas
            consultaRentasRangoFechaAntes=Rentas.objects.filter(fecha_apartado__range = [fechaRestaInicio,fechaInicioFormato])
            
            if consultaRentasRangoFechaAntes:
                for renta in consultaRentasRangoFechaAntes:
                    montoPagoApartado=renta.monto_pago_apartado
                    montoPagadoRestante=renta.monto_restante
                    sumaPagosRenta=0
                    if montoPagadoRestante == 0:
                        sumaPagosRenta=renta.monto_total_renta
                    else:
                        sumaPagosRenta=montoPagoApartado
                    montoIngresoRangoFechaAntes=montoIngresoRangoFechaAntes+sumaPagosRenta
            esMayor=False
            if montoIngresoRangoFechaAntes==0:
                porcentajeRangoFechas=100
            else:
                porcentajeRangoFechas=(montoIngresoRangoFecha/montoIngresoRangoFechaAntes)
                porcentajeRangoFechas=porcentajeRangoFechas-1
                porcentajeRangoFechas=porcentajeRangoFechas*100
            if porcentajeRangoFechas>0:
                esMayor=True
            else:
                esMayor=False
            porcentajeRangoFechas =round(porcentajeRangoFechas,2)

            #rango fecha después
            
            #ingresos por venta directa
            consultaVentasRangoFechaDespues=Ventas.objects.filter(fecha_venta__range = [fechaSumaFinal,fechaFinalFormato],credito="N")
            montoIngresoRangoFechaDespues=0
            

            if consultaVentasRangoFechaDespues:
                for venta in consultaVentasRangoFechaDespues:
                    montoPagado=venta.monto_pagar
                    montoIngresoRangoFechaDespues=montoIngresoRangoFechaDespues+montoPagado
                   
            
            #ingresos por pagos de creditos
            consultaCreditosRangoFechaDespues=Creditos.objects.filter(fecha_venta_credito__range = [fechaSumaFinal,fechaFinalFormato],renta_id__isnull=True)

            
            if consultaCreditosRangoFechaDespues:
                for credito in consultaCreditosRangoFechaDespues:
                    montoPagado=credito.monto_pagado
                    montoIngresoRangoFechaDespues=montoIngresoRangoFechaDespues+montoPagado
                   
            #ingresos por rentas
            consultaRentasRangoFechaDespues=Rentas.objects.filter(fecha_apartado__range = [fechaSumaFinal,fechaFinalFormato])
            
            if consultaRentasRangoFechaDespues:
                for renta in consultaRentasRangoFechaDespues:
                    montoPagoApartado=renta.monto_pago_apartado
                    montoPagadoRestante=renta.monto_restante
                    sumaPagosRenta=0
                    if montoPagadoRestante == 0:
                        sumaPagosRenta=renta.monto_total_renta
                    else:
                        sumaPagosRenta=montoPagoApartado
                    montoIngresoRangoFechaDespues=montoIngresoRangoFechaDespues+sumaPagosRenta

            #compras del periodo
            totalComprasGasto=0
            totalComprasVenta=0
            totalComprasRenta=0
            
            numeroComprasGasto=0
            numeroComprasVenta=0
            numeroComprasRenta=0
            
    #Tabla Productos Gastos
            comprasProductosGastos = []
            comprasGastodelPeriodo=ComprasGastos.objects.filter(fecha_compra__range=[fechaInicioFormato,fechaFinalFormato])
            if comprasGastodelPeriodo :
                for compraGasto in comprasGastodelPeriodo:
                    montoComprado=compraGasto.total_costoCompra
                    totalComprasGasto=totalComprasGasto+montoComprado
                    numeroComprasGasto=numeroComprasGasto+1 
                    #datos para tabla
                    idCompra=compraGasto.id_compraGasto
                    idProducto=compraGasto.id_productoComprado_id
                    consultaProducto=ProductosGasto.objects.filter(id_producto=idProducto)
                    for datoProducto in consultaProducto:
                        nombreProducto=datoProducto.nombre_producto
                        codigoProducto=datoProducto.codigo_producto
                        imagenProducto=datoProducto.imagen_producto
                        sucursalProducto=datoProducto.sucursal_id
                    nombreCompletoProducto=codigoProducto+" - "+nombreProducto
                    consultaSucursal=Sucursales.objects.filter(id_sucursal=sucursalProducto)
                    for datoSucursal in consultaSucursal:
                        nombreSucursal=datoSucursal.nombre
                    fechaCompra=compraGasto.fecha_compra
                    costoUnitarioCompra=compraGasto.costo_unitario
                    cantidadComprada=compraGasto.cantidad_comprada
                    totalMontoCompra=compraGasto.total_costoCompra
                    comprasProductosGastos.append([idCompra,nombreCompletoProducto,imagenProducto,fechaCompra,nombreSucursal,costoUnitarioCompra,cantidadComprada,totalMontoCompra])
            else:
                comprasProductosGastos= None
                
    #Tabla Productos Venta
            comprasProductosVentas = []
            comprasVentasdelPeriodo=ComprasVentas.objects.filter(fecha_compra__range=[fechaInicioFormato,fechaFinalFormato])
            if comprasVentasdelPeriodo :
                for compraVenta in comprasVentasdelPeriodo:
                    montoVendido=compraVenta.total_costoCompra
                    totalComprasVenta=totalComprasVenta+montoVendido
                    numeroComprasVenta=numeroComprasVenta+1 
                    #datos para tabla
                    idCompra=compraVenta.id_compraVenta
                    idProducto=compraVenta.id_productoComprado_id
                    consultaProducto=ProductosVenta.objects.filter(id_producto=idProducto)
                    for datoProducto in consultaProducto:
                        nombreProducto=datoProducto.nombre_producto
                        codigoProducto=datoProducto.codigo_producto
                        imagenProducto=datoProducto.imagen_producto
                        sucursalProducto=datoProducto.sucursal_id
                    nombreCompletoProducto=codigoProducto+" - "+nombreProducto
                    consultaSucursal=Sucursales.objects.filter(id_sucursal=sucursalProducto)
                    for datoSucursal in consultaSucursal:
                        nombreSucursal=datoSucursal.nombre
                    fechaCompra=compraVenta.fecha_compra
                    costoUnitarioCompra=compraVenta.costo_unitario
                    cantidadComprada=compraVenta.cantidad_comprada
                    totalMontoCompra=compraVenta.total_costoCompra
                    comprasProductosVentas.append([idCompra,nombreCompletoProducto,imagenProducto,fechaCompra,nombreSucursal,costoUnitarioCompra,cantidadComprada,totalMontoCompra])
            else:
                comprasProductosVentas= None
            
            #Tabla Productos Renta
            comprasProductosRenta = []
            comprasRentasdelPeriodo=ComprasRentas.objects.filter(fecha_compra__range=[fechaInicioFormato,fechaFinalFormato])
            if comprasRentasdelPeriodo :
                for compraRenta in comprasRentasdelPeriodo:
                    montoComprado=compraRenta.total_costoCompra
                    totalComprasRenta=totalComprasRenta+montoComprado
                    numeroComprasRenta=numeroComprasRenta+1 
                    #datos para tabla
                    idCompra=compraRenta.id_compraRenta
                    idProducto=compraRenta.id_productoComprado_id
                    consultaProducto=ProductosRenta.objects.filter(id_producto=idProducto)
                    for datoProducto in consultaProducto:
                        nombreProducto=datoProducto.nombre_producto
                        codigoProducto=datoProducto.codigo_producto
                        imagenProducto=datoProducto.imagen_producto
                        sucursalProducto=datoProducto.sucursal_id
                    nombreCompletoProducto=codigoProducto+" - "+nombreProducto
                    consultaSucursal=Sucursales.objects.filter(id_sucursal=sucursalProducto)
                    for datoSucursal in consultaSucursal:
                        nombreSucursal=datoSucursal.nombre
                    fechaCompra=compraRenta.fecha_compra
                    costoUnitarioCompra=compraRenta.costo_unitario
                    cantidadComprada=compraRenta.cantidad_comprada
                    totalMontoCompra=compraRenta.total_costoCompra
                    comprasProductosRenta.append([idCompra,nombreCompletoProducto,imagenProducto,fechaCompra,nombreSucursal,costoUnitarioCompra,cantidadComprada,totalMontoCompra])
            else:
                comprasProductosRenta= None

            
            
            totalCompraFechaRango=totalComprasGasto+totalComprasVenta+totalComprasRenta
                    
        	#Totales en efectivo, tarjeta, transferencia
            #Efectivo
            consultaVentasEnEfectivo=Ventas.objects.filter(fecha_venta__range=[fechaInicioFormato,fechaFinalFormato],tipo_pago="Efectivo", credito="N")
            totalEfectivo=0

            for ventaEfectivo in consultaVentasEnEfectivo:
                monto_efectivo=ventaEfectivo.monto_pagar
                totalEfectivo=totalEfectivo+monto_efectivo

            #Tarjeta
            consultaVentasEnTarjeta=Ventas.objects.filter(fecha_venta__range=[fechaInicioFormato,fechaFinalFormato],tipo_pago="Tarjeta", credito="N")
            totalTarjeta=0

            for ventaTarjeta in consultaVentasEnTarjeta:
                monto_tarjeta=ventaTarjeta.monto_pagar
                totalTarjeta=totalTarjeta+monto_tarjeta
            
            #Transferencia
            consultaVentasEnTransferencia=Ventas.objects.filter(fecha_venta__range=[fechaInicioFormato,fechaFinalFormato],tipo_pago="Transferencia", credito="N")
            totalTransferencia=0

            for ventaTransferencia in consultaVentasEnTransferencia:
                monto_transferencia=ventaTransferencia.monto_pagar
                totalTransferencia=totalTransferencia+monto_transferencia

            
            #PAGOS DE LOS CREDITOS
            creditos = Creditos.objects.filter(fecha_venta_credito__range=[fechaInicioFormato,fechaFinalFormato])
            for credito in creditos:
                idCredito = credito.id_credito
            
                pagosCredito = PagosCreditos.objects.filter(id_credito_id__id_credito=idCredito)
                for pago in pagosCredito:
                    tipoPago1 = pago.tipo_pago1
                    tipoPago2 = pago.tipo_pago2
                    tipoPago3 = pago.tipo_pago3
                    tipoPago4 = pago.tipo_pago4

                    if tipoPago1:
                        montoPagado1 = pago.monto_pago1
                        if tipoPago1 == "Efectivo":
                            totalEfectivo = totalEfectivo + montoPagado1
                        elif tipoPago1 == "Tarjeta":
                            totalTarjeta = totalTarjeta + montoPagado1
                        elif tipoPago1 == "Transferencia":
                            totalTransferencia = totalTransferencia + montoPagado1
                    
                    elif tipoPago2:
                        montoPagado2 = pago.monto_pago2
                        if tipoPago2 == "Efectivo":
                            totalEfectivo = totalEfectivo + montoPagado2
                        elif tipoPago2 == "Tarjeta":
                            totalTarjeta = totalTarjeta + montoPagado2
                        elif tipoPago2 == "Transferencia":
                            totalTransferencia = totalTransferencia + montoPagado2
                    
                    elif tipoPago3:
                        montoPagado3 =pago.monto_pago3
                        if tipoPago3 == "Efectivo":
                            totalEfectivo = totalEfectivo + montoPagado3
                        elif tipoPago3 == "Tarjeta":
                            totalTarjeta = totalTarjeta + montoPagado3
                        elif tipoPago3 == "Transferencia":
                            totalTransferencia = totalTransferencia + montoPagado3
                            
                    elif tipoPago4:
                        montoPagado4 = pago.monto_pago4
                        if tipoPago4 == "Efectivo":
                            totalEfectivo = totalEfectivo + montoPagado4
                        elif tipoPago4 == "Tarjeta":
                            totalTarjeta = totalTarjeta + montoPagado4
                        elif tipoPago4 == "Transferencia":
                            totalTransferencia = totalTransferencia + montoPagado4
            
            #TOP CLIENTES CON MAS COMPRAS

            consultaVentasClientes = Ventas.objects.filter(fecha_venta__range=[fechaInicioFormato,fechaFinalFormato], cliente__isnull=False)

            clientesMontosTotales = []
            clientesIds = []
            contadorClientesArray = []
            if consultaVentasClientes:
                for clienteVentas in consultaVentasClientes:
                    cliente_ventas = clienteVentas.cliente_id
                    monto_total_cliente = clienteVentas.monto_pagar
                    clientesMontosTotales.append(monto_total_cliente) #180,600
                    clientesIds.append(cliente_ventas) #1,1
                    
                listaClientesCompradores = zip(clientesIds, clientesMontosTotales)
                
                listaClientes = []
                montoPorCliente = []
                contadorClientesArray = []
                
                
                for idcliente, montoTotalCliente in listaClientesCompradores:
                    
                    strIdCliente = str(idcliente)
                    intMonto = float(montoTotalCliente)
                    
                    if strIdCliente in listaClientes:
                        indice = listaClientes.index(strIdCliente)
                        montoASumar = montoPorCliente[indice]
                        nuevaSumatoria = float(montoASumar) + intMonto
                        montoPorCliente[indice] = str(nuevaSumatoria)
                    else:
                        listaClientes.append(strIdCliente)
                        montoPorCliente.append(str(intMonto))
                
                listaZipClientes = zip(listaClientes, montoPorCliente)
                
                listaOrdenadaMayorAMenor = sorted(listaZipClientes, key = lambda t: t[-1], reverse=True)
                tuples = zip(*listaOrdenadaMayorAMenor)
                listaClientesOrdenados, listaMontosOrdenados = [ list(tuple) for tuple in  tuples]
            
                        
                infoCliente = []

                
                cotadorClientes = 0
                for cliente in listaClientesOrdenados:
                    cotadorClientes = cotadorClientes + 1
                    contadorClientesArray.append(cotadorClientes)
                    id_cliente_top = cliente
                    clienteDatos = Clientes.objects.filter(id_cliente= id_cliente_top)
                    for c in clienteDatos:

                        nombre_cliente_top = c.nombre_cliente
                        apellido =  c.apellidoPaterno_cliente
                        apellido2 = c.apellidoMaterno_cliente
                    infoCliente.append([nombre_cliente_top,apellido,apellido2])

                clientesTops = zip (listaClientesOrdenados,listaMontosOrdenados,contadorClientesArray,infoCliente)
                clientesTopsModal =zip (listaClientesOrdenados,listaMontosOrdenados,contadorClientesArray,infoCliente) 
            else:
                clientesTops = None
                clientesTopsModal = None            
                    
            #TOP EMPLEADOS CON MÁS VENTAS

            consultaTodasLasVentasDelAño = Ventas.objects.filter(fecha_venta__range=[fechaInicioFormato,fechaFinalFormato])

            idsEmpleados = []
            montosTotalesDeVentaEmpleados = []
            if consultaTodasLasVentasDelAño:
                for venta in consultaTodasLasVentasDelAño:
                    idEmpleado = venta.empleado_vendedor_id
                    idsEmpleados.append(idEmpleado) #1,1
                    montoVendido = venta.monto_pagar
                    montosTotalesDeVentaEmpleados.append(montoVendido)
                    
                
                listaEmpleados = []
                contadorVentasEmpleado = []
                contadorEmpleado = []
                listaMontosPorEmpleados = []
                
                listaEmpleadosVentas = zip(idsEmpleados, montosTotalesDeVentaEmpleados)
                
                contadorEmpleados = 0
                for idEmpleado, montoVentita in listaEmpleadosVentas:
                    
                    strIdEmpleado = str(idEmpleado)
                    floatMontoVendido = float(montoVentita)
                    
                    if strIdEmpleado in listaEmpleados:
                        indice = listaEmpleados.index(strIdEmpleado)
                        ventaASumar = contadorVentasEmpleado[indice]
                        nuevaSumatoria = int(ventaASumar) + 1
                        contadorVentasEmpleado[indice] = nuevaSumatoria
                        
                        montoASumar = listaMontosPorEmpleados[indice]
                        nuevaSumatoriaMonto = float(montoASumar) + floatMontoVendido
                        listaMontosPorEmpleados[indice] = nuevaSumatoriaMonto
                    else:
                        listaEmpleados.append(strIdEmpleado)
                        
                        contadorVentasEmpleado.append("1")
                        listaMontosPorEmpleados.append(floatMontoVendido)
                
                for montoVendido in listaMontosPorEmpleados:
                    print(str(montoVendido))

                listaZipEmpleados = zip(listaEmpleados, contadorVentasEmpleado, listaMontosPorEmpleados)
                
                listaOrdenadaEmpleadosMayorAMenor = sorted(listaZipEmpleados, key = lambda t: t[-1], reverse=True)
                tuplesEmpleados = zip(*listaOrdenadaEmpleadosMayorAMenor)
                listaEmpleadosOrdenados, listaContadoresEmpleadosOrdenados, listaMontosEmpleadosOrdenados = [ list(tuple) for tuple in  tuplesEmpleados]
                
                for monto in listaMontosEmpleadosOrdenados:
                    print("Monto:"+str(monto))
                
                infoEmpleado = []

                

                for empleado in listaEmpleadosOrdenados:
                    
                    contadorEmpleados = contadorEmpleados + 1
                    contadorEmpleado.append(contadorEmpleados)
                    idEmpleado = int(empleado)
                    datosEmpleado = Empleados.objects.filter(id_empleado = idEmpleado)
                    
                    for datoEmpleado in datosEmpleado:

                        nombresEm = datoEmpleado.nombres
                    infoEmpleado.append(nombresEm)

                empleadosTops = zip (listaEmpleadosOrdenados,listaContadoresEmpleadosOrdenados,contadorEmpleado,infoEmpleado, listaMontosEmpleadosOrdenados)
                empleadosTopsModal =  zip (listaEmpleadosOrdenados,listaContadoresEmpleadosOrdenados,contadorEmpleado,infoEmpleado, listaMontosEmpleadosOrdenados)
            else:
                empleadosTops = None
                empleadosTopsModal = None
                
            #PRODUCTOS TOOOOOPP ------------------------------------------
      
            consultaVentasMesActual = Ventas.objects.filter(fecha_venta__range=[fechaInicioFormato,fechaFinalFormato])
            
        
            productosCantidades = []
            productosVenta =[]
            cantidadesProductosVenta =[]
            sinProductos = False
        
            
            for ventaMensual in consultaVentasMesActual:
                
                ids_productos = ventaMensual.ids_productos
                if ids_productos == "":
                    sinProductos = True
                else:
                    sinProductos = False
                
                    productos = ids_productos.split(',')
                    cantidades_productos = ventaMensual.cantidades_productos
                    cantidades = cantidades_productos.split(',')

                    productosCantidades = zip(productos, cantidades)
                
                if sinProductos == False:
                    for idP,cant in productosCantidades:
                        productoVenta= str(idP)
                        cantidadProductoVenta = str(cant)
                
                    
                        if "PV" in productoVenta:
                            productosVenta.append(productoVenta)   #['PV0001']
                            cantidadesProductosVenta.append(cantidadProductoVenta) #['1']
            
            
                
            if not productosVenta:
                listaFinalProductosMesTabla = None
                
            else:
                    lProductos =zip(productosVenta,cantidadesProductosVenta)   #(['PV1000'],['1']) 
                
                    
                    
                    listaFinalProductos = []
                    listaFinalProductosSoloStrings = []
                    for pr,ca in lProductos:
                        
                        stringProducto =str(pr)
                        stringCantidad =ca
                        
                        numero = productosVenta.count(stringProducto)
                        
                        if numero >1:
                            if stringProducto in listaFinalProductosSoloStrings:
                                elProductoYaFueAgregado = True
                            else:
                                contadorCantidadesDeProductos = 0
                                contadorProductos = 0
                                for producto in productosVenta:  #3
                                    
                                    contadorProductos = contadorProductos + 1
                                    stringProducto2 = productosVenta[contadorProductos-1]
                                    cantidadProducto2 = cantidadesProductosVenta[contadorProductos-1]

                                    if stringProducto == stringProducto2:
                                        contadorCantidadesDeProductos = contadorCantidadesDeProductos + int(cantidadProducto2)

                                stringCantidad = str(contadorCantidadesDeProductos)
                                listaFinalProductosSoloStrings.append(stringProducto)
                                listaFinalProductos.append([stringProducto,stringCantidad])
                            #Borrar todos los elementos de las dos listas de strings y cantidades correspondientes a ese producto
                            
                        else:
                            listaFinalProductos.append([stringProducto,stringCantidad])

                        
                        listaProductosOrdenada = sorted(listaFinalProductos, key = lambda elemento:elemento[1])

                        listaProductosOrdenadaMayorAMenor = listaProductosOrdenada[::-1]


                        contadorParaTablaProductosMes = 0
                        arrayContadores = []
                        arrayInfoProducto = []
                        for producto in listaProductosOrdenadaMayorAMenor:
                            
                            contadorParaTablaProductosMes = contadorParaTablaProductosMes + 1
                            arrayContadores.append(contadorParaTablaProductosMes)

                            #info producto
                            codigoProducto = producto[0]
                            cantidadVendida = producto[1]
                            consultaProducto = ProductosVenta.objects.filter(codigo_producto = codigoProducto)
                            for datoProducto in consultaProducto:
                                nombre = datoProducto.nombre_producto
                                costoVenta = datoProducto.costo_venta
                                imagen = datoProducto.imagen_producto
                            
                            costoTotalVendidoProducto = costoVenta * float(cantidadVendida)
                            arrayInfoProducto.append([nombre, costoVenta, costoTotalVendidoProducto, imagen])


                        listaFinalProductosMesTabla = zip(listaProductosOrdenadaMayorAMenor, arrayContadores, arrayInfoProducto)


            
            #SERVICIOS TOOOPP------------------------------------------------
            
            consultaVentasServiciosMesActual = Ventas.objects.filter(fecha_venta__range=[fechaInicioFormato,fechaFinalFormato])
            
        
            serviciosCantidades = []
            serviciosVenta =[]
            cantidadesServiciosVenta =[]
            sinServicioscorporales = False
            sinServiciosfaciales = False
        
            
            for ventaMensual in consultaVentasServiciosMesActual:
                
                ids_servicios_corporales = ventaMensual.ids_servicios_corporales #""
                if ids_servicios_corporales == "":
                    sinServicioscorporales = True
                else:
                    sinServicioscorporales = False
                    serviciosCorporales = ids_servicios_corporales.split(',')
                    cantidades_servicios_corporales = ventaMensual.cantidades_servicios_corporales
                    cantidades_corporales = cantidades_servicios_corporales.split(',')

                    serviciosCorporalesCantidades = zip(serviciosCorporales, cantidades_corporales)
                
                ids_servicios_faciales = ventaMensual.ids_servicios_faciales
                if ids_servicios_faciales == "":
                    sinServiciosfaciales = True
                else:
                    serviciosFaciales = ids_servicios_faciales.split(',')
                    cantidades_servicios_faciales = ventaMensual.cantidades_servicios_faciales
                    cantidades_faciales = cantidades_servicios_faciales.split(',')

                    serviciosFacialesCantidades = zip(serviciosFaciales, cantidades_faciales)
                    
                if sinServicioscorporales == False:
                    for idServicioCorporal,cantCorporal in serviciosCorporalesCantidades:
                        servicioVenta= str(idServicioCorporal)
                        cantidadServicioVenta = str(cantCorporal)
                
                
                
                        serviciosVenta.append(servicioVenta)   #['PV0001']
                        cantidadesServiciosVenta.append(cantidadServicioVenta) #['1']
                    
            
                if sinServiciosfaciales == False:
                    for idServicioFacial,cantFacial in serviciosFacialesCantidades:
                        servicioVenta= str(idServicioFacial)
                        cantidadServicioVenta = str(cantFacial)
                
                
                
                        serviciosVenta.append(servicioVenta)   #['PV0001']
                        cantidadesServiciosVenta.append(cantidadServicioVenta) #['1'] for idServicioCorporal,cantCorporal in serviciosCorporalesCantidades:
                    
            if not serviciosVenta:
                listaFinalServiciosMesTabla = None
            else:
                lServicios =zip(serviciosVenta,cantidadesServiciosVenta)   #(['PV1000'],['1']) 
            
                
                
                listaFinalServicios = []
                listaFinalServiciosSoloStrings = []
                for ser,can in lServicios:
                    
                    intIdServicio =ser
                    stringCantidad =can
                    
                    numero = serviciosVenta.count(intIdServicio)
                    
                    if numero >1:
                        if intIdServicio in listaFinalServiciosSoloStrings:
                            elServicioYaFueAgregado = True
                        else:
                            contadorCantidadesDeServicios = 0
                            contadorServicios = 0
                            for servicio in serviciosVenta:  #3
                                
                                contadorServicios = contadorServicios + 1
                                idServicio2 = serviciosVenta[contadorServicios-1]
                                cantidadServicio2 = cantidadesServiciosVenta[contadorServicios-1]

                                if intIdServicio == idServicio2:
                                    contadorCantidadesDeServicios = contadorCantidadesDeServicios + int(cantidadServicio2)

                            stringCantidad = str(contadorCantidadesDeServicios)
                            listaFinalServiciosSoloStrings.append(intIdServicio)
                            listaFinalServicios.append([intIdServicio,stringCantidad])
                        #Borrar todos los elementos de las dos listas de strings y cantidades correspondientes a ese producto
                        
                    else:
                        listaFinalServicios.append([intIdServicio,stringCantidad])

                    
                    listaServiciosOrdenada = sorted(listaFinalServicios, key = lambda elemento:elemento[1])

                    listaServiciosOrdenadaMayorAMenor = listaServiciosOrdenada[::-1]


                    contadorParaTablaServiciosMes = 0
                    arrayContadores = []
                    arrayInfoServicio = []
                    for servicio in listaServiciosOrdenadaMayorAMenor:
                        
                        contadorParaTablaServiciosMes = contadorParaTablaServiciosMes + 1
                        arrayContadores.append(contadorParaTablaServiciosMes)

                        #info producto
                        codigoServicio= servicio[0]
                        cantidadVendida = servicio[1]
                        consultaServicio = Servicios.objects.filter(id_servicio = codigoServicio)
                        for datoServicios in consultaServicio:
                            tipo = datoServicios.tipo_servicio
                            nombreServicio = datoServicios.nombre_servicio
                            costoVenta = datoServicios.precio_venta
                        
                        
                        costoTotalVendidoServicio = costoVenta * float(cantidadVendida)
                        arrayInfoServicio.append([tipo, nombreServicio, costoVenta,costoTotalVendidoServicio])


                    listaFinalServiciosMesTabla = zip(listaServiciosOrdenadaMayorAMenor, arrayContadores, arrayInfoServicio)



            
            
            #PRODUCTOS RENTA TOPPP------------------------------------------

            consultaVentasRentasMesActual = Ventas.objects.filter(fecha_venta__range=[fechaInicioFormato,fechaFinalFormato])
            
        
            productosRentaCantidades = []
            productosRentaVenta =[]
            cantidadesProductosRentaVenta =[]
            sinProductosRenta = False
        
            
            for ventaMensual in consultaVentasRentasMesActual:
                
                ids_productos = ventaMensual.ids_productos
                if ids_productos == "":
                    sinProductosRenta = True
                else: 
                    sinProductosRenta = False
                    productos = ids_productos.split(',')
                    cantidades_productos = ventaMensual.cantidades_productos
                    cantidades = cantidades_productos.split(',')

                    productosCantidades = zip(productos, cantidades)
                    
                if sinProductosRenta == False:
                    for idP,cant in productosCantidades:
                        productoVenta= str(idP)
                        cantidadProductoVenta = str(cant)
                
                    
                        if "PR" in productoVenta:
                            productosRentaVenta.append(productoVenta)   #['PV0001']
                            cantidadesProductosRentaVenta.append(cantidadProductoVenta) #['1']
                
            if not productosRentaVenta:
                listaFinalProductosRentaMesTabla = None
            else:

                lProductosRenta =zip(productosRentaVenta,cantidadesProductosRentaVenta)   #(['PV1000'],['1']) 
            
                
                
                listaFinalProductosRenta = []
                listaFinalProductosSoloStringsRenta = []
                for prren,caren in lProductosRenta:
                    
                    stringProducto =str(prren)
                    stringCantidad =caren
                    
                    numero = productosRentaVenta.count(stringProducto)
                    
                    if numero >1:
                        if stringProducto in listaFinalProductosSoloStringsRenta:
                            elProductoYaFueAgregado = True
                        else:
                            contadorCantidadesDeProductosRenta = 0
                            contadorProductosRenta = 0
                            for producto in productosRentaVenta:  #3
                                
                                contadorProductosRenta = contadorProductosRenta + 1
                                stringProductorenta2 = productosRentaVenta[contadorProductosRenta-1]
                                cantidadProductorenta2 = cantidadesProductosRentaVenta[contadorProductosRenta-1]

                                if stringProducto == stringProductorenta2:
                                    contadorCantidadesDeProductosRenta = contadorCantidadesDeProductosRenta + int(cantidadProductorenta2)

                            stringCantidad = str(contadorCantidadesDeProductosRenta)
                            listaFinalProductosSoloStringsRenta.append(stringProducto)
                            listaFinalProductosRenta.append([stringProducto,stringCantidad])
                        #Borrar todos los elementos de las dos listas de strings y cantidades correspondientes a ese producto
                        
                    else:
                        listaFinalProductosRenta.append([stringProducto,stringCantidad])

                    
                    listaProductosRentaOrdenada = sorted(listaFinalProductosRenta, key = lambda elemento:elemento[1])

                    listaProductosRentaOrdenadaMayorAMenor = listaProductosRentaOrdenada[::-1]


                    contadorParaTablaProductosRentaMes = 0
                    arrayContadores = []
                    arrayInfoProductoRenta = []
                    for productoRenta in listaProductosRentaOrdenadaMayorAMenor:
                        
                        contadorParaTablaProductosRentaMes = contadorParaTablaProductosRentaMes + 1
                        arrayContadores.append(contadorParaTablaProductosRentaMes)

                        #info producto
                        codigoProductoRenta = productoRenta[0]
                        cantidadVendidaRenta = productoRenta[1]
                        consultaProductoRenta = ProductosRenta.objects.filter(codigo_producto = codigoProductoRenta)
                        for datoProducto in consultaProductoRenta:
                            nombreRenta = datoProducto.nombre_producto
                            costoRenta = datoProducto.costo_renta
                            imagenRenta = datoProducto.imagen_producto
                        
                        costoTotalRentadoProducto = costoRenta * float(cantidadVendidaRenta)
                        arrayInfoProductoRenta.append([nombreRenta, costoRenta, costoTotalRentadoProducto, imagenRenta])


                    listaFinalProductosRentaMesTabla = zip(listaProductosRentaOrdenadaMayorAMenor, arrayContadores, arrayInfoProductoRenta)
                
                




                    

            return render(request, "17 Informe Ventas/informeDeVentasRangoFechas.html", {"totalCompraFechaRango":totalCompraFechaRango,"comprasProductosRenta":comprasProductosRenta,"comprasProductosVentas":comprasProductosVentas,"numeroComprasRenta":numeroComprasRenta,"numeroComprasVenta":numeroComprasVenta,"numeroComprasGasto":numeroComprasGasto,"totalComprasRenta":totalComprasRenta,"totalComprasVenta":totalComprasVenta,"totalComprasGasto":totalComprasGasto,"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, "notificacionRenta":notificacionRenta,
                                                                                         "fefchaCompletaInicio":fefchaCompletaInicio,"montoIngresoRangoFechaDespues":montoIngresoRangoFechaDespues,"fechaTextoPeriodoAnterior":fechaTextoPeriodoAnterior, "fefchaCompletaFinal":fefchaCompletaFinal,"montoIngresoRangoFecha":montoIngresoRangoFecha,"montoVentasDirectas":montoVentasDirectas,"numeroVentasDirectas":numeroVentasDirectas,"montoCreditos":montoCreditos,"numeroCreditos":numeroCreditos,"montoRentas":montoRentas,"numeroRentas":numeroRentas,"porcentajeRangoFechas":porcentajeRangoFechas,"esMayor":esMayor,"montoIngresoRangoFechaAntes":montoIngresoRangoFechaAntes,"fechaTextoPeriodoDespues":fechaTextoPeriodoDespues,"numeroDiasDiferencia":numeroDiasDiferencia,
                                                                                         "totalEfectivo":totalEfectivo,"totalTarjeta":totalTarjeta,"totalTransferencia":totalTransferencia,
                                                                                         "clientesTops":clientesTops,"clientesTopsModal":clientesTopsModal,
                                                                                         "empleadosTops":empleadosTops, "empleadosTopsModal":empleadosTopsModal,
                                                                                         "listaFinalProductosMesTabla":listaFinalProductosMesTabla,
                                                                                         "listaFinalServiciosMesTabla":listaFinalServiciosMesTabla,
                                                                                         "listaFinalProductosRentaMesTabla":listaFinalProductosRentaMesTabla, "notificacionCita":notificacionCita})
            

        
        
    else:
        return render(request,"1 Login/login.html")

def informeDeSucursal(request):
    if "idSesion" in request.session:

        # Variables de sesión
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']
        idPerfil = idEmpleado
        idConfig = idEmpleado

        

        

        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
        
           #notificacionRentas
        notificacionRenta = notificacionRentas(request)

        #notificacionCitas
        notificacionCita = notificacionCitas(request)

        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)
        
        if request.method == "POST":
            idSucursalInforme = request.POST['idSucursalInforme']
            
            rangoFechaRecibida = False
            if 'fechaInicioRango' in request.POST:
                rangoFechaRecibida = True
                fechaInicioRango = request.POST['fechaInicioRango']
                fechaFinalRango = request.POST['fechaFinalRango']
                
            
            consultaSucursal = Sucursales.objects.filter(id_sucursal = idSucursalInforme)
            for datoConsulta in consultaSucursal:
                nombreSucursal = datoConsulta.nombre
                direccion = datoConsulta.direccion
                telefono = datoConsulta.telefono
                latitud = datoConsulta.latitud
                longitud = datoConsulta.longitud
            
            hoy = datetime.now()
        
            mesdehoynumero = hoy.strftime('%m')
            
            mesesDic = {
                "01":'Enero',
                "02":'Febrero',
                "03":'Marzo',
                "04":'Abril',
                "05":'Mayo',
                "06":'Junio',
                "07":'Julio',
                "08":'Agosto',
                "09":'Septiembre',
                "10":'Octubre',
                "11":'Noviembre',
                "12":'Diciembre'
            }
            
            diasMeses = {
            'Enero':'31',
            'Febrero':'28',
            'Marzo':'31',
            'Abril':'30',
            'Mayo':'31',
            'Junio':'30',
            'Julio':'31',
            'Agosto':'31',
            'Septiembre':'30',
            'Octubre':'31',
            'Noviembre':'30',
            'Diciembre':'31'
            }
            
            #fecha para mes actual en texto
            diadehoy = hoy.strftime('%d')
            mesdehoy = mesesDic[str(mesdehoynumero)]
            añoHoy = hoy.strftime('%Y')
            
            #fecha mes actual en formato
            fechaDiaMesActual = añoHoy+"-"+mesdehoynumero+"-"+diadehoy
            fechaInicioMesActual = añoHoy+"-"+mesdehoynumero+"-01" 
            
            fechaPrimerDiaDelAñoActual = añoHoy +"-01-01"
            fechaUltimoDiaDelAñoActual = añoHoy+"-12-31"
            
            
            #Ingresos totales del mes actual, en, tre entascreditos y rentas
            
            montoIngresoSucursalMes = 0
            
            contadorVentasSucursalMes = 0
            contadorRentasSucursalMes = 0
            contadorCreditosSucursalMes = 0
            
            numeroVentasSucursalMes = 0
            numeroRentasSucursalMes = 0
            numeroCreditosSucursalMes = 0
            
            consultaVentasSucursalMes = Ventas.objects.filter(fecha_venta__range=[fechaInicioMesActual,fechaDiaMesActual], credito="N", sucursal = idSucursalInforme)
            
            if consultaVentasSucursalMes:
                for ventaRealizada in consultaVentasSucursalMes:
                    montoVenta = ventaRealizada.monto_pagar
                    montoIngresoSucursalMes = montoIngresoSucursalMes + montoVenta
                    contadorVentasSucursalMes = contadorVentasSucursalMes + montoVenta
                    numeroVentasSucursalMes = numeroVentasSucursalMes + 1
            
            consultaCreditosSucursalMes = Creditos.objects.filter(fecha_venta_credito__range=[fechaInicioMesActual,fechaDiaMesActual], renta_id__isnull=True, sucursal = idSucursalInforme)
        
            if consultaCreditosSucursalMes:
                for crceditoRealizado in consultaCreditosSucursalMes:
                    montoPagadoCredito = crceditoRealizado.monto_pagado
                    montoIngresoSucursalMes = montoIngresoSucursalMes + montoPagadoCredito
                    contadorRentasSucursalMes = contadorRentasSucursalMes + montoPagadoCredito
                    numeroCreditosSucursalMes = numeroCreditosSucursalMes +1
                    
            consultaRentasMesActual = Rentas.objects.filter(fecha_apartado__range=[fechaInicioMesActual,fechaDiaMesActual])
        
            if consultaRentasMesActual:
                for rentaRealizada in consultaRentasMesActual:
                    empleadoQueRealizo = rentaRealizada.realizado_por_id
                    consultaEmpleado = Empleados.objects.filter(id_empleado = empleadoQueRealizo)
                    for datoEmpleado in consultaEmpleado:
                        idSucursal = datoEmpleado.id_sucursal_id
                    if idSucursal == None:
                        codigosProductosRentados = rentaRealizada.codigos_productos_renta
                        arregloCodigosProductos = codigosProductosRentados.split("-")
                        
                        contadorProductosRentados = 0
                        for producto in arregloCodigosProductos:
                            contadorProductosRentados = contadorProductosRentados + 1
                            strCodigoProducto = str(producto)
                            if contadorProductosRentados == 1:
                                consultaProducto = ProductosRenta.objects.filter(codigo_producto = strCodigoProducto)

                                for datoProducto in consultaProducto:
                                    sucursalProducto = datoProducto.sucursal_id
                                
                                intSucursalInforme = int(idSucursalInforme)
                                if sucursalProducto == intSucursalInforme:
                            
                                    montoPagadoApartado = rentaRealizada.monto_pago_apartado
                                    montoPagadoRestante = rentaRealizada.monto_restante
                                    
                                    sumaPagosRenta = 0
                                    if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                                        sumaPagosRenta = rentaRealizada.monto_total_renta
                                    else: #Si ya se pago el restante
                                        sumaPagosRenta = montoPagadoApartado 
                                    montoIngresoSucursalMes = montoIngresoSucursalMes + sumaPagosRenta

                                    contadorCreditosSucursalMes = contadorCreditosSucursalMes + sumaPagosRenta
                                    numeroRentasSucursalMes = numeroRentasSucursalMes +1
                                    
                    else:
                        intSucursalInforme = int(idSucursalInforme)
                        if idSucursal == intSucursalInforme:
                            
                            montoPagadoApartado = rentaRealizada.monto_pago_apartado
                            montoPagadoRestante = rentaRealizada.monto_restante
                            
                            sumaPagosRenta = 0
                            if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                                sumaPagosRenta = rentaRealizada.monto_total_renta
                            else: #Si ya se pago el restante
                                sumaPagosRenta = montoPagadoApartado
                            montoIngresoSucursalMes = montoIngresoSucursalMes + sumaPagosRenta

                            contadorCreditosSucursalMes = contadorCreditosSucursalMes + sumaPagosRenta
                            numeroRentasSucursalMes = numeroRentasSucursalMes +1
                        
            #Mes anterior
            haceUnMes = hoy - relativedelta(months=1)  #2022-05-07
            mesHaceUnMes = haceUnMes.strftime('%m') #05
            añoHaceUnMes = haceUnMes.strftime('%Y')
            mesHaceUnMesLetra = mesesDic[str(mesHaceUnMes)]
            
            diasDeUltimoMes = diasMeses[str(mesHaceUnMesLetra)]
            
            fechaPrimerDiaMesAnterior = añoHaceUnMes + "-"+mesHaceUnMes+"-01"   
            fechaUltimoDiaMesAnterior = añoHaceUnMes + "-"+mesHaceUnMes+"-"+diasDeUltimoMes 
            
            #Ingresos totales de mes actual, ventas, creditos y rentas
            consultaVentasSucursalMesAnterior = Ventas.objects.filter(fecha_venta__range=[fechaPrimerDiaMesAnterior,fechaUltimoDiaMesAnterior], credito="N", sucursal = idSucursalInforme)
            
            montoIngresoMesSucursalAnterior = 0
            
            if consultaVentasSucursalMesAnterior:
                for ventaRealizada in consultaVentasSucursalMesAnterior:
                    montoVenta = ventaRealizada.monto_pagar
                    montoIngresoMesSucursalAnterior = montoIngresoMesSucursalAnterior + montoVenta
            
            consultaCreditosSucursalMesAnterior = Creditos.objects.filter(fecha_venta_credito__range=[fechaPrimerDiaMesAnterior,fechaUltimoDiaMesAnterior],  renta_id__isnull=True, sucursal = idSucursalInforme)
            
            if consultaCreditosSucursalMesAnterior:
                for crceditoRealizado in consultaCreditosSucursalMesAnterior:
                    montoPagadoCredito = crceditoRealizado.monto_pagado
                    montoIngresoMesSucursalAnterior = montoIngresoMesSucursalAnterior + montoPagadoCredito
                
            consultaRentasSucursalMesAnterior = Rentas.objects.filter(fecha_apartado__range=[fechaPrimerDiaMesAnterior,fechaUltimoDiaMesAnterior])
            
            if consultaRentasSucursalMesAnterior:
                for rentaRealizada in consultaRentasSucursalMesAnterior:
                    empleadoQueRealizo = rentaRealizada.realizado_por_id
                    consultaEmpleado = Empleados.objects.filter(id_empleado = empleadoQueRealizo)
                    for datoEmpleado in consultaEmpleado:
                        idSucursal = datoEmpleado.id_sucursal_id
                    if idSucursal == None:
                        codigosProductosRentados = rentaRealizada.codigos_productos_renta
                        arregloCodigosProductos = codigosProductosRentados.split("-")
                        
                        contadorProductosRentados = 0
                        for producto in arregloCodigosProductos:
                            contadorProductosRentados = contadorProductosRentados + 1
                            strCodigoProducto = str(producto)
                            if contadorProductosRentados == 1:
                                consultaProducto = ProductosRenta.objects.filter(codigo_producto = strCodigoProducto)

                                for datoProducto in consultaProducto:
                                    sucursalProducto = datoProducto.sucursal_id
                                intSucursalInforme = int(idSucursalInforme)
                                if sucursalProducto == intSucursalInforme:
                            
                                    montoPagadoApartado = rentaRealizada.monto_pago_apartado
                                    montoPagadoRestante = rentaRealizada.monto_restante
                                    
                                    sumaPagosRenta = 0
                                    if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                                        sumaPagosRenta = rentaRealizada.monto_total_renta
                                    else: #Si ya se pago el restante
                                        sumaPagosRenta = montoPagadoApartado
                                    montoIngresoMesSucursalAnterior = montoIngresoSucursalMes + sumaPagosRenta

                                  
                                    
                    else:
                        intSucursalInforme = int(idSucursalInforme)
                        if idSucursal == intSucursalInforme:
                            
                            montoPagadoApartado = rentaRealizada.monto_pago_apartado
                            montoPagadoRestante = rentaRealizada.monto_restante
                            
                            sumaPagosRenta = 0
                            if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                                sumaPagosRenta = rentaRealizada.monto_total_renta
                            else: #Si ya se pago el restante
                                sumaPagosRenta = montoPagadoApartado
                            montoIngresoMesSucursalAnterior = montoIngresoSucursalMes + sumaPagosRenta

                            
            #comparativa de ingresos totales mensuales

            esMayor = False

            if montoIngresoMesSucursalAnterior == 0:
                porcentajeIngresosSucursalMes = 100
            else:
                porcentajeIngresosSucursalMes = (montoIngresoSucursalMes / montoIngresoMesSucursalAnterior)
                porcentajeIngresosSucursalMes = porcentajeIngresosSucursalMes - 1
                porcentajeIngresosSucursalMes = porcentajeIngresosSucursalMes *100
                
                
            if porcentajeIngresosSucursalMes > 0:
                esMayor = True
                
            else:
                esMayor = False
            porcentajeIngresosSucursalMes = round(porcentajeIngresosSucursalMes,2)
            
            #Ingresos por mes de la sucursal
            #Fechas para chart de meses
            inicioMesEnero = añoHoy+"-01-01"
            finMesEnero = añoHoy+"-01-31"
            consultaVentasEnero = Ventas.objects.filter(fecha_venta__range=[inicioMesEnero,finMesEnero], credito="N", sucursal = idSucursalInforme)
            montoIngresoEnero = 0
            if consultaVentasEnero:
                for ventaRealizada in consultaVentasEnero:
                    montoVenta = ventaRealizada.monto_pagar
                    montoIngresoEnero = montoIngresoEnero + montoVenta
            consultaCreditosEnero = Creditos.objects.filter(fecha_venta_credito__range=[inicioMesEnero,finMesEnero],  renta_id__isnull=True, sucursal = idSucursalInforme)
            if consultaCreditosEnero:
                for crceditoRealizado in consultaCreditosEnero:
                    montoPagadoCredito = crceditoRealizado.monto_pagado
                    montoIngresoEnero = montoIngresoEnero + montoPagadoCredito
            consultaRentasEnero = Rentas.objects.filter(fecha_apartado__range=[inicioMesEnero,finMesEnero])
            if  consultaRentasEnero:
                for rentaRealizada in consultaRentasFebrero:
                    empleadoQueRealizo = rentaRealizada.realizado_por_id
                    consultaEmpleado = Empleados.objects.filter(id_empleado = empleadoQueRealizo)
                    for datoEmpleado in consultaEmpleado:
                        idSucursal = datoEmpleado.id_sucursal_id
                    
                    if idSucursal == None:
                        codigosProductosRentados = rentaRealizada.codigos_productos_renta
                        arregloCodigosProductos = codigosProductosRentados.split("-")
                        
                        contadorProductosRentados = 0
                        for producto in arregloCodigosProductos:
                            contadorProductosRentados = contadorProductosRentados + 1
                            strCodigoProducto = str(producto)
                            if contadorProductosRentados == 1:
                                consultaProducto = ProductosRenta.objects.filter(codigo_producto = strCodigoProducto)

                                for datoProducto in consultaProducto:
                                    sucursalProducto = datoProducto.sucursal_id
                                intSucursalInforme = int(idSucursalInforme)
                                if sucursalProducto == intSucursalInforme:
                            
                                    montoPagadoApartado = rentaRealizada.monto_pago_apartado
                                    montoPagadoRestante = rentaRealizada.monto_restante
                                    
                                    sumaPagosRenta = 0
                                    if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                                        sumaPagosRenta = rentaRealizada.monto_total_renta
                                    else: #Si ya se pago el restante
                                        sumaPagosRenta = montoPagadoApartado
                                    montoIngresoEnero = montoIngresoEnero + sumaPagosRenta
                    else:
                        intSucursalInforme = int(idSucursalInforme)
                        if idSucursal == intSucursalInforme:
                            montoPagadoApartado = rentaRealizada.monto_pago_apartado
                            montoPagadoRestante = rentaRealizada.monto_restante
                            sumaPagosRenta = 0
                            if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                                sumaPagosRenta = rentaRealizada.monto_total_renta
                            else: #Si ya se pago el restante
                                sumaPagosRenta = montoPagadoApartado
                            montoIngresoEnero = montoIngresoEnero + sumaPagosRenta
        
        
        
            inicioMesFebrero = añoHoy+"-02-01"
            finMesFebrero = añoHoy+"-02-28"
            consultaVentasFebrero = Ventas.objects.filter(fecha_venta__range=[inicioMesFebrero,finMesFebrero], credito="N", sucursal = idSucursalInforme)
            montoIngresoFebrero = 0
            if consultaVentasFebrero:
                for ventaRealizada in consultaVentasFebrero:
                    montoVenta = ventaRealizada.monto_pagar
                    montoIngresoFebrero = montoIngresoFebrero + montoVenta
            consultaCreditosFebrero = Creditos.objects.filter(fecha_venta_credito__range=[inicioMesFebrero,finMesFebrero],  renta_id__isnull=True, sucursal = idSucursalInforme)
            if consultaCreditosFebrero:
                for crceditoRealizado in consultaCreditosFebrero:
                    montoPagadoCredito = crceditoRealizado.monto_pagado
                    montoIngresoFebrero = montoIngresoFebrero + montoPagadoCredito
            consultaRentasFebrero = Rentas.objects.filter(fecha_apartado__range=[inicioMesFebrero,finMesFebrero])
            if consultaRentasFebrero:
                for rentaRealizada in consultaRentasFebrero:
                    empleadoQueRealizo = rentaRealizada.realizado_por_id
                    consultaEmpleado = Empleados.objects.filter(id_empleado = empleadoQueRealizo)
                    for datoEmpleado in consultaEmpleado:
                        idSucursal = datoEmpleado.id_sucursal_id
                    
                    if idSucursal == None:
                        codigosProductosRentados = rentaRealizada.codigos_productos_renta
                        arregloCodigosProductos = codigosProductosRentados.split("-")
                        
                        contadorProductosRentados = 0
                        for producto in arregloCodigosProductos:
                            contadorProductosRentados = contadorProductosRentados + 1
                            strCodigoProducto = str(producto)
                            if contadorProductosRentados == 1:
                                consultaProducto = ProductosRenta.objects.filter(codigo_producto = strCodigoProducto)

                                for datoProducto in consultaProducto:
                                    sucursalProducto = datoProducto.sucursal_id
                                intSucursalInforme = int(idSucursalInforme)
                                if sucursalProducto == intSucursalInforme:
                            
                                    montoPagadoApartado = rentaRealizada.monto_pago_apartado
                                    montoPagadoRestante = rentaRealizada.monto_restante
                                    
                                    sumaPagosRenta = 0
                                    if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                                        sumaPagosRenta = rentaRealizada.monto_total_renta
                                    else: #Si ya se pago el restante
                                        sumaPagosRenta = montoPagadoApartado
                                    montoIngresoFebrero = montoIngresoFebrero + sumaPagosRenta
                    else:
                        intSucursalInforme = int(idSucursalInforme)
                        if idSucursal == intSucursalInforme:
                            montoPagadoApartado = rentaRealizada.monto_pago_apartado
                            montoPagadoRestante = rentaRealizada.monto_restante
                            sumaPagosRenta = 0
                            if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                                sumaPagosRenta = rentaRealizada.monto_total_renta
                            else: #Si ya se pago el restante
                                sumaPagosRenta = montoPagadoApartado
                            montoIngresoFebrero = montoIngresoFebrero + sumaPagosRenta
            
            inicioMesMarzo = añoHoy+"-03-01"
            finMesMarzo = añoHoy+"-03-31"
            consultaVentasMarzo = Ventas.objects.filter(fecha_venta__range=[inicioMesMarzo,finMesMarzo], credito="N", sucursal = idSucursalInforme)
            montoIngresoMarzo = 0
            if consultaVentasMarzo:
                for ventaRealizada in consultaVentasMarzo:
                    montoVenta = ventaRealizada.monto_pagar
                    montoIngresoMarzo = montoIngresoMarzo + montoVenta
            consultaCreditosMarzo = Creditos.objects.filter(fecha_venta_credito__range=[inicioMesMarzo,finMesMarzo],  renta_id__isnull=True, sucursal = idSucursalInforme)
            if consultaCreditosMarzo:
                for crceditoRealizado in consultaCreditosMarzo:
                    montoPagadoCredito = crceditoRealizado.monto_pagado
                    montoIngresoMarzo = montoIngresoMarzo + montoPagadoCredito
            consultaRentasMarzo = Rentas.objects.filter(fecha_apartado__range=[inicioMesMarzo,finMesMarzo])
            if consultaRentasMarzo:
                for rentaRealizada in consultaRentasMarzo:
                    empleadoQueRealizo = rentaRealizada.realizado_por_id
                    consultaEmpleado = Empleados.objects.filter(id_empleado = empleadoQueRealizo)
                    for datoEmpleado in consultaEmpleado:
                        idSucursal = datoEmpleado.id_sucursal_id
                    
                    if idSucursal == None:
                        codigosProductosRentados = rentaRealizada.codigos_productos_renta
                        arregloCodigosProductos = codigosProductosRentados.split("-")
                        
                        contadorProductosRentados = 0
                        for producto in arregloCodigosProductos:
                            contadorProductosRentados = contadorProductosRentados + 1
                            strCodigoProducto = str(producto)
                            if contadorProductosRentados == 1:
                                consultaProducto = ProductosRenta.objects.filter(codigo_producto = strCodigoProducto)

                                for datoProducto in consultaProducto:
                                    sucursalProducto = datoProducto.sucursal_id
                                intSucursalInforme = int(idSucursalInforme)
                                if sucursalProducto == intSucursalInforme:
                            
                                    montoPagadoApartado = rentaRealizada.monto_pago_apartado
                                    montoPagadoRestante = rentaRealizada.monto_restante
                                    
                                    sumaPagosRenta = 0
                                    if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                                        sumaPagosRenta = rentaRealizada.monto_total_renta
                                    else: #Si ya se pago el restante
                                        sumaPagosRenta = montoPagadoApartado
                                    montoIngresoMarzo = montoIngresoMarzo + sumaPagosRenta
                    else:
                        intSucursalInforme = int(idSucursalInforme)
                        if idSucursal == intSucursalInforme:
                            montoPagadoApartado = rentaRealizada.monto_pago_apartado
                            montoPagadoRestante = rentaRealizada.monto_restante
                            sumaPagosRenta = 0
                            if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                                sumaPagosRenta = rentaRealizada.monto_total_renta
                            else: #Si ya se pago el restante
                                sumaPagosRenta = montoPagadoApartado
                            montoIngresoMarzo = montoIngresoMarzo + sumaPagosRenta
            
            inicioMesAbril = añoHoy+"-04-01"
            finMesAbril = añoHoy+"-04-30"
            consultaVentasAbril = Ventas.objects.filter(fecha_venta__range=[inicioMesAbril,finMesAbril], credito="N", sucursal = idSucursalInforme)
            montoIngresoAbril = 0
            if consultaVentasAbril:
                for ventaRealizada in consultaVentasAbril:
                    montoVenta = ventaRealizada.monto_pagar
                    montoIngresoAbril = montoIngresoAbril + montoVenta
            consultaCreditosAbril = Creditos.objects.filter(fecha_venta_credito__range=[inicioMesAbril,finMesAbril],  renta_id__isnull=True, sucursal = idSucursalInforme)
            if consultaCreditosAbril:
                for crceditoRealizado in consultaCreditosAbril:
                    montoPagadoCredito = crceditoRealizado.monto_pagado
                    montoIngresoAbril = montoIngresoAbril + montoPagadoCredito
            consultaRentasAbril = Rentas.objects.filter(fecha_apartado__range=[inicioMesAbril,finMesAbril])
            if consultaRentasAbril:
                for rentaRealizada in consultaRentasAbril:
                    empleadoQueRealizo = rentaRealizada.realizado_por_id
                    consultaEmpleado = Empleados.objects.filter(id_empleado = empleadoQueRealizo)
                    for datoEmpleado in consultaEmpleado:
                        idSucursal = datoEmpleado.id_sucursal_id
                    
                    if idSucursal == None:
                        codigosProductosRentados = rentaRealizada.codigos_productos_renta
                        arregloCodigosProductos = codigosProductosRentados.split("-")
                        
                        contadorProductosRentados = 0
                        for producto in arregloCodigosProductos:
                            contadorProductosRentados = contadorProductosRentados + 1
                            strCodigoProducto = str(producto)
                            if contadorProductosRentados == 1:
                                consultaProducto = ProductosRenta.objects.filter(codigo_producto = strCodigoProducto)

                                for datoProducto in consultaProducto:
                                    sucursalProducto = datoProducto.sucursal_id
                                intSucursalInforme = int(idSucursalInforme)
                                if sucursalProducto == intSucursalInforme:
                            
                                    montoPagadoApartado = rentaRealizada.monto_pago_apartado
                                    montoPagadoRestante = rentaRealizada.monto_restante
                                    
                                    sumaPagosRenta = 0
                                    if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                                        sumaPagosRenta = rentaRealizada.monto_total_renta
                                    else: #Si ya se pago el restante
                                        sumaPagosRenta = montoPagadoApartado
                                    montoIngresoAbril = montoIngresoAbril + sumaPagosRenta
                    else:
                        intSucursalInforme = int(idSucursalInforme)
                        if idSucursal == intSucursalInforme:
                            montoPagadoApartado = rentaRealizada.monto_pago_apartado
                            montoPagadoRestante = rentaRealizada.monto_restante
                            sumaPagosRenta = 0
                            if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                                sumaPagosRenta = rentaRealizada.monto_total_renta
                            else: #Si ya se pago el restante
                                sumaPagosRenta = montoPagadoApartado
                            montoIngresoAbril = montoIngresoAbril + sumaPagosRenta
            
            inicioMesMayo = añoHoy+"-05-01"
            finMesMayo = añoHoy+"-05-31"
            consultaVentasMayo = Ventas.objects.filter(fecha_venta__range=[inicioMesMayo,finMesMayo], credito="N", sucursal = idSucursalInforme)
            montoIngresoMayo = 0
            if consultaVentasMayo:
                for ventaRealizada in consultaVentasMayo:
                    montoVenta = ventaRealizada.monto_pagar
                    montoIngresoMayo = montoIngresoMayo + montoVenta
            consultaCreditosMayo = Creditos.objects.filter(fecha_venta_credito__range=[inicioMesMayo,finMesMayo],  renta_id__isnull=True, sucursal = idSucursalInforme)
            if consultaCreditosMayo:
                for crceditoRealizado in consultaCreditosMayo:
                    montoPagadoCredito = crceditoRealizado.monto_pagado
                    montoIngresoMayo = montoIngresoMayo + montoPagadoCredito
            consultaRentasMayo = Rentas.objects.filter(fecha_apartado__range=[inicioMesMayo,finMesMayo])
            if consultaRentasMayo:
                for rentaRealizada in consultaRentasMayo:
                    empleadoQueRealizo = rentaRealizada.realizado_por_id
                    consultaEmpleado = Empleados.objects.filter(id_empleado = empleadoQueRealizo)
                    for datoEmpleado in consultaEmpleado:
                        idSucursal = datoEmpleado.id_sucursal_id
                    
                    if idSucursal == None:
                        codigosProductosRentados = rentaRealizada.codigos_productos_renta
                        arregloCodigosProductos = codigosProductosRentados.split("-")
                        
                        contadorProductosRentados = 0
                        for producto in arregloCodigosProductos:
                            contadorProductosRentados = contadorProductosRentados + 1
                            strCodigoProducto = str(producto)
                            if contadorProductosRentados == 1:
                                consultaProducto = ProductosRenta.objects.filter(codigo_producto = strCodigoProducto)

                                for datoProducto in consultaProducto:
                                    sucursalProducto = datoProducto.sucursal_id
                                intSucursalInforme = int(idSucursalInforme)
                                if sucursalProducto == intSucursalInforme:
                            
                                    montoPagadoApartado = rentaRealizada.monto_pago_apartado
                                    montoPagadoRestante = rentaRealizada.monto_restante
                                    
                                    sumaPagosRenta = 0
                                    if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                                        sumaPagosRenta = rentaRealizada.monto_total_renta
                                    else: #Si ya se pago el restante
                                        sumaPagosRenta = montoPagadoApartado
                                    montoIngresoMayo = montoIngresoMayo + sumaPagosRenta
                    else:
                        intSucursalInforme = int(idSucursalInforme)
                        if idSucursal == intSucursalInforme:
                            montoPagadoApartado = rentaRealizada.monto_pago_apartado
                            montoPagadoRestante = rentaRealizada.monto_restante
                            sumaPagosRenta = 0
                            if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                                sumaPagosRenta = rentaRealizada.monto_total_renta
                            else: #Si ya se pago el restante
                                sumaPagosRenta = montoPagadoApartado
                            montoIngresoMayo = montoIngresoMayo + sumaPagosRenta
            
            inicioMesJunio = añoHoy+"-06-01"
            finMesJunio = añoHoy+"-06-30"
            consultaVentasJunio = Ventas.objects.filter(fecha_venta__range=[inicioMesJunio,finMesJunio], credito="N", sucursal = idSucursalInforme)
            montoIngresoJunio = 0
            if consultaVentasJunio:
                for ventaRealizada in consultaVentasJunio:
                    montoVenta = ventaRealizada.monto_pagar
                    montoIngresoJunio = montoIngresoJunio + montoVenta
            consultaCreditosJunio = Creditos.objects.filter(fecha_venta_credito__range=[inicioMesJunio,finMesJunio],  renta_id__isnull=True, sucursal = idSucursalInforme)
            if consultaCreditosJunio:
                for crceditoRealizado in consultaCreditosJunio:
                    montoPagadoCredito = crceditoRealizado.monto_pagado
                    montoIngresoJunio = montoIngresoJunio + montoPagadoCredito
            consultaRentasJunio = Rentas.objects.filter(fecha_apartado__range=[inicioMesJunio,finMesJunio])
            if consultaRentasJunio:
                for rentaRealizada in consultaRentasJunio:
                    empleadoQueRealizo = rentaRealizada.realizado_por_id
                    consultaEmpleado = Empleados.objects.filter(id_empleado = empleadoQueRealizo)
                    for datoEmpleado in consultaEmpleado:
                        idSucursal = datoEmpleado.id_sucursal_id
                    
                    if idSucursal == None:
                        codigosProductosRentados = rentaRealizada.codigos_productos_renta
                        arregloCodigosProductos = codigosProductosRentados.split("-")
                        
                        contadorProductosRentados = 0
                        for producto in arregloCodigosProductos:
                            contadorProductosRentados = contadorProductosRentados + 1
                            strCodigoProducto = str(producto)
                            if contadorProductosRentados == 1:
                                consultaProducto = ProductosRenta.objects.filter(codigo_producto = strCodigoProducto)

                                for datoProducto in consultaProducto:
                                    sucursalProducto = datoProducto.sucursal_id
                                intSucursalInforme = int(idSucursalInforme)
                                if sucursalProducto == intSucursalInforme:
                            
                                    montoPagadoApartado = rentaRealizada.monto_pago_apartado
                                    montoPagadoRestante = rentaRealizada.monto_restante
                                    
                                    sumaPagosRenta = 0
                                    if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                                        sumaPagosRenta = rentaRealizada.monto_total_renta
                                    else: #Si ya se pago el restante
                                        sumaPagosRenta = montoPagadoApartado
                                    montoIngresoJunio = montoIngresoJunio + sumaPagosRenta
                    else:
                        intSucursalInforme = int(idSucursalInforme)
                        if idSucursal == intSucursalInforme:
                            montoPagadoApartado = rentaRealizada.monto_pago_apartado
                            montoPagadoRestante = rentaRealizada.monto_restante
                            sumaPagosRenta = 0
                            if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                                sumaPagosRenta = rentaRealizada.monto_total_renta
                            else: #Si ya se pago el restante
                                sumaPagosRenta = montoPagadoApartado
                            montoIngresoJunio = montoIngresoJunio + sumaPagosRenta
            
            inicioMesJulio = añoHoy+"-07-01"
            finMesJulio = añoHoy+"-07-31"
            consultaVentasJulio = Ventas.objects.filter(fecha_venta__range=[inicioMesJulio,finMesJulio], credito="N", sucursal = idSucursalInforme)
            montoIngresoJulio = 0
            if consultaVentasJulio:
                for ventaRealizada in consultaVentasJulio:
                    montoVenta = ventaRealizada.monto_pagar
                    montoIngresoJulio = montoIngresoJulio + montoVenta
            consultaCreditosJulio = Creditos.objects.filter(fecha_venta_credito__range=[inicioMesJulio,finMesJulio],  renta_id__isnull=True, sucursal = idSucursalInforme)
            if consultaCreditosJulio:
                for crceditoRealizado in consultaCreditosJulio:
                    montoPagadoCredito = crceditoRealizado.monto_pagado
                    montoIngresoJulio = montoIngresoJulio + montoPagadoCredito
            consultaRentasJulio = Rentas.objects.filter(fecha_apartado__range=[inicioMesJulio,finMesJulio])
            if consultaRentasJulio:
                for rentaRealizada in consultaRentasJulio:
                    empleadoQueRealizo = rentaRealizada.realizado_por_id
                    consultaEmpleado = Empleados.objects.filter(id_empleado = empleadoQueRealizo)
                    for datoEmpleado in consultaEmpleado:
                        idSucursal = datoEmpleado.id_sucursal_id
                    
                    if idSucursal == None:
                        codigosProductosRentados = rentaRealizada.codigos_productos_renta
                        arregloCodigosProductos = codigosProductosRentados.split("-")
                        
                        contadorProductosRentados = 0
                        for producto in arregloCodigosProductos:
                            contadorProductosRentados = contadorProductosRentados + 1
                            strCodigoProducto = str(producto)
                            if contadorProductosRentados == 1:
                                consultaProducto = ProductosRenta.objects.filter(codigo_producto = strCodigoProducto)

                                for datoProducto in consultaProducto:
                                    sucursalProducto = datoProducto.sucursal_id
                                intSucursalInforme = int(idSucursalInforme)
                                if sucursalProducto == intSucursalInforme:
                            
                                    montoPagadoApartado = rentaRealizada.monto_pago_apartado
                                    montoPagadoRestante = rentaRealizada.monto_restante
                                    
                                    sumaPagosRenta = 0
                                    if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                                        sumaPagosRenta = rentaRealizada.monto_total_renta
                                    else: #Si ya se pago el restante
                                        sumaPagosRenta = montoPagadoApartado
                                    montoIngresoJulio = montoIngresoJulio + sumaPagosRenta
                    else:
                        intSucursalInforme = int(idSucursalInforme)
                        if idSucursal == intSucursalInforme:
                            montoPagadoApartado = rentaRealizada.monto_pago_apartado
                            montoPagadoRestante = rentaRealizada.monto_restante
                            sumaPagosRenta = 0
                            if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                                sumaPagosRenta = rentaRealizada.monto_total_renta
                            else: #Si ya se pago el restante
                                sumaPagosRenta = montoPagadoApartado
                            montoIngresoJulio = montoIngresoJulio + sumaPagosRenta
            
            inicioMesAgosto = añoHoy+"-08-01"
            finMesAgosto = añoHoy+"-08-31"
            consultaVentasAgosto = Ventas.objects.filter(fecha_venta__range=[inicioMesAgosto,finMesAgosto], credito="N", sucursal = idSucursalInforme)
            montoIngresoAgosto = 0
            if consultaVentasAgosto:
                for ventaRealizada in consultaVentasAgosto:
                    montoVenta = ventaRealizada.monto_pagar
                    montoIngresoAgosto = montoIngresoAgosto + montoVenta
            consultaCreditosAgosto = Creditos.objects.filter(fecha_venta_credito__range=[inicioMesAgosto,finMesAgosto],  renta_id__isnull=True, sucursal = idSucursalInforme)
            if consultaCreditosAgosto:
                for crceditoRealizado in consultaCreditosAgosto:
                    montoPagadoCredito = crceditoRealizado.monto_pagado
                    montoIngresoAgosto = montoIngresoAgosto + montoPagadoCredito
            consultaRentasAgosto = Rentas.objects.filter(fecha_apartado__range=[inicioMesAgosto,finMesAgosto])
            if consultaRentasAgosto:
                for rentaRealizada in consultaRentasAgosto:
                    empleadoQueRealizo = rentaRealizada.realizado_por_id
                    consultaEmpleado = Empleados.objects.filter(id_empleado = empleadoQueRealizo)
                    for datoEmpleado in consultaEmpleado:
                        idSucursal = datoEmpleado.id_sucursal_id
                    
                    if idSucursal == None:
                        codigosProductosRentados = rentaRealizada.codigos_productos_renta
                        arregloCodigosProductos = codigosProductosRentados.split("-")
                        
                        contadorProductosRentados = 0
                        for producto in arregloCodigosProductos:
                            contadorProductosRentados = contadorProductosRentados + 1
                            strCodigoProducto = str(producto)
                            if contadorProductosRentados == 1:
                                consultaProducto = ProductosRenta.objects.filter(codigo_producto = strCodigoProducto)

                                for datoProducto in consultaProducto:
                                    sucursalProducto = datoProducto.sucursal_id
                                intSucursalInforme = int(idSucursalInforme)
                                if sucursalProducto == intSucursalInforme:
                            
                                    montoPagadoApartado = rentaRealizada.monto_pago_apartado
                                    montoPagadoRestante = rentaRealizada.monto_restante
                                    
                                    sumaPagosRenta = 0
                                    if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                                        sumaPagosRenta = rentaRealizada.monto_total_renta
                                    else: #Si ya se pago el restante
                                        sumaPagosRenta = montoPagadoApartado 
                                    montoIngresoAgosto = montoIngresoAgosto + sumaPagosRenta
                    else:
                        intSucursalInforme = int(idSucursalInforme)
                        if idSucursal == intSucursalInforme:
                            montoPagadoApartado = rentaRealizada.monto_pago_apartado
                            montoPagadoRestante = rentaRealizada.monto_restante
                            sumaPagosRenta = 0
                            if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                                sumaPagosRenta = rentaRealizada.monto_total_renta
                            else: #Si ya se pago el restante
                                sumaPagosRenta = montoPagadoApartado
                            montoIngresoAgosto = montoIngresoAgosto + sumaPagosRenta
            
            inicioMesSeptiembre = añoHoy+"-09-01"
            finMesSeptiembre = añoHoy+"-09-30"
            consultaVentasSeptiembre = Ventas.objects.filter(fecha_venta__range=[inicioMesSeptiembre,finMesSeptiembre], credito="N", sucursal = idSucursalInforme)
            montoIngresoSeptiembre = 0
            if consultaVentasSeptiembre:
                for ventaRealizada in consultaVentasSeptiembre:
                    montoVenta = ventaRealizada.monto_pagar
                    montoIngresoSeptiembre = montoIngresoSeptiembre + montoVenta
            consultaCreditosSeptiembre = Creditos.objects.filter(fecha_venta_credito__range=[inicioMesSeptiembre,finMesSeptiembre],  renta_id__isnull=True, sucursal = idSucursalInforme)
            if consultaCreditosSeptiembre:
                for crceditoRealizado in consultaCreditosSeptiembre:
                    montoPagadoCredito = crceditoRealizado.monto_pagado
                    montoIngresoSeptiembre = montoIngresoSeptiembre + montoPagadoCredito
            consultaRentasSeptiembre = Rentas.objects.filter(fecha_apartado__range=[inicioMesSeptiembre,finMesSeptiembre])
            if consultaRentasSeptiembre:
                for rentaRealizada in consultaRentasSeptiembre:
                    empleadoQueRealizo = rentaRealizada.realizado_por_id
                    consultaEmpleado = Empleados.objects.filter(id_empleado = empleadoQueRealizo)
                    for datoEmpleado in consultaEmpleado:
                        idSucursal = datoEmpleado.id_sucursal_id
                    
                    if idSucursal == None:
                        codigosProductosRentados = rentaRealizada.codigos_productos_renta
                        arregloCodigosProductos = codigosProductosRentados.split("-")
                        
                        contadorProductosRentados = 0
                        for producto in arregloCodigosProductos:
                            contadorProductosRentados = contadorProductosRentados + 1
                            strCodigoProducto = str(producto)
                            if contadorProductosRentados == 1:
                                consultaProducto = ProductosRenta.objects.filter(codigo_producto = strCodigoProducto)

                                for datoProducto in consultaProducto:
                                    sucursalProducto = datoProducto.sucursal_id
                                intSucursalInforme = int(idSucursalInforme)
                                if sucursalProducto == intSucursalInforme:
                            
                                    montoPagadoApartado = rentaRealizada.monto_pago_apartado
                                    montoPagadoRestante = rentaRealizada.monto_restante
                                    
                                    sumaPagosRenta = 0
                                    if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                                        sumaPagosRenta = rentaRealizada.monto_total_renta
                                    else: #Si ya se pago el restante
                                        sumaPagosRenta = montoPagadoApartado
                                    montoIngresoSeptiembre = montoIngresoSeptiembre + sumaPagosRenta
                    else:
                        intSucursalInforme = int(idSucursalInforme)
                        if idSucursal == intSucursalInforme:
                            montoPagadoApartado = rentaRealizada.monto_pago_apartado
                            montoPagadoRestante = rentaRealizada.monto_restante
                            sumaPagosRenta = 0
                            if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                                sumaPagosRenta = rentaRealizada.monto_total_renta
                            else: #Si ya se pago el restante
                                sumaPagosRenta = montoPagadoApartado
                            montoIngresoSeptiembre = montoIngresoSeptiembre + sumaPagosRenta
            
            inicioMesOctubre = añoHoy+"-10-01"
            finMesOctubre = añoHoy+"-10-31"
            consultaVentasOctubre = Ventas.objects.filter(fecha_venta__range=[inicioMesOctubre,finMesOctubre], credito="N", sucursal = idSucursalInforme)
            montoIngresoOctubre = 0
            if consultaVentasOctubre:
                for ventaRealizada in consultaVentasOctubre:
                    montoVenta = ventaRealizada.monto_pagar
                    montoIngresoOctubre = montoIngresoOctubre + montoVenta
            consultaCreditosOctubre = Creditos.objects.filter(fecha_venta_credito__range=[inicioMesOctubre,finMesOctubre],  renta_id__isnull=True, sucursal = idSucursalInforme)
            if consultaCreditosOctubre:
                for crceditoRealizado in consultaCreditosOctubre:
                    montoPagadoCredito = crceditoRealizado.monto_pagado
                    montoIngresoOctubre = montoIngresoOctubre + montoPagadoCredito
            consultaRentasOctubre = Rentas.objects.filter(fecha_apartado__range=[inicioMesOctubre,finMesOctubre])
            if consultaRentasOctubre:
                for rentaRealizada in consultaRentasOctubre:
                    empleadoQueRealizo = rentaRealizada.realizado_por_id
                    consultaEmpleado = Empleados.objects.filter(id_empleado = empleadoQueRealizo)
                    for datoEmpleado in consultaEmpleado:
                        idSucursal = datoEmpleado.id_sucursal_id
                    
                    if idSucursal == None:
                        codigosProductosRentados = rentaRealizada.codigos_productos_renta
                        arregloCodigosProductos = codigosProductosRentados.split("-")
                        
                        contadorProductosRentados = 0
                        for producto in arregloCodigosProductos:
                            contadorProductosRentados = contadorProductosRentados + 1
                            strCodigoProducto = str(producto)
                            if contadorProductosRentados == 1:
                                consultaProducto = ProductosRenta.objects.filter(codigo_producto = strCodigoProducto)

                                for datoProducto in consultaProducto:
                                    sucursalProducto = datoProducto.sucursal_id
                                intSucursalInforme = int(idSucursalInforme)
                                if sucursalProducto == intSucursalInforme:
                            
                                    montoPagadoApartado = rentaRealizada.monto_pago_apartado
                                    montoPagadoRestante = rentaRealizada.monto_restante
                                    
                                    sumaPagosRenta = 0
                                    if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                                        sumaPagosRenta = rentaRealizada.monto_total_renta
                                    else: #Si ya se pago el restante
                                        sumaPagosRenta = montoPagadoApartado 
                                    montoIngresoOctubre = montoIngresoOctubre + sumaPagosRenta
                    else:
                        intSucursalInforme = int(idSucursalInforme)
                        if idSucursal == intSucursalInforme:
                            montoPagadoApartado = rentaRealizada.monto_pago_apartado
                            montoPagadoRestante = rentaRealizada.monto_restante
                            sumaPagosRenta = 0
                            if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                                sumaPagosRenta = rentaRealizada.monto_total_renta
                            else: #Si ya se pago el restante
                                sumaPagosRenta = montoPagadoApartado
                            montoIngresoOctubre = montoIngresoOctubre + sumaPagosRenta
            
            inicioMesNoviembre = añoHoy+"-11-01"
            finMesNoviembre = añoHoy+"-11-30"
            consultaVentasNoviembre = Ventas.objects.filter(fecha_venta__range=[inicioMesNoviembre,finMesNoviembre], credito="N", sucursal = idSucursalInforme)
            montoIngresoNoviembre = 0
            if consultaVentasNoviembre:
                for ventaRealizada in consultaVentasNoviembre:
                    montoVenta = ventaRealizada.monto_pagar
                    montoIngresoNoviembre = montoIngresoNoviembre + montoVenta
            consultaCreditosNoviembre = Creditos.objects.filter(fecha_venta_credito__range=[inicioMesNoviembre,finMesNoviembre],  renta_id__isnull=True, sucursal = idSucursalInforme)
            if consultaCreditosNoviembre:
                for crceditoRealizado in consultaCreditosNoviembre:
                    montoPagadoCredito = crceditoRealizado.monto_pagado
                    montoIngresoNoviembre = montoIngresoNoviembre + montoPagadoCredito
            consultaRentasNoviembre = Rentas.objects.filter(fecha_apartado__range=[inicioMesNoviembre,finMesNoviembre])
            if consultaRentasNoviembre:
                for rentaRealizada in consultaRentasNoviembre:
                    empleadoQueRealizo = rentaRealizada.realizado_por_id
                    consultaEmpleado = Empleados.objects.filter(id_empleado = empleadoQueRealizo)
                    for datoEmpleado in consultaEmpleado:
                        idSucursal = datoEmpleado.id_sucursal_id
                    
                    if idSucursal == None:
                        codigosProductosRentados = rentaRealizada.codigos_productos_renta
                        arregloCodigosProductos = codigosProductosRentados.split("-")
                        
                        contadorProductosRentados = 0
                        for producto in arregloCodigosProductos:
                            contadorProductosRentados = contadorProductosRentados + 1
                            strCodigoProducto = str(producto)
                            if contadorProductosRentados == 1:
                                consultaProducto = ProductosRenta.objects.filter(codigo_producto = strCodigoProducto)

                                for datoProducto in consultaProducto:
                                    sucursalProducto = datoProducto.sucursal_id
                                intSucursalInforme = int(idSucursalInforme)
                                if sucursalProducto == intSucursalInforme:
                            
                                    montoPagadoApartado = rentaRealizada.monto_pago_apartado
                                    montoPagadoRestante = rentaRealizada.monto_restante
                                    
                                    sumaPagosRenta = 0
                                    if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                                        sumaPagosRenta = rentaRealizada.monto_total_renta
                                    else: #Si ya se pago el restante
                                        sumaPagosRenta = montoPagadoApartado
                                    montoIngresoNoviembre = montoIngresoNoviembre + sumaPagosRenta
                    else:
                        intSucursalInforme = int(idSucursalInforme)
                        if idSucursal == intSucursalInforme:
                            montoPagadoApartado = rentaRealizada.monto_pago_apartado
                            montoPagadoRestante = rentaRealizada.monto_restante
                            sumaPagosRenta = 0
                            if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                                sumaPagosRenta = rentaRealizada.monto_total_renta
                            else: #Si ya se pago el restante
                                sumaPagosRenta = montoPagadoApartado
                            montoIngresoNoviembre = montoIngresoNoviembre + sumaPagosRenta
            
            inicioMesDiciembre = añoHoy+"-12-01"
            finMesDiciembre = añoHoy+"-12-31"
            consultaVentasDiciembre = Ventas.objects.filter(fecha_venta__range=[inicioMesDiciembre,finMesDiciembre], credito="N", sucursal = idSucursalInforme)
            montoIngresoDiciembre = 0
            if consultaVentasDiciembre:
                for ventaRealizada in consultaVentasDiciembre:
                    montoVenta = ventaRealizada.monto_pagar
                    montoIngresoDiciembre = montoIngresoDiciembre + montoVenta
            consultaCreditosDiciembre = Creditos.objects.filter(fecha_venta_credito__range=[inicioMesDiciembre,finMesDiciembre],  renta_id__isnull=True, sucursal = idSucursalInforme)
            if consultaCreditosDiciembre:
                for crceditoRealizado in consultaCreditosDiciembre:
                    montoPagadoCredito = crceditoRealizado.monto_pagado
                    montoIngresoDiciembre = montoIngresoDiciembre + montoPagadoCredito
            consultaRentasDiciembre = Rentas.objects.filter(fecha_apartado__range=[inicioMesDiciembre,finMesDiciembre])
            if consultaRentasDiciembre:
                for rentaRealizada in consultaRentasDiciembre:
                    empleadoQueRealizo = rentaRealizada.realizado_por_id
                    consultaEmpleado = Empleados.objects.filter(id_empleado = empleadoQueRealizo)
                    for datoEmpleado in consultaEmpleado:
                        idSucursal = datoEmpleado.id_sucursal_id
                    
                    if idSucursal == None:
                        codigosProductosRentados = rentaRealizada.codigos_productos_renta
                        arregloCodigosProductos = codigosProductosRentados.split("-")
                        
                        contadorProductosRentados = 0
                        for producto in arregloCodigosProductos:
                            contadorProductosRentados = contadorProductosRentados + 1
                            strCodigoProducto = str(producto)
                            if contadorProductosRentados == 1:
                                consultaProducto = ProductosRenta.objects.filter(codigo_producto = strCodigoProducto)

                                for datoProducto in consultaProducto:
                                    sucursalProducto = datoProducto.sucursal_id
                                intSucursalInforme = int(idSucursalInforme)
                                if sucursalProducto == intSucursalInforme:
                            
                                    montoPagadoApartado = rentaRealizada.monto_pago_apartado
                                    montoPagadoRestante = rentaRealizada.monto_restante
                                    
                                    sumaPagosRenta = 0
                                    if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                                        sumaPagosRenta = rentaRealizada.monto_total_renta
                                    else: #Si ya se pago el restante
                                        sumaPagosRenta = montoPagadoApartado
                                    montoIngresoDiciembre = montoIngresoDiciembre + sumaPagosRenta
                    else:
                        intSucursalInforme = int(idSucursalInforme)
                        if idSucursal == intSucursalInforme:
                            montoPagadoApartado = rentaRealizada.monto_pago_apartado
                            montoPagadoRestante = rentaRealizada.monto_restante
                            sumaPagosRenta = 0
                            if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                                sumaPagosRenta = rentaRealizada.monto_total_renta
                            else: #Si ya se pago el restante
                                sumaPagosRenta = montoPagadoApartado 
                            montoIngresoDiciembre = montoIngresoDiciembre + sumaPagosRenta
                            
            # - COMPRAS DEL MEES ...................................................
            totalComprasMesGasto = 0
            totalComprasMesVenta = 0
            totalComprasMesRenta= 0
            
            numeroComprasGasto = 0
            numeroComprasVenta = 0
            numeroComprasRenta = 0
            
            comprasProductosGastosSucursalMes= []
            comprasGastoSucursalDelMes = ComprasGastos.objects.filter(fecha_compra__range=[fechaInicioMesActual,fechaDiaMesActual])
            if comprasGastoSucursalDelMes:
                for compra in comprasGastoSucursalDelMes:
                    montoComprado = compra.total_costoCompra
                    
                    
                    idCompra = compra.id_compraGasto
                    idProducto = compra.id_productoComprado_id
                    consultaProducto = ProductosGasto.objects.filter(id_producto = idProducto)
                    
                    for datoProducto in consultaProducto:
                        nombreProducto = datoProducto.nombre_producto
                        codigoProducto = datoProducto.codigo_producto
                        imagenProducto = datoProducto.imagen_producto
                        sucursalProducto = datoProducto.sucursal_id
                    nombreCompletoProducto = codigoProducto + " - "+nombreProducto
                    
                    fechaCompra = compra.fecha_compra
                    costoUnitarioCompra = compra.costo_unitario
                    cantidadComprada = compra.cantidad_comprada
                    totalMontoCompra = compra.total_costoCompra
                    
                    consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursalProducto)
                    for datoSucursal in consultaSucursal:
                        nombreSucursal = datoSucursal.nombre
                    
                    idSucursalInforme = int(idSucursalInforme)
                    
                    if sucursalProducto == idSucursalInforme:
                        totalComprasMesGasto = totalComprasMesGasto + montoComprado
                        numeroComprasGasto = numeroComprasGasto +1
                        comprasProductosGastosSucursalMes.append([idCompra,nombreCompletoProducto,imagenProducto,fechaCompra,nombreSucursal,costoUnitarioCompra,cantidadComprada,totalMontoCompra])
            else:
                comprasProductosGastosSucursalMes = None
                
            
            comprasProductosVentasSucursalMes = []
            comprasVentaSucursalDelMes = ComprasVentas.objects.filter(fecha_compra__range=[fechaInicioMesActual,fechaDiaMesActual])
            if comprasVentaSucursalDelMes:
                for compra in comprasVentaSucursalDelMes:
                    montoComprado = compra.total_costoCompra
                   
                    
                    idCompra = compra.id_compraVenta
                    idProducto = compra.id_productoComprado_id
                    consultaProducto = ProductosVenta.objects.filter(id_producto = idProducto)
                    
                    for datoProducto in consultaProducto:
                        nombreProducto = datoProducto.nombre_producto
                        codigoProducto = datoProducto.codigo_producto
                        imagenProducto = datoProducto.imagen_producto
                        sucursalProducto = datoProducto.sucursal_id
                    nombreCompletoProducto = codigoProducto + " - "+nombreProducto
                    
                    fechaCompra = compra.fecha_compra
                    costoUnitarioCompra = compra.costo_unitario
                    cantidadComprada = compra.cantidad_comprada
                    totalMontoCompra = compra.total_costoCompra
                    
                    consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursalProducto)
                    for datoSucursal in consultaSucursal:
                        nombreSucursal = datoSucursal.nombre
                        
                    idSucursalInforme = int(idSucursalInforme)
                    
                    if sucursalProducto == idSucursalInforme:
                        totalComprasMesVenta = totalComprasMesVenta + montoComprado
                        numeroComprasVenta = numeroComprasVenta +1
                        comprasProductosVentasSucursalMes.append([idCompra,nombreCompletoProducto,imagenProducto,fechaCompra,nombreSucursal,costoUnitarioCompra,cantidadComprada,totalMontoCompra])
            else:
                comprasProductosVentasSucursalMes = None
            
            
            comprasProductosRentasSucursalMes = []
            comprasRentasSucursalesDelMes = ComprasRentas.objects.filter(fecha_compra__range=[fechaInicioMesActual,fechaDiaMesActual])
            if comprasRentasSucursalesDelMes:
                for compra in comprasRentasSucursalesDelMes:
                    montoComprado = compra.total_costoCompra
                    
                    
                    idCompra = compra.id_compraRenta
                    idProducto = compra.id_productoComprado_id
                    consultaProducto = ProductosRenta.objects.filter(id_producto = idProducto)
                    
                    for datoProducto in consultaProducto:
                        nombreProducto = datoProducto.nombre_producto
                        codigoProducto = datoProducto.codigo_producto
                        imagenProducto = datoProducto.imagen_producto
                        sucursalProducto = datoProducto.sucursal_id
                    nombreCompletoProducto = codigoProducto + " - "+nombreProducto
                    
                    fechaCompra = compra.fecha_compra
                    costoUnitarioCompra = compra.costo_unitario
                    cantidadComprada = compra.cantidad_comprada
                    totalMontoCompra = compra.total_costoCompra
                    
                    consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursalProducto)
                    for datoSucursal in consultaSucursal:
                        nombreSucursal = datoSucursal.nombre
                        
                    idSucursalInforme = int(idSucursalInforme)
                    
                    if sucursalProducto == idSucursalInforme:
                        totalComprasMesRenta = totalComprasMesRenta + montoComprado
                        numeroComprasRenta = numeroComprasRenta +1
                        comprasProductosRentasSucursalMes.append([idCompra,nombreCompletoProducto,imagenProducto,fechaCompra,nombreSucursal,costoUnitarioCompra,cantidadComprada,totalMontoCompra])
            else:
                comprasProductosRentasSucursalMes = None            

            sumaTotalesCompras = totalComprasMesGasto + totalComprasMesVenta + totalComprasMesRenta
            
            utilidadSucursalMes = montoIngresoSucursalMes - sumaTotalesCompras
            
            utilidadMayor = False
            if utilidadSucursalMes < 0:
                utilidadMayor = False
            else:
                utilidadMayor = True
                
            #Tabla de ganancias por sucursales
            sucursales = Sucursales.objects.all()
            infoSucursales = []
            montosVendidos =[]
            montosCompras = []
            gananciaSucursales = []
            margenDeGanancia = []
            
            for sucursal in sucursales:
                idSucursal = sucursal.id_sucursal
                nombre = sucursal.nombre
                
                infoSucursales.append([idSucursal,nombre])
                #ventas
                consultaVentas = Ventas.objects.filter(fecha_venta__range=[fechaInicioMesActual,fechaDiaMesActual], credito="N", sucursal = idSucursal)
                montoIngresoSucursalMesTabla = 0
                
                if consultaVentas:
                    for ventaRealizada in consultaVentas:
                        montoVenta = ventaRealizada.monto_pagar
                        montoIngresoSucursalMesTabla = montoIngresoSucursalMesTabla + montoVenta
            
                consultaCreditos = Creditos.objects.filter(fecha_venta_credito__range=[fechaInicioMesActual,fechaDiaMesActual], renta_id__isnull=True, sucursal = idSucursal)
            
                if consultaCreditos:
                    for crceditoRealizado in consultaCreditos:
                        montoPagadoCredito = crceditoRealizado.monto_pagado
                        montoIngresoSucursalMesTabla = montoIngresoSucursalMesTabla + montoPagadoCredito
                        
                consultaRentas = Rentas.objects.filter(fecha_apartado__range=[fechaInicioMesActual,fechaDiaMesActual])
        
                if consultaRentas:
                    for rentaRealizada in consultaRentas:
                        empleadoQueRealizo = rentaRealizada.realizado_por_id
                        consultaEmpleado = Empleados.objects.filter(id_empleado = empleadoQueRealizo)
                        for datoEmpleado in consultaEmpleado:
                            idSucursalEmpleado = datoEmpleado.id_sucursal_id
                        if idSucursalEmpleado == None:
                            codigosProductosRentados = rentaRealizada.codigos_productos_renta
                            arregloCodigosProductos = codigosProductosRentados.split("-")
                            
                            contadorProductosRentados = 0
                            for producto in arregloCodigosProductos:
                                contadorProductosRentados = contadorProductosRentados + 1
                                strCodigoProducto = str(producto)
                                if contadorProductosRentados == 1:
                                    consultaProducto = ProductosRenta.objects.filter(codigo_producto = strCodigoProducto)

                                    for datoProducto in consultaProducto:
                                        sucursalProducto = datoProducto.sucursal_id
                                    intSucursalInforme = int(idSucursalInforme)
                                    if sucursalProducto == intSucursalInforme:
                                
                                        montoPagadoApartado = rentaRealizada.monto_pago_apartado
                                        montoPagadoRestante = rentaRealizada.monto_restante
                                        
                                        sumaPagosRenta = 0
                                        if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                                            sumaPagosRenta = rentaRealizada.monto_total_renta
                                        else: #Si ya se pago el restante
                                            sumaPagosRenta = montoPagadoApartado
                                        montoIngresoSucursalMesTabla = montoIngresoSucursalMesTabla + sumaPagosRenta

                                        
                        else:
                            intSucursalInforme = int(idSucursalInforme)
                            if idSucursalEmpleado == intSucursalInforme:
                                
                                montoPagadoApartado = rentaRealizada.monto_pago_apartado
                                montoPagadoRestante = rentaRealizada.monto_restante
                                
                                sumaPagosRenta = 0
                                if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                                    sumaPagosRenta = rentaRealizada.monto_total_renta
                                else: #Si ya se pago el restante
                                    sumaPagosRenta = montoPagadoApartado
                                montoIngresoSucursalMesTabla = montoIngresoSucursalMesTabla + sumaPagosRenta
                                
                
                
                #Compras
                montoCompradoSucursalMes = 0
                comprasGastoSucursal = ComprasGastos.objects.filter(fecha_compra__range=[fechaInicioMesActual,fechaDiaMesActual])
                if comprasGastoSucursal:
                    for compra in comprasGastoSucursal:
                        montoComprado = compra.total_costoCompra
                        montoCompradoSucursalMes = montoCompradoSucursalMes + montoComprado
                        
                comprasVentaSucursalDelMes = ComprasVentas.objects.filter(fecha_compra__range=[fechaInicioMesActual,fechaDiaMesActual])
                if comprasVentaSucursalDelMes:
                    for compra in comprasVentaSucursalDelMes:
                        montoComprado = compra.total_costoCompra
                        montoCompradoSucursalMes = montoCompradoSucursalMes + montoComprado

                    
                comprasRentasSucursalesDelMes = ComprasRentas.objects.filter(fecha_compra__range=[fechaInicioMesActual,fechaDiaMesActual])
                if comprasRentasSucursalesDelMes:
                    for compra in comprasRentasSucursalesDelMes:
                        montoComprado = compra.total_costoCompra
                        montoCompradoSucursalMes = montoCompradoSucursalMes + montoComprado
                        
                #Ganancia
                gananciaSucursalMes = montoIngresoSucursalMesTabla - montoCompradoSucursalMes
                if gananciaSucursalMes > 0:
                    signo = "+"
                else:
                    signo = "-"
                    
                #margen
                if montoCompradoSucursalMes == 0:
                    margenSucursalMes = montoIngresoSucursalMesTabla
                else:
                    margenSucursalMes = (montoIngresoSucursalMesTabla * 100)/montoCompradoSucursalMes
                    margenSucursalMes = round(margenSucursalMes,2)
                    margenSucursalMes = margenSucursalMes - 100
                margenDeGanancia.append(margenSucursalMes)
                
                
                montosVendidos.append(montoIngresoSucursalMesTabla)
                montosCompras.append(montoCompradoSucursalMes)
                gananciaSucursales.append([gananciaSucursalMes, signo])
                
            listaComparativaSucursalesMes = zip(infoSucursales,montosVendidos,montosCompras,gananciaSucursales, margenDeGanancia)
            
                    
                    
                    

            
            #EN EL AÑO DE LA SUCURSAAAL .............................................................................................................................................
            #Ingresos totales del mes actual, en, tre entascreditos y rentas
            
            fechaPrimerDiaDelAñoActual = añoHoy +"-01-01"
            fechaUltimoDiaDelAñoActual = añoHoy+"-12-31"
            
            
            
            montoIngresoSucursalAño = 0
            
            contadorVentasSucursalAño = 0
            contadorCreditosSucursalAño = 0
            contadorRentasSucursalAño = 0
            
            numeroVentasSucursalAño = 0
            numeroCreditosSucursalAño = 0
            numeroRentasSucursalAño = 0
            
            consultaVentasSucursalAño = Ventas.objects.filter(fecha_venta__range=[fechaPrimerDiaDelAñoActual,fechaUltimoDiaDelAñoActual], credito="N", sucursal = idSucursalInforme)
            
            if consultaVentasSucursalAño:
                for ventaRealizada in consultaVentasSucursalAño:
                    montoVenta = ventaRealizada.monto_pagar
                    montoIngresoSucursalAño = montoIngresoSucursalAño + montoVenta
                    contadorVentasSucursalAño = contadorVentasSucursalAño + montoVenta
                    numeroVentasSucursalAño = numeroVentasSucursalAño + 1
            
            consultaCreditosSucursalAño = Creditos.objects.filter(fecha_venta_credito__range=[fechaPrimerDiaDelAñoActual,fechaUltimoDiaDelAñoActual], renta_id__isnull=True, sucursal = idSucursalInforme)
        
            if consultaCreditosSucursalAño:
                for crceditoRealizado in consultaCreditosSucursalAño:
                    montoPagadoCredito = crceditoRealizado.monto_pagado
                    montoIngresoSucursalAño = montoIngresoSucursalAño + montoPagadoCredito
                    contadorCreditosSucursalAño = contadorCreditosSucursalAño + montoPagadoCredito
                    numeroCreditosSucursalAño = numeroCreditosSucursalAño +1
                    
            consultaRentasAñoActual = Rentas.objects.filter(fecha_apartado__range=[fechaPrimerDiaDelAñoActual,fechaUltimoDiaDelAñoActual])
        
            if consultaRentasAñoActual:
                for rentaRealizada in consultaRentasAñoActual:
                    empleadoQueRealizo = rentaRealizada.realizado_por_id
                    consultaEmpleado = Empleados.objects.filter(id_empleado = empleadoQueRealizo)
                    for datoEmpleado in consultaEmpleado:
                        idSucursal = datoEmpleado.id_sucursal_id
                    if idSucursal == None:
                        codigosProductosRentados = rentaRealizada.codigos_productos_renta
                        arregloCodigosProductosAño = codigosProductosRentados.split("-")
                        
                        contadorProductosRentados = 0
                        for producto in arregloCodigosProductosAño:
                            contadorProductosRentados = contadorProductosRentados + 1
                            
                            strCodigoProducto = str(producto)
                            if contadorProductosRentados == 1:
                                consultaProducto = ProductosRenta.objects.filter(codigo_producto = strCodigoProducto)
                               
                                for datoProducto in consultaProducto:
                                    sucursalProductoAño = datoProducto.sucursal_id
                                    
                                intSucursalInforme = int(idSucursalInforme)
                                if sucursalProductoAño == intSucursalInforme:
                                    
                                    montoPagadoApartado = rentaRealizada.monto_pago_apartado
                                    montoPagadoRestante = rentaRealizada.monto_restante
                                    
                                    sumaPagosRenta = 0
                                    if montoPagadoRestante == 0: #Ya aparto y no le queda restante
                                        sumaPagosRenta = rentaRealizada.monto_total_renta
                                    else: #Si aun no paga el restante
                                        sumaPagosRenta = montoPagadoApartado 
                                    montoIngresoSucursalAño = montoIngresoSucursalAño + sumaPagosRenta

                                    contadorRentasSucursalAño = contadorRentasSucursalAño + sumaPagosRenta
                                    numeroRentasSucursalAño = numeroRentasSucursalAño +1
                                    
                    else:
                        intSucursalInforme = int(idSucursalInforme)
                        if idSucursal == intSucursalInforme:
                            
                            montoPagadoApartado = rentaRealizada.monto_pago_apartado
                            montoPagadoRestante = rentaRealizada.monto_restante
                            
                            sumaPagosRenta = 0
                            if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                                sumaPagosRenta = rentaRealizada.monto_total_renta
                            else: #Si ya se pago el restante
                                sumaPagosRenta = montoPagadoApartado
                            montoIngresoSucursalAño = montoIngresoSucursalAño + sumaPagosRenta

                            contadorRentasSucursalAño = contadorRentasSucursalAño + sumaPagosRenta
                            numeroRentasSucursalAño = numeroRentasSucursalAño +1
                
            #años anteriores
            añoMenosUno = int(añoHoy)-1
            añoMenosDos = int(añoHoy)-2
            añoMenosTres = int(añoHoy)-3
            
            haceUnAñoInicio = str(añoMenosUno)+"-01-01"
            haceUnAñoFinal = str(añoMenosUno)+"-12-31"
            
            haceDosAñosInicio = str(añoMenosDos)+"-01-01"
            haceDosAñosFinal = str(añoMenosDos)+"-12-31"
            
            haceTresAñosInicio = str(añoMenosTres)+"-01-01"
            haceTresAñosFinal = str(añoMenosTres)+"-12-31"
            
            
            contadorVentasHaceUnAño = 0
            contadorVentasHaceDosAños = 0
            contadorVentasHaceTresAños = 0
            
            #Hace un año
            consultaVentasSucursalHaceUnAño = Ventas.objects.filter(fecha_venta__range=[haceUnAñoInicio,haceUnAñoFinal], credito="N", sucursal = idSucursalInforme)
            
            if consultaVentasSucursalHaceUnAño:
                for ventaRealizada in consultaVentasSucursalHaceUnAño:
                    montoVenta = ventaRealizada.monto_pagar
                    contadorVentasHaceUnAño = contadorVentasHaceUnAño + montoVenta
            
            consultaCreditosSucursalHaceUnAño = Creditos.objects.filter(fecha_venta_credito__range=[haceUnAñoInicio,haceUnAñoFinal], renta_id__isnull=True, sucursal = idSucursalInforme)
        
            if consultaCreditosSucursalHaceUnAño:
                for crceditoRealizado in consultaCreditosSucursalHaceUnAño:
                    montoPagadoCredito = crceditoRealizado.monto_pagado
                    contadorVentasHaceUnAño = contadorVentasHaceUnAño + montoPagadoCredito
                    
            consultaRentasHaceUnAño = Rentas.objects.filter(fecha_apartado__range=[haceUnAñoInicio,haceUnAñoFinal])
        
            if consultaRentasHaceUnAño:
                for rentaRealizada in consultaRentasHaceUnAño:
                    empleadoQueRealizo = rentaRealizada.realizado_por_id
                    consultaEmpleado = Empleados.objects.filter(id_empleado = empleadoQueRealizo)
                    for datoEmpleado in consultaEmpleado:
                        idSucursal = datoEmpleado.id_sucursal_id
                    if idSucursal == None:
                        codigosProductosRentados = rentaRealizada.codigos_productos_renta
                        arregloCodigosProductos = codigosProductosRentados.split("-")
                        
                        contadorProductosRentados = 0
                        for producto in arregloCodigosProductos:
                            contadorProductosRentados = contadorProductosRentados + 1
                            strCodigoProducto = str(producto)
                            if contadorProductosRentados == 1:
                                consultaProducto = ProductosRenta.objects.filter(codigo_producto = strCodigoProducto)

                                for datoProducto in consultaProducto:
                                    sucursalProducto = datoProducto.sucursal_id
                                intSucursalInforme = int(idSucursalInforme)
                                if sucursalProducto == intSucursalInforme:
                            
                                    montoPagadoApartado = rentaRealizada.monto_pago_apartado
                                    montoPagadoRestante = rentaRealizada.monto_restante
                                    
                                    sumaPagosRenta = 0
                                    if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                                        sumaPagosRenta = rentaRealizada.monto_total_renta
                                    else: #Si ya se pago el restante
                                        sumaPagosRenta = montoPagadoApartado
                                    contadorVentasHaceUnAño = contadorVentasHaceUnAño + sumaPagosRenta
                                    
                    else:
                        intSucursalInforme = int(idSucursalInforme)
                        if idSucursal == intSucursalInforme:
                            
                            montoPagadoApartado = rentaRealizada.monto_pago_apartado
                            montoPagadoRestante = rentaRealizada.monto_restante
                            
                            sumaPagosRenta = 0
                            if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                                sumaPagosRenta = rentaRealizada.monto_total_renta
                            else: #Si ya se pago el restante
                                sumaPagosRenta = montoPagadoApartado
                            contadorVentasHaceUnAño = contadorVentasHaceUnAño + sumaPagosRenta
            
            #Hace dos años
            consultaVentasSucursalHaceDosAños = Ventas.objects.filter(fecha_venta__range=[haceDosAñosInicio,haceDosAñosFinal], credito="N", sucursal = idSucursalInforme)
            
            if consultaVentasSucursalHaceDosAños:
                for ventaRealizada in consultaVentasSucursalHaceDosAños:
                    montoVenta = ventaRealizada.monto_pagar
                    contadorVentasHaceDosAños = contadorVentasHaceDosAños + montoVenta
            
            consultaCreditosSucursalHaceDosAños = Creditos.objects.filter(fecha_venta_credito__range=[haceDosAñosInicio,haceDosAñosFinal], renta_id__isnull=True, sucursal = idSucursalInforme)
        
            if consultaCreditosSucursalHaceDosAños:
                for crceditoRealizado in consultaCreditosSucursalHaceDosAños:
                    montoPagadoCredito = crceditoRealizado.monto_pagado
                    contadorVentasHaceDosAños = contadorVentasHaceDosAños + montoPagadoCredito
                    
            consultaRentasHaceDosAños = Rentas.objects.filter(fecha_apartado__range=[haceDosAñosInicio,haceDosAñosFinal])
        
            if consultaRentasHaceDosAños:
                for rentaRealizada in consultaRentasHaceDosAños:
                    empleadoQueRealizo = rentaRealizada.realizado_por_id
                    consultaEmpleado = Empleados.objects.filter(id_empleado = empleadoQueRealizo)
                    for datoEmpleado in consultaEmpleado:
                        idSucursal = datoEmpleado.id_sucursal_id
                    if idSucursal == None:
                        codigosProductosRentados = rentaRealizada.codigos_productos_renta
                        arregloCodigosProductos = codigosProductosRentados.split("-")
                        
                        contadorProductosRentados = 0
                        for producto in arregloCodigosProductos:
                            contadorProductosRentados = contadorProductosRentados + 1
                            strCodigoProducto = str(producto)
                            if contadorProductosRentados == 1:
                                consultaProducto = ProductosRenta.objects.filter(codigo_producto = strCodigoProducto)

                                for datoProducto in consultaProducto:
                                    sucursalProducto = datoProducto.sucursal_id
                                intSucursalInforme = int(idSucursalInforme)
                                if sucursalProducto == intSucursalInforme:
                            
                                    montoPagadoApartado = rentaRealizada.monto_pago_apartado
                                    montoPagadoRestante = rentaRealizada.monto_restante
                                    
                                    sumaPagosRenta = 0
                                    if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                                        sumaPagosRenta = rentaRealizada.monto_total_renta
                                    else: #Si ya se pago el restante
                                        sumaPagosRenta = montoPagadoApartado
                                    contadorVentasHaceDosAños = contadorVentasHaceDosAños + sumaPagosRenta
                                    
                    else:
                        intSucursalInforme = int(idSucursalInforme)
                        if idSucursal == intSucursalInforme:
                            
                            montoPagadoApartado = rentaRealizada.monto_pago_apartado
                            montoPagadoRestante = rentaRealizada.monto_restante
                            
                            sumaPagosRenta = 0
                            if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                                sumaPagosRenta = rentaRealizada.monto_total_renta
                            else: #Si ya se pago el restante
                                sumaPagosRenta = montoPagadoApartado
                            contadorVentasHaceDosAños = contadorVentasHaceDosAños + sumaPagosRenta
                            
            #Hace 3 años
            consultaVentasSucursalHaceTresAños = Ventas.objects.filter(fecha_venta__range=[haceTresAñosInicio,haceTresAñosFinal], credito="N", sucursal = idSucursalInforme)
            
            if consultaVentasSucursalHaceTresAños:
                for ventaRealizada in consultaVentasSucursalHaceTresAños:
                    montoVenta = ventaRealizada.monto_pagar
                    contadorVentasHaceTresAños = contadorVentasHaceTresAños + montoVenta
            
            consultaCreditosSucursalHaceTresAños = Creditos.objects.filter(fecha_venta_credito__range=[haceTresAñosInicio,haceTresAñosFinal], renta_id__isnull=True, sucursal = idSucursalInforme)
        
            if consultaCreditosSucursalHaceTresAños:
                for crceditoRealizado in consultaCreditosSucursalHaceTresAños:
                    montoPagadoCredito = crceditoRealizado.monto_pagado
                    contadorVentasHaceTresAños = contadorVentasHaceTresAños + montoPagadoCredito
                    
            consultaRentasHaceTresAños = Rentas.objects.filter(fecha_apartado__range=[haceTresAñosInicio,haceTresAñosFinal])
        
            if consultaRentasHaceTresAños:
                for rentaRealizada in consultaRentasHaceTresAños:
                    empleadoQueRealizo = rentaRealizada.realizado_por_id
                    consultaEmpleado = Empleados.objects.filter(id_empleado = empleadoQueRealizo)
                    for datoEmpleado in consultaEmpleado:
                        idSucursal = datoEmpleado.id_sucursal_id
                    if idSucursal == None:
                        codigosProductosRentados = rentaRealizada.codigos_productos_renta
                        arregloCodigosProductos = codigosProductosRentados.split("-")
                        
                        contadorProductosRentados = 0
                        for producto in arregloCodigosProductos:
                            contadorProductosRentados = contadorProductosRentados + 1
                            strCodigoProducto = str(producto)
                            if contadorProductosRentados == 1:
                                consultaProducto = ProductosRenta.objects.filter(codigo_producto = strCodigoProducto)

                                for datoProducto in consultaProducto:
                                    sucursalProducto = datoProducto.sucursal_id
                                intSucursalInforme = int(idSucursalInforme)
                                if sucursalProducto == intSucursalInforme:
                            
                                    montoPagadoApartado = rentaRealizada.monto_pago_apartado
                                    montoPagadoRestante = rentaRealizada.monto_restante
                                    
                                    sumaPagosRenta = 0
                                    if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                                        sumaPagosRenta = rentaRealizada.monto_total_renta
                                    else: #Si ya se pago el restante
                                        sumaPagosRenta = montoPagadoApartado
                                    contadorVentasHaceTresAños = contadorVentasHaceTresAños + sumaPagosRenta
                                    
                    else:
                        intSucursalInforme = int(idSucursalInforme)
                        if idSucursal == intSucursalInforme:
                            
                            montoPagadoApartado = rentaRealizada.monto_pago_apartado
                            montoPagadoRestante = rentaRealizada.monto_restante
                            
                            sumaPagosRenta = 0
                            if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                                sumaPagosRenta = rentaRealizada.monto_total_renta
                            else: #Si ya se pago el restante
                                sumaPagosRenta = montoPagadoApartado
                            contadorVentasHaceTresAños = contadorVentasHaceTresAños + sumaPagosRenta
                            
            #Porcentaje si ingresos son mayores en sucursal
            esMayorAñoSucursal = False

            if contadorVentasHaceUnAño == 0:
                porcentajeIngresosSucursalAño = 100
            else:
                porcentajeIngresosSucursalAño = (montoIngresoSucursalAño / contadorVentasHaceUnAño)
                porcentajeIngresosSucursalAño = porcentajeIngresosSucursalAño - 1
                porcentajeIngresosSucursalAño = porcentajeIngresosSucursalAño *100
                
                
            if porcentajeIngresosSucursalAño > 0:
                esMayorAñoSucursal = True
                
            else:
                esMayorAñoSucursal = False
            porcentajeIngresosSucursalAño = round(porcentajeIngresosSucursalAño,2)
            
            
            # - COMPRAS DEL AÑOOOOOOO ...................................................
            totalComprasAñoGasto = 0
            totalComprasAñoVenta = 0
            totalComprasAñoRenta= 0
            
            numeroComprasGastoAño = 0
            numeroComprasVentaAño = 0
            numeroComprasRentaAño = 0
            
            comprasProductosGastosSucursalAño= []
            comprasGastoSucursalDelAño = ComprasGastos.objects.filter(fecha_compra__range=[fechaPrimerDiaDelAñoActual,fechaUltimoDiaDelAñoActual])
            if comprasGastoSucursalDelAño:
                for compra in comprasGastoSucursalDelAño:
                    montoComprado = compra.total_costoCompra
                    
                    
                    idCompra = compra.id_compraGasto
                    idProducto = compra.id_productoComprado_id
                    consultaProducto = ProductosGasto.objects.filter(id_producto = idProducto)
                    
                    for datoProducto in consultaProducto:
                        nombreProducto = datoProducto.nombre_producto
                        codigoProducto = datoProducto.codigo_producto
                        imagenProducto = datoProducto.imagen_producto
                        sucursalProducto = datoProducto.sucursal_id
                    nombreCompletoProducto = codigoProducto + " - "+nombreProducto
                    
                    fechaCompra = compra.fecha_compra
                    costoUnitarioCompra = compra.costo_unitario
                    cantidadComprada = compra.cantidad_comprada
                    totalMontoCompra = compra.total_costoCompra
                    
                    consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursalProducto)
                    for datoSucursal in consultaSucursal:
                        nombreSucursalProducto = datoSucursal.nombre
                    
                    idSucursalInforme = int(idSucursalInforme)
                    
                    if sucursalProducto == idSucursalInforme:
                        totalComprasAñoGasto = totalComprasAñoGasto + montoComprado
                        numeroComprasGastoAño = numeroComprasGastoAño +1
                        comprasProductosGastosSucursalAño.append([idCompra,nombreCompletoProducto,imagenProducto,fechaCompra,nombreSucursalProducto,costoUnitarioCompra,cantidadComprada,totalMontoCompra])
            else:
                comprasProductosGastosSucursalAño = None
                
            
            comprasProductosVentasSucursalAño = []
            comprasVentaSucursalDelAño = ComprasVentas.objects.filter(fecha_compra__range=[fechaPrimerDiaDelAñoActual,fechaUltimoDiaDelAñoActual])
            if comprasVentaSucursalDelAño:
                for compra in comprasVentaSucursalDelAño:
                    montoComprado = compra.total_costoCompra
                   
                    
                    idCompra = compra.id_compraVenta
                    idProducto = compra.id_productoComprado_id
                    consultaProducto = ProductosVenta.objects.filter(id_producto = idProducto)
                    
                    for datoProducto in consultaProducto:
                        nombreProducto = datoProducto.nombre_producto
                        codigoProducto = datoProducto.codigo_producto
                        imagenProducto = datoProducto.imagen_producto
                        sucursalProducto = datoProducto.sucursal_id
                    nombreCompletoProducto = codigoProducto + " - "+nombreProducto
                    
                    fechaCompra = compra.fecha_compra
                    costoUnitarioCompra = compra.costo_unitario
                    cantidadComprada = compra.cantidad_comprada
                    totalMontoCompra = compra.total_costoCompra
                    
                    consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursalProducto)
                    for datoSucursal in consultaSucursal:
                        nombreSucursalProducto = datoSucursal.nombre
                        
                    idSucursalInforme = int(idSucursalInforme)
                    
                    if sucursalProducto == idSucursalInforme:
                        totalComprasAñoVenta = totalComprasAñoVenta + montoComprado
                        numeroComprasVentaAño = numeroComprasVentaAño +1
                        comprasProductosVentasSucursalAño.append([idCompra,nombreCompletoProducto,imagenProducto,fechaCompra,nombreSucursalProducto,costoUnitarioCompra,cantidadComprada,totalMontoCompra])
            else:
                comprasProductosVentasSucursalAño = None
            
            
            comprasProductosRentasSucursalAño = []
            comprasRentasSucursalesDelAño = ComprasRentas.objects.filter(fecha_compra__range=[fechaPrimerDiaDelAñoActual,fechaUltimoDiaDelAñoActual])
            if comprasRentasSucursalesDelAño:
                for compra in comprasRentasSucursalesDelAño:
                    montoComprado = compra.total_costoCompra
                    
                    
                    idCompra = compra.id_compraRenta
                    idProducto = compra.id_productoComprado_id
                    consultaProducto = ProductosRenta.objects.filter(id_producto = idProducto)
                    
                    for datoProducto in consultaProducto:
                        nombreProducto = datoProducto.nombre_producto
                        codigoProducto = datoProducto.codigo_producto
                        imagenProducto = datoProducto.imagen_producto
                        sucursalProducto = datoProducto.sucursal_id
                    nombreCompletoProducto = codigoProducto + " - "+nombreProducto
                    
                    fechaCompra = compra.fecha_compra
                    costoUnitarioCompra = compra.costo_unitario
                    cantidadComprada = compra.cantidad_comprada
                    totalMontoCompra = compra.total_costoCompra
                    
                    consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursalProducto)
                    for datoSucursal in consultaSucursal:
                        nombreSucursalProducto = datoSucursal.nombre
                        
                    idSucursalInforme = int(idSucursalInforme)
                    
                    if sucursalProducto == idSucursalInforme:
                        totalComprasAñoRenta = totalComprasAñoRenta + montoComprado
                        numeroComprasRentaAño = numeroComprasRentaAño +1
                        comprasProductosRentasSucursalAño.append([idCompra,nombreCompletoProducto,imagenProducto,fechaCompra,nombreSucursalProducto,costoUnitarioCompra,cantidadComprada,totalMontoCompra])
            else:
                comprasProductosRentasSucursalAño = None            

            sumaTotalesComprasDelAño = totalComprasAñoGasto + totalComprasAñoVenta + totalComprasAñoRenta
            
            utilidadSucursalAño = montoIngresoSucursalAño - sumaTotalesComprasDelAño
            
            utilidadMayorAño = False
            if utilidadSucursalAño < 0:
                utilidadMayorAño = False
            else:
                utilidadMayorAño = True
            
            
            #Tabla de sucursales en el año
            #Tabla de ganancias por sucursales
            sucursalesAño = Sucursales.objects.all()
            infoSucursalesAño = []
            montosVendidosAño =[]
            montosComprasAño = []
            gananciaSucursalesAño = []
            margenDeGananciaAño = []
            
            for sucursal in sucursalesAño:
                idSucursal = sucursal.id_sucursal
                nombre = sucursal.nombre
                
                infoSucursalesAño.append([idSucursal,nombre])
                #ventas
                consultaVentasSucursalAño = Ventas.objects.filter(fecha_venta__range=[fechaPrimerDiaDelAñoActual,fechaUltimoDiaDelAñoActual], credito="N", sucursal = idSucursal)
                montoIngresoSucursalAñoTabla = 0
                
                if consultaVentasSucursalAño:
                    for ventaRealizada in consultaVentasSucursalAño:
                        montoVenta = ventaRealizada.monto_pagar
                        montoIngresoSucursalAñoTabla = montoIngresoSucursalAñoTabla + montoVenta
            
                consultaCreditosSucursalAño = Creditos.objects.filter(fecha_venta_credito__range=[fechaPrimerDiaDelAñoActual,fechaUltimoDiaDelAñoActual], renta_id__isnull=True, sucursal = idSucursal)
            
                if consultaCreditosSucursalAño:
                    for crceditoRealizado in consultaCreditosSucursalAño:
                        montoPagadoCredito = crceditoRealizado.monto_pagado
                        montoIngresoSucursalAñoTabla = montoIngresoSucursalAñoTabla + montoPagadoCredito
                        
                consultaRentasSucursalAño = Rentas.objects.filter(fecha_apartado__range=[fechaPrimerDiaDelAñoActual,fechaUltimoDiaDelAñoActual])
        
                if consultaRentasSucursalAño:
                    for rentaRealizada in consultaRentasSucursalAño:
                        empleadoQueRealizo = rentaRealizada.realizado_por_id
                        consultaEmpleado = Empleados.objects.filter(id_empleado = empleadoQueRealizo)
                        for datoEmpleado in consultaEmpleado:
                            idSucursalEmpleado = datoEmpleado.id_sucursal_id
                        if idSucursalEmpleado == None:
                            codigosProductosRentados = rentaRealizada.codigos_productos_renta
                            arregloCodigosProductos = codigosProductosRentados.split("-")
                            
                            contadorProductosRentados = 0
                            for producto in arregloCodigosProductos:
                                contadorProductosRentados = contadorProductosRentados + 1
                                strCodigoProducto = str(producto)
                                if contadorProductosRentados == 1:
                                    consultaProducto = ProductosRenta.objects.filter(codigo_producto = strCodigoProducto)

                                    for datoProducto in consultaProducto:
                                        sucursalProducto = datoProducto.sucursal_id
                                        
                                    if sucursalProducto == idSucursal:
                                
                                        montoPagadoApartado = rentaRealizada.monto_pago_apartado
                                        montoPagadoRestante = rentaRealizada.monto_restante
                                        
                                        sumaPagosRenta = 0
                                        if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                                            sumaPagosRenta = rentaRealizada.monto_total_renta
                                        else: #Si ya se pago el restante
                                            sumaPagosRenta = montoPagadoApartado
                                        montoIngresoSucursalAñoTabla = montoIngresoSucursalAñoTabla + sumaPagosRenta

                                        
                        else:
                            if idSucursalEmpleado == idSucursal:
                                
                                montoPagadoApartado = rentaRealizada.monto_pago_apartado
                                montoPagadoRestante = rentaRealizada.monto_restante
                                
                                sumaPagosRenta = 0
                                if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                                    sumaPagosRenta = rentaRealizada.monto_total_renta
                                else: #Si ya se pago el restante
                                    sumaPagosRenta = montoPagadoApartado
                                montoIngresoSucursalAñoTabla = montoIngresoSucursalAñoTabla + sumaPagosRenta
                                
                
                
                #Compras
                montoCompradoSucursalAño = 0
                comprasGastoSucursalAño = ComprasGastos.objects.filter(fecha_compra__range=[fechaPrimerDiaDelAñoActual,fechaUltimoDiaDelAñoActual])
                if comprasGastoSucursalAño:
                    for compra in comprasGastoSucursalAño:
                        montoComprado = compra.total_costoCompra
                        idCompra = compra.id_compraGasto
                        idProducto = compra.id_productoComprado_id
                        consultaProducto = ProductosGasto.objects.filter(id_producto = idProducto)
                        
                        for datoProducto in consultaProducto:
                            sucursalProducto = datoProducto.sucursal_id
                            
                        idSucursal = int(idSucursal)
                        
                        if sucursalProducto == idSucursal:
                            montoCompradoSucursalAño = montoCompradoSucursalAño + montoComprado
                        
                comprasVentaSucursalDelAño = ComprasVentas.objects.filter(fecha_compra__range=[fechaPrimerDiaDelAñoActual,fechaUltimoDiaDelAñoActual])
                if comprasVentaSucursalDelAño:
                    for compra in comprasVentaSucursalDelAño:
                        montoComprado = compra.total_costoCompra
                        idCompra = compra.id_compraVenta
                        idProducto = compra.id_productoComprado_id
                        consultaProducto = ProductosVenta.objects.filter(id_producto = idProducto)
                        
                        for datoProducto in consultaProducto:
                            sucursalProducto = datoProducto.sucursal_id
                            
                        idSucursal = int(idSucursal)
                        
                        if sucursalProducto == idSucursal:
                            montoCompradoSucursalAño = montoCompradoSucursalAño + montoComprado

                    
                comprasRentasSucursalesDelAño = ComprasRentas.objects.filter(fecha_compra__range=[fechaPrimerDiaDelAñoActual,fechaUltimoDiaDelAñoActual])
                if comprasRentasSucursalesDelAño:
                    for compra in comprasRentasSucursalesDelAño:
                        montoComprado = compra.total_costoCompra
                        idCompra = compra.id_compraRenta
                        idProducto = compra.id_productoComprado_id
                        consultaProducto = ProductosRenta.objects.filter(id_producto = idProducto)
                        
                        for datoProducto in consultaProducto:
                            sucursalProducto = datoProducto.sucursal_id
                            
                        idSucursal = int(idSucursal)
                        
                        if sucursalProducto == idSucursal:
                            montoCompradoSucursalAño = montoCompradoSucursalAño + montoComprado
                        
                #Ganancia
                gananciaSucursalAño = montoIngresoSucursalAñoTabla - montoCompradoSucursalAño
                if gananciaSucursalAño > 0:
                    signoAño = "+"
                else:
                    signoAño = "-"
                    
                #margen
                if montoCompradoSucursalAño == 0:
                    margenSucursalAño = montoIngresoSucursalAñoTabla
                else:
                    margenSucursalAño = (montoIngresoSucursalAñoTabla * 100)/montoCompradoSucursalAño
                    margenSucursalAño = round(margenSucursalAño,2)
                    margenSucursalAño = margenSucursalAño - 100
                margenDeGananciaAño.append(margenSucursalAño)
                
                
                montosVendidosAño.append(montoIngresoSucursalAñoTabla)
                montosComprasAño.append(montoCompradoSucursalAño)
                gananciaSucursalesAño.append([gananciaSucursalAño, signoAño])
                
            listaComparativaSucursalesAño = zip(infoSucursalesAño,montosVendidosAño,montosComprasAño,gananciaSucursalesAño, margenDeGananciaAño)

            
            #RANGO DE FECHAS INFORME SUCURSAL
            if rangoFechaRecibida:
                
                arregloFechaInicioRango = fechaInicioRango.split("-")
                arregloFechaFinalRango = fechaFinalRango.split("-")
                 
                
                mesdeInicioRango = mesesDic[str(arregloFechaInicioRango[1])]
                mesdeFinalRango = mesesDic[str(arregloFechaFinalRango[1])]
                
                stringFechaInicioRango = str(arregloFechaInicioRango[2]) + " de " + mesdeInicioRango + " del "+str(arregloFechaInicioRango[0])
                stringFechaFinalRango = str(arregloFechaFinalRango[2]) + " de " + mesdeFinalRango + " del "+str(arregloFechaFinalRango[0])
                
                
                #fechas de otros periodos
                fechaInicioFormato=datetime.strptime(fechaInicioRango,"%Y-%m-%d")
                fechaFinalFormato=datetime.strptime(fechaFinalRango,"%Y-%m-%d") 

                diferenciaEnDias=fechaFinalFormato-fechaInicioFormato
                numeroDiasDiferencia=diferenciaEnDias.days
                fechaRestaInicio=fechaInicioFormato-timedelta(days=numeroDiasDiferencia)
                fechaSumaFinal=fechaFinalFormato+timedelta(days=numeroDiasDiferencia)
                mesNumeroRestaInicio=fechaRestaInicio.strftime('%m')
                mesNumeroSumaFinal=fechaSumaFinal.strftime('%m')
                
                mesNumeroRestaInicioTexto = mesesDic[str(mesNumeroRestaInicio)]
                mesNumeroSumaFinalTexto = mesesDic[str(mesNumeroSumaFinal)]
                
                fechaTextoInicioPeriodoAnterior = str(fechaRestaInicio.strftime('%d'))+ " de " + mesNumeroRestaInicioTexto +" "+ str(fechaRestaInicio.strftime('%Y'))  
                fechaTextoFinalPeriodoDespues=str(fechaSumaFinal.strftime('%d'))+ " de "+ mesNumeroSumaFinalTexto + " de " + str(fechaSumaFinal.strftime('%Y'))
            
                #INGRESOS
                montoIngresoSucursalRango = 0
                
                contadorVentasSucursalRango = 0
                contadorCreditosSucursalRango = 0
                contadorRentasSucursalRango = 0
                
                numeroVentasSucursalRango = 0
                numeroCreditosSucursalRango = 0
                numeroRentasSucursalRango = 0
                
                consultaVentasSucursalRango = Ventas.objects.filter(fecha_venta__range=[fechaInicioRango,fechaFinalRango], credito="N", sucursal = idSucursalInforme)
                
                if consultaVentasSucursalRango:
                    for ventaRealizada in consultaVentasSucursalRango:
                        montoVenta = ventaRealizada.monto_pagar
                        montoIngresoSucursalRango = montoIngresoSucursalRango + montoVenta
                        contadorVentasSucursalRango = contadorVentasSucursalRango + montoVenta
                        numeroVentasSucursalRango = numeroVentasSucursalRango + 1
                
                consultaCreditosSucursalRango = Creditos.objects.filter(fecha_venta_credito__range=[fechaInicioRango,fechaFinalRango], renta_id__isnull=True, sucursal = idSucursalInforme)
                
                if consultaCreditosSucursalRango:
                    for creditoRealizado in consultaCreditosSucursalRango:
                        montoPagadoCredito = creditoRealizado.monto_pagado
                        montoIngresoSucursalRango = montoIngresoSucursalRango + montoPagadoCredito
                        contadorCreditosSucursalRango = contadorCreditosSucursalRango + montoVenta
                        numeroCreditosSucursalRango = numeroCreditosSucursalRango + 1
                
                consultaRentasSucursalRango = Rentas.objects.filter(fecha_apartado__range=[fechaInicioRango,fechaFinalRango])
        
                if consultaRentasSucursalRango:
                    for rentaRealizada in consultaRentasSucursalRango:
                        empleadoQueRealizo = rentaRealizada.realizado_por_id
                        consultaEmpleado = Empleados.objects.filter(id_empleado = empleadoQueRealizo)
                        for datoEmpleado in consultaEmpleado:
                            idSucursal = datoEmpleado.id_sucursal_id
                        if idSucursal == None:
                            codigosProductosRentados = rentaRealizada.codigos_productos_renta
                            arregloCodigosProductosAño = codigosProductosRentados.split("-")
                            
                            contadorProductosRentados = 0
                            for producto in arregloCodigosProductosAño:
                                contadorProductosRentados = contadorProductosRentados + 1
                                
                                strCodigoProducto = str(producto)
                                if contadorProductosRentados == 1:
                                    consultaProducto = ProductosRenta.objects.filter(codigo_producto = strCodigoProducto)
                                
                                    for datoProducto in consultaProducto:
                                        sucursalProductoAño = datoProducto.sucursal_id
                                        
                                    intSucursalInforme = int(idSucursalInforme)
                                    if sucursalProductoAño == intSucursalInforme:
                                        
                                        montoPagadoApartado = rentaRealizada.monto_pago_apartado
                                        montoPagadoRestante = rentaRealizada.monto_restante
                                        
                                        sumaPagosRenta = 0
                                        if montoPagadoRestante == 0: #Ya aparto y no le queda restante
                                            sumaPagosRenta = rentaRealizada.monto_total_renta
                                        else: #Si aun no paga el restante
                                            sumaPagosRenta = montoPagadoApartado 
                                        montoIngresoSucursalRango = montoIngresoSucursalRango + sumaPagosRenta

                                        contadorRentasSucursalRango = contadorRentasSucursalRango + sumaPagosRenta
                                        numeroRentasSucursalRango = numeroRentasSucursalRango +1
                                        
                        else:
                            intSucursalInforme = int(idSucursalInforme)
                            if idSucursal == intSucursalInforme:
                                
                                montoPagadoApartado = rentaRealizada.monto_pago_apartado
                                montoPagadoRestante = rentaRealizada.monto_restante
                                
                                sumaPagosRenta = 0
                                if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                                    sumaPagosRenta = rentaRealizada.monto_total_renta
                                else: #Si ya se pago el restante
                                    sumaPagosRenta = montoPagadoApartado
                                montoIngresoSucursalRango = montoIngresoSucursalRango + sumaPagosRenta

                                contadorRentasSucursalRango = contadorRentasSucursalRango + sumaPagosRenta
                                numeroRentasSucursalRango = numeroRentasSucursalRango +1
                                
                                
                contadorVentasPeriodoAnterior = 0
                contadorVentasPeriodoDespues = 0   
                #INGRESOS PERIODO ANTERIOR
                #Periodo anterior
                consultaVentasSucursalPeriodoAnterior = Ventas.objects.filter(fecha_venta__range=[fechaRestaInicio,fechaInicioRango], credito="N", sucursal = idSucursalInforme)
            
                if consultaVentasSucursalPeriodoAnterior:
                    for ventaRealizada in consultaVentasSucursalPeriodoAnterior:
                        montoVenta = ventaRealizada.monto_pagar
                        contadorVentasPeriodoAnterior = contadorVentasPeriodoAnterior + montoVenta
                
                consultaVentasSucursalPeriodoAnterior = Creditos.objects.filter(fecha_venta_credito__range=[fechaRestaInicio,fechaInicioRango], renta_id__isnull=True, sucursal = idSucursalInforme)
            
                if consultaVentasSucursalPeriodoAnterior:
                    for crceditoRealizado in consultaVentasSucursalPeriodoAnterior:
                        montoPagadoCredito = crceditoRealizado.monto_pagado
                        contadorVentasPeriodoAnterior = contadorVentasPeriodoAnterior + montoPagadoCredito
                        
                consultaRentasSucursalPeriodoAnterior = Rentas.objects.filter(fecha_apartado__range=[fechaRestaInicio,fechaInicioRango])
            
                if consultaRentasSucursalPeriodoAnterior:
                    for rentaRealizada in consultaRentasSucursalPeriodoAnterior:
                        empleadoQueRealizo = rentaRealizada.realizado_por_id
                        consultaEmpleado = Empleados.objects.filter(id_empleado = empleadoQueRealizo)
                        for datoEmpleado in consultaEmpleado:
                            idSucursal = datoEmpleado.id_sucursal_id
                        if idSucursal == None:
                            codigosProductosRentados = rentaRealizada.codigos_productos_renta
                            arregloCodigosProductos = codigosProductosRentados.split("-")
                            
                            contadorProductosRentados = 0
                            for producto in arregloCodigosProductos:
                                contadorProductosRentados = contadorProductosRentados + 1
                                strCodigoProducto = str(producto)
                                if contadorProductosRentados == 1:
                                    consultaProducto = ProductosRenta.objects.filter(codigo_producto = strCodigoProducto)

                                    for datoProducto in consultaProducto:
                                        sucursalProducto = datoProducto.sucursal_id
                                    intSucursalInforme = int(idSucursalInforme)
                                    if sucursalProducto == intSucursalInforme:
                                
                                        montoPagadoApartado = rentaRealizada.monto_pago_apartado
                                        montoPagadoRestante = rentaRealizada.monto_restante
                                        
                                        sumaPagosRenta = 0
                                        if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                                            sumaPagosRenta = rentaRealizada.monto_total_renta
                                        else: #Si ya se pago el restante
                                            sumaPagosRenta = montoPagadoApartado
                                        contadorVentasPeriodoAnterior = contadorVentasPeriodoAnterior + sumaPagosRenta
                                        
                        else:
                            intSucursalInforme = int(idSucursalInforme)
                            if idSucursal == intSucursalInforme:
                                
                                montoPagadoApartado = rentaRealizada.monto_pago_apartado
                                montoPagadoRestante = rentaRealizada.monto_restante
                                
                                sumaPagosRenta = 0
                                if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                                    sumaPagosRenta = rentaRealizada.monto_total_renta
                                else: #Si ya se pago el restante
                                    sumaPagosRenta = montoPagadoApartado
                                contadorVentasPeriodoAnterior = contadorVentasPeriodoAnterior + sumaPagosRenta
                
                #Periodo después.
                consultaVentasSucursalPeriodoDespues = Ventas.objects.filter(fecha_venta__range=[fechaFinalRango,fechaSumaFinal], credito="N", sucursal = idSucursalInforme)
            
                if consultaVentasSucursalPeriodoDespues:
                    for ventaRealizada in consultaVentasSucursalPeriodoDespues:
                        montoVenta = ventaRealizada.monto_pagar
                        contadorVentasPeriodoDespues = contadorVentasPeriodoDespues + montoVenta
                
                consultaCreditosSucursalPeriodoDespues = Creditos.objects.filter(fecha_venta_credito__range=[fechaFinalRango,fechaSumaFinal], renta_id__isnull=True, sucursal = idSucursalInforme)
            
                if consultaCreditosSucursalPeriodoDespues:
                    for crceditoRealizado in consultaCreditosSucursalPeriodoDespues:
                        montoPagadoCredito = crceditoRealizado.monto_pagado
                        contadorVentasPeriodoDespues = contadorVentasPeriodoDespues + montoPagadoCredito
                        
                consultaRentasSucursalPeriodoDespues = Rentas.objects.filter(fecha_apartado__range=[fechaFinalRango,fechaSumaFinal])
            
                if consultaRentasSucursalPeriodoDespues:
                    for rentaRealizada in consultaRentasSucursalPeriodoDespues:
                        empleadoQueRealizo = rentaRealizada.realizado_por_id
                        consultaEmpleado = Empleados.objects.filter(id_empleado = empleadoQueRealizo)
                        for datoEmpleado in consultaEmpleado:
                            idSucursal = datoEmpleado.id_sucursal_id
                        if idSucursal == None:
                            codigosProductosRentados = rentaRealizada.codigos_productos_renta
                            arregloCodigosProductos = codigosProductosRentados.split("-")
                            
                            contadorProductosRentados = 0
                            for producto in arregloCodigosProductos:
                                contadorProductosRentados = contadorProductosRentados + 1
                                strCodigoProducto = str(producto)
                                if contadorProductosRentados == 1:
                                    consultaProducto = ProductosRenta.objects.filter(codigo_producto = strCodigoProducto)

                                    for datoProducto in consultaProducto:
                                        sucursalProducto = datoProducto.sucursal_id
                                    intSucursalInforme = int(idSucursalInforme)
                                    if sucursalProducto == intSucursalInforme:
                                
                                        montoPagadoApartado = rentaRealizada.monto_pago_apartado
                                        montoPagadoRestante = rentaRealizada.monto_restante
                                        
                                        sumaPagosRenta = 0
                                        if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                                            sumaPagosRenta = rentaRealizada.monto_total_renta
                                        else: #Si ya se pago el restante
                                            sumaPagosRenta = montoPagadoApartado
                                        contadorVentasPeriodoDespues = contadorVentasPeriodoDespues + sumaPagosRenta
                                        
                        else:
                            intSucursalInforme = int(idSucursalInforme)
                            if idSucursal == intSucursalInforme:
                                
                                montoPagadoApartado = rentaRealizada.monto_pago_apartado
                                montoPagadoRestante = rentaRealizada.monto_restante
                                
                                sumaPagosRenta = 0
                                if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                                    sumaPagosRenta = rentaRealizada.monto_total_renta
                                else: #Si ya se pago el restante
                                    sumaPagosRenta = montoPagadoApartado
                                contadorVentasPeriodoDespues = contadorVentasPeriodoDespues + sumaPagosRenta
            
                
                #Porcentaje si ingresos son mayores en sucursal
                esMayorPeriodoSucursal = False

                if contadorVentasPeriodoAnterior == 0:
                    porcentajeIngresosSucursalRango = 100
                else:
                    porcentajeIngresosSucursalRango = (montoIngresoSucursalRango / contadorVentasPeriodoAnterior)
                    porcentajeIngresosSucursalRango = porcentajeIngresosSucursalRango - 1
                    porcentajeIngresosSucursalRango = porcentajeIngresosSucursalRango *100
                    
                    
                if porcentajeIngresosSucursalRango > 0:
                    esMayorPeriodoSucursal = True
                    
                else:
                    esMayorPeriodoSucursal = False
                porcentajeIngresosSucursalRango = round(porcentajeIngresosSucursalRango,2)   
                    
                    
                # - COMPRAS DEL AÑOOOOOOO ...................................................
                totalComprasRangoGasto = 0
                totalComprasRangoVenta = 0
                totalComprasRangoRenta= 0
                
                numeroComprasGastoRango = 0
                numeroComprasVentaRango = 0
                numeroComprasRentaRango = 0
                
                comprasProductosGastosSucursalRango= []
                comprasGastoSucursalDelRango = ComprasGastos.objects.filter(fecha_compra__range=[fechaInicioRango,fechaFinalRango])
                if comprasGastoSucursalDelRango:
                    for compra in comprasGastoSucursalDelRango:
                        montoComprado = compra.total_costoCompra
                        
                        
                        idCompra = compra.id_compraGasto
                        idProducto = compra.id_productoComprado_id
                        consultaProducto = ProductosGasto.objects.filter(id_producto = idProducto)
                        
                        for datoProducto in consultaProducto:
                            nombreProducto = datoProducto.nombre_producto
                            codigoProducto = datoProducto.codigo_producto
                            imagenProducto = datoProducto.imagen_producto
                            sucursalProducto = datoProducto.sucursal_id
                        nombreCompletoProducto = codigoProducto + " - "+nombreProducto
                        
                        fechaCompra = compra.fecha_compra
                        costoUnitarioCompra = compra.costo_unitario
                        cantidadComprada = compra.cantidad_comprada
                        totalMontoCompra = compra.total_costoCompra
                        
                        consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursalProducto)
                        for datoSucursal in consultaSucursal:
                            nombreSucursalProducto = datoSucursal.nombre
                        
                        idSucursalInforme = int(idSucursalInforme)
                        
                        if sucursalProducto == idSucursalInforme:
                            totalComprasRangoGasto = totalComprasRangoGasto + montoComprado
                            numeroComprasGastoRango = numeroComprasGastoRango +1
                            comprasProductosGastosSucursalRango.append([idCompra,nombreCompletoProducto,imagenProducto,fechaCompra,nombreSucursalProducto,costoUnitarioCompra,cantidadComprada,totalMontoCompra])
                else:
                    comprasProductosGastosSucursalRango = None
                    
                
                comprasProductosVentasSucursalRango = []
                comprasVentaSucursalDelRango = ComprasVentas.objects.filter(fecha_compra__range=[fechaInicioRango,fechaFinalRango])
                if comprasVentaSucursalDelRango:
                    for compra in comprasVentaSucursalDelRango:
                        montoComprado = compra.total_costoCompra
                    
                        
                        idCompra = compra.id_compraVenta
                        idProducto = compra.id_productoComprado_id
                        consultaProducto = ProductosVenta.objects.filter(id_producto = idProducto)
                        
                        for datoProducto in consultaProducto:
                            nombreProducto = datoProducto.nombre_producto
                            codigoProducto = datoProducto.codigo_producto
                            imagenProducto = datoProducto.imagen_producto
                            sucursalProducto = datoProducto.sucursal_id
                        nombreCompletoProducto = codigoProducto + " - "+nombreProducto
                        
                        fechaCompra = compra.fecha_compra
                        costoUnitarioCompra = compra.costo_unitario
                        cantidadComprada = compra.cantidad_comprada
                        totalMontoCompra = compra.total_costoCompra
                        
                        consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursalProducto)
                        for datoSucursal in consultaSucursal:
                            nombreSucursalProducto = datoSucursal.nombre
                            
                        idSucursalInforme = int(idSucursalInforme)
                        
                        if sucursalProducto == idSucursalInforme:
                            totalComprasRangoVenta = totalComprasRangoVenta + montoComprado
                            numeroComprasVentaRango = numeroComprasVentaRango +1
                            comprasProductosVentasSucursalRango.append([idCompra,nombreCompletoProducto,imagenProducto,fechaCompra,nombreSucursalProducto,costoUnitarioCompra,cantidadComprada,totalMontoCompra])
                else:
                    comprasProductosVentasSucursalRango = None
                
                
                comprasProductosRentasSucursalRango = []
                comprasRentasSucursalesDelRango = ComprasRentas.objects.filter(fecha_compra__range=[fechaInicioRango,fechaFinalRango])
                if comprasRentasSucursalesDelRango:
                    for compra in comprasRentasSucursalesDelRango:
                        montoComprado = compra.total_costoCompra
                        
                        
                        idCompra = compra.id_compraRenta
                        idProducto = compra.id_productoComprado_id
                        consultaProducto = ProductosRenta.objects.filter(id_producto = idProducto)
                        
                        for datoProducto in consultaProducto:
                            nombreProducto = datoProducto.nombre_producto
                            codigoProducto = datoProducto.codigo_producto
                            imagenProducto = datoProducto.imagen_producto
                            sucursalProducto = datoProducto.sucursal_id
                        nombreCompletoProducto = codigoProducto + " - "+nombreProducto
                        
                        fechaCompra = compra.fecha_compra
                        costoUnitarioCompra = compra.costo_unitario
                        cantidadComprada = compra.cantidad_comprada
                        totalMontoCompra = compra.total_costoCompra
                        
                        consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursalProducto)
                        for datoSucursal in consultaSucursal:
                            nombreSucursalProducto = datoSucursal.nombre
                            
                        idSucursalInforme = int(idSucursalInforme)
                        
                        if sucursalProducto == idSucursalInforme:
                            totalComprasRangoRenta = totalComprasRangoRenta + montoComprado
                            numeroComprasRentaRango = numeroComprasRentaRango +1
                            comprasProductosRentasSucursalRango.append([idCompra,nombreCompletoProducto,imagenProducto,fechaCompra,nombreSucursalProducto,costoUnitarioCompra,cantidadComprada,totalMontoCompra])
                else:
                    comprasProductosRentasSucursalRango = None            

                sumaTotalesComprasDelRango = totalComprasRangoGasto + totalComprasRangoVenta + totalComprasRangoRenta
                
                utilidadSucursalRango = montoIngresoSucursalRango - sumaTotalesComprasDelRango
                
                utilidadMayorRango = False
                if utilidadSucursalRango < 0:
                    utilidadMayorRango = False
                else:
                    utilidadMayorRango = True
                
                
                #TABLA COMPARATIVA RANGO DE FECHAS SUCURSAL.
 
                sucursalesRango = Sucursales.objects.all()
                infoSucursalesRango = []
                montosIngresosSucursalRango = []
                montosComprasSucursalRango = []
                gananciaSucursalesRango = []
                margenDeGananciaSucursalRango = []

                for sucursal in sucursalesRango:
                    idSucursal = sucursal.id_sucursal
                    nombre = sucursal.nombre

                    infoSucursalesRango.append([idSucursal, nombre])

                    #Ingresos de venta en el rango por sucursal.
                    consultaVentasSucursalRango = Ventas.objects.filter(fecha_venta__range=[fechaInicioRango,fechaFinalRango], credito="N", sucursal = idSucursal)
                    montoIngresoSucursalRangoTabla = 0

                    if consultaVentasSucursalRango:
                        for ventaRealizada in consultaVentasSucursalRango:
                            montoVenta = ventaRealizada.monto_pagar
                            montoIngresoSucursalRangoTabla = montoIngresoSucursalRangoTabla + montoVenta

                    consultaCreditosSucursalRango = Creditos.objects.filter(fecha_venta_credito__range=[fechaInicioRango,fechaFinalRango], renta_id__isnull=True, sucursal = idSucursal)
                    if consultaCreditosSucursalRango:
                        for creditoRealizado in consultaCreditosSucursalRango:
                            montoPagadoCredito = creditoRealizado.monto_pagado
                            montoIngresoSucursalRangoTabla = montoIngresoSucursalRangoTabla + montoPagadoCredito 

                    consultaRentasSucursalRango = Rentas.objects.filter(fecha_apartado__range=[fechaInicioRango,fechaFinalRango])
                    if consultaRentasSucursalRango:
                        for rentaRealizada in consultaRentasSucursalRango:
                            empleadoQueRealizo = rentaRealizada.realizado_por_id
                            consultaEmpleado = Empleados.objects.filter(id_empleado = empleadoQueRealizo)
                            for datoEmpleado in consultaEmpleado:
                                idSucursalEmpleado = datoEmpleado.id_sucursal_id
                            if idSucursalEmpleado == None:
                                codigosProductosRentados = rentaRealizada.codigos_productos_renta
                                arregloCodigosProductos = codigosProductosRentados.split("-")
                                
                                contadorProductosRentados = 0
                                for producto in arregloCodigosProductos:
                                    contadorProductosRentados = contadorProductosRentados + 1
                                    strCodigoProducto = str(producto)
                                    if contadorProductosRentados == 1:
                                        consultaProducto = ProductosRenta.objects.filter(codigo_producto = strCodigoProducto)

                                        for datoProducto in consultaProducto:
                                            sucursalProducto = datoProducto.sucursal_id
                                            
                                        if sucursalProducto == idSucursal:
                                    
                                            montoPagadoApartado = rentaRealizada.monto_pago_apartado
                                            montoPagadoRestante = rentaRealizada.monto_restante
                                            
                                            sumaPagosRenta = 0
                                            if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                                                sumaPagosRenta = rentaRealizada.monto_total_renta
                                            else: #Si ya se pago el restante
                                                sumaPagosRenta = montoPagadoApartado
                                            montoIngresoSucursalRangoTabla = montoIngresoSucursalRangoTabla + sumaPagosRenta

                                            
                            else:
                                if idSucursalEmpleado == idSucursal:
                                    
                                    montoPagadoApartado = rentaRealizada.monto_pago_apartado
                                    montoPagadoRestante = rentaRealizada.monto_restante
                                    
                                    sumaPagosRenta = 0
                                    if montoPagadoRestante == 0: #Ya aparto pero no ha pagado el restante..
                                        sumaPagosRenta = rentaRealizada.monto_total_renta
                                    else: #Si ya se pago el restante
                                        sumaPagosRenta = montoPagadoApartado
                                    montoIngresoSucursalRangoTabla = montoIngresoSucursalRangoTabla + sumaPagosRenta

                    #Compras de la sucursal.
                    montoCompradoSucursalRango = 0
                    comprasGastoSucursalRango = ComprasGastos.objects.filter(fecha_compra__range=[fechaInicioRango,fechaFinalRango])
                    if comprasGastoSucursalRango:
                        for compra in comprasGastoSucursalRango:
                            montoComprado = compra.total_costoCompra
                            idCompra = compra.id_compraGasto
                            idProducto = compra.id_productoComprado_id
                            consultaProducto = ProductosGasto.objects.filter(id_producto = idProducto)
                        
                            for datoProducto in consultaProducto:
                                sucursalProducto = datoProducto.sucursal_id
                                
                            idSucursal = int(idSucursal)
                            
                            if sucursalProducto == idSucursal:
                                montoCompradoSucursalRango = montoCompradoSucursalRango + montoComprado

                    comprasVentaSucursalDelRango = ComprasVentas.objects.filter(fecha_compra__range=[fechaInicioRango,fechaFinalRango])
                    if comprasVentaSucursalDelRango:
                        for compra in comprasVentaSucursalDelRango:
                            montoComprado = compra.total_costoCompra
                            idCompra = compra.id_compraVenta
                            idProducto = compra.id_productoComprado_id
                            consultaProducto = ProductosVenta.objects.filter(id_producto = idProducto)
                            
                            for datoProducto in consultaProducto:
                                sucursalProducto = datoProducto.sucursal_id
                                
                            idSucursal = int(idSucursal)
                            
                            if sucursalProducto == idSucursal:
                                montoCompradoSucursalRango = montoCompradoSucursalRango + montoComprado

                        
                    comprasRentasSucursalesDelRango = ComprasRentas.objects.filter(fecha_compra__range=[fechaInicioRango,fechaFinalRango])
                    if comprasRentasSucursalesDelRango:
                        for compra in comprasRentasSucursalesDelRango:
                            montoComprado = compra.total_costoCompra
                            idCompra = compra.id_compraRenta
                            idProducto = compra.id_productoComprado_id
                            consultaProducto = ProductosRenta.objects.filter(id_producto = idProducto)
                            
                            for datoProducto in consultaProducto:
                                sucursalProducto = datoProducto.sucursal_id
                                
                            idSucursal = int(idSucursal)
                            
                            if sucursalProducto == idSucursal:
                                montoCompradoSucursalRango = montoCompradoSucursalRango + montoComprado


                    #COMPRAS
                    
                    gananciaSucursalRango = montoIngresoSucursalRangoTabla - montoCompradoSucursalRango
                    if gananciaSucursalRango > 0:
                        signoRango = "+"
                    else:
                        signoRango = "-"
                        
                    #margen
                    if montoCompradoSucursalRango == 0:
                        margenSucursalRango = montoIngresoSucursalRangoTabla
                    else:
                        margenSucursalRango = (montoIngresoSucursalRangoTabla * 100)/montoCompradoSucursalRango
                        margenSucursalRango = round(margenSucursalRango,2)
                        margenSucursalRango = margenSucursalRango - 100
                        margenSucursalRango=round(margenSucursalRango,2)
                    margenDeGananciaSucursalRango.append(margenSucursalRango)
                    
                    
                    montosIngresosSucursalRango.append(montoIngresoSucursalRangoTabla)
                    montosComprasSucursalRango.append(montoCompradoSucursalRango)
                    gananciaSucursalesRango.append([gananciaSucursalRango, signoRango])
                    
                listaComparativaSucursalesRango = zip(infoSucursalesRango, montosIngresosSucursalRango,montosComprasSucursalRango, gananciaSucursalesRango, margenDeGananciaSucursalRango)

            
            
                
                return render(request, "18 Informe Ventas Sucursal/informeDeSucursal.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, "notificacionRenta":notificacionRenta,
                                                                                         "nombreSucursal":nombreSucursal,"direccion":direccion, "telefono":telefono,"latitud":latitud, "longitud":longitud,
                                                                                         "diadehoy":diadehoy, "mesdehoy":mesdehoy, "añoHoy":añoHoy,"idSucursalInforme":idSucursalInforme,
                                                                                         "montoIngresoSucursalMes":montoIngresoSucursalMes, "contadorVentasSucursalMes":contadorVentasSucursalMes, "contadorRentasSucursalMes":contadorRentasSucursalMes, "contadorCreditosSucursalMes":contadorCreditosSucursalMes,
                                                                                         "numeroVentasSucursalMes":numeroVentasSucursalMes, "numeroRentasSucursalMes":numeroRentasSucursalMes, "numeroCreditosSucursalMes":numeroCreditosSucursalMes,
                                                                                         "porcentajeIngresosSucursalMes":porcentajeIngresosSucursalMes,"esMayor":esMayor, "montoIngresoMesSucursalAnterior":montoIngresoMesSucursalAnterior, "mesHaceUnMesLetra":mesHaceUnMesLetra,
                                                                                         "montoIngresoEnero":montoIngresoEnero,"montoIngresoFebrero":montoIngresoFebrero, "montoIngresoMarzo":montoIngresoMarzo, "montoIngresoAbril":montoIngresoAbril, "montoIngresoMayo":montoIngresoMayo, "montoIngresoJunio":montoIngresoJunio, "montoIngresoJulio":montoIngresoJulio,"montoIngresoAgosto":montoIngresoAgosto,
                                                                                         "montoIngresoSeptiembre":montoIngresoSeptiembre, "montoIngresoOctubre":montoIngresoOctubre, "montoIngresoNoviembre":montoIngresoNoviembre, "montoIngresoDiciembre":montoIngresoDiciembre,
                                                                                         "totalComprasMesGasto":totalComprasMesGasto, "totalComprasMesVenta":totalComprasMesVenta, "totalComprasMesRenta":totalComprasMesRenta, "sumaTotalesCompras":sumaTotalesCompras, 
                                                                                         "numeroComprasGasto":numeroComprasGasto, "numeroComprasVenta":numeroComprasVenta, "numeroComprasRenta":numeroComprasRenta, 
                                                                                         "comprasProductosGastosSucursalMes":comprasProductosGastosSucursalMes,"comprasProductosVentasSucursalMes":comprasProductosVentasSucursalMes,"comprasProductosRentasSucursalMes":comprasProductosRentasSucursalMes, "utilidadSucursalMes":utilidadSucursalMes,"utilidadMayor":utilidadMayor,
                                                                                         "infoSucursales":infoSucursales, "montosVendidos":montosVendidos, "listaComparativaSucursalesMes":listaComparativaSucursalesMes,
                                                                                         "montoIngresoSucursalAño":montoIngresoSucursalAño, "añoMenosUno":añoMenosUno, "añoMenosDos":añoMenosDos,"añoMenosTres":añoMenosTres, "contadorVentasHaceUnAño":contadorVentasHaceUnAño,
                                                                                         "esMayorAñoSucursal":esMayorAñoSucursal, "porcentajeIngresosSucursalAño":porcentajeIngresosSucursalAño,
                                                                                         "contadorVentasHaceUnAño":contadorVentasHaceUnAño, "contadorVentasHaceDosAños":contadorVentasHaceDosAños, "contadorVentasHaceTresAños":contadorVentasHaceTresAños,
                                                                                         "sumaTotalesComprasDelAño":sumaTotalesComprasDelAño, "utilidadSucursalAño":utilidadSucursalAño, "utilidadMayorAño":utilidadMayorAño,
                                                                                         "totalComprasAñoGasto":totalComprasAñoGasto,"totalComprasAñoVenta":totalComprasAñoVenta,"totalComprasAñoRenta":totalComprasAñoRenta,
                                                                                         "numeroComprasGastoAño":numeroComprasGastoAño,"numeroComprasVentaAño":numeroComprasVentaAño, "numeroComprasRentaAño":numeroComprasRentaAño,
                                                                                         "comprasProductosGastosSucursalAño":comprasProductosGastosSucursalAño,"comprasProductosVentasSucursalAño":comprasProductosVentasSucursalAño, "comprasProductosRentasSucursalAño":comprasProductosRentasSucursalAño,
                                                                                         "listaComparativaSucursalesAño":listaComparativaSucursalesAño,
                                                                                         "rangoFechaRecibida":rangoFechaRecibida, "stringFechaInicioRango":stringFechaInicioRango,"stringFechaFinalRango":stringFechaFinalRango, "montoIngresoSucursalRango":montoIngresoSucursalRango,
                                                                                         "fechaTextoInicioPeriodoAnterior":fechaTextoInicioPeriodoAnterior, "fechaTextoFinalPeriodoDespues":fechaTextoFinalPeriodoDespues,
                                                                                         "contadorVentasPeriodoAnterior":contadorVentasPeriodoAnterior,"contadorVentasPeriodoDespues":contadorVentasPeriodoDespues, "esMayorPeriodoSucursal":esMayorPeriodoSucursal,
                                                                                         "porcentajeIngresosSucursalRango":porcentajeIngresosSucursalRango,
                                                                                         "totalComprasRangoGasto":totalComprasRangoGasto, "totalComprasRangoVenta":totalComprasRangoVenta, "totalComprasRangoRenta":totalComprasRangoRenta,
                                                                                         "numeroComprasGastoRango":numeroComprasGastoRango,"numeroComprasVentaRango":numeroComprasVentaRango, "numeroComprasRentaRango":numeroComprasRentaRango, "utilidadSucursalRango":utilidadSucursalRango,"utilidadMayorRango":utilidadMayorRango, "sumaTotalesComprasDelRango":sumaTotalesComprasDelRango, "listaComparativaSucursalesRango":listaComparativaSucursalesRango,"notificacionCita":notificacionCita})
                
                

            return render(request, "18 Informe Ventas Sucursal/informeDeSucursal.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, "notificacionRenta":notificacionRenta,
                                                                                         "nombreSucursal":nombreSucursal,"direccion":direccion, "telefono":telefono,"latitud":latitud, "longitud":longitud,
                                                                                         "diadehoy":diadehoy, "mesdehoy":mesdehoy, "añoHoy":añoHoy,"idSucursalInforme":idSucursalInforme,
                                                                                         "montoIngresoSucursalMes":montoIngresoSucursalMes, "contadorVentasSucursalMes":contadorVentasSucursalMes, "contadorRentasSucursalMes":contadorRentasSucursalMes, "contadorCreditosSucursalMes":contadorCreditosSucursalMes,
                                                                                         "numeroVentasSucursalMes":numeroVentasSucursalMes, "numeroRentasSucursalMes":numeroRentasSucursalMes, "numeroCreditosSucursalMes":numeroCreditosSucursalMes,
                                                                                         "porcentajeIngresosSucursalMes":porcentajeIngresosSucursalMes,"esMayor":esMayor, "montoIngresoMesSucursalAnterior":montoIngresoMesSucursalAnterior, "mesHaceUnMesLetra":mesHaceUnMesLetra,
                                                                                         "montoIngresoEnero":montoIngresoEnero,"montoIngresoFebrero":montoIngresoFebrero, "montoIngresoMarzo":montoIngresoMarzo, "montoIngresoAbril":montoIngresoAbril, "montoIngresoMayo":montoIngresoMayo, "montoIngresoJunio":montoIngresoJunio, "montoIngresoJulio":montoIngresoJulio,"montoIngresoAgosto":montoIngresoAgosto,
                                                                                         "montoIngresoSeptiembre":montoIngresoSeptiembre, "montoIngresoOctubre":montoIngresoOctubre, "montoIngresoNoviembre":montoIngresoNoviembre, "montoIngresoDiciembre":montoIngresoDiciembre,
                                                                                         "totalComprasMesGasto":totalComprasMesGasto, "totalComprasMesVenta":totalComprasMesVenta, "totalComprasMesRenta":totalComprasMesRenta, "sumaTotalesCompras":sumaTotalesCompras, 
                                                                                         "numeroComprasGasto":numeroComprasGasto, "numeroComprasVenta":numeroComprasVenta, "numeroComprasRenta":numeroComprasRenta, 
                                                                                         "comprasProductosGastosSucursalMes":comprasProductosGastosSucursalMes,"comprasProductosVentasSucursalMes":comprasProductosVentasSucursalMes,"comprasProductosRentasSucursalMes":comprasProductosRentasSucursalMes, "utilidadSucursalMes":utilidadSucursalMes,"utilidadMayor":utilidadMayor,
                                                                                         "infoSucursales":infoSucursales, "montosVendidos":montosVendidos, "listaComparativaSucursalesMes":listaComparativaSucursalesMes,
                                                                                         "montoIngresoSucursalAño":montoIngresoSucursalAño, "añoMenosUno":añoMenosUno, "añoMenosDos":añoMenosDos,"añoMenosTres":añoMenosTres, "contadorVentasHaceUnAño":contadorVentasHaceUnAño,
                                                                                         "esMayorAñoSucursal":esMayorAñoSucursal, "porcentajeIngresosSucursalAño":porcentajeIngresosSucursalAño,
                                                                                         "contadorVentasHaceUnAño":contadorVentasHaceUnAño, "contadorVentasHaceDosAños":contadorVentasHaceDosAños, "contadorVentasHaceTresAños":contadorVentasHaceTresAños,
                                                                                         "sumaTotalesComprasDelAño":sumaTotalesComprasDelAño, "utilidadSucursalAño":utilidadSucursalAño, "utilidadMayorAño":utilidadMayorAño,
                                                                                         "totalComprasAñoGasto":totalComprasAñoGasto,"totalComprasAñoVenta":totalComprasAñoVenta,"totalComprasAñoRenta":totalComprasAñoRenta,
                                                                                         "numeroComprasGastoAño":numeroComprasGastoAño,"numeroComprasVentaAño":numeroComprasVentaAño, "numeroComprasRentaAño":numeroComprasRentaAño,
                                                                                         "comprasProductosGastosSucursalAño":comprasProductosGastosSucursalAño,"comprasProductosVentasSucursalAño":comprasProductosVentasSucursalAño, "comprasProductosRentasSucursalAño":comprasProductosRentasSucursalAño,
                                                                                         "listaComparativaSucursalesAño":listaComparativaSucursalesAño, "notificacionCita":notificacionCita})
    else:
        
        return render(request,"1 Login/login.html")
    
    
def agregarCertificado(request):
    if "idSesion" in request.session:
     
        #Variables de sesión
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']
        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
        
        #notificacionRentas
        notificacionRenta = notificacionRentas(request)

        #notificacionCitas
        notificacionCita = notificacionCitas(request)

        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)

        if request.method == "POST":
            sucursalCertificado = request.POST["sucursalCertificado"]
            consultaSucursalCertificado = Sucursales.objects.filter(id_sucursal = sucursalCertificado)
            for datoSucursal in consultaSucursalCertificado:
                nombreSucursal = datoSucursal.nombre
            #CERTIFICADOS
            #Folio certificado
            consultaCertificados = CertificadosProgramados.objects.all()

            nuevoCodigoCertificado = ""
            if consultaCertificados:
                for certificado in consultaCertificados:
                    certificadoActual = certificado.codigo_certificado

                    splitCertificadoActual = certificadoActual.split("-")
                    posicionNumero = splitCertificadoActual[1]
                    posicionNumeroInt = int(posicionNumero)
                    nuevaPosicionNumero = posicionNumeroInt+1
                    nuevoCodigoCertificado = "CERT-"+str(nuevaPosicionNumero)
            else:
                nuevoCodigoCertificado = "CERT-1000"

            #Fechas
            fechaHoy = datetime.now()
            fechaVigencia = fechaHoy + relativedelta(months=1)

            #Clientes
            clientes = Clientes.objects.all()

            #Servicios de esa sucursal
            consultaServicios = ServiciosCertificados.objects.filter(sucursal_id__id_sucursal = sucursalCertificado)
            consultaServiciosJava = ServiciosCertificados.objects.filter(sucursal_id__id_sucursal = sucursalCertificado)

            sucursalCertificado = str(sucursalCertificado)
            data = [i.json() for i in ServiciosCertificados.objects.filter(sucursal_id__id_sucursal = sucursalCertificado)]



            return render(request,"19 Certificados/agregarCertificado.html",{"nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "puestoEmpleado":puestoEmpleado, "letra":letra,
                                                                         "notificacionRenta":notificacionRenta,"consultaPermisos":consultaPermisos,"notificacionCita":notificacionCita,
                                                                         "nuevoCodigoCertificado":nuevoCodigoCertificado, "nombreSucursal":nombreSucursal, "fechaHoy":fechaHoy, 
                                                                         "fechaVigencia":fechaVigencia, "clientes":clientes, "consultaServicios":consultaServicios, "serviciosTotales":json.dumps(data),
                                                                         "consultaServiciosJava":consultaServiciosJava, "sucursalCertificado":sucursalCertificado})
        
        else:
            if tipoUsuario == "esAdmin":
                sucursales = Sucursales.objects.all()
            else:
                consultaEmpleado = Empleados.objects.filter(id_empleado = idEmpleado)
                for datoEmpleado in consultaEmpleado:
                    sucursalEmpleado = datoEmpleado.sucursal_id
                
                sucursales = Sucursales.objects.filter(id_sucursal = sucursalEmpleado)
            return render(request,"19 Certificados/seleccionarAgregarCertificado.html",{"nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "puestoEmpleado":puestoEmpleado, "letra":letra,
                                                                         "notificacionRenta":notificacionRenta,"consultaPermisos":consultaPermisos,"notificacionCita":notificacionCita,
                                                                         "sucursales":sucursales})
        
       
    
    
    else:
        return render(request,"1 Login/login.html")  
    
def agregarTratamiento(request):
    if "idSesion" in request.session:
     
        #Variables de sesión
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']
        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
        
        #notificacionRentas
        notificacionRenta = notificacionRentas(request)

        #notificacionCitas
        notificacionCita = notificacionCitas(request)

        #Permisos
        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)
        
        #Sucursales
        sucursales = Sucursales.objects.all()
        
        #Consulta del código siguiente de tratamiento.
        consultaTratamientos = Tratamientos.objects.all()
        
        #Codigo Tratamiento
        if consultaTratamientos:
            ultimoCodigoTratamiento = ""
            for tratamiento in consultaTratamientos:
                ultimoCodigoTratamiento = tratamiento.codigo_tratamiento
            arrayUltimoCodigoTratamiento = ultimoCodigoTratamiento.split("-")
            indice = arrayUltimoCodigoTratamiento[1]
            nuevoIndice = int(indice)+1
            codigoTratamiento = arrayUltimoCodigoTratamiento[0]+"-"+str(nuevoIndice)
        else:
            codigoTratamiento = "TRAT-1000"
                
                
        #Botón Agregar Tratamiento
        if request.method == "POST":
            
            codigoTratamiento = request.POST["codigoTratamiento"]
            tipoTratamiento = request.POST["tipoTratamiento"]
            nombreTratamiento = request.POST["nombreTratamiento"]
            descripcionTratamiento = request.POST["descripcionTratamiento"]
            costoTratamiento = request.POST["costoTratamiento"]
            tiempoMinimo = request.POST["tiempoMinimo"]
            tiempoMaximo = request.POST["tiempoMaximo"]
            complementos = request.POST["complementos"]
            sesionesRecomendadas = request.POST["sesionesRecomendadas"]
            periodoRecomendado = request.POST["periodoRecomendado"]
            listaSucursales = request.POST.getlist('sucursales')
            
            if descripcionTratamiento == "":
                descripcionTratamiento = "Sin descripción"
            
            if complementos == "":
                complementos = "Sin complementos"
            
            if "Todas" in listaSucursales:
                #Esta en todas las sucursales
                sucursales = Sucursales.objects.all()
                contadorSucursales = 0
                for sucursal in sucursales:
                    idSucursal = sucursal.id_sucursal
                    contadorSucursales = contadorSucursales + 1

                    if contadorSucursales == 1:
                        codigoTratamientoNuevo = codigoTratamiento
                    else:
                        codigoEnPartes = codigoTratamiento.split("-")
                        parteIndice = codigoEnPartes[1]
                        parteIndiceNueva = int(parteIndice) + (contadorSucursales-1)
                        codigoTratamientoNuevo = codigoEnPartes[0] +"-"+str(parteIndiceNueva) 


                    registroTratamiento = Tratamientos(codigo_tratamiento = codigoTratamientoNuevo,
                                                        tipo_tratamiento = tipoTratamiento,
                                                        nombre_tratamiento = nombreTratamiento,
                                                        descripcion_tratamiento = descripcionTratamiento,
                                                        costo_venta_tratamiento = costoTratamiento,
                                                        tiempo_minimo = tiempoMinimo,
                                                        tiempo_maximo = tiempoMaximo,
                                                        complementos_tratamiento = complementos,
                                                        sesiones_rec_tratamiento = sesionesRecomendadas,
                                                        periodo_rec_tratamiento = periodoRecomendado,
                                                        sucursal = Sucursales.objects.get(id_sucursal = idSucursal))
                    registroTratamiento.save()
            else:
                contadorSucursales = 0
                for sucursal in listaSucursales:
                    idSucursal = int(sucursal)
                    contadorSucursales = contadorSucursales+1
                    
                    if contadorSucursales == 1:
                        codigoTratamientoNuevo = codigoTratamiento
                    else:
                        codigoEnPartes = codigoTratamiento.split("-")
                        parteIndice = codigoEnPartes[1]
                        parteIndiceNueva = int(parteIndice) + (contadorSucursales-1)
                        codigoTratamientoNuevo = codigoEnPartes[0] +"-"+str(parteIndiceNueva)
                    
                    registroTratamiento = Tratamientos(codigo_tratamiento = codigoTratamiento,
                                                        tipo_tratamiento = tipoTratamiento,
                                                        nombre_tratamiento = nombreTratamiento,
                                                        descripcion_tratamiento = descripcionTratamiento,
                                                        costo_venta_tratamiento = costoTratamiento,
                                                        tiempo_minimo = tiempoMinimo,
                                                        tiempo_maximo = tiempoMaximo,
                                                        complementos_tratamiento = complementos,
                                                        sesiones_rec_tratamiento = sesionesRecomendadas,
                                                        periodo_rec_tratamiento = periodoRecomendado,
                                                        sucursal = Sucursales.objects.get(id_sucursal = idSucursal))
                    registroTratamiento.save()
            if registroTratamiento:
                request.session["tratamientoAgregado"] = "El tratamiento fue agregado satisfactoriamente"
                return redirect("/agregarTratamiento/")
            else:
                request.session["tratamientoNoAgregado"] = "Error en la base de datos, intente más tarde."
                return redirect("/agregarTratamiento/")
        
        if "tratamientoAgregado" in request.session:
            tratamientoAgregado = request.session["tratamientoAgregado"]
            del request.session["tratamientoAgregado"]
            return render(request,"20 Tratamientos/agregarTratamiento.html",{"nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "puestoEmpleado":puestoEmpleado, "letra":letra,
                                                                         "notificacionRenta":notificacionRenta,"consultaPermisos":consultaPermisos, "sucursales":sucursales,
                                                                         "codigoTratamiento":codigoTratamiento, "tratamientoAgregado":tratamientoAgregado, "notificacionCita":notificacionCita})
        
        if "tratamientoNoAgregado" in request.session:
            tratamientoNoAgregado = request.session["tratamientoNoAgregado"]
            del request.session["tratamientoNoAgregado"]
            return render(request,"20 Tratamientos/agregarTratamiento.html",{"nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "puestoEmpleado":puestoEmpleado, "letra":letra,
                                                                         "notificacionRenta":notificacionRenta,"consultaPermisos":consultaPermisos, "sucursales":sucursales,
                                                                         "codigoTratamiento":codigoTratamiento, "tratamientoNoAgregado":tratamientoNoAgregado, "notificacionCita":notificacionCita})
        
        
        return render(request,"20 Tratamientos/agregarTratamiento.html",{"nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "puestoEmpleado":puestoEmpleado, "letra":letra,
                                                                         "notificacionRenta":notificacionRenta,"consultaPermisos":consultaPermisos, "sucursales":sucursales,
                                                                         "codigoTratamiento":codigoTratamiento, "notificacionCita":notificacionCita})
    
    
    else:
        return render(request,"1 Login/login.html")  
    
    

def verTratamientos(request):

    if "idSesion" in request.session:

       # Variables de sesión
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']
        idPerfil = idEmpleado
        idConfig = idEmpleado
        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
        #notificacionRentas
        notificacionRenta = notificacionRentas(request)
        #notificacionCitas
        notificacionCita = notificacionCitas(request)
        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)
        
        if request.method == "POST":
            sucursalTratamientos = request.POST["sucursalTratamientos"]
            tratamientosCorporales = []
            tratamientosCorporalesModal = []

            tratamientosFaciales = []
            tratamientosFacialesModal = []

            tratamientosCorporalesModalProductos = []
            tratamientosFacialesModalProductos = []
            #Mostrar todas las sucursales
            if sucursalTratamientos == "todasLasSucursales":
                consultaTratamientos = Tratamientos.objects.all()
                nombreSucursalView = "Todas las sucursales"
                
            else:
                consultaTratamientos = Tratamientos.objects.filter(sucursal_id__id_sucursal = sucursalTratamientos)
                consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursalTratamientos)
                for datoSucursal in consultaSucursal:
                    nombreSucursalView = datoSucursal.nombre

            paqueteDeProductosTratamiento = []
            for tratamiento in consultaTratamientos:
                idTratamiento = tratamiento.id_tratamiento
                codigoTratamiento = tratamiento.codigo_tratamiento
                tipoTratamiento = tratamiento.tipo_tratamiento
                nombreTratamiento = tratamiento.nombre_tratamiento
                descripcionTratamiento = tratamiento.descripcion_tratamiento
                costoVentaTratamiento = tratamiento.costo_venta_tratamiento
                tiempoMinimoTratamiento = tratamiento.tiempo_minimo
                tiempoMaximoTratamiento = tratamiento.tiempo_maximo
                complementosTratamiento = tratamiento.complementos_tratamiento
                sesionesRecomendadasTratamiento = tratamiento.sesiones_rec_tratamiento
                periodoRecomendadoTratamiento = tratamiento.periodo_rec_tratamiento
                sucursal = tratamiento.sucursal_id

                datosSucursal = Sucursales.objects.filter(id_sucursal = sucursal)

                infoSucursalTratamiento = []
                arrayColores = ["primary","success","danger","warning","info"]
                for sucursal in datosSucursal:
                    idSucursal = sucursal.id_sucursal
                    nombreSucursal = sucursal.nombre
                    if sucursalTratamientos == "todasLasSucursales":
                        colorRandom = random.choice(arrayColores)
                    else:
                        colorRandom = "warning"
                infoSucursalTratamiento.append([idSucursal,nombreSucursal,colorRandom])

                #Consulta para saber si tiene un paquete de productos ya asignado
                tratamientoYaTienePaquete = False
                paquetesTratamientos = TratamientosProductosGasto.objects.all()
                productosTratamiento = []
                for productoUtilizado in paquetesTratamientos:
                    tratamientoUtilizado = productoUtilizado.tratamiento_id
                    
                    if tratamientoUtilizado == idTratamiento:
                        tratamientoYaTienePaquete = True
                        
                        #Ya tiene productos asignados... Sacar todos los productos y mandarlos a un arreglo de ese servicio.
                        idProductoGastoUtilizado = productoUtilizado.producto_gasto_id
                        cantidadUtilizada = productoUtilizado.cantidad
                        datosProducto = ProductosGasto.objects.filter(id_producto = idProductoGastoUtilizado)
                        for dato in datosProducto:
                            codigo = dato.codigo_producto
                            idProducto = dato.id_producto
                            sku = dato.sku_producto
                            nombre = dato.nombre_producto
                            cantidad_existencias = dato.cantidad
                            
                        productosTratamiento.append([idProducto,codigo,sku,nombre,cantidadUtilizada,cantidad_existencias])
                    
                if tratamientoYaTienePaquete:
                    paqueteDeProductosTratamiento.append(productosTratamiento)
                

                #asdfasdfasdf
                
                if tipoTratamiento == "Corporal":
                    tratamientosCorporales.append([idTratamiento,codigoTratamiento,
                    nombreTratamiento,descripcionTratamiento,costoVentaTratamiento,
                    tiempoMinimoTratamiento,tiempoMaximoTratamiento,complementosTratamiento,
                    sesionesRecomendadasTratamiento,periodoRecomendadoTratamiento,infoSucursalTratamiento, tratamientoYaTienePaquete, paqueteDeProductosTratamiento])


                    tratamientosCorporalesModal.append([idTratamiento,codigoTratamiento,
                    nombreTratamiento,descripcionTratamiento,costoVentaTratamiento,
                    tiempoMinimoTratamiento,tiempoMaximoTratamiento,complementosTratamiento,
                    sesionesRecomendadasTratamiento,periodoRecomendadoTratamiento,infoSucursalTratamiento, tratamientoYaTienePaquete, paqueteDeProductosTratamiento])

                    tratamientosCorporalesModalProductos.append([idTratamiento,codigoTratamiento,
                    nombreTratamiento,descripcionTratamiento,costoVentaTratamiento,
                    tiempoMinimoTratamiento,tiempoMaximoTratamiento,complementosTratamiento,
                    sesionesRecomendadasTratamiento,periodoRecomendadoTratamiento,infoSucursalTratamiento, tratamientoYaTienePaquete, paqueteDeProductosTratamiento])
                else:
                    tratamientosFaciales.append([idTratamiento,codigoTratamiento,
                    nombreTratamiento,descripcionTratamiento,costoVentaTratamiento,
                    tiempoMinimoTratamiento,tiempoMaximoTratamiento,complementosTratamiento,
                    sesionesRecomendadasTratamiento,periodoRecomendadoTratamiento,infoSucursalTratamiento, tratamientoYaTienePaquete, paqueteDeProductosTratamiento])


                    tratamientosFacialesModal.append([idTratamiento,codigoTratamiento,
                    nombreTratamiento,descripcionTratamiento,costoVentaTratamiento,
                    tiempoMinimoTratamiento,tiempoMaximoTratamiento,complementosTratamiento,
                    sesionesRecomendadasTratamiento,periodoRecomendadoTratamiento,infoSucursalTratamiento, tratamientoYaTienePaquete, paqueteDeProductosTratamiento])

                    tratamientosFacialesModalProductos.append([idTratamiento,codigoTratamiento,
                    nombreTratamiento,descripcionTratamiento,costoVentaTratamiento,
                    tiempoMinimoTratamiento,tiempoMaximoTratamiento,complementosTratamiento,
                    sesionesRecomendadasTratamiento,periodoRecomendadoTratamiento,infoSucursalTratamiento, tratamientoYaTienePaquete, paqueteDeProductosTratamiento])

            return render(request, "20 Tratamientos/verTratamientos.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
                "notificacionRenta":notificacionRenta, "tratamientosCorporales":tratamientosCorporales,
                "tratamientosCorporalesModal":tratamientosCorporalesModal,"tratamientosFaciales":tratamientosFaciales,"tratamientosFacialesModal":tratamientosFacialesModal,"nombreSucursalView":nombreSucursalView,
                "tratamientosCorporalesModalProductos":tratamientosCorporalesModalProductos,"tratamientosFacialesModalProductos":tratamientosFacialesModalProductos, "notificacionCita":notificacionCita})
    
        else:           
            if tipoUsuario == "esAdmin":
                sucursales = Sucursales.objects.all()
                
                if "tratamientoActualizado" in request.session:
                    tratamientoActualizado = request.session["tratamientoActualizado"]
                    del request.session["tratamientoActualizado"]
                    return render(request, "20 Tratamientos/seleccionarSucursalTratamientos.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
                    "notificacionRenta":notificacionRenta, "sucursales":sucursales, "tratamientoActualizado":tratamientoActualizado,"tipoUsuario":tipoUsuario, "notificacionCita":notificacionCita})

                if "tratamientoNoActualizado" in request.session:
                    tratamientoNoActualizado = request.session["tratamientoNoActualizado"]
                    del request.session["tratamientoNoActualizado"]
                    return render(request, "20 Tratamientos/seleccionarSucursalTratamientos.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
                    "notificacionRenta":notificacionRenta, "sucursales":sucursales,"tratamientoNoActualizado":tratamientoNoActualizado,"tipoUsuario":tipoUsuario, "notificacionCita":notificacionCita})

                if "registroPaqueteProductos" in request.session:
                    registroPaqueteProductos = request.session["registroPaqueteProductos"]
                    del request.session["registroPaqueteProductos"]
                    return render(request, "20 Tratamientos/seleccionarSucursalTratamientos.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
                    "notificacionRenta":notificacionRenta, "sucursales":sucursales,"registroPaqueteProductos":registroPaqueteProductos,"tipoUsuario":tipoUsuario, "notificacionCita":notificacionCita})

                if "noRegistroPaqueteProductos" in request.session:
                    noRegistroPaqueteProductos = request.session["noRegistroPaqueteProductos"]
                    del request.session["noRegistroPaqueteProductos"]
                    return render(request, "20 Tratamientos/seleccionarSucursalTratamientos.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
                    "notificacionRenta":notificacionRenta, "sucursales":sucursales,"noRegistroPaqueteProductos":noRegistroPaqueteProductos,"tipoUsuario":tipoUsuario, "notificacionCita":notificacionCita})

                if "paqueteProductoTratamientoActualizado" in request.session:
                    paqueteProductoTratamientoActualizado = request.session["paqueteProductoTratamientoActualizado"]
                    del request.session["paqueteProductoTratamientoActualizado"]
                    return render(request, "20 Tratamientos/seleccionarSucursalTratamientos.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
                    "notificacionRenta":notificacionRenta, "sucursales":sucursales,"paqueteProductoTratamientoActualizado":paqueteProductoTratamientoActualizado,"tipoUsuario":tipoUsuario, "notificacionCita":notificacionCita})


                return render(request, "20 Tratamientos/seleccionarSucursalTratamientos.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
                "notificacionRenta":notificacionRenta, "sucursales":sucursales,"tipoUsuario":tipoUsuario, "notificacionCita":notificacionCita})
            else:
                consultaEmpleado = Empleados.objects.filter(id_empleado = idEmpleado)
                for datoEmpleado in consultaEmpleado:
                    sucursalEmpleado = datoEmpleado.id_sucursal_id
                sucursales = Sucursales.objects.filter(id_sucursal = sucursalEmpleado)
                
                if "tratamientoActualizado" in request.session:
                    tratamientoActualizado = request.session["tratamientoActualizado"]
                    del request.session["tratamientoActualizado"]
                    return render(request, "20 Tratamientos/seleccionarSucursalTratamientos.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
                    "notificacionRenta":notificacionRenta, "sucursales":sucursales, "tratamientoActualizado":tratamientoActualizado,"tipoUsuario":tipoUsuario, "notificacionCita":notificacionCita})

                if "tratamientoNoActualizado" in request.session:
                    tratamientoNoActualizado = request.session["tratamientoNoActualizado"]
                    del request.session["tratamientoNoActualizado"]
                    return render(request, "20 Tratamientos/seleccionarSucursalTratamientos.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
                    "notificacionRenta":notificacionRenta, "sucursales":sucursales, "tratamientoNoActualizado":tratamientoNoActualizado,"tipoUsuario":tipoUsuario, "notificacionCita":notificacionCita})

                if "registroPaqueteProductos" in request.session:
                    registroPaqueteProductos = request.session["registroPaqueteProductos"]
                    del request.session["registroPaqueteProductos"]
                    return render(request, "20 Tratamientos/seleccionarSucursalTratamientos.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
                    "notificacionRenta":notificacionRenta, "sucursales":sucursales, "registroPaqueteProductos":registroPaqueteProductos,"tipoUsuario":tipoUsuario, "notificacionCita":notificacionCita})

                if "noRegistroPaqueteProductos" in request.session:
                    noRegistroPaqueteProductos = request.session["noRegistroPaqueteProductos"]
                    del request.session["noRegistroPaqueteProductos"]
                    return render(request, "20 Tratamientos/seleccionarSucursalTratamientos.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
                    "notificacionRenta":notificacionRenta, "sucursales":sucursales, "noRegistroPaqueteProductos":noRegistroPaqueteProductos,"tipoUsuario":tipoUsuario, "notificacionCita":notificacionCita})

                if "paqueteProductoTratamientoActualizado" in request.session:
                    paqueteProductoTratamientoActualizado = request.session["paqueteProductoTratamientoActualizado"]
                    del request.session["paqueteProductoTratamientoActualizado"]
                    return render(request, "20 Tratamientos/seleccionarSucursalTratamientos.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
                    "notificacionRenta":notificacionRenta, "sucursales":sucursales, "paqueteProductoTratamientoActualizado":paqueteProductoTratamientoActualizado,"tipoUsuario":tipoUsuario, "notificacionCita":notificacionCita})

                return render(request, "20 Tratamientos/seleccionarSucursalTratamientos.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
                "notificacionRenta":notificacionRenta, "sucursales":sucursales,"tipoUsuario":tipoUsuario, "notificacionCita":notificacionCita})

        
    else:
        return render(request,"1 Login/login.html")


def actualizarTratamientosCorporales(request):

    if "idSesion" in request.session:

        if request.method == "POST":
            idTratamientoCorporalEditar = request.POST['idTratamientoCorporalEditar']
            precioVentaEditar = request.POST['precioActualizado']
            minimoEditar = request.POST['minimoActualizado']
            maximoEditar = request.POST['maximoActualizado']
           

            consultaTratamiento = Tratamientos.objects.filter(id_tratamiento = idTratamientoCorporalEditar)
            for datoTratamiento in consultaTratamiento:
                nombreTratamiento = datoTratamiento.nombre_tratamiento

            #Actualización.
            edicionTratamiento = Tratamientos.objects.filter(id_tratamiento = idTratamientoCorporalEditar).update(costo_venta_tratamiento = precioVentaEditar,
            tiempo_minimo = minimoEditar, tiempo_maximo = maximoEditar)

            if edicionTratamiento:
                request.session["tratamientoActualizado"] = "El tratamiento "+nombreTratamiento+" ha sido actualizado satisfactoriamente!"

                return redirect ("/verTratamientos/")
            else:
                request.session["tratamientoNoActualizado"] = "El tratamiento "+nombreTratamiento+" no ha podido actualizarse, contacte a soporte técnico!"

                return redirect ("/verTratamientos/")



def crearPaqueteTratamientos(request):

    
    if "idSesion" in request.session:

       # Variables de sesión
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']
        idPerfil = idEmpleado
        idConfig = idEmpleado
       

        

        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
        
           #notificacionRentas
        notificacionRenta = notificacionRentas(request)

        #notificacionCitas
        notificacionCita = notificacionCitas(request)
        
         #permisosEmpleado
        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)

        
        if request.method == "POST":
            
            idTratamiento= request.POST['idTratamientoPaquete'] 
            intTratamiento = int(idTratamiento)
            intTratamiento = Tratamientos.objects.filter(id_tratamiento = intTratamiento)
            infoTratamiento = []
         
            for dato in intTratamiento:
                codigo = dato.codigo_tratamiento
                nombre = dato.nombre_tratamiento
                descripcion = dato.descripcion_tratamiento
                if dato.complementos_tratamiento == None:
                    complementos = "Ninguno"
                else:
                    complementos = dato.complementos_tratamiento
                tiempo_min = dato.tiempo_minimo
                tiempo_max = dato.tiempo_maximo
                precio = dato.costo_venta_tratamiento
                sesionesRecomendadas = int(dato.sesiones_rec_tratamiento)
                periodoRecomendado = dato.periodo_rec_tratamiento
                tipoTratamiento = dato.tipo_tratamiento
                
                idSucursal = dato.sucursal_id
                
                datosSucursal = Sucursales.objects.filter(id_sucursal = idSucursal)
                for suc in datosSucursal:
                    nombreSucursal = suc.nombre
            
                infoTratamiento.append([codigo,nombre,descripcion,complementos,tiempo_min,tiempo_max,precio,sesionesRecomendadas,periodoRecomendado,nombreSucursal, tipoTratamiento])
            data = [i.json() for i in ProductosGasto.objects.filter(sucursal_id__id_sucursal = idSucursal)]
            
            
            #----------------
            productos_totales = ProductosGasto.objects.filter(sucursal_id__id_sucursal = idSucursal)
            productos_ids = []
                
            for prod in productos_totales:
                productos_ids.append(prod.id_producto)
            
            productosTratamientos = TratamientosProductosGasto.objects.filter(tratamiento_id = idTratamiento)
            productosTratamiento = []
            for producto in productosTratamientos:
                ids_producto_gasto = producto.producto_gasto_id
            
                for dato in productos_ids:
                    if dato  == ids_producto_gasto:
                        productos_ids.remove(dato)
                
                  
                  
            datos_productos_no_paquete = []
                
            for id in productos_ids:
                datos = ProductosGasto.objects.filter(id_producto = id)
                for dato in datos:
                    id_producto = dato.id_producto
                    codigo_producto = dato.codigo_producto
                    sku = dato.sku_producto
                    nombreProd = dato.nombre_producto
                    existencias = dato.cantidad
                    descripcionP = dato.descripcion
                    imagen = dato.imagen_producto
                    fecha_alta = dato.fecha_alta
                    
                datos_productos_no_paquete.append([id_producto,codigo_producto,sku,nombreProd,existencias,descripcionP,imagen,fecha_alta])   
            
            
            
            
        
            productosVenta = ProductosGasto.objects.filter(sucursal_id__id_sucursal = idSucursal)
            productosVentaJavaScript = ProductosGasto.objects.filter(sucursal_id__id_sucursal = idSucursal)
            
        
            return render(request, "20 Tratamientos/crearPaqueteTratamientos.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado,
                                                                                       "infoTratamiento":infoTratamiento,"idTratamiento":idTratamiento,"productosVenta":productosVenta,"productosVentaJson":json.dumps(data),"productosVentaJavaScript":productosVentaJavaScript,
                                                                                       "datos_productos_no_paquete":datos_productos_no_paquete,"notificacionRenta":notificacionRenta})
            
            
         

       

            
            
        return render(request, "20 Tratamientos/crearPaqueteTratamientos.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado,"notificacionRenta":notificacionRenta
                                                                                   
                                                                                 
                                                                                   
        })
    
    else:
        return render(request,"1 Login/login.html")


def guardarPaqueteTratamiento(request):

    
    if "idSesion" in request.session:
     

      
        
        if request.method == "POST":
            
            idTratamiento = request.POST['idTratamiento']
            productosSolicitados = request.POST['cantidadesProductosVenta']
            listaProductosSolicitados = productosSolicitados.split(",")
  
            listaCantidadesSolicitadas = []
           
            for idProducto in listaProductosSolicitados:
               
                nameCantidadProducto = "cantidadUsar" + str(idProducto)
                cantidadSolicitadaMandada = request.POST[nameCantidadProducto]
                listaCantidadesSolicitadas.append(cantidadSolicitadaMandada)
            
            lista = zip(listaProductosSolicitados,listaCantidadesSolicitadas)
            
            for producto, cantidad in lista:
                idProductoBD = producto
                cantidadProductoBD = cantidad
                
                registroProducto = TratamientosProductosGasto(tratamiento = Tratamientos.objects.get(id_tratamiento = idTratamiento),producto_gasto=ProductosGasto.objects.get(id_producto =idProductoBD),cantidad=cantidadProductoBD)
                
                registroProducto.save()
                
            if registroProducto:
                
                consultaTratamiento = Tratamientos.objects.filter(id_tratamiento = idTratamiento)
                for datoTratamiento in consultaTratamiento:
                    nombreTratamiento = datoTratamiento.nombre_tratamiento
                request.session['registroPaqueteProductos'] = "El paquete de productos del tratamiento "+nombreTratamiento+" sido gregado satisfactoriamente!"
                return redirect('/verTratamientos/')
                
                
            else:
                request.session['noRegistroPaqueteProductos'] = "Error en la base de datos, intentelo más tarde.."
                return redirect('/verTratamientos/')

            
            
            
            
            
            
            
    
    
    else:
        return render(request,"1 Login/login.html")


def verProductosPaqueteTratamientoEditar(request):

    if "idSesion" in request.session:
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']
        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
        #notificacionRentas
        notificacionRenta = notificacionRentas(request)
        #notificacionCitas
        notificacionCita = notificacionCitas(request)

         #permisosEmpleado
        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)
        
        if request.method == "POST":
            
            idTratamientoEditar = request.POST['idTratamientoProductoEditar']
            consultaDatosTratamiento = Tratamientos.objects.filter(id_tratamiento = idTratamientoEditar)
            consultaDeProductos = TratamientosProductosGasto.objects.filter(tratamiento_id__id_tratamiento = idTratamientoEditar)
            
            productosElegidos = []
            
            for producto in consultaDeProductos:
                idProducto = producto.producto_gasto_id
                cantidadUtilizadaDeProducto = producto.cantidad
                
                consultaProducto = ProductosGasto.objects.filter(id_producto = idProducto)
                for dato in consultaProducto:
                    codigoProducto = dato.codigo_producto
                    nombreProducto = dato.nombre_producto
                    imagenProducto = dato.imagen_producto
                    skuProducto = dato.sku_producto
                    
                productosElegidos.append([idProducto,cantidadUtilizadaDeProducto,
                                          codigoProducto,
                                          nombreProducto,
                                          imagenProducto,
                                          skuProducto])
                
                
            #Sucursal de tratamiento
            for datoTratamiento in consultaDatosTratamiento:
                sucursal = datoTratamiento.sucursal_id
                
                consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursal)
                for datoSucursal in consultaSucursal:
                    nombreSucursal = datoSucursal.nombre
             
            #Lista de productos a elegir para agregar más al servicio.
            todosLosProductosGasto = ProductosGasto.objects.filter(sucursal_id__id_sucursal = sucursal)
            arrayProductosGastoNoEnTratamiento = []
            
            
            consultaProductosUtilizados = TratamientosProductosGasto.objects.filter(tratamiento_id__id_tratamiento = idTratamientoEditar)
            idsProductosYaUtilizados = []
            
            for productoTrat in consultaProductosUtilizados:
                idProducto = productoTrat.producto_gasto_id
                idsProductosYaUtilizados.append(idProducto)
                
            for producto in todosLosProductosGasto:
                idProducto = producto.id_producto
                productoYaEstaEnTratamiento = False
                for productoEnTratamiento in idsProductosYaUtilizados:
                    idProductoEnTratamiento = productoEnTratamiento
                    
                    if idProducto == idProductoEnTratamiento:
                        productoYaEstaEnTratamiento = True
                
                if productoYaEstaEnTratamiento == False:
                    consultaProducto = ProductosGasto.objects.filter(id_producto = idProducto)
                    for dato in consultaProducto:
                        codigoProducto = dato.codigo_producto
                        skuProducto = dato.sku_producto
                        nombreProducto = dato.nombre_producto
                        existenciasProducto = dato.cantidad
                        descripcionProducto = dato.descripcion
                        imagenProducto = dato.imagen_producto
                        fechaAgregadoProducto = dato.fecha_alta
                    
                    arrayProductosGastoNoEnTratamiento.append([idProducto,codigoProducto, skuProducto, nombreProducto,
                                                     existenciasProducto, descripcionProducto, imagenProducto, fechaAgregadoProducto])
                    
                    
            
            
            #Lista de productos en formato JSON.
            data = [i.json() for i in ProductosGasto.objects.filter(sucursal_id__id_sucursal = sucursal)]
            
        
        
            return render(request, "20 Tratamientos/actualizarPaqueteTratamiento.html", {"consultaPermisos":consultaPermisos,"nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado,"notificacionRenta":notificacionRenta, "consultaDatosTratamiento":consultaDatosTratamiento, "productosElegidos":productosElegidos, "nombreSucursal":nombreSucursal, "arrayProductosGastoNoEnTratamiento":arrayProductosGastoNoEnTratamiento, "productosVentaJson":json.dumps(data),
                                                                                   "todosLosProductosGasto":todosLosProductosGasto, "notificacionCita":notificacionCita})
            

            
        return render(request, "20 Tratamientos/actualizarPaqueteTratamiento.html", {"consultaPermisos":consultaPermisos,"nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado,"notificacionRenta":notificacionRenta, "consultaDatosTratamiento":consultaDatosTratamiento, "productosElegidos":productosElegidos, "nombreSucursal":nombreSucursal, "notificacionCita":notificacionCita,})
    
    else:
        return render(request,"1 Login/login.html")







def actualizarPaqueteTratamiento(request):

    if "idSesion" in request.session:

        if request.method == "POST":
            idTratamientoEditar = request.POST['idTratamientoEditar']
            
            paqueteActualizado = False
            paqueteBorrado = False
            #Nombre de tratamiento
            consultaTratamiento = Tratamientos.objects.filter(id_tratamiento = idTratamientoEditar)
            for datoTratamiento in consultaTratamiento:
                nombreTratamiento = datoTratamiento.nombre_tratamiento
            
            nameInputEliminar = "eliminarProducto"
            nameInputCantidad = "cantidadProducto"
            
            consultaProductosTratamiento = TratamientosProductosGasto.objects.filter(tratamiento_id__id_tratamiento = idTratamientoEditar)
            
            for producto in consultaProductosTratamiento:
                idProductoUtilizado = producto.producto_gasto_id
                
                nameInputPorProductoEliminar = nameInputEliminar+str(idProductoUtilizado)
                nameInputCantidadProductoEditar = nameInputCantidad+str(idProductoUtilizado)
                
                
            
                if request.POST.get(nameInputPorProductoEliminar, False): #Checkeado Eliminar producto
                    borrado = TratamientosProductosGasto.objects.get(producto_gasto_id = idProductoUtilizado, tratamiento_id__id_tratamiento = idTratamientoEditar)
                    borrado.delete()
                    paqueteBorrado = True
                    
                elif request.POST.get(nameInputPorProductoEliminar, True): #No checkeado, actualizar producto
                    cantidadProductoActualizar = request.POST[nameInputCantidadProductoEditar]
                    actualizacionProductoPaquete = TratamientosProductosGasto.objects.filter(producto_gasto_id = idProductoUtilizado).update(cantidad = cantidadProductoActualizar)
                    paqueteActualizado = True
                
            #Agregar más productos.
            
            
            masProductos = request.POST['masProductos']
            if masProductos == "noMasProductos":
                
                if paqueteActualizado or paqueteBorrado: 
                    request.session['paqueteProductoTratamientoActualizado'] = "El paquete de productos del tratamiento "+nombreTratamiento+" ha sido actualizado correctamente!"
                    return redirect('/verTratamientos/')
            elif masProductos == "masProductos":
                productosAgregar = request.POST['idsProductosGastoTratamiento']
                listaProductosAgregar = productosAgregar.split(",")
                
                listaCantidadesSolicitadas = []
                
                for idProducto in listaProductosAgregar:
                    nameCantidadProducto = "cantidadUsar"+str(idProducto)
                    cantidadSolicitadaMandada = request.POST[nameCantidadProducto]
                    listaCantidadesSolicitadas.append(cantidadSolicitadaMandada)
                lista = zip(listaProductosAgregar,listaCantidadesSolicitadas)
                
                
                for producto, cantidad in lista:
                    idProductoBD = producto
                    cantidadProductoBD = cantidad
                    
                    registroProducto = TratamientosProductosGasto(tratamiento = Tratamientos.objects.get(id_tratamiento=idTratamientoEditar),producto_gasto=ProductosGasto.objects.get(id_producto =idProductoBD),cantidad=cantidadProductoBD)
                    registroProducto.save()
                
                if actualizacionProductoPaquete or borrado or registroProducto: 
                    request.session['paqueteProductoTratamientoActualizado'] = "El paquete de productos del tratamiento "+nombreTratamiento+" ha sido actualizado correctamente!"
                    return redirect('/verTratamientos/')






def agregarPaquetePromocionTratamiento(request):
    if "idSesion" in request.session:
     
        #Variables de sesión
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']
        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
        
        #notificacionRentas
        notificacionRenta = notificacionRentas(request)
        #notificacionCitas
        notificacionCita = notificacionCitas(request)

        #Permisos
        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)
        
        #Tratamientos
        consultaTratamientos = Tratamientos.objects.all()

        listaTratamientosSelectMultiple = []
        listaTratamientosSelectMultipleJS = []
        listaNombresTratamientosSelectMultiple = []

        for tratamiento in consultaTratamientos:
            nombreTratamiento = tratamiento.nombre_tratamiento

            longitudListaNombres = len(listaNombresTratamientosSelectMultiple)

            if longitudListaNombres == 0:
                listaNombresTratamientosSelectMultiple.append(nombreTratamiento)
                #Agregar todos los datos de ese tratamiento a una sola posicion.
                arregloCodigosTratamientosIguales = []
                arregloCostoaDeVentaIguales = []
                arregloSucursalesIguales = []
                arregloNombresSucursalesIguales = []
                arregloNombreTratamiento = []
                arregloDatosTratamiento = []

                consultaTratamientosIguales = Tratamientos.objects.filter(nombre_tratamiento = nombreTratamiento)
                for tratamientoIgual in consultaTratamientosIguales:
                    codigoTratamientoIgual = tratamientoIgual.codigo_tratamiento
                    costoVentaTratamientoIgual = tratamientoIgual.costo_venta_tratamiento
                    sucursalTratamientoIgual = tratamientoIgual.sucursal_id
                    nombresitoTratamiento = tratamientoIgual.nombre_tratamiento

                    consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursalTratamientoIgual)
                    for datoSucursal in consultaSucursal:
                        nombreSucursalTratamientoIgual = datoSucursal.nombre
                    
                   
                    arregloCodigosTratamientosIguales.append(codigoTratamientoIgual)
                    arregloCostoaDeVentaIguales.append(costoVentaTratamientoIgual)
                    arregloSucursalesIguales.append(sucursalTratamientoIgual)
                    arregloNombresSucursalesIguales.append(nombreSucursalTratamientoIgual)
                    arregloNombreTratamiento.append(nombresitoTratamiento)

                    sumaCostosDeVenta = 0
                    contadorCostosDeVenta = 0
                    for costo in arregloCostoaDeVentaIguales:
                        costito = costo
                        contadorCostosDeVenta = contadorCostosDeVenta + 1
                        sumaCostosDeVenta = sumaCostosDeVenta + costito
                    promedioCostoVentaTratamiento = sumaCostosDeVenta/contadorCostosDeVenta
                
                arregloDatosTratamiento.append([arregloCodigosTratamientosIguales,nombreTratamiento,arregloCostoaDeVentaIguales,arregloSucursalesIguales,arregloNombresSucursalesIguales, promedioCostoVentaTratamiento])
                
                listaTratamientosSelectMultiple.append(arregloDatosTratamiento)
                listaTratamientosSelectMultipleJS.append(arregloDatosTratamiento)
            else:
                if nombreTratamiento in listaNombresTratamientosSelectMultiple:
                    yaEstaEnArreglo = True
                else:
                    listaNombresTratamientosSelectMultiple.append(nombreTratamiento)

                    #Agregar todos los datos de ese tratamiento a una sola posicion.
                    arregloCodigosTratamientosIguales = []
                    arregloCostoaDeVentaIguales = []
                    arregloSucursalesIguales = []
                    arregloNombresSucursalesIguales = []
                    arregloNombreTratamiento = []
                    arregloDatosTratamiento = []

                    consultaTratamientosIguales = Tratamientos.objects.filter(nombre_tratamiento = nombreTratamiento)
                    for tratamientoIgual in consultaTratamientosIguales:
                        codigoTratamientoIgual = tratamientoIgual.codigo_tratamiento
                        costoVentaTratamientoIgual = tratamientoIgual.costo_venta_tratamiento
                        sucursalTratamientoIgual = tratamientoIgual.sucursal_id
                        nombresitoTratamiento = tratamientoIgual.nombre_tratamiento

                        consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursalTratamientoIgual)
                        for datoSucursal in consultaSucursal:
                            nombreSucursalTratamientoIgual = datoSucursal.nombre
                        
                        arregloCodigosTratamientosIguales.append(codigoTratamientoIgual)
                        arregloCostoaDeVentaIguales.append(costoVentaTratamientoIgual)
                        arregloSucursalesIguales.append(sucursalTratamientoIgual)
                        arregloNombresSucursalesIguales.append(nombreSucursalTratamientoIgual)
                        arregloNombreTratamiento.append(nombresitoTratamiento)

                        sumaCostosDeVenta = 0
                        contadorCostosDeVenta = 0
                        for costo in arregloCostoaDeVentaIguales:
                            costito = costo
                            contadorCostosDeVenta = contadorCostosDeVenta + 1
                            sumaCostosDeVenta = sumaCostosDeVenta + costito
                        promedioCostoVentaTratamiento = sumaCostosDeVenta/contadorCostosDeVenta

                    arregloDatosTratamiento.append([arregloCodigosTratamientosIguales,nombreTratamiento,arregloCostoaDeVentaIguales,arregloSucursalesIguales,arregloNombresSucursalesIguales, promedioCostoVentaTratamiento])
                    listaTratamientosSelectMultiple.append(arregloDatosTratamiento)
                    listaTratamientosSelectMultipleJS.append(arregloDatosTratamiento)

        



        if "tratamientoNoSeleccionado" in request.session:
            tratamientoNoSeleccionado = request.session["tratamientoNoSeleccionado"]
            del request.session["tratamientoNoSeleccionado"]
            return render(request,"21 PaquetesTratamientos/agregarPaquetePromocionTratamiento.html",{"nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "puestoEmpleado":puestoEmpleado, "letra":letra,
                                                                         "notificacionRenta":notificacionRenta,"consultaPermisos":consultaPermisos, 
                                                                         "listaTratamientosSelectMultiple":listaTratamientosSelectMultiple, "listaTratamientosSelectMultipleJS":listaTratamientosSelectMultipleJS,
                                                                         "tratamientoNoSeleccionado":tratamientoNoSeleccionado,"notificacionCita":notificacionCita})
        if "promocionAgregada" in request.session:
            promocionAgregada = request.session["promocionAgregada"]
            del request.session["promocionAgregada"]
            return render(request,"21 PaquetesTratamientos/agregarPaquetePromocionTratamiento.html",{"nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "puestoEmpleado":puestoEmpleado, "letra":letra,
                                                                         "notificacionRenta":notificacionRenta,"consultaPermisos":consultaPermisos, 
                                                                         "listaTratamientosSelectMultiple":listaTratamientosSelectMultiple, "listaTratamientosSelectMultipleJS":listaTratamientosSelectMultipleJS,
                                                                         "promocionAgregada":promocionAgregada,"notificacionCita":notificacionCita})
        if "promocionNoAgregada" in request.session:
            promocionNoAgregada = request.session["promocionNoAgregada"]
            del request.session["promocionNoAgregada"]
            return render(request,"21 PaquetesTratamientos/agregarPaquetePromocionTratamiento.html",{"nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "puestoEmpleado":puestoEmpleado, "letra":letra,
                                                                         "notificacionRenta":notificacionRenta,"consultaPermisos":consultaPermisos, 
                                                                         "listaTratamientosSelectMultiple":listaTratamientosSelectMultiple, "listaTratamientosSelectMultipleJS":listaTratamientosSelectMultipleJS,
                                                                         "promocionNoAgregada":promocionNoAgregada,"notificacionCita":notificacionCita})


        
        return render(request,"21 PaquetesTratamientos/agregarPaquetePromocionTratamiento.html",{"nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "puestoEmpleado":puestoEmpleado, "letra":letra,
                                                                         "notificacionRenta":notificacionRenta,"consultaPermisos":consultaPermisos, 
                                                                         "listaTratamientosSelectMultiple":listaTratamientosSelectMultiple, "listaTratamientosSelectMultipleJS":listaTratamientosSelectMultipleJS, "notificacionCita":notificacionCita})
    
    
    else:
        return render(request,"1 Login/login.html")  


def guardarPromocionTratamiento(request):
    if "idSesion" in request.session:
     

        if request.method == "POST":
            #tomar el nombre del tratamiento seleccionado:
            tratamientoSeleccionado = request.POST["tratamientoSeleccionado"]

            if tratamientoSeleccionado == "Todas":
                request.session["tratamientoNoSeleccionado"] = "No se ha seleccionado ningún Tratamiento!"
                return redirect("/agregarPaquetePromocionTratamiento/")
            else:
                nombrePaquete = request.POST["nombrePaquete"]

                idsTratamientos = []
                consultaTratamiento = Tratamientos.objects.filter(nombre_tratamiento = tratamientoSeleccionado)
                
                for datoTratamiento in consultaTratamiento:
                    idTratamiento = datoTratamiento.id_tratamiento
                    idsTratamientos.append(idTratamiento)
                    

                
                sesionesPaquete = request.POST["sesionesPaquete"]

                if request.POST.get("switchDescuento", False): #Checkeado

                    descuento = request.POST["descuentoPromo"]
                    precioConDescuento = request.POST["precioConDescuento"]

                    for tratamiento in idsTratamientos:
                        intIdTratamiento = int(tratamiento)
                        #registro de promocion
                        registroPromocion = PaquetesPromocionTratamientos(tratamiento = Tratamientos.objects.get(id_tratamiento = intIdTratamiento),
                        nombre_paquete = nombrePaquete, numero_sesiones = sesionesPaquete, descuento = float(descuento) ,precio_por_paquete = precioConDescuento, promocion_activa = "A")
                        registroPromocion.save()

                    if registroPromocion:
                        request.session["promocionAgregada"] = "Se ha agregado la promoción "+nombrePaquete+"!"
                        return redirect("/agregarPaquetePromocionTratamiento/")
                    else:
                        request.session["promocionNoAgregada"] = "Error en la base de datos! Contacte a soporte."
                        return redirect("/agregarPaquetePromocionTratamiento/")
                elif request.POST.get("switchDescuento", True): #No checkeado
                    precioFijo = request.POST["precioFijo"]


                    for tratamiento in idsTratamientos:
                        intIdTratamiento = int(tratamiento)
                        #registro de promocion
                        registroPromocion = PaquetesPromocionTratamientos(tratamiento = Tratamientos.objects.get(id_tratamiento = intIdTratamiento),
                        nombre_paquete = nombrePaquete, numero_sesiones = sesionesPaquete, precio_por_paquete = precioFijo, promocion_activa = "A")
                        registroPromocion.save()

                
                    if registroPromocion:
                        request.session["promocionAgregada"] = "Se ha agregado la promoción "+nombrePaquete+"!"
                        return redirect("/agregarPaquetePromocionTratamiento/")
                    else:
                        request.session["promocionNoAgregada"] = "Error en la base de datos! Contacte a soporte."
                        return redirect("/agregarPaquetePromocionTratamiento/")



        



        
                
        
    
    
    else:
        return render(request,"1 Login/login.html")


def verPaquetesPromocionTratamientos(request):

    if "idSesion" in request.session:

       # Variables de sesión
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']
        idPerfil = idEmpleado
        idConfig = idEmpleado
        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
        #notificacionRentas
        notificacionRenta = notificacionRentas(request)

        #notificacionCitas
        notificacionCita = notificacionCitas(request)


        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)
        
        if request.method == "POST":
            sucursalTratamientos = request.POST["sucursalTratamientos"] #Sucursal que seleccionó el usuario
           
            promocionesTratamientos = []
            promocionesTratamientosInactivos = []

            promocionesTratamientosModalEditar = []
            promocionesTratamientosInactivosModalEditar = []

            promocionesTratamientosModalBaja = []
            promocionesTratamientosInactivosModalAlta = []

            #Mostrar todas las sucursales
            if sucursalTratamientos == "todasLasSucursales":
                consultaPromociones = PaquetesPromocionTratamientos.objects.all()
                nombreSucursalView = "Todas las sucursales"

                for datoPromocion in consultaPromociones:
                    idPromocion = datoPromocion.id_paquete_tratamiento
                    numeroSesiones = datoPromocion.numero_sesiones
                    descuento = datoPromocion.descuento
                    if descuento == None:
                        boolDescuento = "Sin descuento"
                    else:
                        boolDescuento = "Con descuento"
                    precioPorPaquete = datoPromocion.precio_por_paquete
                    nombrePaquete = datoPromocion.nombre_paquete

                    #Datos del tratamiento
                    datosTratamientoPaquete = []
                    idTratamiento = datoPromocion.tratamiento_id
                    consultaTratamiento = Tratamientos.objects.filter(id_tratamiento = idTratamiento)

                    for datoTratamiento in consultaTratamiento:
                        idTratamiento = datoTratamiento.id_tratamiento
                        nombreTratamiento = datoTratamiento.nombre_tratamiento
                        codigoTratamiento = datoTratamiento.codigo_tratamiento

                        precioUnitarioTratamiento = datoTratamiento.costo_venta_tratamiento

                        sucursalTratamiento = datoTratamiento.sucursal_id

                        consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursalTratamiento)
                        for datoSucursal in consultaSucursal:
                            nombreSucursal = datoSucursal.nombre
                        
                        datosTratamientoPaquete.append([idTratamiento, codigoTratamiento, nombreTratamiento, precioUnitarioTratamiento])

                    promocionActiva = datoPromocion.promocion_activa
                    if promocionActiva == "A":
                        promocionesTratamientos.append([idPromocion,nombrePaquete,numeroSesiones,boolDescuento,descuento,precioPorPaquete,datosTratamientoPaquete, nombreSucursal])
                        promocionesTratamientosModalEditar.append([idPromocion,nombrePaquete,numeroSesiones,boolDescuento,descuento,precioPorPaquete,datosTratamientoPaquete, nombreSucursal])
                        promocionesTratamientosModalBaja.append([idPromocion,nombrePaquete,numeroSesiones,boolDescuento,descuento,precioPorPaquete,datosTratamientoPaquete, nombreSucursal])
                    else:
                        promocionesTratamientosInactivos.append([idPromocion,nombrePaquete,numeroSesiones,boolDescuento,descuento,precioPorPaquete,datosTratamientoPaquete, nombreSucursal])
                        promocionesTratamientosInactivosModalEditar.append([idPromocion,nombrePaquete,numeroSesiones,boolDescuento,descuento,precioPorPaquete,datosTratamientoPaquete, nombreSucursal])
                        promocionesTratamientosInactivosModalAlta.append([idPromocion,nombrePaquete,numeroSesiones,boolDescuento,descuento,precioPorPaquete,datosTratamientoPaquete, nombreSucursal])
            #Si selecciono solo una sucursal
            else:
                consultaPromociones = PaquetesPromocionTratamientos.objects.all()
                consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursalTratamientos)
                intSucursal = int(sucursalTratamientos)
                for datoSucursal in consultaSucursal:
                    nombreSucursalView = datoSucursal.nombre
                for promo in consultaPromociones:
                    idTratamiento = promo.tratamiento_id


                    consultaTratamiento = Tratamientos.objects.filter(id_tratamiento = idTratamiento)
                    for datoTratamiento in consultaTratamiento:
                        idSucursal = datoTratamiento.sucursal_id

                        if intSucursal == idSucursal:
                            #Promo se agrega al array de promos 
                            numeroSesiones = promo.numero_sesiones
                            descuento = promo.descuento
                            if descuento == None:
                                boolDescuento = "Sin descuento"
                            else:
                                boolDescuento = "Con descuento"
                            precioPorPaquete = promo.precio_por_paquete
                            nombrePaquete = promo.nombre_paquete
                            idPromocion = promo.id_paquete_tratamiento

                            #Datos del tratamiento
                            datosTratamientoPaquete = []
                            idTratamiento = promo.tratamiento_id
                            consultaTratamiento = Tratamientos.objects.filter(id_tratamiento = idTratamiento)

                            for datoTratamiento in consultaTratamiento:
                                idTratamiento = datoTratamiento.id_tratamiento
                                nombreTratamiento = datoTratamiento.nombre_tratamiento
                                codigoTratamiento = datoTratamiento.codigo_tratamiento

                                precioUnitarioTratamiento = datoTratamiento.costo_venta_tratamiento

                                sucursalTratamiento = datoTratamiento.sucursal_id

                                consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursalTratamiento)
                                for datoSucursal in consultaSucursal:
                                    nombreSucursal = datoSucursal.nombre
                                
                                datosTratamientoPaquete.append([idTratamiento, codigoTratamiento, nombreTratamiento, precioUnitarioTratamiento])
                            promocionActiva = promo.promocion_activa
                            if promocionActiva == "A":
                                promocionesTratamientos.append([idPromocion,nombrePaquete,numeroSesiones,boolDescuento,descuento,precioPorPaquete,datosTratamientoPaquete, nombreSucursal])
                                promocionesTratamientosModalEditar.append([idPromocion,nombrePaquete,numeroSesiones,boolDescuento,descuento,precioPorPaquete,datosTratamientoPaquete, nombreSucursal])
                                promocionesTratamientosModalBaja.append([idPromocion,nombrePaquete,numeroSesiones,boolDescuento,descuento,precioPorPaquete,datosTratamientoPaquete, nombreSucursal])
                            else:
                                promocionesTratamientosInactivos.append([idPromocion,nombrePaquete,numeroSesiones,boolDescuento,descuento,precioPorPaquete,datosTratamientoPaquete, nombreSucursal])
                                promocionesTratamientosInactivosModalEditar.append([idPromocion,nombrePaquete,numeroSesiones,boolDescuento,descuento,precioPorPaquete,datosTratamientoPaquete, nombreSucursal])
                                promocionesTratamientosInactivosModalAlta.append([idPromocion,nombrePaquete,numeroSesiones,boolDescuento,descuento,precioPorPaquete,datosTratamientoPaquete, nombreSucursal])
            return render(request, "21 PaquetesTratamientos/verPromocionesTratamientos.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
                "notificacionRenta":notificacionRenta, "nombreSucursalView":nombreSucursalView, "promocionesTratamientos":promocionesTratamientos, "promocionesTratamientosInactivos":promocionesTratamientosInactivos,
                "promocionesTratamientosModalEditar":promocionesTratamientosModalEditar, "promocionesTratamientosInactivosModalEditar":promocionesTratamientosInactivosModalEditar,
                "promocionesTratamientosModalBaja":promocionesTratamientosModalBaja, "promocionesTratamientosInactivosModalAlta":promocionesTratamientosInactivosModalAlta, "notificacionCita":notificacionCita})
    
        else:           
            if tipoUsuario == "esAdmin":
                sucursales = Sucursales.objects.all()
                
                if "promocionEstatus" in request.session:
                    promocionEstatus = request.session["promocionEstatus"]
                    del request.session["promocionEstatus"]
                    return render(request, "21 PaquetesTratamientos/seleccionarSucursalPaqueteTratamiento.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
                    "notificacionRenta":notificacionRenta, "sucursales":sucursales,"tipoUsuario":tipoUsuario, "promocionEstatus":promocionEstatus, "notificacionCita":notificacionCita})

                if "promocionEstatusFallo" in request.session:
                    promocionEstatusFallo = request.session["promocionEstatusFallo"]
                    del request.session["promocionEstatusFallo"]
                    return render(request, "21 PaquetesTratamientos/seleccionarSucursalPaqueteTratamiento.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
                    "notificacionRenta":notificacionRenta, "sucursales":sucursales,"tipoUsuario":tipoUsuario, "promocionEstatusFallo":promocionEstatusFallo, "notificacionCita":notificacionCita})



                return render(request, "21 PaquetesTratamientos/seleccionarSucursalPaqueteTratamiento.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
                "notificacionRenta":notificacionRenta, "sucursales":sucursales,"tipoUsuario":tipoUsuario, "notificacionCita":notificacionCita})
            else:
                consultaEmpleado = Empleados.objects.filter(id_empleado = idEmpleado)
                for datoEmpleado in consultaEmpleado:
                    sucursalEmpleado = datoEmpleado.id_sucursal_id
                sucursales = Sucursales.objects.filter(id_sucursal = sucursalEmpleado)
                
                if "promocionEstatus" in request.session:
                    promocionEstatus = request.session["promocionEstatus"]
                    del request.session["promocionEstatus"]
                    return render(request, "21 PaquetesTratamientos/seleccionarSucursalPaqueteTratamiento.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
                    "notificacionRenta":notificacionRenta, "sucursales":sucursales,"tipoUsuario":tipoUsuario, "promocionEstatus":promocionEstatus, "notificacionCita":notificacionCita})

                if "promocionEstatusFallo" in request.session:
                    promocionEstatusFallo = request.session["promocionEstatusFallo"]
                    del request.session["promocionEstatusFallo"]
                    return render(request, "21 PaquetesTratamientos/seleccionarSucursalPaqueteTratamiento.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
                    "notificacionRenta":notificacionRenta, "sucursales":sucursales,"tipoUsuario":tipoUsuario, "promocionEstatusFallo":promocionEstatusFallo, "notificacionCita":notificacionCita})


                return render(request, "21 PaquetesTratamientos/seleccionarSucursalPaqueteTratamiento.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
                "notificacionRenta":notificacionRenta, "sucursales":sucursales,"tipoUsuario":tipoUsuario, "notificacionCita":notificacionCita})

        
    else:
        return render(request,"1 Login/login.html")


def bajaPromocionTratamiento(request):

    if "idSesion" in request.session:

        if request.method == "POST":
            idPromocionBaja = request.POST["idPromocionBaja"]

            #Actualización.
            actualizacionPromocion = PaquetesPromocionTratamientos.objects.filter(id_paquete_tratamiento = idPromocionBaja).update(promocion_activa = "I")
            
            if actualizacionPromocion:
                consultaPromo = PaquetesPromocionTratamientos.objects.filter(id_paquete_tratamiento = idPromocionBaja)
                for dato in consultaPromo:
                    nombrePromo = dato.nombre_paquete
                    tratamiento = dato.tratamiento_id
                    consultaTratamiento = Tratamientos.objects.filter(id_tratamiento = tratamiento)
                    for datoTratamiento in consultaTratamiento:
                        idSucursal = datoTratamiento.sucursal_id

                    consultaSucursal = Sucursales.objects.filter(id_sucursal = idSucursal)
                    for datoSucursal in consultaSucursal:
                        nombreSucursal = datoSucursal.nombre
                request.session["promocionEstatus"] = "Se ha desactivado la promoción "+nombrePromo+" de la sucursal "+nombreSucursal+"!"
                return redirect("/verPaquetesPromocionTratamientos/")
            else:
                request.session["promocionEstatusFallo"] = "Error en la base de datos, contacte a soporte!"
                return redirect("/verPaquetesPromocionTratamientos/")

    


        
    else:
        return render(request,"1 Login/login.html")

def altaPromocionTratamiento(request):

    if "idSesion" in request.session:

        if request.method == "POST":
            idPromocionAlta = request.POST["idPromocionAlta"]

            #Actualización.
            actualizacionPromocion = PaquetesPromocionTratamientos.objects.filter(id_paquete_tratamiento = idPromocionAlta).update(promocion_activa = "A")
            
            if actualizacionPromocion:
                consultaPromo = PaquetesPromocionTratamientos.objects.filter(id_paquete_tratamiento = idPromocionAlta)
                for dato in consultaPromo:
                    nombrePromo = dato.nombre_paquete
                    tratamiento = dato.tratamiento_id
                    consultaTratamiento = Tratamientos.objects.filter(id_tratamiento = tratamiento)
                    for datoTratamiento in consultaTratamiento:
                        idSucursal = datoTratamiento.sucursal_id

                    consultaSucursal = Sucursales.objects.filter(id_sucursal = idSucursal)
                    for datoSucursal in consultaSucursal:
                        nombreSucursal = datoSucursal.nombre
                request.session["promocionEstatus"] = "Se ha activado la promoción "+nombrePromo+" de la sucursal "+nombreSucursal+"!"
                return redirect("/verPaquetesPromocionTratamientos/")
            else:
                request.session["promocionEstatusFallo"] = "Error en la base de datos, contacte a soporte!"
                return redirect("/verPaquetesPromocionTratamientos/")

    


        
    else:
        return render(request,"1 Login/login.html")


def agendarCita(request):

    if "idSesion" in request.session:

        # Variables de sesión
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']
        idPerfil = idEmpleado
        idConfig = idEmpleado
        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
        #notificacionRentas
        notificacionRenta = notificacionRentas(request)
        #notificacionCitas
        notificacionCita = notificacionCitas(request)

        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)

        if request.method == "POST":
            sucursalCita = request.POST["sucursalCita"]
            datosSucursal = Sucursales.objects.filter(id_sucursal = sucursalCita)
            for dato in datosSucursal:
                nombreSucursal = dato.nombre
            clientes = Clientes.objects.filter(estado = "A")

            serviciosSucursal = Servicios.objects.filter(sucursal_id__id_sucursal = sucursalCita)
            serviciosSucursalJS = Servicios.objects.filter(sucursal_id__id_sucursal = sucursalCita)
            tratamientosSucursal = Tratamientos.objects.filter(sucursal_id__id_sucursal = sucursalCita)
            tratamientosSucursalJS = Tratamientos.objects.filter(sucursal_id__id_sucursal = sucursalCita)
            
            todasLasPromocionesTratamientos = PaquetesPromocionTratamientos.objects.filter(promocion_activa = "A")

            promocionesSucursal = []
            promocionesSucursalJS = []
            sucursalCitaInt = int(sucursalCita)
            for promo in todasLasPromocionesTratamientos:
                idTratamiento = promo.tratamiento_id
                consultaTratamiento = Tratamientos.objects.filter(id_tratamiento = idTratamiento)
                for datoTratamiento in consultaTratamiento:
                    idSucursalTratamiento = datoTratamiento.sucursal_id
                    

                if idSucursalTratamiento == sucursalCitaInt:
                    idPromo = promo.id_paquete_tratamiento
                    numeroSesiones = promo.numero_sesiones
                    descuento = promo.descuento
                    if descuento == None:
                        boolDescuento = "Sin descuento"
                    else:
                        boolDescuento = "Con descuento"
                    precioPromo = promo.precio_por_paquete
                    nombrePromo = promo.nombre_paquete

                    datosTratamiento = []
                    consultaTratamiento = Tratamientos.objects.filter(id_tratamiento = idTratamiento)
                    for datoTratamiento in consultaTratamiento:
                        codigoTratamiento = datoTratamiento.codigo_tratamiento
                        nombreTratamiento = datoTratamiento.nombre_tratamiento
                        precioUnitarioTratamiento = datoTratamiento.costo_venta_tratamiento

                    datosTratamiento.append([idTratamiento, codigoTratamiento, nombreTratamiento, precioUnitarioTratamiento])

                    promocionesSucursal.append([idPromo, numeroSesiones, descuento, boolDescuento, precioPromo, nombrePromo,datosTratamiento])
                    promocionesSucursalJS.append([idPromo, numeroSesiones, descuento, boolDescuento, precioPromo, nombrePromo,datosTratamiento])
                
            
            #Fecha limite para agendar 45 dias despues del día de hoy
            today = date.today()
            fechaLimite = today + timedelta(days=45)
            fechaLimite = fechaLimite.strftime("%Y-%m-%d")

            #citas entre el dia de hoy y la fecha limite
            arregloHoras45Posiciones = []
            arreglo45Fechas = []
            
            contador = 0
            for x in range(45):
                contador = contador + 1
                sinCitasPendientes = True
                if contador == 1:
                    
                    consultaCitasDelDia = Citas.objects.filter(fecha_pactada = today, estado_cita = "sinCanjear")
                    if consultaCitasDelDia:
                            sinCitasPendientes = False
                    else:
                        sinCitasPendientes = True
                    fechaHoy = today.strftime("%Y-%m-%d")
                    arreglo45Fechas.append(fechaHoy)
                else:
                    nuevoContador = contador - 1
                    fechita = today + timedelta(days=nuevoContador)
                    consultaCitasDelDia = Citas.objects.filter(fecha_pactada = fechita, estado_cita = "sinCanjear")
                    fechaOtroDia = fechita.strftime("%Y-%m-%d")
                    arreglo45Fechas.append(fechaOtroDia)
                
                arregloHoras = ["09:00 AM","10:00 AM","11:00 AM","12:00 PM","13:00 PM","14:00 PM","15:00 PM","16:00 PM","17:00 PM","18:00 PM"]
                
                for cita in consultaCitasDelDia:
                    horaProgramada = cita.hora_pctada

                    if horaProgramada in arregloHoras:
                        duracion = cita.duracionCitaMinutos
                        """if duracion > 60:
                            indiceAQuitar = arregloHoras.index(horaProgramada)
                            indiceAQuitarTambien = indiceAQuitar+1

                            if  indiceAQuitarTambien == 10:
                                arregloHoras.remove(horaProgramada)
                            else:
                                horaTambienAQuitar = arregloHoras[indiceAQuitarTambien]
                                arregloHoras.remove(horaProgramada) 
                                arregloHoras.remove(horaTambienAQuitar) 
                        else:
                            arregloHoras.remove(horaProgramada) 
                        """
                    
                #arregloHoras45Posiciones.append(arregloHoras)
            

            
            consultaPrimerDia = Citas.objects.filter(fecha_pactada = today, estado_cita = "sinCanjear")
            arregloHoras2 = ["09:00 AM","10:00 AM","11:00 AM","12:00 PM","13:00 PM","14:00 PM","15:00 PM","16:00 PM","17:00 PM","18:00 PM"]
            for cita in consultaPrimerDia:
                horaProgramada = cita.hora_pctada
                """
                if horaProgramada in arregloHoras2:
                    duracion = cita.duracionCitaMinutos
                    if duracion > 60:
                        indiceAQuitar = arregloHoras2.index(horaProgramada)
                        indiceAQuitarTambien = indiceAQuitar+1
                        
                        if  indiceAQuitarTambien == 10:
                            arregloHoras2.remove(horaProgramada)
                        else:
                            horaTambienAQuitar = arregloHoras2[indiceAQuitarTambien]
                            arregloHoras2.remove(horaProgramada) 
                            arregloHoras2.remove(horaTambienAQuitar) 
                    else:
                        arregloHoras2.remove(horaProgramada) 
                """
                

            listaZipFechaHora = zip(arreglo45Fechas,arregloHoras45Posiciones)



            #Certificados
            consultaCertificadosSucursal = CertificadosProgramados.objects.all()

            certificadosPendientes = []
            certificadosPendientesJS = []
            certificadosPendientesJSDos = []
            certificadosPendientesJSTres = []

            for certificado in consultaCertificadosSucursal:
                venta = certificado.venta_id
                consultaVenta = Ventas.objects.filter(id_venta = venta)
                for dato in consultaVenta:
                    idSucursalVenta = dato.sucursal_id

                    
                intSucursalMandada = int(sucursalCita)
                sucursalVenta = int(idSucursalVenta)
                if sucursalVenta == intSucursalMandada:
                    idCertificado = certificado.id_certificado
                    codigoCertificado = certificado.codigo_certificado
                    fechaAlta = certificado.fecha_alta
                    vigencia = certificado.vigencia

                    servicios = []
                    pendientesCanjeados = []

                    #Info de cada servicio
                    listaServiciosCertificados = certificado.lista_servicios_certificados
                    arregloServicios = listaServiciosCertificados.split(",")
                    for servicio in arregloServicios:
                        idServicio = int(servicio)
                        consultaServicioCertificado = ServiciosCertificados.objects.filter(id_servicio_certificado = idServicio)
                        for datoServicio in consultaServicioCertificado:
                            nombreServicio = datoServicio.nombre
                            tiempoMinimo = datoServicio.tiempo_minimo
                            tiempoMaximo = datoServicio.tiempo_maximo

                        
                        servicios.append([nombreServicio,idServicio,tiempoMinimo, tiempoMaximo])


                    listaPendientesCanjeados = certificado.lista_servicios_efectuados
                    arregloPendientesCanjeados = listaPendientesCanjeados.split(",")
                    for uno in arregloPendientesCanjeados:
                        pendienteCanjeado = uno
                        pendientesCanjeados.append(pendienteCanjeado)

                    clienteCompro = certificado.cliente_compro_id
                    if clienteCompro == "Momentaneo":
                        nombreCliente = "Momentanteo"
                    else:
                        consultaCliente = Clientes.objects.filter(id_cliente = clienteCompro)
                        for datoCliente in consultaCliente:
                            nombreClientex = datoCliente.nombre_cliente
                            apellidoCliente = datoCliente.apellidoPaterno_cliente

                        nombreCliente = nombreClientex + " "+apellidoCliente
                    nombreBeneficiaria = certificado.nombre_beneficiaria
                    montoTotalAPagar = certificado.monto_total_pagar

                    estatusCertificado = certificado.estatus_certificado

                    listaZipeada = zip(servicios,pendientesCanjeados)

                    if estatusCertificado == "P":
                        estaVigente = ""
                        fechaActual = datetime.now()
                        fechaActualFormato = fechaActual.strftime('%Y-%m-%d')
                        hoy = date.today()


                        if vigencia < hoy:
                            estaVigente = "yaNoEstaVigente"
                        else:
                            estaVigente = "aunEstaVigente"
                            certificadosPendientes.append([idCertificado,codigoCertificado,fechaAlta, vigencia, listaZipeada, nombreCliente, nombreBeneficiaria, montoTotalAPagar, estaVigente])
                            certificadosPendientesJS.append([idCertificado,codigoCertificado,fechaAlta, vigencia, listaZipeada, nombreCliente, nombreBeneficiaria, montoTotalAPagar, estaVigente])
                            certificadosPendientesJSDos.append([idCertificado,codigoCertificado,fechaAlta, vigencia, servicios, nombreCliente, nombreBeneficiaria, montoTotalAPagar, estaVigente])
                            certificadosPendientesJSTres.append([idCertificado,codigoCertificado,fechaAlta, vigencia, servicios, nombreCliente, nombreBeneficiaria, montoTotalAPagar, estaVigente])


            return render(request, "22 Citas/agendarCita.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
                "notificacionRenta":notificacionRenta,"tipoUsuario":tipoUsuario, "sucursalCita":sucursalCita, "nombreSucursal":nombreSucursal, 
                "clientes":clientes, "serviciosSucursal":serviciosSucursal, "tratamientosSucursal":tratamientosSucursal, "promocionesSucursal":promocionesSucursal, "fechaLimite":fechaLimite, "sinCitasPendientes":sinCitasPendientes, "arregloHoras45Posiciones":arregloHoras45Posiciones, "arregloHoras2":arregloHoras2,
                "listaZipFechaHora":listaZipFechaHora, "serviciosSucursalJS":serviciosSucursalJS, "tratamientosSucursalJS":tratamientosSucursalJS, "promocionesSucursalJS":promocionesSucursalJS, "notificacionCita":notificacionCita, "certificadosPendientes":certificadosPendientes,
                "certificadosPendientesJS":certificadosPendientesJS, "certificadosPendientesJSDos":certificadosPendientesJSDos, "certificadosPendientesJSTres":certificadosPendientesJSTres})


        else:           
            if tipoUsuario == "esAdmin":
                sucursales = Sucursales.objects.all()
                
                if "citaGuardada" in request.session:
                    citaGuardada = request.session["citaGuardada"]
                    del request.session["citaGuardada"]
                    return render(request, "22 Citas/seleccionarSucursalCita.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
                    "notificacionRenta":notificacionRenta, "sucursales":sucursales,"tipoUsuario":tipoUsuario, "citaGuardada":citaGuardada, "notificacionCita":notificacionCita})

                if "citaNoGuardada" in request.session:
                    citaNoGuardada = request.session["citaNoGuardada"]
                    del request.session["citaNoGuardada"]
                    return render(request, "22 Citas/seleccionarSucursalCita.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
                    "notificacionRenta":notificacionRenta, "sucursales":sucursales,"tipoUsuario":tipoUsuario, "citaNoGuardada":citaNoGuardada, "notificacionCita":notificacionCita})

                return render(request, "22 Citas/seleccionarSucursalCita.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
                "notificacionRenta":notificacionRenta, "sucursales":sucursales,"tipoUsuario":tipoUsuario, "notificacionCita":notificacionCita})
            else:
                consultaEmpleado = Empleados.objects.filter(id_empleado = idEmpleado)
                for datoEmpleado in consultaEmpleado:
                    sucursalEmpleado = datoEmpleado.id_sucursal_id
                sucursales = Sucursales.objects.filter(id_sucursal = sucursalEmpleado)
                
                if "citaGuardada" in request.session:
                    citaGuardada = request.session["citaGuardada"]
                    del request.session["citaGuardada"]
                    return render(request, "22 Citas/seleccionarSucursalCita.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
                "notificacionRenta":notificacionRenta, "sucursales":sucursales,"tipoUsuario":tipoUsuario, "citaGuardada":citaGuardada, "notificacionCita":notificacionCita})

                if "citaNoGuardada" in request.session:
                    citaNoGuardada = request.session["citaNoGuardada"]
                    del request.session["citaNoGuardada"]
                    return render(request, "22 Citas/seleccionarSucursalCita.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
                "notificacionRenta":notificacionRenta, "sucursales":sucursales,"tipoUsuario":tipoUsuario, "citaNoGuardada":citaNoGuardada, "notificacionCita":notificacionCita})

                

                return render(request, "22 Citas/seleccionarSucursalCita.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
                "notificacionRenta":notificacionRenta, "sucursales":sucursales,"tipoUsuario":tipoUsuario, "notificacionCita":notificacionCita})
        
    else:
        return render(request,"1 Login/login.html")


def guardarCita(request):

    if "idSesion" in request.session:


        if request.method == "POST":
            cliente = request.POST['clienteCita']
            sucursal = request.POST['sucursalCita']
            empleadoRealizo = request.POST['idEmpleado']

            #seleccion
            servicioSeleccionado = request.POST['servicioSeleccionado']
            tratamientoSeleccionado = request.POST['tratamientoSeleccionado']
            paqueteTratamientoSeleccionado = request.POST['paqueteTratamientoSeleccionado']
            servicioCertificadoSeleccionado = request.POST['servicioCertificadoSeleccionado']

            tipoDeCita = ""
            idServTratPaq = 0
            duracion = 0

            if servicioSeleccionado == "nada":
                sinServicioSeleccionado = True
            else:
                tipoDeCita = "Servicio"
                idServTratPaq = int(servicioSeleccionado)

                consultaServicio = Servicios.objects.filter(id_servicio = idServTratPaq)
                for datoServicio in consultaServicio:
                    duracionMaxima = datoServicio.tiempo_maximo
                    nombreServicioTratamiento = datoServicio.nombre_servicio
                duracion = float(duracionMaxima)

                fechaPactada = request.POST['fechaAgendar']
                horaCita = request.POST['horarioCita']
                estadoCita = "sinCanjear"
                citaVendida = "No"

                comentarios = request.POST['comentarios']

                registroCita = Citas(cliente = Clientes.objects.get(id_cliente = cliente),
                sucursal = Sucursales.objects.get(id_sucursal = sucursal),
                empleado_realizo = Empleados.objects.get(id_empleado = empleadoRealizo),
                tipo_cita = tipoDeCita,
                id_serv_trat_paq = idServTratPaq,
                fecha_pactada = fechaPactada,
                hora_pctada = horaCita,
                estado_cita = estadoCita,
                cita_vendida = citaVendida,
                comentarios = comentarios,
                duracionCitaMinutos = duracion)


            if tratamientoSeleccionado == "nada":
                sinTratamientoSeleccionado = True
            else:
                tipoDeCita = "SesionTratamiento"
                idServTratPaq = int(tratamientoSeleccionado)

                consultaTratamiento = Tratamientos.objects.filter(id_tratamiento = idServTratPaq)
                for datoTratamiento in consultaTratamiento:
                    duracionMaxima = datoTratamiento.tiempo_maximo
                    nombreServicioTratamiento = datoTratamiento.nombre_tratamiento
                duracion = float(duracionMaxima)

                fechaPactada = request.POST['fechaAgendar']
                horaCita = request.POST['horarioCita']
                estadoCita = "sinCanjear"
                citaVendida = "No"

                comentarios = request.POST['comentarios']

                registroCita = Citas(cliente = Clientes.objects.get(id_cliente = cliente),
                sucursal = Sucursales.objects.get(id_sucursal = sucursal),
                empleado_realizo = Empleados.objects.get(id_empleado = empleadoRealizo),
                tipo_cita = tipoDeCita,
                id_serv_trat_paq = idServTratPaq,
                fecha_pactada = fechaPactada,
                hora_pctada = horaCita,
                estado_cita = estadoCita,
                cita_vendida = citaVendida,
                comentarios = comentarios,
                duracionCitaMinutos = duracion)

            if paqueteTratamientoSeleccionado == "nada":
                sinPaqueteTratamientoSeleccionado = True
            else:
                tipoDeCita = "PaqueteTratamiento"
                idServTratPaq = int(paqueteTratamientoSeleccionado)

                consultaPaquete = PaquetesPromocionTratamientos.objects.filter(id_paquete_tratamiento = idServTratPaq)
                for datoPaquete in consultaPaquete:
                    idTratamiento = datoPaquete.tratamiento_id
                    nombreServicioTratamiento = datoPaquete.nombre_paquete
                    
                    precioPagar = datoPaquete.precio_por_paquete
                    consultaTratamiento = Tratamientos.objects.filter(id_tratamiento = idTratamiento)
                    for datoTratamiento in consultaTratamiento:
                        duracionMaxima = datoTratamiento.tiempo_maximo
                    duracion = float(duracionMaxima)
                    precioPagar = float(precioPagar)
                paqueteTratamiento = True
                fechaPactada = request.POST['fechaAgendar']
                horaCita = request.POST['horarioCita']
                estadoCita = "sinCanjear"
                citaVendida = "No"

                comentarios = request.POST['comentarios']

                registroCita = Citas(cliente = Clientes.objects.get(id_cliente = cliente),
                sucursal = Sucursales.objects.get(id_sucursal = sucursal),
                empleado_realizo = Empleados.objects.get(id_empleado = empleadoRealizo),
                tipo_cita = tipoDeCita,
                id_serv_trat_paq = idServTratPaq,
                fecha_pactada = fechaPactada,
                hora_pctada = horaCita,
                estado_cita = estadoCita,
                cita_vendida = citaVendida,
                comentarios = comentarios,
                duracionCitaMinutos = duracion)

            if servicioCertificadoSeleccionado == "nada":
                sinServicioCertificadoSeleccionado = True
            else:
                tipoDeCita = "ServicioCertificado"

                #Duracion, certificado y nombre de servicio
                certificadoServicioSeparado = servicioCertificadoSeleccionado.split("-")
                idCertificado = certificadoServicioSeparado[0]
                idCertificadoInt = int(idCertificado)
                idServicioCertificado = certificadoServicioSeparado[1]
                idServicioCertificadoInt = int(idServicioCertificado)

                #Consulta de certificado
                consultaCertificado = CertificadosProgramados.objects.filter(id_certificado = idCertificadoInt)
                for datoCertificado in consultaCertificado:
                    codigoCertificado = datoCertificado.codigo_certificado

                #Consulta de servicio certificado
                consultaServicioCertificado = ServiciosCertificados.objects.filter(id_servicio_certificado = idServicioCertificadoInt)
                for datoServicio in consultaServicioCertificado:
                    nombreServicioCertificado = datoServicio.nombre
                    duracionMaxima = datoServicio.tiempo_maximo
                duracion = float(duracionMaxima)

                fechaPactada = request.POST['fechaAgendar']
                horaCita = request.POST['horarioCita']
                estadoCita = "sinCanjear"
                citaVendida = "No"

                comentarios = request.POST['comentarios']

                registroCita = Citas(cliente = Clientes.objects.get(id_cliente = cliente),
                sucursal = Sucursales.objects.get(id_sucursal = sucursal),
                empleado_realizo = Empleados.objects.get(id_empleado = empleadoRealizo),
                tipo_cita = tipoDeCita,
                certificado_servicio = servicioCertificadoSeleccionado,
                fecha_pactada = fechaPactada,
                hora_pctada = horaCita,
                estado_cita = estadoCita,
                cita_vendida = citaVendida,
                comentarios = comentarios,
                duracionCitaMinutos = duracion)
                

            

            registroCita.save()

            #Datos del cliente
            datosCliente = Clientes.objects.filter(id_cliente = cliente)
            for datoCliente in datosCliente:
                nombreCliente = datoCliente.nombre_cliente
                apellidoCliente = datoCliente.apellidoPaterno_cliente

            nombreCompletoCliente = nombreCliente + " "+apellidoCliente

            #Datos sucursal
            datosSucursal = Sucursales.objects.filter(id_sucursal = sucursal)
            for datoSucursal in datosSucursal:
                nombreSucursalCita = datoSucursal.nombre

            if registroCita:
                if tipoDeCita == "PaqueteTratamiento":
                    #Guardar tratamiento de cliente que es por paquete.. 
                    consultaPaquete = PaquetesPromocionTratamientos.objects.all()
                    for datoPaquete in consultaPaquete:
                        sesionesPromo = datoPaquete.numero_sesiones
                    
                    registroTratamientoCliente = TratamientosClientes(cliente = Clientes.objects.get(id_cliente = cliente), paquete_tratamiento = PaquetesPromocionTratamientos.objects.get(id_paquete_tratamiento = idServTratPaq),
                    num_sesiones = sesionesPromo, sesionesPendientes = sesionesPromo, sesionesCanjeadas = 0)
                    registroTratamientoCliente.save()

                    #Consulta de tratamiento
                    consultaTratamientoPaquete = PaquetesPromocionTratamientos.objects.filter(id_paquete_tratamiento = idServTratPaq)
                    for datoPaqueteTratamiento in consultaTratamientoPaquete:
                        nombrePaquete = datoPaqueteTratamiento.nombre_paquete



                    if registroTratamientoCliente:
                        
                        consultaTratamientosClientes = TratamientosClientes.objects.all()
                        for trat in consultaTratamientosClientes:
                            ultimoRegistroTratamientoCliente = trat.id_tratamiento_cliente
                        
                        consultaCitas = Citas.objects.all()
                        for cita in consultaCitas:
                            ultimoRegistroCita = cita.id_cita

                        #Guardar cita y tratamiento juntos
                        guardarCitaConTratamiento = citasTratamientos(cita = Citas.objects.get(id_cita = ultimoRegistroCita), 
                        idTratamientoCliente = TratamientosClientes.objects.get(id_tratamiento_cliente = ultimoRegistroTratamientoCliente))
                        
                        guardarCitaConTratamiento.save()

                        #Guardar registro de historial de pago tratamiento.
                        registroPago = pagosPaquetesTratamientos(id_tratamiento_cliente = TratamientosClientes.objects.get(id_tratamiento_cliente = ultimoRegistroTratamientoCliente),
                        total_pagar = precioPagar,
                        total_abonado = 0,
                        total_restante = precioPagar,
                        estatus_pago = "Pendiente")

                        registroPago.save()

                        #Mandar notificación con telegram
                        try:
                            tokenTelegram = keysBotCostabella.tokenBotCostabellaCitas
                            botCostabella = telepot.Bot(tokenTelegram)

                            idGrupoTelegram = keysBotCostabella.idGrupo
                            
                            mensaje = "\U0001F4C6 CITA AGENDADA \U0001F4C6 \n El cliente "+nombreCompletoCliente+" ha agendado una cita para el día "+fechaPactada+" a las "+str(horaCita)+" hrs en la sucursal "+nombreSucursalCita+"\n Tratamiento:\n"+nombreServicioTratamiento
                            botCostabella.sendMessage(idGrupoTelegram,"\U0001F4C6 *CITA AGENDADA*\U0001F4C6 \n",mensaje, parse_mode= 'Markdown')
                        except:
                            print("An exception occurred")

                        request.session["citaGuardada"] = "La cita se ha guardado correctamente!"
                        return redirect("/agendarCita/")
                    
                elif tipoDeCita == "ServicioCertificado":
                    try:
                        tokenTelegram = keysBotCostabella.tokenBotCostabellaCitas
                        botCostabella = telepot.Bot(tokenTelegram)

                        idGrupoTelegram = keysBotCostabella.idGrupo
                        
                        mensaje = "\U0001F381 CITA AGENDADA CERTIFICADO \U0001F381 \n El cliente "+nombreCompletoCliente+" ha agendado una cita para el día "+fechaPactada+" a las "+str(horaCita)+" hrs en la sucursal "+nombreSucursalCita+"\n Certificado a canjear: "+codigoCertificado+"\n Servicio: "+nombreServicioCertificado
                        botCostabella.sendMessage(idGrupoTelegram,mensaje)
                    except:
                        print("An exception occurred")
                    request.session["citaGuardada"] = "La cita se ha guardado correctamente!"
                    return redirect("/agendarCita/")

                else:
                    try:
                        tokenTelegram = keysBotCostabella.tokenBotCostabellaCitas
                        botCostabella = telepot.Bot(tokenTelegram)

                        idGrupoTelegram = keysBotCostabella.idGrupo
                        
                        mensaje = "\U0001F4C6 CITA AGENDADA \U0001F4C6 \n El cliente "+nombreCompletoCliente+" ha agendado una cita para el día "+fechaPactada+" a las "+str(horaCita)+" hrs en la sucursal "+nombreSucursalCita+"\n Servicio/Tratamiento:\n"+nombreServicioTratamiento
                        botCostabella.sendMessage(idGrupoTelegram,mensaje)
                    except:
                        print("An exception occurred")
                    request.session["citaGuardada"] = "La cita se ha guardado correctamente!"
                    return redirect("/agendarCita/")

            
        
    else:
        return render(request,"1 Login/login.html")



def citas(request):

    if "idSesion" in request.session:

        # Variables de sesión
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']
        idPerfil = idEmpleado
        idConfig = idEmpleado
        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
        #notificacionRentas
        notificacionRenta = notificacionRentas(request)
        #notificacionCitas
        notificacionCita = notificacionCitas(request)
        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)

        if request.method == "POST":

            sucursal = request.POST['sucursalCita']
            consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursal)
            for datoSucursal in consultaSucursal:
                nombreSucursalView = datoSucursal.nombre

            consultaCitasPendientesSucursal = Citas.objects.filter(estado_cita = "sinCanjear", sucursal_id__id_sucursal = sucursal)
            
            citasPendientes = []
            citasPendientesReagendar = []
            citasPendientesReagendar2 = []
            citasPendientesReagendar3 = []
            citasPendientesReagendar4 = []
            citasPendientesReagendar5 = []

            idCertificadosPendientesCitas = []

            sinCitasPendientes = True
            arregloHoras2 = []
            listaZipFechaHora = ""
            listaZipFechaHora2 = ""
            fechaLimite = ""
            for citaPendiente in consultaCitasPendientesSucursal:
                #idCita
                idCita = citaPendiente.id_cita
                #cliente
                idCliente = citaPendiente.cliente_id
                consultaCliente = Clientes.objects.filter(id_cliente = idCliente)
                for datoCliente in consultaCliente:
                    nombreCliente = datoCliente.nombre_cliente
                    apellidoPaterno = datoCliente.apellidoPaterno_cliente
                nombreCompletoCliente = nombreCliente + " " + apellidoPaterno

                #Empleado que realizo
                idEmpleado = citaPendiente.empleado_realizo_id
                consultaEmpleado = Empleados.objects.filter(id_empleado = idEmpleado)
                for datoEmpleado in consultaEmpleado:
                    nombreEmpleado = datoEmpleado.nombres
                    apellidoEmpleado = datoEmpleado.apellido_paterno
                nombreCompletoEmpleado = nombreEmpleado +" "+apellidoEmpleado

                tipoCita = citaPendiente.tipo_cita
                idServTratPaq = citaPendiente.id_serv_trat_paq
                nombreServTratPaq = ""
                precioServTratPaq = 0
                if tipoCita == "Servicio":
                    consultaServicio = Servicios.objects.filter(id_servicio = idServTratPaq)
                    for datoServicio in consultaServicio:
                        nombreServTratPaq = datoServicio.nombre_servicio
                        precioServTratPaq = datoServicio.precio_venta
                    idCertificadosPendientesCitas.append("x")
                elif tipoCita == "SesionTratamiento":
                    consultaTratamiento = Tratamientos.objects.filter(id_tratamiento = idServTratPaq)
                    for datoTratamiento in consultaTratamiento:
                        nombreServTratPaq = datoTratamiento.nombre_tratamiento
                        precioServTratPaq = datoTratamiento.costo_venta_tratamiento
                    idCertificadosPendientesCitas.append("x")
                elif tipoCita == "PaqueteTratamiento":
                    consultaPaqueteTratamiento = PaquetesPromocionTratamientos.objects.filter(id_paquete_tratamiento = idServTratPaq)
                    for datoPaquete in consultaPaqueteTratamiento:
                        nombreServTratPaq = datoPaquete.nombre_paquete
                        precioServTratPaq = datoPaquete.precio_por_paquete
                    idCertificadosPendientesCitas.append("x")

                elif tipoCita == "ServicioCertificado":
                    certificadoServicio = citaPendiente.certificado_servicio
                    servCertSeparado = certificadoServicio.split("-")
                    idCertificado = servCertSeparado[0]
                    idServicioCertificado = servCertSeparado[1]
                    idCertificadoInt = int(idCertificado)
                    idServicioCertificadoInt = int(idCertificadoInt)
                    idCertificadosPendientesCitas.append(idCertificadoInt)
                    #Consulta de certificado
                    consultaCertificado = CertificadosProgramados.objects.filter(id_certificado = idCertificadoInt)
                    for datoCertificado in consultaCertificado:
                        codigoCertificado = datoCertificado.codigo_certificado

                    #Consulta de servicio certificado
                    consultaServicioCertificado = ServiciosCertificados.objects.filter(id_servicio_certificado = idServicioCertificadoInt)
                    for datoServicio in consultaServicioCertificado:
                        nombreServicioCertificado = datoServicio.nombre
                        nombreServTratPaq = codigoCertificado + " - "+nombreServicioCertificado
                        
                
                fechaPactada = citaPendiente.fecha_pactada
                horaPactada = citaPendiente.hora_pctada
                duracionCita = citaPendiente.duracionCitaMinutos
                duracionCita = int(duracionCita)
                comentarios = citaPendiente.comentarios

                today = date.today()


                diasParaLaCita = (fechaPactada - today).days
                
                if diasParaLaCita > 1:
                    sePuedeCambiar = "sePuedeCambiar"
                elif diasParaLaCita == 1:
                    #Aqui ya se que es un día antes de la cita
                    #Validar las horas..
                    horaActual = datetime.now().time()
                    horaActual = horaActual.strftime("%H") 

                    print("La hora actual es:"+str(horaActual))

                    arregloHora = horaPactada.split(" ")
                    horita = arregloHora[0]
                    intHoraActual = int(horaActual)

                    horitaSplit = horita.split(":")
                    horitaHorita = horitaSplit[0]

                    intHoraCita = int(horitaHorita)

                    if intHoraActual < intHoraCita:  #La hora de hoy es menor a la hora de la cita..
                        sePuedeCambiar = "sePuedeCambiar"

                    else: #Ya no se puede
                        sePuedeCambiar = "noSePuedeCambiar"
                else:
                    sePuedeCambiar = "noSePuedeCambiar"

                #Fecha limite para agendar 45 dias despues del día de hoy
                today = date.today()
                fechaLimite = today + timedelta(days=45)
                fechaLimite = fechaLimite.strftime("%Y-%m-%d")

                #citas entre el dia de hoy y la fecha limite
                arregloHoras45Posiciones = []
                arreglo45Fechas = []
                
                contador = 0
                for x in range(45):
                    
                    contador = contador + 1
                    sinCitasPendientes = True
                    if contador == 1:
                        consultaCitasDelDia = Citas.objects.filter(fecha_pactada = today, estado_cita = "sinCanjear")
                        if consultaCitasDelDia:
                            sinCitasPendientes = False
                            print("Hay citas pendientes!!")
                        else:
                            sinCitasPendientes = True
                        fechaHoy = today.strftime("%Y-%m-%d")
                        arreglo45Fechas.append(fechaHoy)
                    else:
                        nuevoContador = contador - 1
                        fechita = today + timedelta(days=nuevoContador)
                        consultaCitasDelDia = Citas.objects.filter(fecha_pactada = fechita, estado_cita = "sinCanjear")
                        fechaOtroDia = fechita.strftime("%Y-%m-%d")
                        arreglo45Fechas.append(fechaOtroDia)
                    
                    arregloHoras = ["09:00 AM","10:00 AM","11:00 AM","12:00 PM","13:00 PM","14:00 PM","15:00 PM","16:00 PM","17:00 PM","18:00 PM"]
                    for cita in consultaCitasDelDia:
                        
                        horaProgramada = cita.hora_pctada


                        if horaProgramada in arregloHoras:
                            duracion = cita.duracionCitaMinutos
                            if duracion > 60:
                                indiceAQuitar = arregloHoras.index(horaProgramada)
                                indiceAQuitarTambien = indiceAQuitar+1
                                if  indiceAQuitarTambien == 10:
                                    arregloHoras.remove(horaProgramada)
                                else:
                                    horaTambienAQuitar = arregloHoras[indiceAQuitarTambien]
                                    arregloHoras.remove(horaProgramada) 
                                    arregloHoras.remove(horaTambienAQuitar) 
                            else:
                                arregloHoras.remove(horaProgramada) 
                        
                    arregloHoras45Posiciones.append(arregloHoras)
                

                
                consultaPrimerDia = Citas.objects.filter(fecha_pactada = today, estado_cita = "sinCanjear")
                arregloHoras2 = ["09:00 AM","10:00 AM","11:00 AM","12:00 PM","13:00 PM","14:00 PM","15:00 PM","16:00 PM","17:00 PM","18:00 PM"]
                for cita in consultaPrimerDia:
                    horaProgramada = cita.hora_pctada

                    if horaProgramada in arregloHoras2:
                        duracion = cita.duracionCitaMinutos
                        if duracion > 60:
                            indiceAQuitar = arregloHoras2.index(horaProgramada)
                            indiceAQuitarTambien = indiceAQuitar+1
                            if  indiceAQuitarTambien == 10:
                                arregloHoras2.remove(horaProgramada)
                            else:
                                horaTambienAQuitar = arregloHoras2[indiceAQuitarTambien]
                                arregloHoras2.remove(horaProgramada) 
                                arregloHoras2.remove(horaTambienAQuitar) 
                        else:
                            arregloHoras2.remove(horaProgramada) 


                listaZipFechaHora = zip(arreglo45Fechas,arregloHoras45Posiciones)
                listaZipFechaHora2 = zip(arreglo45Fechas,arregloHoras45Posiciones)



                citasPendientes.append([idCita, nombreCompletoCliente, nombreCompletoEmpleado, tipoCita, nombreServTratPaq, precioServTratPaq,
                fechaPactada, horaPactada,duracionCita, comentarios, sePuedeCambiar])
                

                citasPendientesReagendar.append([idCita, nombreCompletoCliente, nombreCompletoEmpleado, tipoCita, nombreServTratPaq, precioServTratPaq,
                fechaPactada, horaPactada,duracionCita, comentarios, sePuedeCambiar])

                citasPendientesReagendar2.append([idCita, nombreCompletoCliente, nombreCompletoEmpleado, tipoCita, nombreServTratPaq, precioServTratPaq,
                fechaPactada, horaPactada,duracionCita, comentarios, sePuedeCambiar])

                citasPendientesReagendar3.append([idCita, nombreCompletoCliente, nombreCompletoEmpleado, tipoCita, nombreServTratPaq, precioServTratPaq,
                fechaPactada, horaPactada,duracionCita, comentarios, sePuedeCambiar])

                citasPendientesReagendar4.append([idCita, nombreCompletoCliente, nombreCompletoEmpleado, tipoCita, nombreServTratPaq, precioServTratPaq,
                fechaPactada, horaPactada,duracionCita, comentarios, sePuedeCambiar])

                citasPendientesReagendar5.append([idCita, nombreCompletoCliente, nombreCompletoEmpleado, tipoCita, nombreServTratPaq, precioServTratPaq,
                fechaPactada, horaPactada,duracionCita, comentarios, sePuedeCambiar])

            cistasPendientesZipeada = zip(citasPendientes, idCertificadosPendientesCitas)
            consultaCitasEfectuadasSucursal = Citas.objects.filter(estado_cita = "efectuada", sucursal_id__id_sucursal = sucursal)
            
            citasEfectuadas = []
            for citaEfectuada in consultaCitasEfectuadasSucursal:
                #idCita
                idCita = citaEfectuada.id_cita
                #cliente
                idCliente = citaEfectuada.cliente_id
                consultaCliente = Clientes.objects.filter(id_cliente = idCliente)
                for datoCliente in consultaCliente:
                    nombreCliente = datoCliente.nombre_cliente
                    apellidoPaterno = datoCliente.apellidoPaterno_cliente
                nombreCompletoCliente = nombreCliente + " " + apellidoPaterno

                #Empleado que realizo
                idEmpleado = citaEfectuada.empleado_realizo_id
                consultaEmpleado = Empleados.objects.filter(id_empleado = idEmpleado)
                for datoEmpleado in consultaEmpleado:
                    nombreEmpleado = datoEmpleado.nombres
                    apellidoEmpleado = datoEmpleado.apellido_paterno
                nombreCompletoEmpleado = nombreEmpleado +" "+apellidoEmpleado

                tipoCita = citaEfectuada.tipo_cita
                idServTratPaq = citaEfectuada.id_serv_trat_paq
                nombreServTratPaq = ""
                precioServTratPaq = 0
                if tipoCita == "Servicio":
                    consultaServicio = Servicios.objects.filter(id_servicio = idServTratPaq)
                    for datoServicio in consultaServicio:
                        nombreServTratPaq = datoServicio.nombre_servicio
                        precioServTratPaq = datoServicio.precio_venta
                elif tipoCita == "SesionTratamiento":
                    consultaTratamiento = Tratamientos.objects.filter(id_tratamiento = idServTratPaq)
                    for datoTratamiento in consultaTratamiento:
                        nombreServTratPaq = datoTratamiento.nombre_tratamiento
                        precioServTratPaq = datoTratamiento.costo_venta_tratamiento
                elif tipoCita == "PaqueteTratamiento":
                    consultaPaqueteTratamiento = PaquetesPromocionTratamientos.objects.filter(id_paquete_tratamiento = idServTratPaq)
                    for datoPaquete in consultaPaqueteTratamiento:
                        nombreServTratPaq = datoPaquete.nombre_paquete
                        precioServTratPaq = datoPaquete.precio_por_paquete
                elif tipoCita == "ServicioCertificado":
                    certificadoServicio = citaEfectuada.certificado_servicio
                    servCertSeparado = certificadoServicio.split("-")
                    idCertificado = servCertSeparado[0]
                    idServicioCertificado = servCertSeparado[1]
                    idCertificadoInt = int(idCertificado)
                    idServicioCertificadoInt = int(idCertificadoInt)
                    idCertificadosPendientesCitas.append(idCertificadoInt)
                    #Consulta de certificado
                    consultaCertificado = CertificadosProgramados.objects.filter(id_certificado = idCertificadoInt)
                    for datoCertificado in consultaCertificado:
                        codigoCertificado = datoCertificado.codigo_certificado

                    #Consulta de servicio certificado
                    consultaServicioCertificado = ServiciosCertificados.objects.filter(id_servicio_certificado = idServicioCertificadoInt)
                    for datoServicio in consultaServicioCertificado:
                        nombreServicioCertificado = datoServicio.nombre
                    nombreServTratPaq = codigoCertificado + " - "+nombreServicioCertificado
                        
                
                fechaPactada = citaEfectuada.fecha_pactada
                horaPactada = citaEfectuada.hora_pctada
                duracionCita = citaEfectuada.duracionCitaMinutos
                duracionCita = int(duracionCita)
                comentarios = citaEfectuada.comentarios

                idVenta = citaEfectuada.venta_id



                citasEfectuadas.append([idCita, nombreCompletoCliente, nombreCompletoEmpleado, tipoCita, nombreServTratPaq, precioServTratPaq,
                fechaPactada, horaPactada,duracionCita, comentarios,idVenta])


            
            return render(request, "22 Citas/verCitas.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
                "notificacionRenta":notificacionRenta,"tipoUsuario":tipoUsuario, "nombreSucursalView":nombreSucursalView,
                "citasPendientes":citasPendientes, "citasEfectuadas":citasEfectuadas, "notificacionCita":notificacionCita, "citasPendientesReagendar":citasPendientesReagendar, "sinCitasPendientes":sinCitasPendientes, "arregloHoras2":arregloHoras2,
                "listaZipFechaHora":listaZipFechaHora, "fechaLimite":fechaLimite, "citasPendientesReagendar2":citasPendientesReagendar2, "citasPendientesReagendar3":citasPendientesReagendar3, "citasPendientesReagendar4":citasPendientesReagendar4, "listaZipFechaHora2":listaZipFechaHora2,
                "citasPendientesReagendar5":citasPendientesReagendar5, "cistasPendientesZipeada":cistasPendientesZipeada})


        else:           
            if tipoUsuario == "esAdmin":
                sucursales = Sucursales.objects.all()
                
                if "citasEnviadas" in request.session:
                    citasEnviadas = request.session["citasEnviadas"]
                    del request.session["citasEnviadas"]
                    return render(request, "22 Citas/seleccionarSucursalCitaVer.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
                    "notificacionRenta":notificacionRenta, "sucursales":sucursales,"tipoUsuario":tipoUsuario, "citasEnviadas":citasEnviadas, "notificacionCita":notificacionCita})
                    
                if "citaReagendada" in request.session:
                    citaReagendada = request.session["citaReagendada"]
                    del request.session["citaReagendada"]
                    return render(request, "22 Citas/seleccionarSucursalCitaVer.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
                    "notificacionRenta":notificacionRenta, "sucursales":sucursales,"tipoUsuario":tipoUsuario, "notificacionCita":notificacionCita, "citaReagendada":citaReagendada})

                return render(request, "22 Citas/seleccionarSucursalCitaVer.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
                "notificacionRenta":notificacionRenta, "sucursales":sucursales,"tipoUsuario":tipoUsuario, "notificacionCita":notificacionCita})
            else:
                consultaEmpleado = Empleados.objects.filter(id_empleado = idEmpleado)
                for datoEmpleado in consultaEmpleado:
                    sucursalEmpleado = datoEmpleado.id_sucursal_id
                sucursales = Sucursales.objects.filter(id_sucursal = sucursalEmpleado)
                
                if "citasEnviadas" in request.session:
                    citasEnviadas = request.session["citasEnviadas"]
                    del request.session["citasEnviadas"]
                    return render(request, "22 Citas/seleccionarSucursalCitaVer.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
                    "notificacionRenta":notificacionRenta, "sucursales":sucursales,"tipoUsuario":tipoUsuario, "citasEnviadas":citasEnviadas, "notificacionCita":notificacionCita})

                if "citaReagendada" in request.session:
                    citaReagendada = request.session["citaReagendada"]
                    del request.session["citaReagendada"]
                    return render(request, "22 Citas/seleccionarSucursalCitaVer.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
                    "notificacionRenta":notificacionRenta, "sucursales":sucursales,"tipoUsuario":tipoUsuario, "notificacionCita":notificacionCita, "citaReagendada":citaReagendada})


                return render(request, "22 Citas/seleccionarSucursalCitaVer.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
                "notificacionRenta":notificacionRenta, "sucursales":sucursales,"tipoUsuario":tipoUsuario, "notificacionCita":notificacionCita})
        
    else:
        return render(request,"1 Login/login.html")
    

def calendarioCitas(request):

    if "idSesion" in request.session:

        # Variables de sesión
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']
        idPerfil = idEmpleado
        idConfig = idEmpleado
        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
        #notificacionRentas
        notificacionRenta = notificacionRentas(request)
        #notificacionCitas
        notificacionCita = notificacionCitas(request)

        print(notificacionCita)

        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)

        if request.method == "POST":
            sucursalCita = request.POST['sucursalCita']
            consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursalCita)
            for datoSucursal in consultaSucursal:
                nombreSucursal = datoSucursal.nombre

            #Calendario citas

            #Fecha mes anterior
            fechaMesAnterior = datetime.now()-relativedelta(months=1)
            añoAnterior = fechaMesAnterior.strftime("%Y")
            mesAnterior = fechaMesAnterior.strftime("%m")
            fechaMesAnterior = añoAnterior + "-"+mesAnterior+"-01"

            #Fecha mes despues
            fechaMesDespues = datetime.now()+relativedelta(months=1)
            añoDespues = fechaMesDespues.strftime("%Y")
            mesDespues = fechaMesDespues.strftime("%m")
            fechaMesDespues = añoDespues + "-"+mesDespues+"-15"

            citasPendientes = Citas.objects.filter(fecha_pactada__range = [fechaMesAnterior, fechaMesDespues], estado_cita = "sinCanjear")

            arrayCitasPendientes = []

            for citaPendiente in citasPendientes:
                
                #Datos de la cita
                idCita = citaPendiente.id_cita
                cliente = citaPendiente.cliente_id
                empleadoRealizo = citaPendiente.empleado_realizo_id
                tipoCita = citaPendiente.tipo_cita
                idServTratPaq = citaPendiente.id_serv_trat_paq
                fechaPactada = citaPendiente.fecha_pactada
                horaPactada = citaPendiente.hora_pctada
                comentarios = citaPendiente.comentarios
                duracionMinutos = citaPendiente.duracionCitaMinutos
                duracionMinutos = int(duracionMinutos)

                fechaPactadaTipoDate = datetime.strftime(fechaPactada, '%Y-%m-%d')
                #Fecha en texto
                mesesDic = {
                "01":'Enero',
                "02":'Febrero',
                "03":'Marzo',
                "04":'Abril',
                "05":'Mayo',
                "06":'Junio',
                "07":'Julio',
                "08":'Agosto',
                "09":'Septiembre',
                "10":'Octubre',
                "11":'Noviembre',
                "12":'Diciembre'
                }

                mesPactado = datetime.strftime(fechaPactada, '%m')
                diaPactado = datetime.strftime(fechaPactada, '%d')
                añoPactado = datetime.strftime(fechaPactada, '%Y')

                mesEnTexto = mesesDic[str(mesPactado)]
                fechaPactadaMensaje = diaPactado + " de "+mesEnTexto+ " del " + añoPactado

                #Datos del cliente
                consultaCliente = Clientes.objects.filter(id_cliente = cliente)
                for datoCliente in consultaCliente:
                    nombreCliente = datoCliente.nombre_cliente
                    apellidoPaterno = datoCliente.apellidoPaterno_cliente

                nombreCompletoCliente = nombreCliente + " "+apellidoPaterno

                #Datos del empleado que realizo la cita
                consultaEmpleado = Empleados.objects.filter(id_empleado = empleadoRealizo)
                for datoEmpleado in consultaEmpleado:
                    nombreEmpleado = datoEmpleado.nombres
                    apellidoEmpleado = datoEmpleado.apellido_paterno
                
                nombreCompletoEmpleado = nombreEmpleado +" "+apellidoEmpleado

                tipoCitaTexto = ""
                if tipoCita == "Servicio":
                    tipoCitaTexto = "Servicio"
                    consultaServicio = Servicios.objects.filter(id_servicio = idServTratPaq)
                    for datoServicio in consultaServicio:
                        nombreServTratPaq = datoServicio.nombre_servicio
                        precioServTraPaq = datoServicio.precio_venta
                elif tipoCita == "SesionTratamiento":
                    tipoCitaTexto = "Sesion de tratamiento"
                    consultaTratamiento = Tratamientos.objects.filter(id_tratamiento = idServTratPaq)
                    for datoTratamiento in consultaTratamiento:
                        nombreServTratPaq = datoTratamiento.nombre_tratamiento
                        precioServTraPaq = datoTratamiento.costo_venta_tratamiento
                elif tipoCita == "PaqueteTratamiento":
                    tipoCitaTexto = "Paquete/Promoción de tratamiento"
                    consultaPaqueteTratamiento = PaquetesPromocionTratamientos.objects.filter(id_paquete_tratamiento = idServTratPaq)
                    for datoPaquete in consultaPaqueteTratamiento:
                        nombreServTratPaq = datoPaquete.nombre_paquete
                        precioServTraPaq = datoPaquete.precio_por_paquete

                arrayCitasPendientes.append([fechaPactadaMensaje, idCita, nombreCompletoCliente, tipoCitaTexto,nombreServTratPaq, precioServTraPaq, horaPactada, duracionMinutos,fechaPactadaTipoDate])
            
            citasEfectuadas = Citas.objects.filter(fecha_pactada__range = [fechaMesAnterior, fechaMesDespues], estado_cita = "efectuada")

            arrayCitasEfectuadas = []

            for citaEfectuada in citasEfectuadas:
                
                #Datos de la cita
                idCita = citaEfectuada.id_cita
                cliente = citaEfectuada.cliente_id
                empleadoRealizo = citaEfectuada.empleado_realizo_id
                tipoCita = citaEfectuada.tipo_cita
                idServTratPaq = citaEfectuada.id_serv_trat_paq
                fechaPactada = citaEfectuada.fecha_pactada
                horaPactada = citaEfectuada.hora_pctada
                comentarios = citaEfectuada.comentarios
                duracionMinutos = citaEfectuada.duracionCitaMinutos
                duracionMinutos = int(duracionMinutos)

                fechaPactadaTipoDate = datetime.strftime(fechaPactada, '%Y-%m-%d')
                #Fecha en texto
                mesesDic = {
                "01":'Enero',
                "02":'Febrero',
                "03":'Marzo',
                "04":'Abril',
                "05":'Mayo',
                "06":'Junio',
                "07":'Julio',
                "08":'Agosto',
                "09":'Septiembre',
                "10":'Octubre',
                "11":'Noviembre',
                "12":'Diciembre'
                }

                mesPactado = datetime.strftime(fechaPactada, '%m')
                diaPactado = datetime.strftime(fechaPactada, '%d')
                añoPactado = datetime.strftime(fechaPactada, '%Y')

                mesEnTexto = mesesDic[str(mesPactado)]
                fechaPactadaMensaje = diaPactado + " de "+mesEnTexto+ " del " + añoPactado

                #Datos del cliente
                consultaCliente = Clientes.objects.filter(id_cliente = cliente)
                for datoCliente in consultaCliente:
                    nombreCliente = datoCliente.nombre_cliente
                    apellidoPaterno = datoCliente.apellidoPaterno_cliente

                nombreCompletoCliente = nombreCliente + " "+apellidoPaterno

                #Datos del empleado que realizo la cita
                consultaEmpleado = Empleados.objects.filter(id_empleado = empleadoRealizo)
                for datoEmpleado in consultaEmpleado:
                    nombreEmpleado = datoEmpleado.nombres
                    apellidoEmpleado = datoEmpleado.apellido_paterno
                
                nombreCompletoEmpleado = nombreEmpleado +" "+apellidoEmpleado

                tipoCitaTexto = ""
                if tipoCita == "Servicio":
                    tipoCitaTexto = "Servicio"
                    consultaServicio = Servicios.objects.filter(id_servicio = idServTratPaq)
                    for datoServicio in consultaServicio:
                        nombreServTratPaq = datoServicio.nombre_servicio
                        precioServTraPaq = datoServicio.precio_venta
                elif tipoCita == "SesionTratamiento":
                    tipoCitaTexto = "Sesion de tratamiento"
                    consultaTratamiento = Tratamientos.objects.filter(id_tratamiento = idServTratPaq)
                    for datoTratamiento in consultaTratamiento:
                        nombreServTratPaq = datoTratamiento.nombre_tratamiento
                        precioServTraPaq = datoTratamiento.costo_venta_tratamiento
                elif tipoCita == "PaqueteTratamiento":
                    tipoCitaTexto = "Paquete/Promoción de tratamiento"
                    consultaPaqueteTratamiento = PaquetesPromocionTratamientos.objects.filter(id_paquete_tratamiento = idServTratPaq)
                    for datoPaquete in consultaPaqueteTratamiento:
                        nombreServTratPaq = datoPaquete.nombre_paquete
                        precioServTraPaq = datoPaquete.precio_por_paquete

                arrayCitasEfectuadas.append([fechaPactadaMensaje, idCita, nombreCompletoCliente, tipoCitaTexto,nombreServTratPaq, precioServTraPaq, horaPactada, duracionMinutos,fechaPactadaTipoDate])



                

                    


            


            return render(request, "22 Citas/calendarioCitas.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
            "notificacionRenta":notificacionRenta,"notificacionCita":notificacionCita, "nombreSucursal":nombreSucursal, "arrayCitasPendientes":arrayCitasPendientes, 
            "arrayCitasEfectuadas":arrayCitasEfectuadas})


        else:
            if tipoUsuario == "esAdmin":
                sucursales = Sucursales.objects.all()
                
                return render(request, "22 Citas/seleccionarSucursalCitaCalendarioCitas.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
                "notificacionRenta":notificacionRenta,"notificacionCita":notificacionCita, "sucursales":sucursales,"tipoUsuario":tipoUsuario, "sucursales":sucursales})
            else:
                consultaEmpleado = Empleados.objects.filter(id_empleado = idEmpleado)
                for datoEmpleado in consultaEmpleado:
                    sucursalEmpleado = datoEmpleado.id_sucursal_id
                sucursales = Sucursales.objects.filter(id_sucursal = sucursalEmpleado)
                return render(request, "22 Citas/seleccionarSucursalCitaCalendarioCitas.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
                "notificacionRenta":notificacionRenta,"notificacionCita":notificacionCita, "sucursales":sucursales})
        
    else:
        return render(request,"1 Login/login.html")


def vistaVenderCita(request):

    if "idSesion" in request.session:

        # Variables de sesión
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']
        idPerfil = idEmpleado
        idConfig = idEmpleado
        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
        #notificacionRentas
        notificacionRenta = notificacionRentas(request)
        #notificacionCitas
        notificacionCita = notificacionCitas(request)
        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)

        if request.method == "POST":

            idCita = request.POST["idCita"]
            #Datos de cita
            consultaCita = Citas.objects.filter(id_cita = idCita)
            for datoCita in consultaCita:
                idSucursal = datoCita.sucursal_id
                horaPactada = datoCita.hora_pctada
                cliente = datoCita.cliente_id
                tipoCita = datoCita.tipo_cita
                duracion = datoCita.duracionCitaMinutos
                duracion = int(duracion)
                idServTratPaq = datoCita.id_serv_trat_paq
                idCita = datoCita.id_cita
                estadoCita = datoCita.estado_cita
            
            #Datos de cliente
            consultaCliente = Clientes.objects.filter(id_cliente = cliente)
            for datoCliente in consultaCliente:
                nombreCliente = datoCliente.nombre_cliente
                apellidoPaternoCliente = datoCliente.apellidoPaterno_cliente
                idCliente = datoCliente.id_cliente
                nombreCompletoCliente = nombreCliente + " "+apellidoPaternoCliente

            #Datos de sucursal
            consultaSucursal = Sucursales.objects.filter(id_sucursal = idSucursal)
            for datoSucursal in consultaSucursal:
                nombreSucursal = datoSucursal.nombre

            #Datos del vendedor
            consultaEmpleadoVendedor = Empleados.objects.filter(id_empleado = idEmpleado)

            #Datos de servicio/tratamiento/paquete a vender
            tipoDeCita = ""
            datosTipoCita = []
            
            if tipoCita == "Servicio":
                tipoDeCita = "SERVICIO"
                consultaServicio = Servicios.objects.filter(id_servicio =idServTratPaq) 
                for datoServicio in consultaServicio:
                    idServicio = datoServicio.id_servicio
                    nombreServicio = datoServicio.nombre_servicio
                    precioServicio = datoServicio.precio_venta
                    descripcionServicio = datoServicio.descripcion_servicio
                    complementosServicio = datoServicio.complementos_servicio
                    precioCita = precioServicio
                
                datosTipoCita.append([idServicio,nombreServicio,precioServicio,descripcionServicio, complementosServicio])
            elif tipoCita == "SesionTratamiento":
                tipoDeCita = "SESIÓN DE TRATAMIENTO"
                consultaTratamiento = Tratamientos.objects.filter(id_tratamiento = idServTratPaq)
                for datoTratamiento in consultaTratamiento:
                    nombreTratamiento = datoTratamiento.nombre_tratamiento
                    codigoTratamiento = datoTratamiento.codigo_tratamiento
                    tipoTratamiento = datoTratamiento.tipo_tratamiento
                    descripcionTratamiento = datoTratamiento.descripcion_tratamiento
                    complementosTratamiento = datoTratamiento.complementos_tratamiento
                    precioTratamiento = datoTratamiento.costo_venta_tratamiento
                    precioCita = precioTratamiento
                datosTipoCita.append([codigoTratamiento,nombreTratamiento,precioTratamiento,tipoTratamiento,descripcionTratamiento, complementosTratamiento])
            elif tipoCita == "PaqueteTratamiento":
                tipoDeCita = "PAQUETE/PROMOCIÓN TRATAMIENTO"
                consultaPromocion = PaquetesPromocionTratamientos.objects.filter(id_paquete_tratamiento = idServTratPaq)
                for datoPromo in consultaPromocion:
                    nombrePaquete = datoPromo.nombre_paquete
                    numero_sesiones = datoPromo.numero_sesiones
                    descuento = datoPromo.descuento
                    if descuento == None:
                        boolDescuento = "Con descuento"
                    else:
                        boolDescuento = "Sin descuento"
                    precioPaquete = datoPromo.precio_por_paquete
                    precioCita = precioPaquete

                    #Datos de tratamiento
                    idTratamiento = datoPromo.tratamiento_id
                    consultaTratamiento = Tratamientos.objects.filter(id_tratamiento = idTratamiento)
                    for datoTratamiento in consultaTratamiento:
                        nombreTratamiento = datoTratamiento.nombre_tratamiento
                        codigoTratamiento = datoTratamiento.codigo_tratamiento
                        tipoTratamiento = datoTratamiento.tipo_tratamiento
                datosTipoCita.append([nombrePaquete,numero_sesiones,boolDescuento,descuento,precioPaquete, nombreTratamiento, codigoTratamiento, tipoTratamiento])

                
            #Límites de creditos de cliente
            limiteCreditoSucursal = ConfiguracionCredito.objects.filter(sucursal_id__id_sucursal = idSucursal)
            
            for limite in limiteCreditoSucursal:
                if limite.activo == "S":
                    montoLimite = float(limite.limite_credito)
        
            consultaCreditosPendientesClientes = Creditos.objects.filter(cliente_id__id_cliente = idCliente, estatus ="Pendiente")
            creditoFaltantePorPagar= 0
            creditoLibreCliente = 0
            creditoSolicitado =0
            creditoPagado = 0
            for credito in consultaCreditosPendientesClientes:
                montoTotal = credito.monto_pagar
                montoPagado = credito.monto_pagado
                montoRestante = credito.monto_restante
                
                creditoSolicitado = creditoSolicitado + montoTotal
                creditoPagado = creditoPagado + montoPagado
                creditoFaltantePorPagar = creditoFaltantePorPagar + montoRestante
            
            creditoLibreCliente = montoLimite - creditoFaltantePorPagar
            
            boolCreditoLibreCliente = False

            if creditoLibreCliente > precioCita:
                boolCreditoLibreCliente = True
            else:
                boolCreditoLibreCliente = False

            #Descuentos
            descuentos = Descuentos.objects.all()

            #Fechas Abonos
            fechaInicioDePago = datetime.now()+relativedelta(days=15)
            fechaInicioDePago = datetime.strftime(fechaInicioDePago, '%Y-%m-%d')
            print(str(fechaInicioDePago));
            fechaFinalDePago = datetime.now()+relativedelta(days=75)
            fechaFinalDePago = datetime.strftime(fechaFinalDePago, '%Y-%m-%d')
            print(str(fechaFinalDePago));



            if tipoCita == "PaqueteTratamiento":
                consultaCitasTratamientos = citasTratamientos.objects.filter(cita_id__id_cita = idCita)

                for datoCitaTratamiento in consultaCitasTratamientos:
                    idTratamientoCliente = datoCitaTratamiento.idTratamientoCliente_id
                
                consultaPagosTratamiento = pagosPaquetesTratamientos.objects.filter(id_tratamiento_cliente_id__id_tratamiento_cliente = idTratamientoCliente)
                for datoPago in consultaPagosTratamiento:
                    totalAbonado = datoPago.total_abonado
                    totalRestante = datoPago.total_restante
                    estatusPago = datoPago.estatus_pago
                
                mitad = totalRestante/2

                primerPago = False
                if totalAbonado == 0:
                    primerPago = True
                else:
                    primerPago = False

                return render(request, "22 Citas/vistaVenderCita.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
                "notificacionRenta":notificacionRenta, "idSucursal":idSucursal, "nombreSucursal":nombreSucursal, "consultaEmpleadoVendedor":consultaEmpleadoVendedor, "horaPactada":horaPactada,
                "nombreCompletoCliente":nombreCompletoCliente, "idCliente":idCliente, "tipoDeCita":tipoDeCita, "duracion":duracion, "datosTipoCita":datosTipoCita,"boolCreditoLibreCliente":boolCreditoLibreCliente,
                "creditoLibreCliente":creditoLibreCliente, "montoLimite":montoLimite, "creditoFaltantePorPagar":creditoFaltantePorPagar, "descuentos":descuentos, "precioCita":precioCita, "fechaInicioDePago":fechaInicioDePago,
                "fechaFinalDePago":fechaFinalDePago, "idServTratPaq":idServTratPaq, "idCita":idCita, "totalAbonado":totalAbonado, "totalRestante":totalRestante, 
                "estatusPago":estatusPago, "mitad":mitad, "primerPago":primerPago, "tipoCita":tipoCita, "notificacionCita":notificacionCita})
            
            if estadoCita == "sinCanjear":

                estatusPago = estadoCita
            else:
                estatusPago = "Efectuado"
            return render(request, "22 Citas/vistaVenderCita.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
                "notificacionRenta":notificacionRenta, "idSucursal":idSucursal, "nombreSucursal":nombreSucursal, "consultaEmpleadoVendedor":consultaEmpleadoVendedor, "horaPactada":horaPactada,
                "nombreCompletoCliente":nombreCompletoCliente, "idCliente":idCliente, "tipoDeCita":tipoDeCita, "duracion":duracion, "datosTipoCita":datosTipoCita,"boolCreditoLibreCliente":boolCreditoLibreCliente,
                "creditoLibreCliente":creditoLibreCliente, "montoLimite":montoLimite, "creditoFaltantePorPagar":creditoFaltantePorPagar, "descuentos":descuentos, "precioCita":precioCita, "fechaInicioDePago":fechaInicioDePago,
                "fechaFinalDePago":fechaFinalDePago, "idServTratPaq":idServTratPaq, "idCita":idCita, "tipoCita":tipoCita, "notificacionCita":notificacionCita, "estatusPago":estatusPago})



        
        
    else:
        return render(request,"1 Login/login.html")

def guardarVentaCita(request):

    if "idSesion" in request.session:

        idEmpleado = request.session['idSesion']
        if request.method == "POST":

            tipoCita = request.POST['tipoCita']
            if tipoCita == "PaqueteTratamiento":   #Es paquete..
                totalRestante = request.POST['totalRestante']
                totalRestante = float(totalRestante)

                if totalRestante == 0:
                    #Se guarda la cita pero no la venta pporque ya se pago..
                    request.session['ventaAgregada'] = "La cita se ha guardado satisfactoriamente!"
                    idCita = request.POST['idCita']
                    tipoCita = request.POST['tipoCita']
                    idServTratPaq = request.POST['idServTratPaq']

                    #Actualizar Cita
                    idUltimaVenta = 0
                    consultaVentas = Ventas.objects.all()
                    for venta in consultaVentas:
                        idUltimaVenta = venta.id_venta
                    actualizacionCita = Citas.objects.get(id_cita = idCita)
                    actualizacionCita.estado_cita = "efectuada"
                    actualizacionCita.venta_id = Ventas.objects.get(id_venta = idUltimaVenta)
                    actualizacionCita.save()

                    

                    consultaPaqueteTratamiento = PaquetesPromocionTratamientos.objects.filter(id_paquete_tratamiento = idServTratPaq)

                    for datoPromo in consultaPaqueteTratamiento:
                        idTratamiento = datoPromo.tratamiento_id
                        nombreTratamientoPaquete = datoPromo.nombre_paquete
                        precioPaquete = datoPromo.precio_por_paquete
                        consultaTratamientoProductos = TratamientosProductosGasto.objects.filter(tratamiento_id__id_tratamiento = idTratamiento)

                        if consultaTratamientoProductos:
                            sinProductos = False
                            for producto in consultaTratamientoProductos:
                                idProducto = producto.producto_gasto_id
                                cantidadUtilizada = producto.cantidad

                                consultaProducto = ProductosGasto.objects.filter(id_producto = idProducto)
                                for dato in consultaProducto:
                                    cantidadActualEnExistencia = dato.cantidad
                                    cuantificable = dato.contenido_cuantificable

                                if cuantificable == "S":
                                    actualizacionCantidad = cantidadActualEnExistencia - cantidadUtilizada

                                    actualizarProducto = ProductosGasto.objects.filter(id_producto = idProducto).update(cantidad = actualizacionCantidad)

                        else:
                            sinProductos = True

                    #Actualización de cita-tratamiento en caso de que haya
                    consultaCitaEnTablaTratamientoCliente = citasTratamientos.objects.filter(cita_id__id_cita = idCita)
                    if consultaCitaEnTablaTratamientoCliente:
                        for cita in consultaCitaEnTablaTratamientoCliente:
                            idTratamientoCliente = cita.idTratamientoCliente_id
                        
                        consultaTratamientoCliente = TratamientosClientes.objects.filter(id_tratamiento_cliente = idTratamientoCliente)

                        for datoTratamientoCliente in consultaTratamientoCliente:
                            sesionesPendientesActuales = datoTratamientoCliente.sesionesPendientes
                            sesionesCanjeadas = datoTratamientoCliente.sesionesCanjeadas
                            cliente= datoTratamientoCliente.cliente_id
                        
                        nuevasSesionesPendientes = sesionesPendientesActuales - 1
                        nuevasSesionesCanjeadas = sesionesCanjeadas + 1

                        actualizacionTratamientoCliente = TratamientosClientes.objects.filter(id_tratamiento_cliente = idTratamientoCliente).update(sesionesPendientes = nuevasSesionesPendientes,
                        sesionesCanjeadas = nuevasSesionesCanjeadas)

                        if actualizacionTratamientoCliente:
                            fechaMovimiento = datetime.now()
                            #Registro de historial
                            registroEnHistorialDeTratamiento = HistorialTratamientosClientes(tratamiento_cliente = TratamientosClientes.objects.get(id_tratamiento_cliente = idTratamientoCliente),
                            sesion_efectuada = nuevasSesionesCanjeadas, fecha_efectuado = fechaMovimiento)

                            registroEnHistorialDeTratamiento.save()

                    #IMPRESION DE TICKEEETSSSS
                    
                    consultaCita = Citas.objects.filter(id_cita = idCita)
                    for datoCita in consultaCita:
                        empleadoVendedor = datoCita.empleado_realizo_id
                        sucursal = datoCita.sucursal_id
                        cliente = datoCita.cliente_id

                    #Fecha
                    hoy = datetime.now()
                    hoyFormato = hoy.strftime('%Y/%m/%d')

                    #Empleado vendedor
                    consultaEmpleadoVendedor = Empleados.objects.filter(id_empleado = empleadoVendedor)
                    for datoVendedor in consultaEmpleadoVendedor:
                        nombreEmpleado = datoVendedor.nombres
                        apellidoPatEmpleado = datoVendedor.apellido_paterno

                    nombreCompletoEmpleadoVendedor = nombreEmpleado + " "+ apellidoPatEmpleado

                    #Datos sucurssal
                    consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursal)
                    for datoSucursal in consultaSucursal:
                        nombreSucursal = datoSucursal.nombre
                        telefonoSucursal = datoSucursal.telefono
                        direccionSucursal = datoSucursal.direccion

                    #DatosCliente
                    
                    consultaCliente = Clientes.objects.filter(id_cliente = cliente)
                    for datoCliente in consultaCliente:
                        idCienteTicket = datoCliente.id_cliente
                        nombreCliente = datoCliente.nombre_cliente
                        apellidoCliente = datoCliente.apellidoPaterno_cliente

                    nombreClienteTicket = nombreCliente + " " + apellidoCliente
                    #Hora bien
                    horaVenta = datetime.now().time()
                    horaVenta = horaVenta.strftime("%H:%M:%S")

                    # Esto es para obtener las impresoras. No es obligatorio hacerlo siempre que se quiera imprimir
                    impresoras = Conector.ConectorV3.obtenerImpresoras()
                    print(f"Las impresoras son: {impresoras}")

                    contadorTickets = 0
                    for x in range(2):
                        contadorTickets = contadorTickets + 1
                        c = Conector.ConectorV3()
                        c.Iniciar()
                        c.Corte(1)
                        
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        # Recuerda que la imagen debe existir y debe ser legible para el plugin. Si no, comenta las líneas
                        c.CargarImagenLocalEImprimir("C:\\COSTABELLA\\sistemaCostabella\\static\\images\\anegragrande.png", 0, 216)
                        c.EscribirTexto("\n")
                        c.EstablecerTamañoFuente(1, 1)
                        c.EstablecerEnfatizado(True)
                        c.EscribirTexto("Sucursal: "+nombreSucursal+"\n")
                        c.EstablecerEnfatizado(False)
                        c.EscribirTexto("TEL: "+telefonoSucursal+"\n")
                        c.TextoSegunPaginaDeCodigos(2, "cp850", direccionSucursal+"\n")

                        c.EstablecerEnfatizado(True)
                        c.EscribirTexto("================================================\n")
                        c.EstablecerTamañoFuente(2, 2)
                        c.EscribirTexto("SESIÓN #"+str(nuevasSesionesCanjeadas)+"\n")
                        c.EstablecerTamañoFuente(1, 1)
                        c.EscribirTexto(str(nuevasSesionesPendientes)+" SESIONES PENDIENTES\n")
                        c.EstablecerEnfatizado(False)
                        c.EstablecerAlineacion(Conector.ALINEACION_IZQUIERDA)
                        c.EstablecerTamañoFuente(1, 1)
                        c.EscribirTexto("\n")
                        c.EscribirTexto(" "+str(hoyFormato)+" - "+str(horaVenta)+" hrs.\n")
                        c.EscribirTexto("Atendida por: "+nombreCompletoEmpleadoVendedor+".\n")
                        c.EscribirTexto("\n")

                        #Listado de productos 
                        
                        
                        costototalProductoDosDecimales = round(precioPaquete, 2)
                        costototalProductoDosDecimales = str(costototalProductoDosDecimales)

                        costoTotalProductoDivididoEnElPunto = costototalProductoDosDecimales.split(".")
                        longitudCostoTotal = len(str(costoTotalProductoDivididoEnElPunto[0]))
                        longitudCostoTotal = int(longitudCostoTotal)

                        
                        caracteresProducto = len(nombreTratamientoPaquete)

                        if longitudCostoTotal == 2:
                            espacio = 38
                        if longitudCostoTotal == 2:
                            espacio = 37
                        elif longitudCostoTotal == 3:
                            espacio = 36
                        elif longitudCostoTotal == 4:
                            espacio = 35
                        elif longitudCostoTotal == 5:
                            espacio = 34
                        elif longitudCostoTotal == 6:
                            espacio = 33
                        numeroEspacios = espacio - int(caracteresProducto)
                        
                        espaciosTicket = ""
                        for x in range(numeroEspacios):
                            espacioMini = " "
                            espaciosTicket = espaciosTicket + espacioMini
                        c.EscribirTexto("1 x "+nombreTratamientoPaquete+espaciosTicket+str(costototalProductoDosDecimales)+"\n")


                        c.EscribirTexto("\n")
                        
                        c.EscribirTexto("\n")
                        c.EstablecerEnfatizado(True)
                        c.EstablecerTamañoFuente(1, 1)
                        c.EscribirTexto("====== LIQUIDADA ======\n")
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        
                        c.EscribirTexto("\n")
                        c.EstablecerEnfatizado(True)
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        c.TextoSegunPaginaDeCodigos(2, "cp850", "INFORMACIÓN DE CLIENTE.\n")

                        c.EstablecerEnfatizado(False)
                        c.EscribirTexto("ID:"+str(idCienteTicket)+" - "+nombreClienteTicket+".\n")
                        c.EscribirTexto("=========== Gracias por su compra!! ===========\n")
                        c.EstablecerTamañoFuente(2, 2)
                        c.EstablecerEnfatizado(True)
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        if contadorTickets == 1:
                            c.EscribirTexto("\n")
                            c.EscribirTexto("COPIA TIENDA.\n")
                            c.EscribirTexto("\n")
                            c.EstablecerTamañoFuente(1, 1)
                            c.EscribirTexto("________________________________________________\n")
                            c.EscribirTexto("Firma de cliente.\n")
                        else:
                            c.EscribirTexto("\n")
                            c.EscribirTexto("COPIA CLIENTE.\n")
                        c.EscribirTexto("\n")
                        c.EstablecerTamañoFuente(1, 1)
                        

                        c.Feed(1)
                        c.Corte(1)
                        #c.abrirCajon()
                        c.Pulso(48, 60, 120)
                        print("Imprimiendo...")
                        # Recuerda cambiar por el nombre de tu impresora
                        respuesta = c.imprimirEn("POS80 Printer")
                        if respuesta == True:
                            print("Impresión correcta")
                        else:
                            print(f"Error. El mensaje es: {respuesta}")


                        try:
                            tokenTelegram = keysBotCostabella.tokenBotCostabellaCitas
                            botCostabella = telepot.Bot(tokenTelegram)

                            idGrupoTelegram = keysBotCostabella.idGrupo
                            
                            mensaje = "\U0001F4C6 CITA VENDIDA \U0001F4C6 \n El cliente "+nombreClienteTicket+" acudió por sesión de la cita #"+str(idCita)+" previamente pagada, sesión #"+str(nuevasSesionesCanjeadas)+" de "+str(nuevasSesionesPendientes)+", el día "+hoyFormato+" a las "+str(horaVenta)+" hrs en la sucursal "+nombreSucursal+"\n Paquete:\n"+nombreTratamientoPromo
                            botCostabella.sendMessage(idGrupoTelegram,mensaje)
                        except:
                            print("An exception occurred")

                    return redirect("/ventas/")
                else:

                    #Se guarda la venta sin credito

                    ventaEnCredito = False
                    fechaVenta = datetime.now()
                    horaVenta = datetime.now().time()


                    sucursal = request.POST['idSucursal']
                    comentariosExtras = request.POST['comentarios']
                    if comentariosExtras == "":
                        comentarios = "Sin comentarios"
                    else:
                        comentarios = comentariosExtras

                    #Empleado vendedor
                    empleadoVendedor = idEmpleado

                    #cliente
                    clienteMandado = request.POST['clienteSeleccionado']

                    #Tipo de cita y id servicio trata paquete
                    tipoCita = request.POST['tipoDeCita']
                    idServTratPaq = request.POST['idServTratPaq']
                    esServicio = False
                    esTratamiento = False
                    esPaquete = False
                    idCita = request.POST['idCita']

                    if tipoCita == "SERVICIO":
                        esServicio = True

                        servicioCorporal = False
                        consultaServicio = Servicios.objects.filter(id_servicio = idServTratPaq)
                        for datoServicio in consultaServicio:
                            tipoServicio = datoServicio.tipo_servicio
                        
                        if tipoServicio == "Corporal":
                            servicioCorporal = True
                    elif tipoCita == "SESIÓN DE TRATAMIENTO":
                        esTratamiento = True
                    elif tipoCita == "PAQUETE/PROMOCIÓN TRATAMIENTO":
                        esPaquete = True

                    #COSTO TOTAL A PAGAR
                    abonoCliente = request.POST['abonoCliente']
                    


                    esConEfectivo = False
                    esConTarjeta = False
                    esConTransferencia = False

                    stridServTratPaq = str(idServTratPaq)
                    cantidad = "1"
                    descuento = "SinDescuento"
                    if ventaEnCredito == False: #Venta normal sin credito
                        formaPago = request.POST['tipoPago']
                        
                        #datos de pago.
                        if formaPago == "Efectivo":
                            esConEfectivo = True
                        elif formaPago == "Tarjeta":
                            esConTarjeta = True
                            tipo_tarjeta = request.POST['tipoTarjeta']    
                            referencia_tarjeta = request.POST['referenciaTarjeta'] 
                            
                        elif formaPago == "Transferencia":
                            esConTransferencia = True
                            clave_transferencia = request.POST['claveRastreoTransferencia'] 
                        
                    
                        if esConEfectivo:
                            if descuento == "SinDescuento":
                                if esPaquete: #Venta en efectivo, sin descuento y paquete tratamiento
                                    registroVenta = Ventas(fecha_venta = fechaVenta, hora_venta =horaVenta,
                                        tipo_pago = formaPago, 
                                        empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),
                                        ids_productos = "", cantidades_productos = "",
                                        ids_servicios_corporales ="", cantidades_servicios_corporales ="",
                                        ids_servicios_faciales ="", cantidades_servicios_faciales ="",
                                        id_paquete_promo_vendido = PaquetesPromocionTratamientos.objects.get(id_paquete_tratamiento = idServTratPaq),
                                        monto_pagar = abonoCliente, credito = "N",
                                        comentariosVenta = comentarios, sucursal = Sucursales.objects.get(id_sucursal = sucursal),
                                        cliente = Clientes.objects.get(id_cliente = clienteMandado))

                           

                        if esConTarjeta: 
                            if descuento == "SinDescuento":
                                if esPaquete: #Venta con tarjeta, sin descuento y paquete
                                    registroVenta = Ventas(fecha_venta = fechaVenta, hora_venta =horaVenta,
                                        tipo_pago = formaPago, tipo_tarjeta = tipo_tarjeta, referencia_pago_tarjeta = referencia_tarjeta, 
                                        empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),
                                        ids_productos = "", cantidades_productos = "",
                                        ids_servicios_corporales ="", cantidades_servicios_corporales ="",
                                        ids_servicios_faciales ="", cantidades_servicios_faciales ="",
                                        id_paquete_promo_vendido = PaquetesPromocionTratamientos.objects.get(id_paquete_tratamiento = idServTratPaq),
                                        monto_pagar = abonoCliente, credito = "N",
                                        comentariosVenta = comentarios, sucursal = Sucursales.objects.get(id_sucursal = sucursal),
                                        cliente = Clientes.objects.get(id_cliente = clienteMandado))
                            
                            
                        if esConTransferencia:
                            if descuento == "SinDescuento":
                                if esPaquete: #Venta con transferencia, sin descuento y paquete
                                    registroVenta = Ventas(fecha_venta = fechaVenta, hora_venta =horaVenta,
                                        tipo_pago = formaPago, clave_rastreo_transferencia = clave_transferencia,
                                        empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),
                                        ids_productos = "", cantidades_productos = "",
                                        ids_servicios_corporales ="", cantidades_servicios_corporales ="",
                                        ids_servicios_faciales ="", cantidades_servicios_faciales ="",
                                        id_paquete_promo_vendido = PaquetesPromocionTratamientos.objects.get(id_paquete_tratamiento = idServTratPaq),
                                        monto_pagar = abonoCliente, credito = "N",
                                        comentariosVenta = comentarios, sucursal = Sucursales.objects.get(id_sucursal = sucursal),
                                        cliente = Clientes.objects.get(id_cliente = clienteMandado))

                            
                    
                        registroVenta.save()

                    if registroVenta and esConEfectivo: #Venta guardada y con efectivo.. genera un movimiento
                        
                        ultimoId = 0
                        ventasTotalesEfectivo = Ventas.objects.filter(tipo_pago = "Efectivo")
                        for venta in ventasTotalesEfectivo:
                            ultimoId = venta.id_venta
                        tipoMovimiento = "IN"
                        montoMovimiento = float(abonoCliente)
                        descripcionMovimiento = "Movimiento por venta "+str(ultimoId)
                        fechaMovimiento = datetime.today().strftime('%Y-%m-%d')
                        horaMovimiento = datetime.now().time()

                        ingresarCantidadEfectivoACaja = MovimientosCaja(fecha = fechaMovimiento, hora = horaMovimiento, tipo = tipoMovimiento, monto = montoMovimiento, descripcion = descripcionMovimiento, 
                        sucursal = Sucursales.objects.get(id_sucursal = sucursal), realizado_por = Empleados.objects.get(id_empleado = empleadoVendedor))
                        ingresarCantidadEfectivoACaja.save()

                        request.session['ventaAgregada'] = "La venta ha sido agregada satisfactoriamente!"

                        #Actualizar Cita
                        idUltimaVenta = 0
                        consultaVentas = Ventas.objects.all()
                        for venta in consultaVentas:
                            idUltimaVenta = venta.id_venta
                        actualizacionCita = Citas.objects.get(id_cita = idCita)
                        actualizacionCita.estado_cita = "efectuada"
                        actualizacionCita.venta_id = Ventas.objects.get(id_venta = idUltimaVenta)
                        actualizacionCita.save()


                        
                        if esPaquete:
                            consultaPaqueteTratamiento = PaquetesPromocionTratamientos.objects.filter(id_paquete_tratamiento = idServTratPaq)

                            for datoPromo in consultaPaqueteTratamiento:
                                idTratamiento = datoPromo.tratamiento_id
                                nombreTratamientoPromo = datoPromo.nombre_paquete
                                precioPromo = datoPromo.precio_por_paquete
                                consultaTratamientoProductos = TratamientosProductosGasto.objects.filter(tratamiento_id__id_tratamiento = idTratamiento)

                                if consultaTratamientoProductos:
                                    sinProductos = False
                                    for producto in consultaTratamientoProductos:
                                        idProducto = producto.producto_gasto_id
                                        cantidadUtilizada = producto.cantidad

                                        consultaProducto = ProductosGasto.objects.filter(id_producto = idProducto)
                                        for dato in consultaProducto:
                                            cantidadActualEnExistencia = dato.cantidad
                                            cuantificable = dato.contenido_cuantificable

                                        if cuantificable == "S":
                                            actualizacionCantidad = cantidadActualEnExistencia - cantidadUtilizada

                                            actualizarProducto = ProductosGasto.objects.filter(id_producto = idProducto).update(cantidad = actualizacionCantidad)

                                else:
                                    sinProductos = True
                        
                        #Actualización de cita-tratamiento en caso de que haya
                        consultaCitaEnTablaTratamientoCliente = citasTratamientos.objects.filter(cita_id__id_cita = idCita)
                        if consultaCitaEnTablaTratamientoCliente:
                            for cita in consultaCitaEnTablaTratamientoCliente:
                                idTratamientoCliente = cita.idTratamientoCliente_id
                            
                            consultaTratamientoCliente = TratamientosClientes.objects.filter(id_tratamiento_cliente = idTratamientoCliente)

                            for datoTratamientoCliente in consultaTratamientoCliente:
                                sesionesPendientesActuales = datoTratamientoCliente.sesionesPendientes
                                sesionesCanjeadas = datoTratamientoCliente.sesionesCanjeadas
                            
                            nuevasSesionesPendientes = sesionesPendientesActuales - 1
                            nuevasSesionesCanjeadas = sesionesCanjeadas + 1

                            actualizacionTratamientoCliente = TratamientosClientes.objects.filter(id_tratamiento_cliente = idTratamientoCliente).update(sesionesPendientes = nuevasSesionesPendientes,
                            sesionesCanjeadas = nuevasSesionesCanjeadas)

                            if actualizacionTratamientoCliente:

                                #Registro de historial
                                registroEnHistorialDeTratamiento = HistorialTratamientosClientes(tratamiento_cliente = TratamientosClientes.objects.get(id_tratamiento_cliente = idTratamientoCliente),
                                sesion_efectuada = nuevasSesionesCanjeadas, fecha_efectuado = fechaMovimiento)

                                registroEnHistorialDeTratamiento.save()
                        
                        #Actualizar pago
                        consultaPagosTratamiento = pagosPaquetesTratamientos.objects.filter(id_tratamiento_cliente_id__id_tratamiento_cliente = idTratamientoCliente)

                        for datosPagoTratamiento in consultaPagosTratamiento:
                            totalAbonado = datosPagoTratamiento.total_abonado
                            totalRestante = datosPagoTratamiento.total_restante
                            totalAPagar = datosPagoTratamiento.total_pagar

                        abono = float(totalAbonado) + float(abonoCliente)
                        restante = float(totalAPagar) - abono

                        pagadoTotalmenteTratamiento = False

                        if restante == 0:
                            pagadoTotalmenteTratamiento = True

                        if pagadoTotalmenteTratamiento:
                            actualizarPagoRegistro = pagosPaquetesTratamientos.objects.filter(id_tratamiento_cliente_id__id_tratamiento_cliente = idTratamientoCliente).update(
                                total_abonado = abono, total_restante = restante, estatus_pago = "Efectuado"
                            )
                        else:
                            actualizarPagoRegistro = pagosPaquetesTratamientos.objects.filter(id_tratamiento_cliente_id__id_tratamiento_cliente = idTratamientoCliente).update(
                                total_abonado = abono, total_restante = restante
                            )
                        

                        #IMPRESION DE TICKEEETSSSS
                        #Ultimo id de venta
                        consultaVentas = Ventas.objects.all()
                        ultimoIdVenta = 0
                        for venta in consultaVentas:
                            ultimoIdVenta = venta.id_venta
                            cliente = venta.cliente_id
                            sucursal = venta.sucursal_id
                            descuento = venta.descuento_id

                        #Fecha
                        hoy = datetime.now()
                        hoyFormato = hoy.strftime('%Y/%m/%d')

                        #Empleado vendedor
                        consultaEmpleadoVendedor = Empleados.objects.filter(id_empleado = empleadoVendedor)
                        for datoVendedor in consultaEmpleadoVendedor:
                            nombreEmpleado = datoVendedor.nombres
                            apellidoPatEmpleado = datoVendedor.apellido_paterno

                        nombreCompletoEmpleadoVendedor = nombreEmpleado + " "+ apellidoPatEmpleado

                        #Datos sucurssal
                        consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursal)
                        for datoSucursal in consultaSucursal:
                            nombreSucursal = datoSucursal.nombre
                            telefonoSucursal = datoSucursal.telefono
                            direccionSucursal = datoSucursal.direccion

                        #DatosCliente
                        if cliente == None:
                            nombreClienteTicket = "Momentaneo"

                        else:
                            consultaCliente = Clientes.objects.filter(id_cliente = cliente)
                            for datoCliente in consultaCliente:
                                idCienteTicket = datoCliente.id_cliente
                                nombreCliente = datoCliente.nombre_cliente
                                apellidoCliente = datoCliente.apellidoPaterno_cliente

                            nombreClienteTicket = nombreCliente + " " + apellidoCliente
                        #Hora bien
                        horaVenta = horaVenta.strftime("%H:%M:%S")

                        # Esto es para obtener las impresoras. No es obligatorio hacerlo siempre que se quiera imprimir
                        impresoras = Conector.ConectorV3.obtenerImpresoras()
                        print(f"Las impresoras son: {impresoras}")

                        contadorTickets = 0
                        for x in range(2):
                            contadorTickets = contadorTickets + 1
                            c = Conector.ConectorV3()
                            c.Iniciar()
                            c.Corte(1)
                            
                            c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                            # Recuerda que la imagen debe existir y debe ser legible para el plugin. Si no, comenta las líneas
                            c.CargarImagenLocalEImprimir("C:\\COSTABELLA\\sistemaCostabella\\static\\images\\anegragrande.png", 0, 216)
                            c.EscribirTexto("\n")
                            c.EstablecerTamañoFuente(1, 1)
                            c.EstablecerEnfatizado(True)
                            c.EscribirTexto("Sucursal: "+nombreSucursal+"\n")
                            c.EstablecerEnfatizado(False)
                            c.EscribirTexto("TEL: "+telefonoSucursal+"\n")
                            c.TextoSegunPaginaDeCodigos(2, "cp850", direccionSucursal+"\n")

                            c.EstablecerEnfatizado(True)
                            c.EscribirTexto("================================================\n")
                            c.EstablecerTamañoFuente(2, 2)
                            c.EscribirTexto("CITA "+str(idCita)+"- VENTA #"+str(ultimoIdVenta)+"\n")
                            c.EscribirTexto("SESIÓN #"+str(nuevasSesionesCanjeadas)+"\n")
                            c.EstablecerTamañoFuente(1, 1)
                            c.EscribirTexto(str(nuevasSesionesPendientes)+" SESIONES PENDIENTES\n")
                            c.EstablecerEnfatizado(False)
                            c.EstablecerAlineacion(Conector.ALINEACION_IZQUIERDA)
                            c.EstablecerTamañoFuente(1, 1)
                            c.EscribirTexto("\n")
                            c.EscribirTexto(" "+str(hoyFormato)+" - "+str(horaVenta)+" hrs.\n")
                            c.EscribirTexto("Atendida por: "+nombreCompletoEmpleadoVendedor+".\n")
                            c.EscribirTexto("\n")
                            
                            
                            
                                    
                            
                            costototalDecimales = round(float(precioPromo), 2)
                            costototalDecimales = str(precioPromo)

                            costoTotalProductoDivididoEnElPunto = costototalDecimales.split(".")
                            longitudCostoTotal = len(str(costoTotalProductoDivididoEnElPunto[0]))
                            longitudCostoTotal = int(longitudCostoTotal)

                                
                            caracteresProducto = len(nombreTratamientoPromo)

                            if longitudCostoTotal == 2:
                                espacio = 38
                            if longitudCostoTotal == 2:
                                espacio = 37
                            elif longitudCostoTotal == 3:
                                espacio = 36
                            elif longitudCostoTotal == 4:
                                espacio = 35
                            elif longitudCostoTotal == 5:
                                espacio = 34
                            elif longitudCostoTotal == 6:
                                espacio = 33
                            numeroEspacios = espacio - int(caracteresProducto)
                            
                            espaciosTicket = ""
                            for x in range(numeroEspacios):
                                espacioMini = " "
                                espaciosTicket = espaciosTicket + espacioMini
                            c.EscribirTexto("1 x "+nombreTratamientoPromo+espaciosTicket+str(costototalDecimales)+"\n")


                            
                            c.EscribirTexto("\n")
                            c.EscribirTexto("\n")
                            
                            if descuento == None:
                                c.EstablecerTamañoFuente(2, 2)
                                c.EstablecerAlineacion(Conector.ALINEACION_DERECHA)
                                c.EscribirTexto("TOTAL:  $"+str(precioPromo)+"\n")
                                restantePorPagar = float(restante) - float(abonoCliente)
                                c.EscribirTexto("ABONADO:  $"+str(abono)+"\n")
                                c.EscribirTexto("RESTANTE:  $"+str(restante)+"\n")
                            else:
                                intDescuento = int(descuento)
                                consultaDescuentos = Descuentos.objects.filter(porcentaje = intDescuento)
                                for datoDescuento in consultaDescuentos:
                                    nombreDescuento = datoDescuento.nombre_descuento
                                    porcentajeDescuento = datoDescuento.porcentaje

                                porcentajePagado = 100 - porcentajeDescuento #85
                                totalSinDescuento1 = 100 * float(precioPromo)
                                totalSinDescuento2 = totalSinDescuento1/porcentajePagado
                                totalSinDescuento2 = round(totalSinDescuento2)

                                primerMulti = porcentajeDescuento * float(totalSinDescuento2)
                                primerDivision = primerMulti/100
                                resultadoDescuento = round(primerDivision)
                                
                                costoTotalAPagarConDescuento = totalSinDescuento2 - resultadoDescuento

                                c.EstablecerTamañoFuente(1, 1)
                                c.EstablecerAlineacion(Conector.ALINEACION_DERECHA)
                                c.EscribirTexto("Subtotal:  $"+str(totalSinDescuento2)+"\n")
                                c.EscribirTexto("Descuento:  $"+str(resultadoDescuento)+"\n")
                                c.EstablecerTamañoFuente(2, 2)
                                c.EscribirTexto("TOTAL:  $"+str(costoTotalAPagarConDescuento)+"\n")
                                c.EstablecerTamañoFuente(1, 1)
                                c.EscribirTexto("Descuento aplicado: -"+str(porcentajeDescuento)+"%- "+str(nombreDescuento)+"\n")
                                restantePorPagar = float(restante) - float(abonoCliente)
                                c.EscribirTexto("ABONADO:  $"+str(abono)+"\n")
                                c.EscribirTexto("RESTANTE:  $"+str(restante)+"\n")

                            c.EscribirTexto("\n")
                            c.EstablecerEnfatizado(True)
                            c.EstablecerTamañoFuente(1, 1)
                            c.EscribirTexto("========== IVA incluido en el precio ==========\n")
                            c.EscribirTexto("\n")
                            c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                            c.TextoSegunPaginaDeCodigos(2, "cp850", "INFORMACION DE PAGO.\n")
                            c.EstablecerEnfatizado(False)
                            c.EscribirTexto("\n")
                            if esConEfectivo:
                                c.EscribirTexto("Pago en efectivo.\n")
                            elif esConTarjeta:
                                c.EscribirTexto("Pago con "+str(tipo_tarjeta)+".\n")
                                c.EscribirTexto("Referencia: "+referencia_tarjeta+".\n")
                            elif esConTransferencia:
                                c.EscribirTexto("Transferencia.\n")
                                c.EscribirTexto("Clave de rastreo: "+str(clave_transferencia)+".\n")
                            c.EscribirTexto("\n")
                            c.EstablecerEnfatizado(True)
                            c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                            c.TextoSegunPaginaDeCodigos(2, "cp850", "INFORMACIÓN DE CLIENTE.\n")

                            if nombreClienteTicket == "Momentaneo":
                                c.EstablecerEnfatizado(False)
                                c.EscribirTexto("Cliente momentaneo.\n")
                            else:
                                c.EstablecerEnfatizado(False)
                                c.EscribirTexto("ID:"+str(idCienteTicket)+" - "+nombreClienteTicket+".\n")
                            c.EscribirTexto("=========== Gracias por su compra!! ===========\n")
                            c.EstablecerTamañoFuente(2, 2)
                            c.EstablecerEnfatizado(True)
                            c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                            if contadorTickets == 1:
                                c.EscribirTexto("\n")
                                c.EscribirTexto("COPIA TIENDA.\n")
                                c.EscribirTexto("\n")
                                c.EstablecerTamañoFuente(1, 1)
                                c.EscribirTexto("________________________________________________\n")
                                c.EscribirTexto("Firma de cliente.\n")
                            else:
                                c.EscribirTexto("\n")
                                c.EscribirTexto("COPIA CLIENTE.\n")
                            c.EscribirTexto("\n")
                            c.EstablecerTamañoFuente(1, 1)
                            

                            c.Feed(1)
                            c.Corte(1)
                            #c.abrirCajon()
                            c.Pulso(48, 60, 120)
                            print("Imprimiendo...")
                            # Recuerda cambiar por el nombre de tu impresora
                            respuesta = c.imprimirEn("POS80 Printer")
                            if respuesta == True:
                                print("Impresión correcta")
                            else:
                                print(f"Error. El mensaje es: {respuesta}")

                        try:
                            tokenTelegram = keysBotCostabella.tokenBotCostabellaCitas
                            botCostabella = telepot.Bot(tokenTelegram)

                            idGrupoTelegram = keysBotCostabella.idGrupo
                            
                            mensaje = "\U0001F4C6 CITA VENDIDA \U0001F4C6 \n El cliente "+nombreClienteTicket+" acudió y pago la cita #"+str(idCita)+", sesión #"+str(nuevasSesionesCanjeadas)+" de "+str(nuevasSesionesPendientes)+", el día "+hoyFormato+" a las "+str(horaVenta)+" hrs en la sucursal "+nombreSucursal+"\n Paquete:\n"+nombreTratamientoPromo
                            botCostabella.sendMessage(idGrupoTelegram,mensaje)
                        except:
                            print("An exception occurred")


                        return redirect("/ventas/")

                    if registroVenta:
                        request.session['ventaAgregada'] = "La venta ha sido agregada satisfactoriamente!"

                        #Actualizar Cita
                        idUltimaVenta = 0
                        consultaVentas = Ventas.objects.all()
                        for venta in consultaVentas:
                            idUltimaVenta = venta.id_venta
                        actualizacionCita = Citas.objects.get(id_cita = idCita)
                        actualizacionCita.estado_cita = "efectuada"
                        actualizacionCita.venta_id = Ventas.objects.get(id_venta = idUltimaVenta)
                        actualizacionCita.save()

                        consultaCitaEnTablaTratamientoCliente = citasTratamientos.objects.filter(cita_id__id_cita = idCita)
                        if consultaCitaEnTablaTratamientoCliente:
                            for cita in consultaCitaEnTablaTratamientoCliente:
                                idTratamientoCliente = cita.idTratamientoCliente_id

                        if esPaquete:
                            consultaPaqueteTratamiento = PaquetesPromocionTratamientos.objects.filter(id_paquete_tratamiento = idServTratPaq)

                            for datoPromo in consultaPaqueteTratamiento:
                                idTratamiento = datoPromo.tratamiento_id
                                precioPromo = datoPromo.precio_por_paquete
                                nombreTratamientoPromo = datoPromo.nombre_paquete
                                consultaTratamientoProductos = TratamientosProductosGasto.objects.filter(tratamiento_id__id_tratamiento = idTratamiento)

                                if consultaTratamientoProductos:
                                    sinProductos = False
                                    for producto in consultaTratamientoProductos:
                                        idProducto = producto.producto_gasto_id
                                        cantidadUtilizada = producto.cantidad

                                        consultaProducto = ProductosGasto.objects.filter(id_producto = idProducto)
                                        for dato in consultaProducto:
                                            cantidadActualEnExistencia = dato.cantidad
                                            cuantificable = dato.contenido_cuantificable

                                        if cuantificable == "S":
                                            actualizacionCantidad = cantidadActualEnExistencia - cantidadUtilizada

                                            actualizarProducto = ProductosGasto.objects.filter(id_producto = idProducto).update(cantidad = actualizacionCantidad)

                                else:
                                    sinProductos = True
                            
                            #Actualización de cita-tratamiento en caso de que haya
                            fechaMovimiento = datetime.today().strftime('%Y-%m-%d')
                            consultaCitaEnTablaTratamientoCliente = citasTratamientos.objects.filter(cita_id__id_cita = idCita)
                            if consultaCitaEnTablaTratamientoCliente:
                                for cita in consultaCitaEnTablaTratamientoCliente:
                                    idTratamientoCliente = cita.idTratamientoCliente_id
                                
                                consultaTratamientoCliente = TratamientosClientes.objects.filter(id_tratamiento_cliente = idTratamientoCliente)

                                for datoTratamientoCliente in consultaTratamientoCliente:
                                    sesionesPendientesActuales = datoTratamientoCliente.sesionesPendientes
                                    sesionesCanjeadas = datoTratamientoCliente.sesionesCanjeadas
                                
                                nuevasSesionesPendientes = sesionesPendientesActuales - 1
                                nuevasSesionesCanjeadas = sesionesCanjeadas + 1

                                actualizacionTratamientoCliente = TratamientosClientes.objects.filter(id_tratamiento_cliente = idTratamientoCliente).update(sesionesPendientes = nuevasSesionesPendientes,
                                sesionesCanjeadas = nuevasSesionesCanjeadas)

                                if actualizacionTratamientoCliente:

                                    #Registro de historial
                                    registroEnHistorialDeTratamiento = HistorialTratamientosClientes(tratamiento_cliente = TratamientosClientes.objects.get(id_tratamiento_cliente = idTratamientoCliente),
                                    sesion_efectuada = nuevasSesionesCanjeadas, fecha_efectuado = fechaMovimiento)

                                    registroEnHistorialDeTratamiento.save()

                            #Actualizar pago
                            consultaPagosTratamiento = pagosPaquetesTratamientos.objects.filter(id_tratamiento_cliente_id__id_tratamiento_cliente = idTratamientoCliente)

                            for datosPagoTratamiento in consultaPagosTratamiento:
                                totalAbonado = datosPagoTratamiento.total_abonado
                                totalRestante = datosPagoTratamiento.total_restante
                                totalAPagar = datosPagoTratamiento.total_pagar

                            abono = float(totalAbonado) + float(abonoCliente)
                            restante = float(totalAPagar) - abono
                            
                            pagadoTotalmenteTratamiento = False
                            if restante == 0:
                                pagadoTotalmenteTratamiento = True

                            if pagadoTotalmenteTratamiento:
                                actualizarPagoRegistro = pagosPaquetesTratamientos.objects.filter(id_tratamiento_cliente_id__id_tratamiento_cliente = idTratamientoCliente).update(
                                    total_abonado = abono, total_restante = restante, estatus_pago = "Efectuado"
                                )
                            else:
                                actualizarPagoRegistro = pagosPaquetesTratamientos.objects.filter(id_tratamiento_cliente_id__id_tratamiento_cliente = idTratamientoCliente).update(
                                    total_abonado = abono, total_restante = restante
                                )

                        #IMPRESION DE TICKEEETSSSS
                        #Ultimo id de venta
                        consultaVentas = Ventas.objects.all()
                        ultimoIdVenta = 0
                        for venta in consultaVentas:
                            ultimoIdVenta = venta.id_venta
                            cliente = venta.cliente_id
                            sucursal = venta.sucursal_id
                            descuento = venta.descuento_id

                        #Fecha
                        hoy = datetime.now()
                        hoyFormato = hoy.strftime('%Y/%m/%d')

                        #Empleado vendedor
                        consultaEmpleadoVendedor = Empleados.objects.filter(id_empleado = empleadoVendedor)
                        for datoVendedor in consultaEmpleadoVendedor:
                            nombreEmpleado = datoVendedor.nombres
                            apellidoPatEmpleado = datoVendedor.apellido_paterno

                        nombreCompletoEmpleadoVendedor = nombreEmpleado + " "+ apellidoPatEmpleado

                        #Datos sucurssal
                        consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursal)
                        for datoSucursal in consultaSucursal:
                            nombreSucursal = datoSucursal.nombre
                            telefonoSucursal = datoSucursal.telefono
                            direccionSucursal = datoSucursal.direccion

                        #DatosCliente
                        if cliente == None:
                            nombreClienteTicket = "Momentaneo"

                        else:
                            consultaCliente = Clientes.objects.filter(id_cliente = cliente)
                            for datoCliente in consultaCliente:
                                idCienteTicket = datoCliente.id_cliente
                                nombreCliente = datoCliente.nombre_cliente
                                apellidoCliente = datoCliente.apellidoPaterno_cliente

                            nombreClienteTicket = nombreCliente + " " + apellidoCliente
                        #Hora bien
                        horaVenta = horaVenta.strftime("%H:%M:%S")

                        # Esto es para obtener las impresoras. No es obligatorio hacerlo siempre que se quiera imprimir
                        impresoras = Conector.ConectorV3.obtenerImpresoras()
                        print(f"Las impresoras son: {impresoras}")

                        contadorTickets = 0
                        for x in range(2):
                            contadorTickets = contadorTickets + 1
                            c = Conector.ConectorV3()
                            c.Iniciar()
                            c.Corte(1)
                            
                            c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                            # Recuerda que la imagen debe existir y debe ser legible para el plugin. Si no, comenta las líneas
                            c.CargarImagenLocalEImprimir("C:\\COSTABELLA\\sistemaCostabella\\static\\images\\anegragrande.png", 0, 216)
                            c.EscribirTexto("\n")
                            c.EstablecerTamañoFuente(1, 1)
                            c.EstablecerEnfatizado(True)
                            c.EscribirTexto("Sucursal: "+nombreSucursal+"\n")
                            c.EstablecerEnfatizado(False)
                            c.EscribirTexto("TEL: "+telefonoSucursal+"\n")
                            c.TextoSegunPaginaDeCodigos(2, "cp850", direccionSucursal+"\n")

                            c.EstablecerEnfatizado(True)
                            c.EscribirTexto("================================================\n")
                            c.EstablecerTamañoFuente(2, 2)
                            c.EscribirTexto("CITA "+str(idCita)+" - VENTA #"+str(ultimoIdVenta)+"\n")
                            c.EscribirTexto("SESIÓN #"+str(nuevasSesionesCanjeadas)+"\n")
                            c.EstablecerTamañoFuente(1, 1)
                            c.EscribirTexto(str(nuevasSesionesPendientes)+" SESIONES PENDIENTES\n")
                            c.EstablecerEnfatizado(False)
                            c.EstablecerAlineacion(Conector.ALINEACION_IZQUIERDA)
                            c.EstablecerTamañoFuente(1, 1)
                            c.EscribirTexto("\n")
                            c.EscribirTexto(" "+str(hoyFormato)+" - "+str(horaVenta)+" hrs.\n")
                            c.EscribirTexto("Atendida por: "+nombreCompletoEmpleadoVendedor+".\n")
                            c.EscribirTexto("\n")
                            
                            
                            
                                    
                            
                            costototalDecimales = round(float(precioPromo), 2)
                            costototalDecimales = str(precioPromo)

                            costoTotalProductoDivididoEnElPunto = costototalDecimales.split(".")
                            longitudCostoTotal = len(str(costoTotalProductoDivididoEnElPunto[0]))
                            longitudCostoTotal = int(longitudCostoTotal)

                                
                            caracteresProducto = len(nombreTratamientoPromo)

                            if longitudCostoTotal == 2:
                                espacio = 38
                            if longitudCostoTotal == 2:
                                espacio = 37
                            elif longitudCostoTotal == 3:
                                espacio = 36
                            elif longitudCostoTotal == 4:
                                espacio = 35
                            elif longitudCostoTotal == 5:
                                espacio = 34
                            elif longitudCostoTotal == 6:
                                espacio = 33
                            numeroEspacios = espacio - int(caracteresProducto)
                            
                            espaciosTicket = ""
                            for x in range(numeroEspacios):
                                espacioMini = " "
                                espaciosTicket = espaciosTicket + espacioMini
                            c.EscribirTexto("1 x "+nombreTratamientoPromo+espaciosTicket+str(costototalDecimales)+"\n")


                            
                            c.EscribirTexto("\n")
                            c.EscribirTexto("\n")
                            
                            if descuento == None:
                                c.EstablecerTamañoFuente(2, 2)
                                c.EstablecerAlineacion(Conector.ALINEACION_DERECHA)
                                c.EscribirTexto("TOTAL:  $"+str(precioPromo)+"\n")
                                restantePorPagar = float(restante) - float(abonoCliente)
                                c.EscribirTexto("ABONADO:  $"+str(abono)+"\n")
                                c.EscribirTexto("RESTANTE:  $"+str(restante)+"\n")
                            else:
                                intDescuento = int(descuento)
                                consultaDescuentos = Descuentos.objects.filter(porcentaje = intDescuento)
                                for datoDescuento in consultaDescuentos:
                                    nombreDescuento = datoDescuento.nombre_descuento
                                    porcentajeDescuento = datoDescuento.porcentaje

                                porcentajePagado = 100 - porcentajeDescuento #85
                                totalSinDescuento1 = 100 * float(precioPromo)
                                totalSinDescuento2 = totalSinDescuento1/porcentajePagado
                                totalSinDescuento2 = round(totalSinDescuento2)

                                primerMulti = porcentajeDescuento * float(totalSinDescuento2)
                                primerDivision = primerMulti/100
                                resultadoDescuento = round(primerDivision)
                                
                                costoTotalAPagarConDescuento = totalSinDescuento2 - resultadoDescuento

                                c.EstablecerTamañoFuente(1, 1)
                                c.EstablecerAlineacion(Conector.ALINEACION_DERECHA)
                                c.EscribirTexto("Subtotal:  $"+str(totalSinDescuento2)+"\n")
                                c.EscribirTexto("Descuento:  $"+str(resultadoDescuento)+"\n")
                                c.EstablecerTamañoFuente(2, 2)
                                c.EscribirTexto("TOTAL:  $"+str(costoTotalAPagarConDescuento)+"\n")
                                c.EstablecerTamañoFuente(1, 1)
                                c.EscribirTexto("Descuento aplicado: -"+str(porcentajeDescuento)+"%- "+str(nombreDescuento)+"\n")
                                restantePorPagar = float(restante) - float(abonoCliente)
                                c.EscribirTexto("ABONADO:  $"+str(abono)+"\n")
                                c.EscribirTexto("RESTANTE:  $"+str(restante)+"\n")

                            c.EscribirTexto("\n")
                            c.EstablecerEnfatizado(True)
                            c.EstablecerTamañoFuente(1, 1)
                            c.EscribirTexto("========== IVA incluido en el precio ==========\n")
                            c.EscribirTexto("\n")
                            c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                            c.TextoSegunPaginaDeCodigos(2, "cp850", "INFORMACION DE PAGO.\n")
                            c.EstablecerEnfatizado(False)
                            c.EscribirTexto("\n")
                            if esConEfectivo:
                                c.EscribirTexto("Pago en efectivo.\n")
                            elif esConTarjeta:
                                c.EscribirTexto("Pago con "+str(tipo_tarjeta)+".\n")
                                c.EscribirTexto("Referencia: "+referencia_tarjeta+".\n")
                            elif esConTransferencia:
                                c.EscribirTexto("Transferencia.\n")
                                c.EscribirTexto("Clave de rastreo: "+str(clave_transferencia)+".\n")
                            c.EscribirTexto("\n")
                            c.EstablecerEnfatizado(True)
                            c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                            c.TextoSegunPaginaDeCodigos(2, "cp850", "INFORMACIÓN DE CLIENTE.\n")

                            if nombreClienteTicket == "Momentaneo":
                                c.EstablecerEnfatizado(False)
                                c.EscribirTexto("Cliente momentaneo.\n")
                            else:
                                c.EstablecerEnfatizado(False)
                                c.EscribirTexto("ID:"+str(idCienteTicket)+" - "+nombreClienteTicket+".\n")
                            c.EscribirTexto("=========== Gracias por su compra!! ===========\n")
                            c.EstablecerTamañoFuente(2, 2)
                            c.EstablecerEnfatizado(True)
                            c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                            if contadorTickets == 1:
                                c.EscribirTexto("\n")
                                c.EscribirTexto("COPIA TIENDA.\n")
                                c.EscribirTexto("\n")
                                c.EstablecerTamañoFuente(1, 1)
                                c.EscribirTexto("________________________________________________\n")
                                c.EscribirTexto("Firma de cliente.\n")
                            else:
                                c.EscribirTexto("\n")
                                c.EscribirTexto("COPIA CLIENTE.\n")
                            c.EscribirTexto("\n")
                            c.EstablecerTamañoFuente(1, 1)
                            

                            c.Feed(1)
                            c.Corte(1)
                            #c.abrirCajon()
                            c.Pulso(48, 60, 120)
                            print("Imprimiendo...")
                            # Recuerda cambiar por el nombre de tu impresora
                            respuesta = c.imprimirEn("POS80 Printer")
                            if respuesta == True:
                                print("Impresión correcta")
                            else:
                                print(f"Error. El mensaje es: {respuesta}")
                        
                        try:
                            tokenTelegram = keysBotCostabella.tokenBotCostabellaCitas
                            botCostabella = telepot.Bot(tokenTelegram)

                            idGrupoTelegram = keysBotCostabella.idGrupo
                            
                            mensaje = "\U0001F4C6 CITA VENDIDA \U0001F4C6 \n El cliente "+nombreClienteTicket+" acudió y pago la cita #"+str(idCita)+", sesión #"+str(nuevasSesionesCanjeadas)+" de "+str(nuevasSesionesPendientes)+", el día "+hoyFormato+" a las "+str(horaVenta)+" hrs en la sucursal "+nombreSucursal+"\n Paquete:\n"+nombreTratamientoPromo
                            botCostabella.sendMessage(idGrupoTelegram,mensaje)
                        except:
                            print("An exception occurred")


                        return redirect("/ventas/")

            else: #No es paquete..
                
                fechaVenta = datetime.now()
                horaVenta = datetime.now().time()

                esACredito = False

                nameInput = "checkboxCredito"
                ventaEnCredito = False
                if request.POST.get(nameInput, False): #Credito Checkeado
                    ventaEnCredito = True
                elif request.POST.get(nameInput, True): #Credito No checkeado
                    ventaEnCredito = False

                sucursal = request.POST['idSucursal']
                comentariosExtras = request.POST['comentarios']
                if comentariosExtras == "":
                    comentarios = "Sin comentarios"
                else:
                    comentarios = comentariosExtras

                #Empleado vendedor
                empleadoVendedor = idEmpleado

                #cliente
                clienteMandado = request.POST['clienteSeleccionado']

                #Tipo de cita y id servicio trata paquete
                tipoCita = request.POST['tipoCita']
                idServTratPaq = request.POST['idServTratPaq']
                esServicio = False
                esTratamiento = False
                esPaquete = False
                idCita = request.POST['idCita']

                if tipoCita == "Servicio":
                    esServicio = True
                    servicioCorporal = False
                    consultaServicio = Servicios.objects.filter(id_servicio = idServTratPaq)
                    for datoServicio in consultaServicio:
                        tipoServicio = datoServicio.tipo_servicio

                        nombreServicioTratamiento = datoServicio.nombre_servicio
                    
                    if tipoServicio == "Corporal":
                        servicioCorporal = True
                elif tipoCita == "SesionTratamiento":
                    esTratamiento = True
                    consultaTratamiento = Tratamientos.objects.filter(id_tratamiento = idServTratPaq)
                    for datoTratamiento in consultaTratamiento:
                        nombreServicioTratamiento = datoTratamiento.nombre_tratamiento
                    
                elif tipoCita == "PaqueteTratamiento":
                    esPaquete = True
                
                    

                #COSTO TOTAL A PAGAR
                costoTotalAPagar = request.POST['costoTotalAPagar']

                #Descuento
                descuento = request.POST['descuento'] 

                if descuento == "SinDescuento":
                    elCostoEsElMismo = True
                else:
                    consultaDescuento = Descuentos.objects.filter(porcentaje = descuento)
                    valorDescuento = 0
                    for datoDescuento in consultaDescuento:
                        valorDescuento = datoDescuento.porcentaje
                    stringDescuento = "."+str(valorDescuento)
                    floatDescuento = float(stringDescuento) #.15

                    multiplicacionResta = float(costoTotalAPagar) * floatDescuento
                    multiplicacionRestaConDosDecimales = round(multiplicacionResta, 2)
                    redondeoMulti = round(multiplicacionRestaConDosDecimales)

                    restaDescuento = float(costoTotalAPagar) - redondeoMulti
                    restaDescuentoDosDecimales = round(restaDescuento, 2)
                    redondeoRestaFinal = round(restaDescuentoDosDecimales)


                    costoTotalAPagar = redondeoRestaFinal


                esConEfectivo = False
                esConTarjeta = False
                esConTransferencia = False

                stridServTratPaq = str(idServTratPaq)
                cantidad = "1"

                if ventaEnCredito == False: #Venta normal sin credito
                    formaPago = request.POST['tipoPago']

                    
                    #datos de pago.
                    if formaPago == "Efectivo":
                        esConEfectivo = True
                        
                    elif formaPago == "Tarjeta":
                        esConTarjeta = True
                        tipo_tarjeta = request.POST['tipoTarjeta']    
                        referencia_tarjeta = request.POST['referenciaTarjeta'] 
                        
                    elif formaPago == "Transferencia":
                        esConTransferencia = True
                        clave_transferencia = request.POST['claveRastreoTransferencia'] 
                    
                
                    if esConEfectivo:
                        if descuento == "SinDescuento":
                            if esServicio:
                                
                                if servicioCorporal: #Venta en efectivo, sin descuento y servicio corporal
                                    registroVenta = Ventas(fecha_venta = fechaVenta, hora_venta =horaVenta,
                                    tipo_pago = formaPago, 
                                    empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),
                                    ids_productos = "", cantidades_productos = "",
                                    ids_servicios_corporales =stridServTratPaq, cantidades_servicios_corporales =cantidad,
                                    ids_servicios_faciales ="", cantidades_servicios_faciales ="",
                                    monto_pagar = costoTotalAPagar, credito = "N",
                                    comentariosVenta = comentarios, sucursal = Sucursales.objects.get(id_sucursal = sucursal),
                                    cliente = Clientes.objects.get(id_cliente = clienteMandado)) 
                                else: #Venta en efectivo, sin descuento y servicio facial
                                    registroVenta = Ventas(fecha_venta = fechaVenta, hora_venta =horaVenta,
                                    tipo_pago = formaPago, 
                                    empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),
                                    ids_productos = "", cantidades_productos = "",
                                    ids_servicios_corporales ="", cantidades_servicios_corporales ="",
                                    ids_servicios_faciales =stridServTratPaq, cantidades_servicios_faciales =cantidad,
                                    monto_pagar = costoTotalAPagar, credito = "N",
                                    comentariosVenta = comentarios, sucursal = Sucursales.objects.get(id_sucursal = sucursal),
                                    cliente = Clientes.objects.get(id_cliente = clienteMandado))
                            
                            elif esTratamiento: #Venta en efectivo, sin descuento y tratamiento
                                registroVenta = Ventas(fecha_venta = fechaVenta, hora_venta =horaVenta,
                                    tipo_pago = formaPago, 
                                    empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),
                                    ids_productos = "", cantidades_productos = "",
                                    ids_servicios_corporales ="", cantidades_servicios_corporales ="",
                                    ids_servicios_faciales ="", cantidades_servicios_faciales ="",
                                    id_tratamiento_vendido = Tratamientos.objects.get(id_tratamiento = idServTratPaq),
                                    monto_pagar = costoTotalAPagar, credito = "N",
                                    comentariosVenta = comentarios, sucursal = Sucursales.objects.get(id_sucursal = sucursal),
                                    cliente = Clientes.objects.get(id_cliente = clienteMandado))

                            elif esPaquete: #Venta en efectivo, sin descuento y paquete tratamiento
                                registroVenta = Ventas(fecha_venta = fechaVenta, hora_venta =horaVenta,
                                    tipo_pago = formaPago, 
                                    empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),
                                    ids_productos = "", cantidades_productos = "",
                                    ids_servicios_corporales ="", cantidades_servicios_corporales ="",
                                    ids_servicios_faciales ="", cantidades_servicios_faciales ="",
                                    id_paquete_promo_vendido = PaquetesPromocionTratamientos.objects.get(id_paquete_tratamiento = idServTratPaq),
                                    monto_pagar = costoTotalAPagar, credito = "N",
                                    comentariosVenta = comentarios, sucursal = Sucursales.objects.get(id_sucursal = sucursal),
                                    cliente = Clientes.objects.get(id_cliente = clienteMandado))

                        else:
                            if esServicio:
                                if servicioCorporal: #Venta en efectivo, con descuento y servicio corporal
                                    registroVenta = Ventas(fecha_venta = fechaVenta, hora_venta =horaVenta,
                                    tipo_pago = formaPago, 
                                    empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),
                                    ids_productos = "", cantidades_productos = "",
                                    ids_servicios_corporales =stridServTratPaq, cantidades_servicios_corporales =cantidad,
                                    ids_servicios_faciales ="", cantidades_servicios_faciales ="",
                                    monto_pagar = costoTotalAPagar, credito = "N",
                                    comentariosVenta = comentarios, sucursal = Sucursales.objects.get(id_sucursal = sucursal),
                                    descuento = Descuentos.objects.get(id_descuento = descuento),
                                    cliente = Clientes.objects.get(id_cliente = clienteMandado)) 
                                else: #Venta en efectivo, con descuento y servicio facial
                                    registroVenta = Ventas(fecha_venta = fechaVenta, hora_venta =horaVenta,
                                    tipo_pago = formaPago, 
                                    empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),
                                    ids_productos = "", cantidades_productos = "",
                                    ids_servicios_corporales ="", cantidades_servicios_corporales ="",
                                    ids_servicios_faciales =stridServTratPaq, cantidades_servicios_faciales =cantidad,
                                    monto_pagar = costoTotalAPagar, credito = "N",
                                    comentariosVenta = comentarios, sucursal = Sucursales.objects.get(id_sucursal = sucursal),
                                    descuento = Descuentos.objects.get(id_descuento = descuento),
                                    cliente = Clientes.objects.get(id_cliente = clienteMandado))
                            
                            elif esTratamiento: #Venta en efectivo, con descuento y tratamiento
                                registroVenta = Ventas(fecha_venta = fechaVenta, hora_venta =horaVenta,
                                    tipo_pago = formaPago, 
                                    empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),
                                    ids_productos = "", cantidades_productos = "",
                                    ids_servicios_corporales ="", cantidades_servicios_corporales ="",
                                    ids_servicios_faciales ="", cantidades_servicios_faciales ="",
                                    id_tratamiento_vendido = Tratamientos.objects.get(id_tratamiento = idServTratPaq),
                                    monto_pagar = costoTotalAPagar, credito = "N",
                                    comentariosVenta = comentarios, sucursal = Sucursales.objects.get(id_sucursal = sucursal,
                                    descuento = Descuentos.objects.get(id_descuento = descuento)),
                                    cliente = Clientes.objects.get(id_cliente = clienteMandado))

                            elif esPaquete: #Venta en efectivo, con descuento y paquete tratamiento
                                registroVenta = Ventas(fecha_venta = fechaVenta, hora_venta =horaVenta,
                                    tipo_pago = formaPago, 
                                    empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),
                                    ids_productos = "", cantidades_productos = "",
                                    ids_servicios_corporales ="", cantidades_servicios_corporales ="",
                                    ids_servicios_faciales ="", cantidades_servicios_faciales ="",
                                    id_paquete_promo_vendido = PaquetesPromocionTratamientos.objects.get(id_paquete_tratamiento = idServTratPaq),
                                    monto_pagar = costoTotalAPagar, credito = "N",
                                    comentariosVenta = comentarios, sucursal = Sucursales.objects.get(id_sucursal = sucursal),
                                    descuento = Descuentos.objects.get(id_descuento = descuento),
                                    cliente = Clientes.objects.get(id_cliente = clienteMandado)) 

                    if esConTarjeta: 
                        if descuento == "SinDescuento":
                            if esServicio:
                                if servicioCorporal: #Vente con tarjeta, sin descuento y corporal
                                    registroVenta = Ventas(fecha_venta = fechaVenta, hora_venta =horaVenta,
                                    tipo_pago = formaPago, tipo_tarjeta = tipo_tarjeta, referencia_pago_tarjeta = referencia_tarjeta,
                                    empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),
                                    ids_productos = "", cantidades_productos = "",
                                    ids_servicios_corporales =stridServTratPaq, cantidades_servicios_corporales =cantidad,
                                    ids_servicios_faciales ="", cantidades_servicios_faciales ="",
                                    monto_pagar = costoTotalAPagar, credito = "N",
                                    comentariosVenta = comentarios, sucursal = Sucursales.objects.get(id_sucursal = sucursal),
                                    cliente = Clientes.objects.get(id_cliente = clienteMandado))
                                else: #Venta con tarjeta, sin descuento y facial
                                    registroVenta = Ventas(fecha_venta = fechaVenta, hora_venta =horaVenta,
                                    tipo_pago = formaPago, tipo_tarjeta = tipo_tarjeta, referencia_pago_tarjeta = referencia_tarjeta,
                                    empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),
                                    ids_productos = "", cantidades_productos = "",
                                    ids_servicios_corporales ="", cantidades_servicios_corporales ="",
                                    ids_servicios_faciales =stridServTratPaq, cantidades_servicios_faciales =cantidad,
                                    monto_pagar = costoTotalAPagar, credito = "N",
                                    comentariosVenta = comentarios, sucursal = Sucursales.objects.get(id_sucursal = sucursal),
                                    cliente = Clientes.objects.get(id_cliente = clienteMandado))
                            
                            elif esTratamiento: #Venta con tarjeta, sin descuento y tratamiento
                                registroVenta = Ventas(fecha_venta = fechaVenta, hora_venta =horaVenta,
                                    tipo_pago = formaPago, tipo_tarjeta = tipo_tarjeta, referencia_pago_tarjeta = referencia_tarjeta, 
                                    empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),
                                    ids_productos = "", cantidades_productos = "",
                                    ids_servicios_corporales ="", cantidades_servicios_corporales ="",
                                    ids_servicios_faciales ="", cantidades_servicios_faciales ="",
                                    id_tratamiento_vendido = Tratamientos.objects.get(id_tratamiento = idServTratPaq),
                                    monto_pagar = costoTotalAPagar, credito = "N",
                                    comentariosVenta = comentarios, sucursal = Sucursales.objects.get(id_sucursal = sucursal),
                                    cliente = Clientes.objects.get(id_cliente = clienteMandado))
                            elif esPaquete: #Venta con tarjeta, sin descuento y paquete
                                registroVenta = Ventas(fecha_venta = fechaVenta, hora_venta =horaVenta,
                                    tipo_pago = formaPago, tipo_tarjeta = tipo_tarjeta, referencia_pago_tarjeta = referencia_tarjeta, 
                                    empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),
                                    ids_productos = "", cantidades_productos = "",
                                    ids_servicios_corporales ="", cantidades_servicios_corporales ="",
                                    ids_servicios_faciales ="", cantidades_servicios_faciales ="",
                                    id_paquete_promo_vendido = PaquetesPromocionTratamientos.objects.get(id_paquete_tratamiento = idServTratPaq),
                                    monto_pagar = costoTotalAPagar, credito = "N",
                                    comentariosVenta = comentarios, sucursal = Sucursales.objects.get(id_sucursal = sucursal),
                                    cliente = Clientes.objects.get(id_cliente = clienteMandado))
                        
                        else:
                            if esServicio: 
                                if servicioCorporal:#Venta con tarjeta, con descuento y corporal
                                    registroVenta = Ventas(fecha_venta = fechaVenta, hora_venta =horaVenta,
                                    tipo_pago = formaPago, tipo_tarjeta = tipo_tarjeta, referencia_pago_tarjeta = referencia_tarjeta, 
                                    empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),
                                    ids_productos = "", cantidades_productos = "",
                                    ids_servicios_corporales =stridServTratPaq, cantidades_servicios_corporales =cantidad,
                                    ids_servicios_faciales ="", cantidades_servicios_faciales ="",
                                    monto_pagar = costoTotalAPagar, credito = "N",
                                    comentariosVenta = comentarios, sucursal = Sucursales.objects.get(id_sucursal = sucursal),
                                    descuento = Descuentos.objects.get(id_descuento = descuento),
                                    cliente = Clientes.objects.get(id_cliente = clienteMandado)) 
                                else: #Venta con tarjeta, con descuento y facial
                                    registroVenta = Ventas(fecha_venta = fechaVenta, hora_venta =horaVenta,
                                    tipo_pago = formaPago, tipo_tarjeta = tipo_tarjeta, referencia_pago_tarjeta = referencia_tarjeta,
                                    empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),
                                    ids_productos = "", cantidades_productos = "",
                                    ids_servicios_corporales ="", cantidades_servicios_corporales ="",
                                    ids_servicios_faciales =stridServTratPaq, cantidades_servicios_faciales =cantidad,
                                    monto_pagar = costoTotalAPagar, credito = "N",
                                    comentariosVenta = comentarios, sucursal = Sucursales.objects.get(id_sucursal = sucursal),
                                    descuento = Descuentos.objects.get(id_descuento = descuento),
                                    cliente = Clientes.objects.get(id_cliente = clienteMandado))
                            
                            elif esTratamiento: #Venta con tarjeta, con descuento y tratamiento
                                registroVenta = Ventas(fecha_venta = fechaVenta, hora_venta =horaVenta,
                                    tipo_pago = formaPago, tipo_tarjeta = tipo_tarjeta, referencia_pago_tarjeta = referencia_tarjeta, 
                                    empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),
                                    ids_productos = "", cantidades_productos = "",
                                    ids_servicios_corporales ="", cantidades_servicios_corporales ="",
                                    ids_servicios_faciales ="", cantidades_servicios_faciales ="",
                                    id_tratamiento_vendido = Tratamientos.objects.get(id_tratamiento = idServTratPaq),
                                    monto_pagar = costoTotalAPagar, credito = "N",
                                    comentariosVenta = comentarios, sucursal = Sucursales.objects.get(id_sucursal = sucursal),
                                    descuento = Descuentos.objects.get(id_descuento = descuento),
                                    cliente = Clientes.objects.get(id_cliente = clienteMandado))

                            elif esPaquete: #Venta con tarjeta, con descuento y paquete 
                                registroVenta = Ventas(fecha_venta = fechaVenta, hora_venta =horaVenta,
                                    tipo_pago = formaPago, tipo_tarjeta = tipo_tarjeta, referencia_pago_tarjeta = referencia_tarjeta, 
                                    empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),
                                    ids_productos = "", cantidades_productos = "",
                                    ids_servicios_corporales ="", cantidades_servicios_corporales ="",
                                    ids_servicios_faciales ="", cantidades_servicios_faciales ="",
                                    id_paquete_promo_vendido = PaquetesPromocionTratamientos.objects.get(id_paquete_tratamiento = idServTratPaq),
                                    monto_pagar = costoTotalAPagar, credito = "N",
                                    comentariosVenta = comentarios, sucursal = Sucursales.objects.get(id_sucursal = sucursal),
                                    descuento = Descuentos.objects.get(id_descuento = descuento),
                                    cliente = Clientes.objects.get(id_cliente = clienteMandado)) 
                    
                    if esConTransferencia:
                        if descuento == "SinDescuento":
                            if esServicio:
                                if servicioCorporal: #Venta con transferencia, sin descuento y corporal
                                    registroVenta = Ventas(fecha_venta = fechaVenta, hora_venta =horaVenta,
                                    tipo_pago = formaPago, clave_rastreo_transferencia = clave_transferencia,
                                    empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),
                                    ids_productos = "", cantidades_productos = "",
                                    ids_servicios_corporales =stridServTratPaq, cantidades_servicios_corporales =cantidad,
                                    ids_servicios_faciales ="", cantidades_servicios_faciales ="",
                                    monto_pagar = costoTotalAPagar, credito = "N",
                                    comentariosVenta = comentarios, sucursal = Sucursales.objects.get(id_sucursal = sucursal),
                                    cliente = Clientes.objects.get(id_cliente = clienteMandado))
                                else: #Venta con transferencia, sin descuento y facial
                                    registroVenta = Ventas(fecha_venta = fechaVenta, hora_venta =horaVenta,
                                    tipo_pago = formaPago, clave_rastreo_transferencia = clave_transferencia,
                                    empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),
                                    ids_productos = "", cantidades_productos = "",
                                    ids_servicios_corporales ="", cantidades_servicios_corporales ="",
                                    ids_servicios_faciales =stridServTratPaq, cantidades_servicios_faciales =cantidad,
                                    monto_pagar = costoTotalAPagar, credito = "N",
                                    comentariosVenta = comentarios, sucursal = Sucursales.objects.get(id_sucursal = sucursal),
                                    cliente = Clientes.objects.get(id_cliente = clienteMandado))
                            elif esTratamiento: #Venta con transferencia, sin descuento y tratamiento
                                registroVenta = Ventas(fecha_venta = fechaVenta, hora_venta =horaVenta,
                                    tipo_pago = formaPago, clave_rastreo_transferencia = clave_transferencia,
                                    empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),
                                    ids_productos = "", cantidades_productos = "",
                                    ids_servicios_corporales ="", cantidades_servicios_corporales ="",
                                    ids_servicios_faciales ="", cantidades_servicios_faciales ="",
                                    id_tratamiento_vendido = Tratamientos.objects.get(id_tratamiento = idServTratPaq),
                                    monto_pagar = costoTotalAPagar, credito = "N",
                                    comentariosVenta = comentarios, sucursal = Sucursales.objects.get(id_sucursal = sucursal),
                                    cliente = Clientes.objects.get(id_cliente = clienteMandado))
                            elif esPaquete: #Venta con transferencia, sin descuento y paquete
                                registroVenta = Ventas(fecha_venta = fechaVenta, hora_venta =horaVenta,
                                    tipo_pago = formaPago, clave_rastreo_transferencia = clave_transferencia,
                                    empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),
                                    ids_productos = "", cantidades_productos = "",
                                    ids_servicios_corporales ="", cantidades_servicios_corporales ="",
                                    ids_servicios_faciales ="", cantidades_servicios_faciales ="",
                                    id_paquete_promo_vendido = PaquetesPromocionTratamientos.objects.get(id_paquete_tratamiento = idServTratPaq),
                                    monto_pagar = costoTotalAPagar, credito = "N",
                                    comentariosVenta = comentarios, sucursal = Sucursales.objects.get(id_sucursal = sucursal),
                                    cliente = Clientes.objects.get(id_cliente = clienteMandado))

                        else:
                            if esServicio:
                                if servicioCorporal: #Venta con transferencia, con descuento y corporal
                                    registroVenta = Ventas(fecha_venta = fechaVenta, hora_venta =horaVenta,
                                    tipo_pago = formaPago, clave_rastreo_transferencia = clave_transferencia,
                                    empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),
                                    ids_productos = "", cantidades_productos = "",
                                    ids_servicios_corporales =stridServTratPaq, cantidades_servicios_corporales =cantidad,
                                    ids_servicios_faciales ="", cantidades_servicios_faciales ="",
                                    monto_pagar = costoTotalAPagar, credito = "N",
                                    comentariosVenta = comentarios, sucursal = Sucursales.objects.get(id_sucursal = sucursal),
                                    descuento = Descuentos.objects.get(id_descuento = descuento),
                                    cliente = Clientes.objects.get(id_cliente = clienteMandado)) 
                                else: #Venta con transferencia, con descuento y facial
                                    registroVenta = Ventas(fecha_venta = fechaVenta, hora_venta =horaVenta,
                                    tipo_pago = formaPago, clave_rastreo_transferencia = clave_transferencia,
                                    empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),
                                    ids_productos = "", cantidades_productos = "",
                                    ids_servicios_corporales ="", cantidades_servicios_corporales ="",
                                    ids_servicios_faciales =stridServTratPaq, cantidades_servicios_faciales =cantidad,
                                    monto_pagar = costoTotalAPagar, credito = "N",
                                    comentariosVenta = comentarios, sucursal = Sucursales.objects.get(id_sucursal = sucursal),
                                    descuento = Descuentos.objects.get(id_descuento = descuento),
                                    cliente = Clientes.objects.get(id_cliente = clienteMandado))
                            elif esTratamiento: #Venta con transferencia, con descuento y tratamiento
                                registroVenta = Ventas(fecha_venta = fechaVenta, hora_venta =horaVenta,
                                    tipo_pago = formaPago, clave_rastreo_transferencia = clave_transferencia,
                                    empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),
                                    ids_productos = "", cantidades_productos = "",
                                    ids_servicios_corporales ="", cantidades_servicios_corporales ="",
                                    ids_servicios_faciales ="", cantidades_servicios_faciales ="",
                                    id_tratamiento_vendido = Tratamientos.objects.get(id_tratamiento = idServTratPaq),
                                    monto_pagar = costoTotalAPagar, credito = "N",
                                    comentariosVenta = comentarios, sucursal = Sucursales.objects.get(id_sucursal = sucursal),
                                    descuento = Descuentos.objects.get(id_descuento = descuento),
                                    cliente = Clientes.objects.get(id_cliente = clienteMandado))
                            elif esPaquete: #Venta con transferencia, con descuento y paquete
                                registroVenta = Ventas(fecha_venta = fechaVenta, hora_venta =horaVenta,
                                    tipo_pago = formaPago, clave_rastreo_transferencia = clave_transferencia,
                                    empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),
                                    ids_productos = "", cantidades_productos = "",
                                    ids_servicios_corporales ="", cantidades_servicios_corporales ="",
                                    ids_servicios_faciales ="", cantidades_servicios_faciales ="",
                                    id_paquete_promo_vendido = PaquetesPromocionTratamientos.objects.get(id_paquete_tratamiento = idServTratPaq),
                                    monto_pagar = costoTotalAPagar, credito = "N",
                                    comentariosVenta = comentarios, sucursal = Sucursales.objects.get(id_sucursal = sucursal),
                                    descuento = Descuentos.objects.get(id_descuento = descuento),
                                    cliente = Clientes.objects.get(id_cliente = clienteMandado))
                
                else: #Venta a credito
                    
                   
                    
                    
                    

                    if descuento == "SinDescuento":
                        if esServicio:
                            
                            if servicioCorporal: #Venta en efectivo, sin descuento y servicio corporal
                                registroVenta = Ventas(fecha_venta = fechaVenta, hora_venta =horaVenta,
                                empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),
                                ids_productos = "", cantidades_productos = "",
                                ids_servicios_corporales =stridServTratPaq, cantidades_servicios_corporales =cantidad,
                                ids_servicios_faciales ="", cantidades_servicios_faciales ="",
                                monto_pagar = costoTotalAPagar, credito = "S",
                                comentariosVenta = comentarios, sucursal = Sucursales.objects.get(id_sucursal = sucursal),
                                cliente = Clientes.objects.get(id_cliente = clienteMandado)) 
                                esACredito = True
                                
                            else: #Venta en efectivo, sin descuento y servicio facial
                                registroVenta = Ventas(fecha_venta = fechaVenta, hora_venta =horaVenta,
                                empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),
                                ids_productos = "", cantidades_productos = "",
                                ids_servicios_corporales ="", cantidades_servicios_corporales ="",
                                ids_servicios_faciales =stridServTratPaq, cantidades_servicios_faciales =cantidad,
                                monto_pagar = costoTotalAPagar, credito = "S",
                                comentariosVenta = comentarios, sucursal = Sucursales.objects.get(id_sucursal = sucursal),
                                cliente = Clientes.objects.get(id_cliente = clienteMandado))
                                print("AQUI SE GUARDA LA VENTA POR EL SERVICIO CORPOPRAL")
                                esACredito = True
                            
                        
                        elif esTratamiento: #Venta en efectivo, sin descuento y tratamiento
                            registroVenta = Ventas(fecha_venta = fechaVenta, hora_venta =horaVenta,
                                empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),
                                ids_productos = "", cantidades_productos = "",
                                ids_servicios_corporales ="", cantidades_servicios_corporales ="",
                                ids_servicios_faciales ="", cantidades_servicios_faciales ="",
                                id_tratamiento_vendido = Tratamientos.objects.get(id_tratamiento = idServTratPaq),
                                monto_pagar = costoTotalAPagar, credito = "S",
                                comentariosVenta = comentarios, sucursal = Sucursales.objects.get(id_sucursal = sucursal),
                                cliente = Clientes.objects.get(id_cliente = clienteMandado))
                            esACredito = True

                        elif esPaquete: #Venta en efectivo, sin descuento y paquete tratamiento
                            registroVenta = Ventas(fecha_venta = fechaVenta, hora_venta =horaVenta,
                                empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),
                                ids_productos = "", cantidades_productos = "",
                                ids_servicios_corporales ="", cantidades_servicios_corporales ="",
                                ids_servicios_faciales ="", cantidades_servicios_faciales ="",
                                id_paquete_promo_vendido = PaquetesPromocionTratamientos.objects.get(id_paquete_tratamiento = idServTratPaq),
                                monto_pagar = costoTotalAPagar, credito = "S",
                                comentariosVenta = comentarios, sucursal = Sucursales.objects.get(id_sucursal = sucursal),
                                cliente = Clientes.objects.get(id_cliente = clienteMandado))
                            esACredito = True

                    else:
                        if esServicio:
                            if servicioCorporal: #Venta en efectivo, sin descuento y servicio corporal
                                registroVenta = Ventas(fecha_venta = fechaVenta, hora_venta =horaVenta,
                                empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),
                                ids_productos = "", cantidades_productos = "",
                                ids_servicios_corporales =stridServTratPaq, cantidades_servicios_corporales =cantidad,
                                ids_servicios_faciales ="", cantidades_servicios_faciales ="",
                                monto_pagar = costoTotalAPagar, credito = "S",
                                comentariosVenta = comentarios, sucursal = Sucursales.objects.get(id_sucursal = sucursal),
                                descuento = Descuentos.objects.get(id_descuento = descuento),
                                cliente = Clientes.objects.get(id_cliente = clienteMandado)) 
                                esACredito = True
                            else: #Venta en efectivo, sin descuento y servicio facial
                                registroVenta = Ventas(fecha_venta = fechaVenta, hora_venta =horaVenta,
                                empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),
                                ids_productos = "", cantidades_productos = "",
                                ids_servicios_corporales ="", cantidades_servicios_corporales ="",
                                ids_servicios_faciales =stridServTratPaq, cantidades_servicios_faciales =cantidad,
                                monto_pagar = costoTotalAPagar, credito = "S",
                                comentariosVenta = comentarios, sucursal = Sucursales.objects.get(id_sucursal = sucursal),
                                descuento = Descuentos.objects.get(id_descuento = descuento),
                                cliente = Clientes.objects.get(id_cliente = clienteMandado))
                                esACredito = True
                        
                        elif esTratamiento: #Venta en efectivo, sin descuento y tratamiento
                            registroVenta = Ventas(fecha_venta = fechaVenta, hora_venta =horaVenta,
                                empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),
                                ids_productos = "", cantidades_productos = "",
                                ids_servicios_corporales ="", cantidades_servicios_corporales ="",
                                ids_servicios_faciales ="", cantidades_servicios_faciales ="",
                                id_tratamiento_vendido = Tratamientos.objects.get(id_tratamiento = idServTratPaq),
                                monto_pagar = costoTotalAPagar, credito = "S",
                                comentariosVenta = comentarios, sucursal = Sucursales.objects.get(id_sucursal = sucursal),
                                descuento = Descuentos.objects.get(id_descuento = descuento),
                                cliente = Clientes.objects.get(id_cliente = clienteMandado))
                            esACredito = True

                        elif esPaquete: #Venta en efectivo, sin descuento y paquete tratamiento
                            registroVenta = Ventas(fecha_venta = fechaVenta, hora_venta =horaVenta,
                                empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),
                                ids_productos = "", cantidades_productos = "",
                                ids_servicios_corporales ="", cantidades_servicios_corporales ="",
                                ids_servicios_faciales ="", cantidades_servicios_faciales ="",
                                id_paquete_promo_vendido = PaquetesPromocionTratamientos.objects.get(id_paquete_tratamiento = idServTratPaq),
                                monto_pagar = costoTotalAPagar, credito = "S",
                                comentariosVenta = comentarios, sucursal = Sucursales.objects.get(id_sucursal = sucursal),
                                descuento = Descuentos.objects.get(id_descuento = descuento),
                                cliente = Clientes.objects.get(id_cliente = clienteMandado))

                            esACredito = True

                registroVenta.save()



                if registroVenta and esConEfectivo: #Venta guardada y con efectivo.. genera un movimiento
                    
                    ultimoId = 0
                    ventasTotalesEfectivo = Ventas.objects.filter(tipo_pago = "Efectivo")
                    for venta in ventasTotalesEfectivo:
                        ultimoId = venta.id_venta
                    tipoMovimiento = "IN"
                    montoMovimiento = float(costoTotalAPagar)
                    descripcionMovimiento = "Movimiento por venta "+str(ultimoId)
                    fechaMovimiento = datetime.today().strftime('%Y-%m-%d')
                    horaMovimiento = datetime.now().time()

                    ingresarCantidadEfectivoACaja = MovimientosCaja(fecha = fechaMovimiento, hora = horaMovimiento, tipo = tipoMovimiento, monto = montoMovimiento, descripcion = descripcionMovimiento, 
                    sucursal = Sucursales.objects.get(id_sucursal = sucursal), realizado_por = Empleados.objects.get(id_empleado = empleadoVendedor))
                    ingresarCantidadEfectivoACaja.save()

                    request.session['ventaAgregada'] = "La venta ha sido agregada satisfactoriamente!"

                    #Actualizar Cita
                    idUltimaVenta = 0
                    consultaVentas = Ventas.objects.all()
                    for venta in consultaVentas:
                        idUltimaVenta = venta.id_venta
                    actualizacionCita = Citas.objects.get(id_cita = idCita)
                    actualizacionCita.estado_cita = "efectuada"
                    actualizacionCita.venta_id = Ventas.objects.get(id_venta = idUltimaVenta)
                    actualizacionCita.save()


                    if esServicio:
                        consultaServiciosProductos = ServiciosProductosGasto.objects.filter(servicio_id__id_servicio =idServTratPaq)
                        if consultaServiciosProductos:
                            sinProductos = False

                            for producto in consultaServiciosProductos:
                                idProducto = producto.producto_gasto_id
                                cantidadUtilizada = producto.cantidad

                                consultaProducto = ProductosGasto.objects.filter(id_producto = idProducto)
                                for dato in consultaProducto:
                                    cantidadActualEnExistencia = dato.cantidad
                                    cuantificable = dato.contenido_cuantificable

                                if cuantificable == "S":
                                    actualizacionCantidad = cantidadActualEnExistencia - cantidadUtilizada

                                    actualizarProducto = ProductosGasto.objects.filter(id_producto = idProducto).update(cantidad = actualizacionCantidad)
                        else:
                            sinProductos = True
                    elif esTratamiento:
                        consultaTratamientoProductos = TratamientosProductosGasto.objects.filter(tratamiento_id__id_tratamiento = idServTratPaq)

                        if consultaTratamientoProductos:
                            sinProductos = False
                            for producto in consultaTratamientoProductos:
                                idProducto = producto.producto_gasto_id
                                cantidadUtilizada = producto.cantidad

                                consultaProducto = ProductosGasto.objects.filter(id_producto = idProducto)
                                for dato in consultaProducto:
                                    cantidadActualEnExistencia = dato.cantidad
                                    cuantificable = dato.contenido_cuantificable

                                if cuantificable == "S":
                                    actualizacionCantidad = cantidadActualEnExistencia - cantidadUtilizada

                                    actualizarProducto = ProductosGasto.objects.filter(id_producto = idProducto).update(cantidad = actualizacionCantidad)

                        else:
                            sinProductos = True

                    elif esPaquete:
                        consultaPaqueteTratamiento = PaquetesPromocionTratamientos.objects.filter(id_paquete_tratamiento = idServTratPaq)

                        for datoPromo in consultaPaqueteTratamiento:
                            idTratamiento = datoPromo.tratamiento_id
                            consultaTratamientoProductos = TratamientosProductosGasto.objects.filter(tratamiento_id__id_tratamiento = idTratamiento)

                            if consultaTratamientoProductos:
                                sinProductos = False
                                for producto in consultaTratamientoProductos:
                                    idProducto = producto.producto_gasto_id
                                    cantidadUtilizada = producto.cantidad

                                    consultaProducto = ProductosGasto.objects.filter(id_producto = idProducto)
                                    for dato in consultaProducto:
                                        cantidadActualEnExistencia = dato.cantidad
                                        cuantificable = dato.contenido_cuantificable

                                    if cuantificable == "S":
                                        actualizacionCantidad = cantidadActualEnExistencia - cantidadUtilizada

                                        actualizarProducto = ProductosGasto.objects.filter(id_producto = idProducto).update(cantidad = actualizacionCantidad)

                            else:
                                sinProductos = True
                    
                    #Actualización de cita-tratamiento en caso de que haya
                    consultaCitaEnTablaTratamientoCliente = citasTratamientos.objects.filter(cita_id__id_cita = idCita)
                    if consultaCitaEnTablaTratamientoCliente:
                        for cita in consultaCitaEnTablaTratamientoCliente:
                            idTratamientoCliente = cita.idTratamientoCliente_id
                        
                        consultaTratamientoCliente = TratamientosClientes.objects.filter(id_tratamiento_cliente = idTratamientoCliente)

                        for datoTratamientoCliente in consultaTratamientoCliente:
                            sesionesPendientesActuales = datoTratamientoCliente.sesionesPendientes
                            sesionesCanjeadas = datoTratamientoCliente.sesionesCanjeadas
                        
                        nuevasSesionesPendientes = sesionesPendientesActuales - 1
                        nuevasSesionesCanjeadas = sesionesCanjeadas + 1

                        actualizacionTratamientoCliente = TratamientosClientes.objects.filter(id_tratamiento_cliente = idTratamientoCliente).update(sesionesPendientes = nuevasSesionesPendientes,
                        sesionesCanjeadas = nuevasSesionesCanjeadas)

                        if actualizacionTratamientoCliente:

                            #Registro de historial
                            registroEnHistorialDeTratamiento = HistorialTratamientosClientes(tratamiento_cliente = TratamientosClientes.objects.get(id_tratamiento_cliente = idTratamientoCliente),
                            sesion_efectuada = nuevasSesionesCanjeadas, fecha_efectuado = fechaMovimiento)

                            registroEnHistorialDeTratamiento.save()




                    #IMPRESION DE TICKEEETSSSS
                    #Ultimo id de venta
                    consultaVentas = Ventas.objects.all()
                    ultimoIdVenta = 0
                    for venta in consultaVentas:
                        ultimoIdVenta = venta.id_venta
                        cliente = venta.cliente_id
                        sucursal = venta.sucursal_id

                    #Fecha
                    hoy = datetime.now()
                    hoyFormato = hoy.strftime('%Y/%m/%d')

                    #Empleado vendedor
                    consultaEmpleadoVendedor = Empleados.objects.filter(id_empleado = empleadoVendedor)
                    for datoVendedor in consultaEmpleadoVendedor:
                        nombreEmpleado = datoVendedor.nombres
                        apellidoPatEmpleado = datoVendedor.apellido_paterno

                    nombreCompletoEmpleadoVendedor = nombreEmpleado + " "+ apellidoPatEmpleado

                    #Datos sucurssal
                    consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursal)
                    for datoSucursal in consultaSucursal:
                        nombreSucursal = datoSucursal.nombre
                        telefonoSucursal = datoSucursal.telefono
                        direccionSucursal = datoSucursal.direccion

                    #DatosCliente
                    if cliente == None:
                        nombreClienteTicket = "Momentaneo"

                    else:
                        consultaCliente = Clientes.objects.filter(id_cliente = cliente)
                        for datoCliente in consultaCliente:
                            idCienteTicket = datoCliente.id_cliente
                            nombreCliente = datoCliente.nombre_cliente
                            apellidoCliente = datoCliente.apellidoPaterno_cliente

                        nombreClienteTicket = nombreCliente + " " + apellidoCliente
                    #Hora bien
                    horaVenta = horaVenta.strftime("%H:%M:%S")

                    # Esto es para obtener las impresoras. No es obligatorio hacerlo siempre que se quiera imprimir
                    impresoras = Conector.ConectorV3.obtenerImpresoras()
                    print(f"Las impresoras son: {impresoras}")

                    contadorTickets = 0
                    for x in range(2):
                        contadorTickets = contadorTickets + 1
                        c = Conector.ConectorV3()
                        c.Iniciar()
                        c.Corte(1)
                        
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        # Recuerda que la imagen debe existir y debe ser legible para el plugin. Si no, comenta las líneas
                        c.CargarImagenLocalEImprimir("C:\\COSTABELLA\\sistemaCostabella\\static\\images\\anegragrande.png", 0, 216)
                        c.EscribirTexto("\n")
                        c.EstablecerTamañoFuente(1, 1)
                        c.EstablecerEnfatizado(True)
                        c.EscribirTexto("Sucursal: "+nombreSucursal+"\n")
                        c.EstablecerEnfatizado(False)
                        c.EscribirTexto("TEL: "+telefonoSucursal+"\n")
                        c.TextoSegunPaginaDeCodigos(2, "cp850", direccionSucursal+"\n")

                        c.EstablecerEnfatizado(True)
                        c.EscribirTexto("================================================\n")
                        c.EstablecerTamañoFuente(2, 2)
                        c.EscribirTexto("CITA #"+str(idCita)+" - VENTA #"+str(ultimoIdVenta)+"\n")
                        c.EstablecerEnfatizado(False)
                        c.EstablecerAlineacion(Conector.ALINEACION_IZQUIERDA)
                        c.EstablecerTamañoFuente(1, 1)
                        c.EscribirTexto("\n")
                        c.EscribirTexto(" "+str(hoyFormato)+" - "+str(horaVenta)+" hrs.\n")
                        c.EscribirTexto("Atendida por: "+nombreCompletoEmpleadoVendedor+".\n")
                        c.EscribirTexto("\n")
                        
                        
                        #Listado de productos 
                        if esServicio:
                            consultaServicio = Servicios.objects.filter(id_servicio =idServTratPaq)
                            for datoServicio in consultaServicio:
                                nombreTratamiento = datoServicio.nombre_servicio
                            
                        elif esTratamiento:
                            consultaTratamiento = Tratamientos.objects.filter(id_tratamiento = idServTratPaq)
                            for datoTratamiento in consultaTratamiento:
                                nombreTratamiento = datoTratamiento.nombre_tratamiento

                        elif esPaquete:
                            consultaPaqueteTratamiento = PaquetesPromocionTratamientos.objects.filter(id_paquete_tratamiento = idServTratPaq)

                            for datoPromo in consultaPaqueteTratamiento:
                                nombreTratamiento = datoTratamiento.nombre_paquete
                                
                        
                        costototalDecimales = round(float(costoTotalAPagar), 2)
                        costototalDecimales = str(costoTotalAPagar)

                        costoTotalProductoDivididoEnElPunto = costototalDecimales.split(".")
                        longitudCostoTotal = len(str(costoTotalProductoDivididoEnElPunto[0]))
                        longitudCostoTotal = int(longitudCostoTotal)

                            
                        caracteresProducto = len(nombreTratamiento)

                        if longitudCostoTotal == 2:
                            espacio = 38
                        if longitudCostoTotal == 2:
                            espacio = 37
                        elif longitudCostoTotal == 3:
                            espacio = 36
                        elif longitudCostoTotal == 4:
                            espacio = 35
                        elif longitudCostoTotal == 5:
                            espacio = 34
                        elif longitudCostoTotal == 6:
                            espacio = 33
                        numeroEspacios = espacio - int(caracteresProducto)
                        
                        espaciosTicket = ""
                        for x in range(numeroEspacios):
                            espacioMini = " "
                            espaciosTicket = espaciosTicket + espacioMini
                        c.EscribirTexto("1 x "+nombreTratamiento+espaciosTicket+str(costototalDecimales)+"\n")


                        
                        c.EscribirTexto("\n")
                        c.EscribirTexto("\n")
                        
                        if descuento == "SinDescuento":
                            c.EstablecerTamañoFuente(2, 2)
                            c.EstablecerAlineacion(Conector.ALINEACION_DERECHA)
                            c.EscribirTexto("TOTAL:  $"+str(costoTotalAPagar)+"\n")
                        else:
                            intDescuento = int(descuento)
                            consultaDescuentos = Descuentos.objects.filter(porcentaje = intDescuento)
                            for datoDescuento in consultaDescuentos:
                                nombreDescuento = datoDescuento.nombre_descuento
                                porcentajeDescuento = datoDescuento.porcentaje

                            porcentajePagado = 100 - porcentajeDescuento #85
                            totalSinDescuento1 = 100 * float(costoTotalAPagar)
                            totalSinDescuento2 = totalSinDescuento1/porcentajePagado
                            totalSinDescuento2 = round(totalSinDescuento2)

                            primerMulti = porcentajeDescuento * float(totalSinDescuento2)
                            primerDivision = primerMulti/100
                            resultadoDescuento = round(primerDivision)
                            
                            costoTotalAPagarConDescuento = totalSinDescuento2 - resultadoDescuento

                            c.EstablecerTamañoFuente(1, 1)
                            c.EstablecerAlineacion(Conector.ALINEACION_DERECHA)
                            c.EscribirTexto("Subtotal:  $"+str(totalSinDescuento2)+"\n")
                            c.EscribirTexto("Descuento:  $"+str(resultadoDescuento)+"\n")
                            c.EstablecerTamañoFuente(2, 2)
                            c.EscribirTexto("TOTAL:  $"+str(costoTotalAPagarConDescuento)+"\n")
                            c.EstablecerTamañoFuente(1, 1)
                            c.EscribirTexto("Descuento aplicado: -"+str(porcentajeDescuento)+"%- "+str(nombreDescuento)+"\n")

                        c.EscribirTexto("\n")
                        c.EstablecerEnfatizado(True)
                        c.EstablecerTamañoFuente(1, 1)
                        c.EscribirTexto("========== IVA incluido en el precio ==========\n")
                        c.EscribirTexto("\n")
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        c.TextoSegunPaginaDeCodigos(2, "cp850", "INFORMACION DE PAGO.\n")
                        c.EstablecerEnfatizado(False)
                        c.EscribirTexto("\n")
                        if esConEfectivo:
                            c.EscribirTexto("Pago en efectivo.\n")
                        elif esConTarjeta:
                            c.EscribirTexto("Pago con "+str(tipo_tarjeta)+".\n")
                            c.EscribirTexto("Referencia: "+referencia_tarjeta+".\n")
                        elif esConTransferencia:
                            c.EscribirTexto("Transferencia.\n")
                            c.EscribirTexto("Clave de rastreo: "+str(clave_transferencia)+".\n")
                        c.EscribirTexto("\n")
                        c.EstablecerEnfatizado(True)
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        c.TextoSegunPaginaDeCodigos(2, "cp850", "INFORMACIÓN DE CLIENTE.\n")

                        if nombreClienteTicket == "Momentaneo":
                            c.EstablecerEnfatizado(False)
                            c.EscribirTexto("Cliente momentaneo.\n")
                        else:
                            c.EstablecerEnfatizado(False)
                            c.EscribirTexto("ID:"+str(idCienteTicket)+" - "+nombreClienteTicket+".\n")
                        c.EscribirTexto("=========== Gracias por su compra!! ===========\n")
                        c.EstablecerTamañoFuente(2, 2)
                        c.EstablecerEnfatizado(True)
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        if contadorTickets == 1:
                            c.EscribirTexto("\n")
                            c.EscribirTexto("COPIA TIENDA.\n")
                            c.EscribirTexto("\n")
                            c.EstablecerTamañoFuente(1, 1)
                            c.EscribirTexto("________________________________________________\n")
                            c.EscribirTexto("Firma de cliente.\n")
                        else:
                            c.EscribirTexto("\n")
                            c.EscribirTexto("COPIA CLIENTE.\n")
                        c.EscribirTexto("\n")
                        c.EstablecerTamañoFuente(1, 1)
                        

                        c.Feed(1)
                        c.Corte(1)
                        #c.abrirCajon()
                        c.Pulso(48, 60, 120)
                        print("Imprimiendo...")
                        # Recuerda cambiar por el nombre de tu impresora
                        respuesta = c.imprimirEn("POS80 Printer")
                        if respuesta == True:
                            print("Impresión correcta")
                        else:
                            print(f"Error. El mensaje es: {respuesta}")



                   

                    try:
                        tokenTelegram = keysBotCostabella.tokenBotCostabellaCitas
                        botCostabella = telepot.Bot(tokenTelegram)

                        idGrupoTelegram = keysBotCostabella.idGrupo
                        
                        mensaje = "\U0001F4C6 CITA VENDIDA \U0001F4C6 \n El cliente "+nombreClienteTicket+" acudió y pago la cita #"+str(idCita)+" el día "+hoyFormato+" a las "+str(horaVenta)+" hrs en la sucursal "+nombreSucursal+"\n Servicio/Tratamiento:\n"+nombreTratamiento
                        botCostabella.sendMessage(idGrupoTelegram,mensaje)
                    except:
                        print("An exception occurred")

                    return redirect("/ventas/")

                if registroVenta:
                    print("Venta guardada xddd")
                    request.session['ventaAgregada'] = "La venta ha sido agregada satisfactoriamente!"

                    #Actualizar Cita
                    idUltimaVenta = 0
                    consultaVentas = Ventas.objects.all()
                    for venta in consultaVentas:
                        idUltimaVenta = venta.id_venta
                    actualizacionCita = Citas.objects.get(id_cita = idCita)
                    actualizacionCita.estado_cita = "efectuada"
                    actualizacionCita.venta_id = Ventas.objects.get(id_venta = idUltimaVenta)
                    actualizacionCita.save()

                    if esServicio:
                        consultaServiciosProductos = ServiciosProductosGasto.objects.filter(servicio_id__id_servicio =idServTratPaq)
                        if consultaServiciosProductos:
                            sinProductos = False

                            for producto in consultaServiciosProductos:
                                idProducto = producto.producto_gasto_id
                                cantidadUtilizada = producto.cantidad

                                consultaProducto = ProductosGasto.objects.filter(id_producto = idProducto)
                                for dato in consultaProducto:
                                    cantidadActualEnExistencia = dato.cantidad
                                    cuantificable = dato.contenido_cuantificable

                                if cuantificable == "S":
                                    actualizacionCantidad = cantidadActualEnExistencia - cantidadUtilizada

                                    actualizarProducto = ProductosGasto.objects.filter(id_producto = idProducto).update(cantidad = actualizacionCantidad)
                        else:
                            sinProductos = True
                    elif esTratamiento:
                        consultaTratamientoProductos = TratamientosProductosGasto.objects.filter(tratamiento_id__id_tratamiento = idServTratPaq)

                        if consultaTratamientoProductos:
                            sinProductos = False
                            for producto in consultaTratamientoProductos:
                                idProducto = producto.producto_gasto_id
                                cantidadUtilizada = producto.cantidad

                                consultaProducto = ProductosGasto.objects.filter(id_producto = idProducto)
                                for dato in consultaProducto:
                                    cantidadActualEnExistencia = dato.cantidad
                                    cuantificable = dato.contenido_cuantificable

                                if cuantificable == "S":
                                    actualizacionCantidad = cantidadActualEnExistencia - cantidadUtilizada

                                    actualizarProducto = ProductosGasto.objects.filter(id_producto = idProducto).update(cantidad = actualizacionCantidad)

                        else:
                            sinProductos = True

                    elif esPaquete:
                        consultaPaqueteTratamiento = PaquetesPromocionTratamientos.objects.filter(id_paquete_tratamiento = idServTratPaq)

                        for datoPromo in consultaPaqueteTratamiento:
                            idTratamiento = datoPromo.tratamiento_id
                            consultaTratamientoProductos = TratamientosProductosGasto.objects.filter(tratamiento_id__id_tratamiento = idTratamiento)

                            if consultaTratamientoProductos:
                                sinProductos = False
                                for producto in consultaTratamientoProductos:
                                    idProducto = producto.producto_gasto_id
                                    cantidadUtilizada = producto.cantidad

                                    consultaProducto = ProductosGasto.objects.filter(id_producto = idProducto)
                                    for dato in consultaProducto:
                                        cantidadActualEnExistencia = dato.cantidad
                                        cuantificable = dato.contenido_cuantificable

                                    if cuantificable == "S":
                                        actualizacionCantidad = cantidadActualEnExistencia - cantidadUtilizada

                                        actualizarProducto = ProductosGasto.objects.filter(id_producto = idProducto).update(cantidad = actualizacionCantidad)

                            else:
                                sinProductos = True
                    
                    if esACredito: #Guardar el registro del crédito

                     
                        ultimoidVenta = 0
                        totalesVentas = Ventas.objects.all()
                        for venta in totalesVentas:
                            ultimoidVenta = venta.id_venta

                        registroCredito = Creditos(fecha_venta_credito = fechaVenta,
                        empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),
                        cliente = Clientes.objects.get(id_cliente = clienteMandado),
                        concepto_credito = "Venta",
                        descripcion_credito = comentarios,
                        monto_pagar = costoTotalAPagar,
                        monto_pagado = 0,
                        monto_restante = costoTotalAPagar,
                        estatus = "Pendiente",
                        sucursal = Sucursales.objects.get(id_sucursal = sucursal),
                        venta = Ventas.objects.get(id_venta = ultimoidVenta))

                        registroCredito.save()

                        if registroCredito:
                            ultimoCredito = 0
                            consultaCreditos = Creditos.objects.filter(estatus="Pendiente")
                            for credito in consultaCreditos:
                                ultimoCredito = credito.id_credito
                            guardarPagosCredito = PagosCreditos(id_credito = Creditos.objects.get(id_credito = ultimoCredito))
                            guardarPagosCredito.save()

                        request.session['ventaAgregada'] = "La venta con crédito ha sido agregada satisfactoriamente!"

                        #IMPRESION DE TICKEEETSSSS
                        #Ultimo id de venta
                        consultaVentas = Ventas.objects.all()
                        ultimoIdVenta = 0
                        for venta in consultaVentas:
                            ultimoIdVenta = venta.id_venta

                        #Fecha
                        hoy = datetime.now()
                        hoyFormato = hoy.strftime('%Y/%m/%d')

                        #Empleado vendedor
                        consultaEmpleadoVendedor = Empleados.objects.filter(id_empleado = empleadoVendedor)
                        for datoVendedor in consultaEmpleadoVendedor:
                            nombreEmpleado = datoVendedor.nombres
                            apellidoPatEmpleado = datoVendedor.apellido_paterno

                        nombreCompletoEmpleadoVendedor = nombreEmpleado + " "+ apellidoPatEmpleado

                        #Datos sucurssal
                        consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursal)
                        for datoSucursal in consultaSucursal:
                            nombreSucursal = datoSucursal.nombre
                            telefonoSucursal = datoSucursal.telefono
                            direccionSucursal = datoSucursal.direccion

                        #DatosCliente
                        if clienteMandado == "clienteMomentaneo":
                            nombreClienteTicket = "Momentaneo"

                        else:
                            consultaCliente = Clientes.objects.filter(id_cliente = clienteMandado)
                            for datoCliente in consultaCliente:
                                idCienteTicket = datoCliente.id_cliente
                                nombreCliente = datoCliente.nombre_cliente
                                apellidoCliente = datoCliente.apellidoPaterno_cliente

                            nombreClienteTicket = nombreCliente + " " + apellidoCliente
                        #Hora bien
                        horaVenta = horaVenta.strftime("%H:%M:%S")

                        # Esto es para obtener las impresoras. No es obligatorio hacerlo siempre que se quiera imprimir
                        impresoras = Conector.ConectorV3.obtenerImpresoras()
                        print(f"Las impresoras son: {impresoras}")
                        
                        contadorTickets = 0
                        for x in range(2):
                            contadorTickets = contadorTickets + 1

                            
                            c = Conector.ConectorV3()
                            c.Iniciar()
                            c.Corte(1)
                            
                            c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                            # Recuerda que la imagen debe existir y debe ser legible para el plugin. Si no, comenta las líneas
                            c.CargarImagenLocalEImprimir("C:\\COSTABELLA\\sistemaCostabella\\static\\images\\anegragrande.png", 0, 216)
                            c.EscribirTexto("\n")
                            c.EstablecerTamañoFuente(1, 1)
                            c.EstablecerEnfatizado(True)
                            c.EscribirTexto("Sucursal: "+nombreSucursal+"\n")
                            c.EstablecerEnfatizado(False)
                            c.EscribirTexto("TEL: "+telefonoSucursal+"\n")
                            c.TextoSegunPaginaDeCodigos(2, "cp850", direccionSucursal+"\n")

                            c.EstablecerEnfatizado(True)
                            c.EscribirTexto("================================================\n")
                            c.EstablecerTamañoFuente(2, 2)
                            c.EscribirTexto("VENTA A CRÉDITO #"+str(ultimoIdVenta)+"\n")
                            c.EscribirTexto("CRÉDITO #"+str(ultimoCredito)+"\n")
                            c.EstablecerEnfatizado(False)
                            c.EstablecerAlineacion(Conector.ALINEACION_IZQUIERDA)
                            c.EstablecerTamañoFuente(1, 1)
                            c.EscribirTexto("\n")
                            c.EscribirTexto(" "+str(hoyFormato)+" - "+str(horaVenta)+" hrs.\n")
                            c.EscribirTexto("Atendida por: "+nombreCompletoEmpleadoVendedor+".\n")
                            c.EscribirTexto("\n")

                            #Listado de productos 
                            if esServicio:
                                consultaServicio = Servicios.objects.filter(id_servicio =idServTratPaq)
                                for datoServicio in consultaServicio:
                                    nombreTratamiento = datoServicio.nombre_servicio
                                
                            elif esTratamiento:
                                consultaTratamiento = Tratamientos.objects.filter(id_tratamiento = idServTratPaq)
                                for datoTratamiento in consultaTratamiento:
                                    nombreTratamiento = datoTratamiento.nombre_tratamiento

                            elif esPaquete:
                                consultaPaqueteTratamiento = PaquetesPromocionTratamientos.objects.filter(id_paquete_tratamiento = idServTratPaq)

                                for datoPromo in consultaPaqueteTratamiento:
                                    nombreTratamiento = datoTratamiento.nombre_paquete
                                    
                            
                            costototalDecimales = round(float(costoTotalAPagar), 2)
                            costototalDecimales = str(costoTotalAPagar)

                            costoTotalProductoDivididoEnElPunto = costototalDecimales.split(".")
                            longitudCostoTotal = len(str(costoTotalProductoDivididoEnElPunto[0]))
                            longitudCostoTotal = int(longitudCostoTotal)

                                
                            caracteresProducto = len(nombreTratamiento)

                            if longitudCostoTotal == 2:
                                espacio = 38
                            if longitudCostoTotal == 2:
                                espacio = 37
                            elif longitudCostoTotal == 3:
                                espacio = 36
                            elif longitudCostoTotal == 4:
                                espacio = 35
                            elif longitudCostoTotal == 5:
                                espacio = 34
                            elif longitudCostoTotal == 6:
                                espacio = 33
                            numeroEspacios = espacio - int(caracteresProducto)
                            
                            espaciosTicket = ""
                            for x in range(numeroEspacios):
                                espacioMini = " "
                                espaciosTicket = espaciosTicket + espacioMini
                            c.EscribirTexto("1 x "+nombreTratamiento+espaciosTicket+str(costototalDecimales)+"\n")



                            
                            c.EscribirTexto("\n")
                            c.EscribirTexto("\n")

                            if descuento == "SinDescuento":
                                c.EstablecerTamañoFuente(2, 2)
                                c.EstablecerAlineacion(Conector.ALINEACION_DERECHA)
                                c.EscribirTexto("TOTAL:  $"+str(costoTotalAPagar)+"\n")
                                costoTotalPagarCredito = costoTotalAPagar
                            else:
                                intDescuento = int(descuento)
                                consultaDescuentos = Descuentos.objects.filter(porcentaje = intDescuento)
                                for datoDescuento in consultaDescuentos:
                                    nombreDescuento = datoDescuento.nombre_descuento
                                    porcentajeDescuento = datoDescuento.porcentaje

                                porcentajePagado = 100 - porcentajeDescuento #85
                                totalSinDescuento1 = 100 * float(costoTotalAPagar)
                                totalSinDescuento2 = totalSinDescuento1/porcentajePagado
                                totalSinDescuento2 = round(totalSinDescuento2)

                                primerMulti = porcentajeDescuento * float(totalSinDescuento2)
                                primerDivision = primerMulti/100
                                resultadoDescuento = round(primerDivision)
                                
                                costoTotalAPagarConDescuento = totalSinDescuento2 - resultadoDescuento

                                c.EstablecerTamañoFuente(1, 1)
                                c.EstablecerAlineacion(Conector.ALINEACION_DERECHA)
                                c.EscribirTexto("Subtotal:  $"+str(totalSinDescuento2)+"\n")
                                c.EscribirTexto("Descuento:  $"+str(resultadoDescuento)+"\n")
                                c.EstablecerTamañoFuente(2, 2)
                                c.EscribirTexto("TOTAL:  $"+str(costoTotalAPagarConDescuento)+"\n")
                                c.EstablecerTamañoFuente(1, 1)
                                c.EscribirTexto("Descuento aplicado: -"+str(porcentajeDescuento)+"%- "+str(nombreDescuento)+"\n")
                                costoTotalPagarCredito = costoTotalAPagarConDescuento

                            c.EscribirTexto("\n")
                            c.EstablecerEnfatizado(True)
                            c.EstablecerTamañoFuente(1, 1)
                            c.EscribirTexto("========== IVA incluido en el precio ==========\n")
                            c.EscribirTexto("\n")
                            c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                            c.TextoSegunPaginaDeCodigos(2, "cp850", "INFORMACION DE PAGO.\n")
                            c.EstablecerEnfatizado(False)
                            c.EscribirTexto("\n")
                            c.EstablecerEnfatizado(True)
                            c.EscribirTexto("Pago a crédito 4 quincenas.\n")
                            c.EstablecerEnfatizado(False)
                            abono = float(costoTotalPagarCredito)/4
                            c.EscribirTexto("Abonos de: $"+str(abono)+" MXN.\n")
                            ahora = datetime.now()
                            fechaPrimerPago = ahora + timedelta(days=15)
                            fechaPrimerPago = fechaPrimerPago.strftime('%Y-%m-%d')
                            c.EscribirTexto("Primer pago el día: "+str(fechaPrimerPago)+".\n")
                            
                        
                            c.EscribirTexto("\n")
                            c.EstablecerEnfatizado(True)
                            c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                            c.TextoSegunPaginaDeCodigos(2, "cp850", "INFORMACIÓN DE CLIENTE.\n")

                            if nombreClienteTicket == "Momentaneo":
                                c.EstablecerEnfatizado(False)
                                c.EscribirTexto("Cliente momentaneo.\n")
                            else:
                                c.EstablecerEnfatizado(False)
                                c.EscribirTexto("ID:"+str(idCienteTicket)+" - "+nombreClienteTicket+".\n")
                            c.EscribirTexto("=========== Gracias por su compra!! ===========\n")
                            c.EstablecerTamañoFuente(2, 2)
                            c.EstablecerEnfatizado(True)
                            c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                            if contadorTickets == 1:
                                c.EscribirTexto("\n")
                                c.EscribirTexto("COPIA TIENDA.\n")
                                c.EscribirTexto("\n")
                                c.EstablecerTamañoFuente(1, 1)
                                c.EscribirTexto("________________________________________________\n")
                                c.EscribirTexto("Firma de cliente.\n")
                            else:
                                c.EscribirTexto("\n")
                                c.EscribirTexto("COPIA CLIENTE.\n")
                            c.EscribirTexto("\n")
                            c.EstablecerTamañoFuente(1, 1)
                            

                            c.Feed(1)
                            c.Corte(1)
                            #c.abrirCajon()
                            c.Pulso(48, 60, 120)
                            print("Imprimiendo...")
                            # Recuerda cambiar por el nombre de tu impresora
                            respuesta = c.imprimirEn("POS80 Printer")
                            if respuesta == True:
                                print("Impresión correcta")
                            else:
                                print(f"Error. El mensaje es: {respuesta}")
                        try:
                            tokenTelegram = keysBotCostabella.tokenBotCostabellaCitas
                            botCostabella = telepot.Bot(tokenTelegram)

                            idGrupoTelegram = keysBotCostabella.idGrupo
                            
                            mensaje = "\U0001F4C6 CITA VENDIDA \U0001F4C6 \n El cliente "+nombreClienteTicket+" acudió y pago a crédito la cita #"+str(idCita)+" el día "+hoyFormato+" a las "+str(horaVenta)+" hrs en la sucursal "+nombreSucursal+"\n Servicio/Tratamiento:\n"+nombreTratamiento
                            botCostabella.sendMessage(idGrupoTelegram,mensaje)
                        except:
                            print("An exception occurred")
                    else:
                        #IMPRESION DE TICKEEETSSSS
                        #Ultimo id de venta
                        consultaVentas = Ventas.objects.all()
                        ultimoIdVenta = 0
                        for venta in consultaVentas:
                            ultimoIdVenta = venta.id_venta
                            cliente = venta.cliente_id
                            sucursal = venta.sucursal_id

                        #Fecha
                        hoy = datetime.now()
                        hoyFormato = hoy.strftime('%Y/%m/%d')

                        #Empleado vendedor
                        consultaEmpleadoVendedor = Empleados.objects.filter(id_empleado = empleadoVendedor)
                        for datoVendedor in consultaEmpleadoVendedor:
                            nombreEmpleado = datoVendedor.nombres
                            apellidoPatEmpleado = datoVendedor.apellido_paterno

                        nombreCompletoEmpleadoVendedor = nombreEmpleado + " "+ apellidoPatEmpleado

                        #Datos sucurssal
                        consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursal)
                        for datoSucursal in consultaSucursal:
                            nombreSucursal = datoSucursal.nombre
                            telefonoSucursal = datoSucursal.telefono
                            direccionSucursal = datoSucursal.direccion

                        #DatosCliente
                        if cliente == None:
                            nombreClienteTicket = "Momentaneo"

                        else:
                            consultaCliente = Clientes.objects.filter(id_cliente = cliente)
                            for datoCliente in consultaCliente:
                                idCienteTicket = datoCliente.id_cliente
                                nombreCliente = datoCliente.nombre_cliente
                                apellidoCliente = datoCliente.apellidoPaterno_cliente

                            nombreClienteTicket = nombreCliente + " " + apellidoCliente
                        #Hora bien
                        horaVenta = horaVenta.strftime("%H:%M:%S")

                        # Esto es para obtener las impresoras. No es obligatorio hacerlo siempre que se quiera imprimir
                        impresoras = Conector.ConectorV3.obtenerImpresoras()
                        print(f"Las impresoras son: {impresoras}")

                        contadorTickets = 0
                        for x in range(2):
                            contadorTickets = contadorTickets + 1
                            c = Conector.ConectorV3()
                            c.Iniciar()
                            c.Corte(1)
                            
                            c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                            # Recuerda que la imagen debe existir y debe ser legible para el plugin. Si no, comenta las líneas
                            c.CargarImagenLocalEImprimir("C:\\COSTABELLA\\sistemaCostabella\\static\\images\\anegragrande.png", 0, 216)
                            c.EscribirTexto("\n")
                            c.EstablecerTamañoFuente(1, 1)
                            c.EstablecerEnfatizado(True)
                            c.EscribirTexto("Sucursal: "+nombreSucursal+"\n")
                            c.EstablecerEnfatizado(False)
                            c.EscribirTexto("TEL: "+telefonoSucursal+"\n")
                            c.TextoSegunPaginaDeCodigos(2, "cp850", direccionSucursal+"\n")

                            c.EstablecerEnfatizado(True)
                            c.EscribirTexto("================================================\n")
                            c.EstablecerTamañoFuente(2, 2)
                            c.EscribirTexto("CITA #"+str(idCita)+" - VENTA #"+str(ultimoIdVenta)+"\n")
                            c.EstablecerEnfatizado(False)
                            c.EstablecerAlineacion(Conector.ALINEACION_IZQUIERDA)
                            c.EstablecerTamañoFuente(1, 1)
                            c.EscribirTexto("\n")
                            c.EscribirTexto(" "+str(hoyFormato)+" - "+str(horaVenta)+" hrs.\n")
                            c.EscribirTexto("Atendida por: "+nombreCompletoEmpleadoVendedor+".\n")
                            c.EscribirTexto("\n")
                            
                            
                            #Listado de productos 
                            if esServicio:
                                consultaServicio = Servicios.objects.filter(id_servicio =idServTratPaq)
                                for datoServicio in consultaServicio:
                                    nombreTratamiento = datoServicio.nombre_servicio
                                
                            elif esTratamiento:
                                consultaTratamiento = Tratamientos.objects.filter(id_tratamiento = idServTratPaq)
                                for datoTratamiento in consultaTratamiento:
                                    nombreTratamiento = datoTratamiento.nombre_tratamiento

                            elif esPaquete:
                                consultaPaqueteTratamiento = PaquetesPromocionTratamientos.objects.filter(id_paquete_tratamiento = idServTratPaq)

                                for datoPromo in consultaPaqueteTratamiento:
                                    nombreTratamiento = datoTratamiento.nombre_paquete
                                    
                            
                            costototalDecimales = round(float(costoTotalAPagar), 2)
                            costototalDecimales = str(costoTotalAPagar)

                            costoTotalProductoDivididoEnElPunto = costototalDecimales.split(".")
                            longitudCostoTotal = len(str(costoTotalProductoDivididoEnElPunto[0]))
                            longitudCostoTotal = int(longitudCostoTotal)

                                
                            caracteresProducto = len(nombreTratamiento)

                            if longitudCostoTotal == 2:
                                espacio = 38
                            if longitudCostoTotal == 2:
                                espacio = 37
                            elif longitudCostoTotal == 3:
                                espacio = 36
                            elif longitudCostoTotal == 4:
                                espacio = 35
                            elif longitudCostoTotal == 5:
                                espacio = 34
                            elif longitudCostoTotal == 6:
                                espacio = 33
                            numeroEspacios = espacio - int(caracteresProducto)
                            
                            espaciosTicket = ""
                            for x in range(numeroEspacios):
                                espacioMini = " "
                                espaciosTicket = espaciosTicket + espacioMini
                            c.EscribirTexto("1 x "+nombreTratamiento+espaciosTicket+str(costototalDecimales)+"\n")


                            
                            c.EscribirTexto("\n")
                            c.EscribirTexto("\n")
                            
                            if descuento == "SinDescuento":
                                c.EstablecerTamañoFuente(2, 2)
                                c.EstablecerAlineacion(Conector.ALINEACION_DERECHA)
                                c.EscribirTexto("TOTAL:  $"+str(costoTotalAPagar)+"\n")
                            else:
                                intDescuento = int(descuento)
                                consultaDescuentos = Descuentos.objects.filter(porcentaje = intDescuento)
                                for datoDescuento in consultaDescuentos:
                                    nombreDescuento = datoDescuento.nombre_descuento
                                    porcentajeDescuento = datoDescuento.porcentaje

                                porcentajePagado = 100 - porcentajeDescuento #85
                                totalSinDescuento1 = 100 * float(costoTotalAPagar)
                                totalSinDescuento2 = totalSinDescuento1/porcentajePagado
                                totalSinDescuento2 = round(totalSinDescuento2)

                                primerMulti = porcentajeDescuento * float(totalSinDescuento2)
                                primerDivision = primerMulti/100
                                resultadoDescuento = round(primerDivision)
                                
                                costoTotalAPagarConDescuento = totalSinDescuento2 - resultadoDescuento

                                c.EstablecerTamañoFuente(1, 1)
                                c.EstablecerAlineacion(Conector.ALINEACION_DERECHA)
                                c.EscribirTexto("Subtotal:  $"+str(totalSinDescuento2)+"\n")
                                c.EscribirTexto("Descuento:  $"+str(resultadoDescuento)+"\n")
                                c.EstablecerTamañoFuente(2, 2)
                                c.EscribirTexto("TOTAL:  $"+str(costoTotalAPagarConDescuento)+"\n")
                                c.EstablecerTamañoFuente(1, 1)
                                c.EscribirTexto("Descuento aplicado: -"+str(porcentajeDescuento)+"%- "+str(nombreDescuento)+"\n")

                            c.EscribirTexto("\n")
                            c.EstablecerEnfatizado(True)
                            c.EstablecerTamañoFuente(1, 1)
                            c.EscribirTexto("========== IVA incluido en el precio ==========\n")
                            c.EscribirTexto("\n")
                            c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                            c.TextoSegunPaginaDeCodigos(2, "cp850", "INFORMACION DE PAGO.\n")
                            c.EstablecerEnfatizado(False)
                            c.EscribirTexto("\n")
                            if esConEfectivo:
                                c.EscribirTexto("Pago en efectivo.\n")
                            elif esConTarjeta:
                                c.EscribirTexto("Pago con "+str(tipo_tarjeta)+".\n")
                                c.EscribirTexto("Referencia: "+referencia_tarjeta+".\n")
                            elif esConTransferencia:
                                c.EscribirTexto("Transferencia.\n")
                                c.EscribirTexto("Clave de rastreo: "+str(clave_transferencia)+".\n")
                            c.EscribirTexto("\n")
                            c.EstablecerEnfatizado(True)
                            c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                            c.TextoSegunPaginaDeCodigos(2, "cp850", "INFORMACIÓN DE CLIENTE.\n")

                            if nombreClienteTicket == "Momentaneo":
                                c.EstablecerEnfatizado(False)
                                c.EscribirTexto("Cliente momentaneo.\n")
                            else:
                                c.EstablecerEnfatizado(False)
                                c.EscribirTexto("ID:"+str(idCienteTicket)+" - "+nombreClienteTicket+".\n")
                            c.EscribirTexto("=========== Gracias por su compra!! ===========\n")
                            c.EstablecerTamañoFuente(2, 2)
                            c.EstablecerEnfatizado(True)
                            c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                            if contadorTickets == 1:
                                c.EscribirTexto("\n")
                                c.EscribirTexto("COPIA TIENDA.\n")
                                c.EscribirTexto("\n")
                                c.EstablecerTamañoFuente(1, 1)
                                c.EscribirTexto("________________________________________________\n")
                                c.EscribirTexto("Firma de cliente.\n")
                            else:
                                c.EscribirTexto("\n")
                                c.EscribirTexto("COPIA CLIENTE.\n")
                            c.EscribirTexto("\n")
                            c.EstablecerTamañoFuente(1, 1)
                            

                            c.Feed(1)
                            c.Corte(1)
                            #c.abrirCajon()
                            c.Pulso(48, 60, 120)
                            print("Imprimiendo...")
                            # Recuerda cambiar por el nombre de tu impresora
                            respuesta = c.imprimirEn("POS80 Printer")
                            if respuesta == True:
                                print("Impresión correcta")
                            else:
                                print(f"Error. El mensaje es: {respuesta}")

                        try:
                            tokenTelegram = keysBotCostabella.tokenBotCostabellaCitas
                            botCostabella = telepot.Bot(tokenTelegram)

                            idGrupoTelegram = keysBotCostabella.idGrupo
                            
                            mensaje = "\U0001F4C6 CITA VENDIDA \U0001F4C6 \n El cliente "+nombreClienteTicket+" acudió y pago la cita #"+str(idCita)+" el día "+hoyFormato+" a las "+str(horaVenta)+" hrs en la sucursal "+nombreSucursal+"\n Servicio/Tratamiento:\n"+nombreTratamiento
                            botCostabella.sendMessage(idGrupoTelegram,mensaje)
                        except:
                            print("An exception occurred")

                        return redirect("/ventas/")

                        

                

                
                


            


        
        
    else:
        return render(request,"1 Login/login.html")



def paquetesPorCliente(request):

    if "idSesion" in request.session:

        # Variables de sesión
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']
        idPerfil = idEmpleado
        idConfig = idEmpleado
        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
        #notificacionRentas
        notificacionRenta = notificacionRentas(request)
        #notificacionCitas
        notificacionCita = notificacionCitas(request)

        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)

        if request.method == "POST":
            sucursalPromos = request.POST["sucursalPromos"]
            datosSucursal = Sucursales.objects.filter(id_sucursal = sucursalPromos)
            for dato in datosSucursal:
                nombreSucursal = dato.nombre

            paquetesActivos = []
            paquetesEfectuados = []

            consultaTratamientos = TratamientosClientes.objects.all()

            for tratamiento in consultaTratamientos:
                
                idTratamientoCliente = tratamiento.id_tratamiento_cliente
                sesiones = tratamiento.num_sesiones
                sesionesPendientes = tratamiento.sesionesPendientes
                sesionesCanjeadas = tratamiento.sesionesCanjeadas
                idCliente = tratamiento.cliente_id
                paqueteTratamiento = tratamiento.paquete_tratamiento_id

                consultaCliente = Clientes.objects.filter(id_cliente = idCliente)
                for datoCliente in consultaCliente:
                    nombreCliente = datoCliente.nombre_cliente
                    apellidoCliente = datoCliente.apellidoPaterno_cliente

                nombreCompletoCliente = nombreCliente + " " + apellidoCliente
                
                consultaPaqueteTratamiento = PaquetesPromocionTratamientos.objects.filter(id_paquete_tratamiento = paqueteTratamiento)
                for datoPaquete in consultaPaqueteTratamiento:
                    idTratamiento = datoPaquete.tratamiento_id
                    nombrePromo = datoPaquete.nombre_paquete

                    consultaTratamiento = Tratamientos.objects.filter(id_tratamiento = idTratamiento)
                    for datoTratamiento in consultaTratamiento:
                        idSucursal = datoTratamiento.sucursal_id
                        codigoTratamiento = datoTratamiento.codigo_tratamiento
                        tipoTratamiento = datoTratamiento.tipo_tratamiento
                        nombreTratamiento = datoTratamiento.nombre_tratamiento
                        costoTratamiento = datoTratamiento.costo_venta_tratamiento

                intIdSucursal = int(idSucursal)
                intSucursalPromos = int(sucursalPromos)


                #ConsultarPagos
                consultaPagoTratamiento = pagosPaquetesTratamientos.objects.filter(id_tratamiento_cliente_id__id_tratamiento_cliente = idTratamientoCliente)
                for datoPago in consultaPagoTratamiento:
                    totalAPagar = datoPago.total_pagar
                    totalAbonado = datoPago.total_abonado
                    totalRestante = datoPago.total_restante
                    estatusPago = datoPago.estatus_pago

                if intIdSucursal == intSucursalPromos:
                    

                    if sesiones == sesionesCanjeadas: #Paquete promoción efectuado
                        paquetesEfectuados.append([idTratamientoCliente, nombrePromo, codigoTratamiento, tipoTratamiento, nombreTratamiento, costoTratamiento,
                        sesiones, sesionesPendientes, sesionesCanjeadas, nombreCompletoCliente, totalAPagar, totalAbonado, totalRestante, estatusPago])
                    else:  #Activo
                        paquetesActivos.append([idTratamientoCliente, nombrePromo, codigoTratamiento, tipoTratamiento, nombreTratamiento, costoTratamiento,
                        sesiones, sesionesPendientes, sesionesCanjeadas, nombreCompletoCliente, totalAPagar, totalAbonado, totalRestante, estatusPago])
                
                
            
                

            return render(request, "22 Citas/paquetesPorCliente/verPaquetesClientes.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
                "notificacionRenta":notificacionRenta,"tipoUsuario":tipoUsuario, "sucursalPromos":sucursalPromos, "nombreSucursal":nombreSucursal, "paquetesActivos":paquetesActivos, "paquetesEfectuados":paquetesEfectuados, "notificacionCita":notificacionCita})


        else:           
            if tipoUsuario == "esAdmin":
                sucursales = Sucursales.objects.all()
                
                

                return render(request, "22 Citas/paquetesPorCliente/seleccionarSucursalPaqCliente.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
                "notificacionRenta":notificacionRenta, "sucursales":sucursales,"tipoUsuario":tipoUsuario, "notificacionCita":notificacionCita})
            else:
                consultaEmpleado = Empleados.objects.filter(id_empleado = idEmpleado)
                for datoEmpleado in consultaEmpleado:
                    sucursalEmpleado = datoEmpleado.id_sucursal_id
                sucursales = Sucursales.objects.filter(id_sucursal = sucursalEmpleado)
                
                

                

                return render(request, "22 Citas/paquetesPorCliente/seleccionarSucursalPaqCliente.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
                "notificacionRenta":notificacionRenta, "sucursales":sucursales,"tipoUsuario":tipoUsuario, "notificacionCita":notificacionCita})
        
    else:
        return render(request,"1 Login/login.html")




def historialTratamientoCliente(request):

    if "idSesion" in request.session:

        # Variables de sesión
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']
        idPerfil = idEmpleado
        idConfig = idEmpleado
        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
        #notificacionRentas
        notificacionRenta = notificacionRentas(request)
        #notificacionCitas
        notificacionCita = notificacionCitas(request)
        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)

        if request.method == "POST":

            idTratamientoCliente = request.POST["idTratamientoCliente"]

            datosView = []

            consultaTratamiento = TratamientosClientes.objects.filter(id_tratamiento_cliente = idTratamientoCliente)

            for datoTratamientoCliente in consultaTratamiento:
                idTratamientoCliente = datoTratamientoCliente.id_tratamiento_cliente
                sesionesPendientes = datoTratamientoCliente.sesionesPendientes
                sesionesCanjeadas = datoTratamientoCliente.sesionesCanjeadas
                idCliente = datoTratamientoCliente.cliente_id
                paqueteTratamiento = datoTratamientoCliente.paquete_tratamiento_id

            #Datos del cliente
            consultaCliente = Clientes.objects.filter(id_cliente = idCliente)
            for datoCliente in consultaCliente:
                nombreCliente = datoCliente.nombre_cliente
                apellidoCliente = datoCliente.apellidoPaterno_cliente

            nombreCompletoCliente = nombreCliente + " "+apellidoCliente

            #Datos de paquete
            consultaPaqueteTratamiento = PaquetesPromocionTratamientos.objects.filter(id_paquete_tratamiento = paqueteTratamiento)
            for datoPaqueteTratamiento in consultaPaqueteTratamiento:
                sesionesTotales = datoPaqueteTratamiento.numero_sesiones
                nombrePaquete = datoPaqueteTratamiento.nombre_paquete
                precioPaquete = datoPaqueteTratamiento.precio_por_paquete

                idTratamiento = datoPaqueteTratamiento.tratamiento_id

            #Datos de tratamiento
            consultaTratamiento = Tratamientos.objects.filter(id_tratamiento = idTratamiento)
            for datoTratamiento in consultaTratamiento:
                codigoTratamiento = datoTratamiento.codigo_tratamiento
                nombreTratamiento = datoTratamiento.nombre_tratamiento
                costoVentaTratamiento = datoTratamiento.costo_venta_tratamiento
                tiempoMaximoTratamiento = datoTratamiento.tiempo_maximo

            #Datos de historial
            consultaHistorialDeCitasTratamientoCliente = HistorialTratamientosClientes.objects.filter(tratamiento_cliente_id__id_tratamiento_cliente = idTratamientoCliente)
            
            arrayHistorial = []
            for cita in consultaHistorialDeCitasTratamientoCliente:
                idHistorial = cita.id_historial_tratamiento
                sesionEfectuada = cita.sesion_efectuada
                fechaEfectuada = cita.fecha_efectuado

                arrayHistorial.append([idHistorial,sesionEfectuada,fechaEfectuada])


            if sesionesPendientes == 0:
                noEfectuada = "efectuada"
            else:
                noEfectuada = "noEfectuada"

            #Datos de pago
            consultaPagoTratamiento = pagosPaquetesTratamientos.objects.filter(id_tratamiento_cliente__id_tratamiento_cliente = idTratamientoCliente)
            for datoPago in consultaPagoTratamiento:
                totalAbonado = datoPago.total_abonado
                totalPendiente = datoPago.total_restante
                estatusPago = datoPago.estatus_pago


            datosView.append([nombrePaquete, sesionesTotales, precioPaquete,nombreCompletoCliente, sesionesPendientes, sesionesCanjeadas,codigoTratamiento,
            nombreTratamiento, costoVentaTratamiento, tiempoMaximoTratamiento, arrayHistorial, noEfectuada, idTratamientoCliente, totalAbonado, totalPendiente, estatusPago])
                


            #Fecha limite para agendar 45 dias despues del día de hoy
            today = date.today()
            fechaLimite = today + timedelta(days=45)
            fechaLimite = fechaLimite.strftime("%Y-%m-%d")

            #citas entre el dia de hoy y la fecha limite
            arregloHoras45Posiciones = []
            arreglo45Fechas = []
            
            contador = 0
            for x in range(45):
                contador = contador + 1
                sinCitasPendientes = True
                if contador == 1:
                    sinCitasPendientes = False
                    consultaCitasDelDia = Citas.objects.filter(fecha_pactada = today, estado_cita = "sinCanjear")
                    fechaHoy = today.strftime("%Y-%m-%d")
                    arreglo45Fechas.append(fechaHoy)
                else:
                    sinCitasPendientes = False
                    nuevoContador = contador - 1
                    fechita = today + timedelta(days=nuevoContador)
                    consultaCitasDelDia = Citas.objects.filter(fecha_pactada = fechita, estado_cita = "sinCanjear")
                    fechaOtroDia = fechita.strftime("%Y-%m-%d")
                    arreglo45Fechas.append(fechaOtroDia)
                
                arregloHoras = ["09:00 AM","10:00 AM","11:00 AM","12:00 PM","13:00 PM","14:00 PM","15:00 PM","16:00 PM","17:00 PM","18:00 PM"]
                for cita in consultaCitasDelDia:
                    horaProgramada = cita.hora_pctada

                    if horaProgramada in arregloHoras:
                        duracion = cita.duracionCitaMinutos
                        if duracion > 60:
                            indiceAQuitar = arregloHoras.index(horaProgramada)
                            indiceAQuitarTambien = indiceAQuitar+1
                            if  indiceAQuitarTambien == 10:
                                arregloHoras.remove(horaProgramada)
                            else:
                                horaTambienAQuitar = arregloHoras[indiceAQuitarTambien]
                                arregloHoras.remove(horaProgramada) 
                                arregloHoras.remove(horaTambienAQuitar) 
                        else:
                            arregloHoras.remove(horaProgramada) 
                    
                arregloHoras45Posiciones.append(arregloHoras)
            

            
            consultaPrimerDia = Citas.objects.filter(fecha_pactada = today, estado_cita = "sinCanjear")
            arregloHoras2 = ["09:00 AM","10:00 AM","11:00 AM","12:00 PM","13:00 PM","14:00 PM","15:00 PM","16:00 PM","17:00 PM","18:00 PM"]
            for cita in consultaPrimerDia:
                horaProgramada = cita.hora_pctada

                if horaProgramada in arregloHoras2:
                    duracion = cita.duracionCitaMinutos

                    if duracion > 60:
                        indiceAQuitar = arregloHoras2.index(horaProgramada)
                        indiceAQuitarTambien = indiceAQuitar+1

                        if  indiceAQuitarTambien == 10:
                            arregloHoras2.remove(horaProgramada)
                        else:

                            horaTambienAQuitar = arregloHoras2[indiceAQuitarTambien]
                            arregloHoras2.remove(horaProgramada) 
                            arregloHoras2.remove(horaTambienAQuitar) 
                    else:
                        arregloHoras2.remove(horaProgramada) 


            listaZipFechaHora = zip(arreglo45Fechas,arregloHoras45Posiciones)


            return render(request, "22 Citas/paquetesPorCliente/historialTratamientoCliente.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, 
                "notificacionRenta":notificacionRenta,"tipoUsuario":tipoUsuario, "datosView":datosView, "listaZipFechaHora":listaZipFechaHora, "fechaLimite":fechaLimite, "sinCitasPendientes":sinCitasPendientes, "arregloHoras2":arregloHoras2, "notificacionCita":notificacionCita})


        
        
    else:
        return render(request,"1 Login/login.html")



def guardarCitaSesion(request):

    if "idSesion" in request.session:

        idEmpleado = request.session['idSesion']

        if request.method == "POST":
            idTratamientoCliente = request.POST['idTratamientoCliente']

            consultaTratamientoCliente = TratamientosClientes.objects.filter(id_tratamiento_cliente = idTratamientoCliente)

            for datoTratamientoCliente in consultaTratamientoCliente:
                cliente = datoTratamientoCliente.cliente_id
                paqueteTratamiento = datoTratamientoCliente.paquete_tratamiento_id
                sesionesCanjeadas = datoTratamientoCliente.sesionesCanjeadas

            proximaCita = int(sesionesCanjeadas) + 1
           

            #Sacar sucursal de tratamiento
            consultaPaqueteTratamiento = PaquetesPromocionTratamientos.objects.filter(id_paquete_tratamiento = paqueteTratamiento)
            for datoPaqueteTratamiento in consultaPaqueteTratamiento:
                idTratamiento = datoPaqueteTratamiento.tratamiento_id
            
            consultaTratamiento = Tratamientos.objects.filter(id_tratamiento = idTratamiento)
            for datoTratamiento in consultaTratamiento:
                sucursal = datoTratamiento.sucursal_id
                duracionMaxima = datoTratamiento.tiempo_maximo



            empleadoRealizo = idEmpleado

            #seleccion
            paqueteTratamientoSeleccionado = paqueteTratamiento

            tipoDeCita = ""
            idServTratPaq = 0
            duracion = 0


            tipoDeCita = "PaqueteTratamiento"
            idServTratPaq = int(paqueteTratamientoSeleccionado)

            duracion = float(duracionMaxima)
            paqueteTratamiento = True


            fechaPactada = request.POST['fechaAgendar']
            horaCita = request.POST['horarioCita']
            estadoCita = "sinCanjear"
            citaVendida = "No"

            comentarios = "Sesión #"+str(proximaCita)+ " del tratamiento."

            registroCita = Citas(cliente = Clientes.objects.get(id_cliente = cliente),
            sucursal = Sucursales.objects.get(id_sucursal = sucursal),
            empleado_realizo = Empleados.objects.get(id_empleado = empleadoRealizo),
            tipo_cita = tipoDeCita,
            id_serv_trat_paq = idServTratPaq,
            fecha_pactada = fechaPactada,
            hora_pctada = horaCita,
            estado_cita = estadoCita,
            cita_vendida = citaVendida,
            comentarios = comentarios,
            duracionCitaMinutos = duracion)

            registroCita.save()

            if registroCita:
                consultaTratamientosClientes = TratamientosClientes.objects.all()
                for trat in consultaTratamientosClientes:
                    ultimoRegistroTratamientoCliente = trat.id_tratamiento_cliente
                
                consultaCitas = Citas.objects.all()
                for cita in consultaCitas:
                    ultimoRegistroCita = cita.id_cita

                #Guardar cita y tratamiento juntos
                guardarCitaConTratamiento = citasTratamientos(cita = Citas.objects.get(id_cita = ultimoRegistroCita), 
                idTratamientoCliente = TratamientosClientes.objects.get(id_tratamiento_cliente = idTratamientoCliente))
                
                guardarCitaConTratamiento.save()

            
                request.session["citaGuardada"] = "La cita se ha guardado correctamente!"
                return redirect("/agendarCita/")
                        
                        
            else:
                request.session["citaNoGuardada"] = "La cita se ha guardado correctamente!"
                return redirect("/agendarCita/")

            
        
    else:
        return render(request,"1 Login/login.html")



def notificacionRentasDeHoy(request):
     #Si ya existe una sesion al teclear login...
    if "idSesion" in request.session:
        idEmpleado = request.session['idSesion']
        tipoUsuario = request.session['tipoUsuario']
        datosEmpleado = Empleados.objects.filter(id_empleado =idEmpleado)
        for empleado in datosEmpleado:
            sucursal = empleado.id_sucursal_id
            nombreEmpleado = empleado.nombres
        
        datosSucursal = Sucursales.objects.filter(id_sucursal = sucursal)
        for dato in datosSucursal:
            nombreSucursalita = dato.nombre
        
        fechaHoy = date.today()
        rentas = Rentas.objects.filter(Q(fecha_entrega_renta =  fechaHoy) | Q(fecha_limite_devolucion = fechaHoy))

        rentasNotificacion =[]
        mensajeRentas = ""
        for renta in rentas:
            idRenta = renta.id_renta
            #cliente
            cliente = renta.cliente_id
            consultaCliente = Clientes.objects.filter(id_cliente = cliente)
            for datoCliente in consultaCliente:
                nombreCliente = datoCliente.nombre_cliente
                apellidoCliente = datoCliente.apellidoPaterno_cliente
            nombreCompletoCliente = nombreCliente+" "+apellidoCliente

            #Vestido y sucursal
            vestido = renta.codigos_productos_renta
            consultaVestido = ProductosRenta.objects.filter(codigo_producto = vestido)
            for datoVestido in consultaVestido:
                codigoVestido = datoVestido.codigo_producto
                nombreVestido = datoVestido.nombre_producto
                sucursalVestido = datoVestido.sucursal_id
                consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursalVestido)
                for datoSucursal in consultaSucursal:
                    nombreSucursal = datoSucursal.nombre
            
            #Estado de renta
            estado = renta.estado_devolucion

            

    
            
            rentasNotificacion.append([idRenta,nombreSucursal,nombreCompletoCliente, codigoVestido, nombreVestido, estado])  

            
            contador = 0
            for renta in rentasNotificacion:
                idRenta = renta[0]
                nombreSucursal = renta[1]
                nombreCompletoCliente = renta[2]
                codigoVestido = renta[3]
                nombreVestido = renta[4]
                estado = renta[5]

                contador = contador + 1
                if contador == 1:
                    if estado == "A": #Apartado a
                        mensajeRentas = "\U0001f457 Renta #"+str(idRenta)+" en "+str(nombreSucursal)+" a "+(nombreCompletoCliente) +" -- \U0001F91D Entrega de vestido "+str(codigoVestido) + " "+nombreVestido+"."
                    elif estado == "P": #Pendiente de devolver
                        mensajeRentas = "\U0001f457 Renta #"+str(idRenta)+" en "+str(nombreSucursal)+" a "+(nombreCompletoCliente) +" -- \U0001F4CC Devolución de vestido "+str(codigoVestido) + " "+nombreVestido+"."
                else:
                    if estado == "A": #Apartado a
                        mensajeRentas = mensajeRentas+", \n"+"\U0001f457 Renta #"+str(idRenta)+" en "+str(nombreSucursal)+" a "+(nombreCompletoCliente) +" -- \U0001F91D Entrega de vestido "+str(codigoVestido) + " "+nombreVestido+"."
                    elif estado == "P":#Pendiente de devolver
                        mensajeRentas = mensajeRentas +", \n" +"\U0001f457 Renta #"+str(idRenta)+" en "+str(nombreSucursal)+" a "+(nombreCompletoCliente) +" -- \U0001F4CC Devolución de vestido "+str(codigoVestido) + " "+nombreVestido+"."
        try:
            tokenTelegram = keysBotCostabella.tokenBotCostabellaRentas
            botCostabella = telepot.Bot(tokenTelegram)

            idGrupoTelegram = keysBotCostabella.idGrupo
            
            mensaje = "Hola \U0001F44B! \nLa empleada "+nombreEmpleado+" ha generado un aviso de rentas del día!.\nEste es el itinerario de hoy:\n"+mensajeRentas
            botCostabella.sendMessage(idGrupoTelegram,mensaje)
        except:
            print("An exception occurred")

        request.session["rentasEnviadas"] = "Se ha notificado a los administradores sobre las rentas del día!"
        return redirect("/rentas/")
        
        
        
              
        
    # Si no hay una sesion iniciada..
    else:
        return render(request, "1 Login/login.html")


def notificacionCitasDeHoy(request):
    
     #Si ya existe una sesion al teclear login...
    if "idSesion" in request.session:
        idEmpleado = request.session['idSesion']
        tipoUsuario = request.session['tipoUsuario']
        datosEmpleado = Empleados.objects.filter(id_empleado =idEmpleado)
        for empleado in datosEmpleado:
            sucursal = empleado.id_sucursal_id
            nombreEmpleado = empleado.nombres
        
        datosSucursal = Sucursales.objects.filter(id_sucursal = sucursal)
        for dato in datosSucursal:
            nombreSucursalita = dato.nombre
        
        fechaHoy = date.today()
        citas = Citas.objects.filter(fecha_pactada = fechaHoy, estado_cita = "sinCanjear")

        citasNotificacion =[]
        mensajeCitas = ""
        for cita in citas:
            idCita = cita.id_cita
            #cliente
            cliente = cita.cliente_id
            consultaCliente = Clientes.objects.filter(id_cliente = cliente)
            for datoCliente in consultaCliente:
                nombreCliente = datoCliente.nombre_cliente
                apellidoCliente = datoCliente.apellidoPaterno_cliente
            nombreCompletoCliente = nombreCliente+" "+apellidoCliente
            #sucursal
            sucursal = cita.sucursal_id
            consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursal)
            for datoSucursal in consultaSucursal:
                nombreSucursal = datoSucursal.nombre

            

            tipoCita = cita.tipo_cita   #Tratamiento, PaqueteTratamiento, Servicio
            idServTratPaq = cita.id_serv_trat_paq
            certificadoServicio = cita.certificado_servicio
            if tipoCita == "Servicio":
                consultaServicio = Servicios.objects.filter(id_servicio = idServTratPaq)
                for datoServicio in consultaServicio:
                    tipoServicio = datoServicio.tipo_servicio
                    nombreServicio = datoServicio.nombre_servicio
                
                nombreServicioTratamientoPaqueteCita = tipoServicio +" "+nombreServicio
            elif tipoCita == "Tratamiento":
                consultaTratamiento = Servicios.objects.filter(id_tratamiento = idServTratPaq)
                for datoTratamiento in consultaTratamiento:
                    tipoTratamiento = datoTratamiento.tipo_tratamiento
                    nombreTratamiento = datoTratamiento.nombre_tratamiento
                nombreServicioTratamientoPaqueteCita = tipoTratamiento +" "+nombreTratamiento
            elif tipoCita == "PaqueteTratamiento":
                consultaPaqueteTratamiento = PaquetesPromocionTratamientos.objects.filter(id_paquete_tratamiento = idServTratPaq)
                for datoPromo in consultaPaqueteTratamiento:
                    nombrePaquete = datoPromo.nombre_paquete
                    sesionesPaquete = datoPromo.numero_sesiones
                nombreServicioTratamientoPaqueteCita = nombrePaquete + " "+str(sesionesPaquete)+" sesiones"

            elif tipoCita == "ServicioCertificado":
                servCertSeparado = certificadoServicio.split("-")
                idCertificado = servCertSeparado[0]
                idServicioCertificado = servCertSeparado[1]
                idCertificadoInt = int(idCertificado)
                idServicioCertificadoInt = int(idServicioCertificado)

                #Consulta de certificado
                consultaCertificado = CertificadosProgramados.objects.filter(id_certificado = idCertificadoInt)
                for datoCertificado in consultaCertificado:
                    codigoCertificado = datoCertificado.codigo_certificado

                #Consulta de servicio certificado
                consultaServicioCertificado = ServiciosCertificados.objects.filter(id_servicio_certificado = idServicioCertificadoInt)
                for datoServicio in consultaServicioCertificado:
                    nombreServicioCertificado = datoServicio.nombre
                nombreServicioTratamientoPaqueteCita = codigoCertificado + " - "+nombreServicioCertificado
            

            
            
            horaPactada = cita.hora_pctada
            duracion = cita.duracionCitaMinutos
            duracion = int(duracion)
    
            
            citasNotificacion.append([idCita,nombreSucursal,horaPactada,nombreCompletoCliente,nombreServicioTratamientoPaqueteCita,duracion])  

            contador = 0
            for cita in citasNotificacion:
                idCita = cita[0]
                nombreSucursal = cita[1]
                horaPactada = cita[2]
                nombreCompletoCliente = cita[3]
                nombreServicioTratamientoPaqueteCita = cita[4]
                duracion = cita[5]

                contador = contador + 1
                if contador == 1:
                    mensajeCitas = "\U0001F4C5 Cita #"+str(idCita)+" en "+str(nombreSucursal)+" a "+(nombreCompletoCliente) +" a las "+str(horaPactada)+" - "+str(nombreServicioTratamientoPaqueteCita)+" de "+str(duracion)+" min"
                else:
                    mensajeCitas = mensajeCitas + ", \n"+"\U0001F4C5 Cita #"+str(idCita)+" en "+str(nombreSucursal)+" a "+(nombreCompletoCliente) +" a las "+str(horaPactada)+" - "+str(nombreServicioTratamientoPaqueteCita)+" de "+str(duracion)+" min"
        
        try:
            tokenTelegram = keysBotCostabella.tokenBotCostabellaCitas
            botCostabella = telepot.Bot(tokenTelegram)

            idGrupoTelegram = keysBotCostabella.idGrupo
            
            mensaje = "Hola \U0001F44B! \nLa empleada "+nombreEmpleado+" ha generado un aviso de citas del día!.\nEste es el itinerario de hoy:\n"+mensajeCitas
            botCostabella.sendMessage(idGrupoTelegram,mensaje)
        except:
            print("An exception occurred")

        request.session["citasEnviadas"] = "Se ha notificado a los administradores sobre las citas del día!"
        return redirect("/citas/")
        
        
        
              
        
    # Si no hay una sesion iniciada..
    else:
        return render(request, "1 Login/login.html")


def imprimirCodigoBarras(request):

    #Si ya existe una sesion al teclear login...
    if "idSesion" in request.session:
        codigoProducto = request.POST['codigoProducto']
        cantidadEtiquetas = request.POST['cantidadEtiquetas']
        cantidadEtiquetas = int(cantidadEtiquetas)

        if "PV" in codigoProducto:
            #ImprimirEtiquetas
            fechaHoy = date.today()
            primerDigitoCodigo = codigoProducto[2]
            segundoDigitoCodigo = codigoProducto[3]
            tercerDigitoCodigo = codigoProducto[4]
            cuartoDigitoCodigo = codigoProducto[5]
            
            numeroCompletoCodigo = primerDigitoCodigo + segundoDigitoCodigo + tercerDigitoCodigo + cuartoDigitoCodigo
            codigoCompletoImprimir = str(numeroCompletoCodigo)

            #Consulta
            consultaProducto = ProductosVenta.objects.filter(codigo_producto = codigoProducto)
            for datoProducto in consultaProducto:
                costoVenta = datoProducto.costo_venta
                costoVentaCredito = datoProducto.costo_venta_a_credito
                nombreVenta = datoProducto.nombre_producto
            
            print("El nombre del producto es"+nombreVenta)
            for x in range(cantidadEtiquetas):
                label = ("^XA~TA000~JSN^LT0^MNW^MTD^PON^PMN^LH0,0^JMA^PR2,2~SD30^JUS^LRN^CI0^XZ^XA^MMT^PW406^LL0203^LS0^FO0,160^GFA,00768,00768,00012,:Z64:eJxjYKAnYD/i3n5/zsfzIDb/u/f3z99tf98AZLOlJd69e/d44gEgm+/d+//n/v17fACs3vf+/TvmBw+A1T/uP7//8UMQm4EtgfGADAMjmM33gPGBHQMzmM3iABLjb4CKA9l89PCXvPzH57bHIWz+/7u/J4J9xcAge/9CeeEdiDjf/d2/baFs+fufy3nPQdX3/37/E6oeCNgZGOFsZgZuOJuB8TzCPsZz1PbBSAUAlzNF0w==:6D8B^FO128,128^GFA,01920,01920,00020,:Z64:eJztkT1Lw0Ach+8uoRdDKR2rtE2wy9mpHQotCCp+gRQaOwmCq0OkVh0KnukgBPETOJx1CefiR2jtUOjuKqGCrgFB3Opd2sGXDuKiQ39wy3MP9/L7AzDPPH8dNINBaFnJqlpNfoRUmvSruj5dv4o5g1nfkc4/XZvEXSOo285LL2xhGAqSIGTIONM54yPWSbi+YKWnyttuj0ILZrOLvczgQrCcu3Kba1PE0VJZO2Wu/JFyVgnWFFqyrXR5sR/uKYIhl7A8onnP14h2x0jk4eLgVaH3di3lpPpBS3oKKnodBDj3SaFsXvnSw4nG5aMCm/XDVaeQ3uhieZ63fE494XHCzBiNmsTpRqY3hra9fRzsP2x2VcnK1wttFwmvMrzxkavLO8JnA8dw0z4yjHF4ghNRByMd6cjjohgGdF2TCA5ALL5j2zUAuwDE05HnAqSZnPjR5DQy9TAMtqoHkaA6Uw/w6b547qRuddL2D+c2y5tnnv+bd/8tZhU=:C773^FO8,97^GB391,0,2^FS^BY2,3,61^FT295,29^BCI,,Y,N^FD>:PV>5"+codigoCompletoImprimir+"^FS^FT398,178^A0I,14,14^FH\^FD"+str(fechaHoy)+"^FS^FT236,119^A0I,14,14^FH\^FD"+nombreVenta+"^FS^FT237,143^A0I,11,12^FH\^FDNombre producto:^FS^FT376,143^A0I,17,16^FH\^FDCosto de venta^FS^FT376,110^A0I,28,28^FH\^FD$ "+str(costoVenta)+" ^FS^PQ1,0,1,Y^XZ")                        
                        
                z = Zebra('ZDesigner GC420d')
                z.output(label)
        
            return redirect("/inventarioProductos/")
        elif "PG" in codigoProducto:
            #ImprimirEtiquetas
            fechaHoy = date.today()
            primerDigitoCodigo = codigoProducto[2]
            segundoDigitoCodigo = codigoProducto[3]
            tercerDigitoCodigo = codigoProducto[4]
            cuartoDigitoCodigo = codigoProducto[5]
            
            numeroCompletoCodigo = primerDigitoCodigo + segundoDigitoCodigo + tercerDigitoCodigo + cuartoDigitoCodigo
            codigoCompletoImprimir = str(numeroCompletoCodigo)

            #Consulta
            consultaProducto = ProductosGasto.objects.filter(codigo_producto = codigoProducto)
            for datoProducto in consultaProducto:
                nombreProductoGasto = datoProducto.nombre_producto

            for x in range(cantidadEtiquetas):
                label = ("^XA~TA000~JSN^LT0^MNW^MTD^PON^PMN^LH0,0^JMA^PR2,2~SD30^JUS^LRN^CI0^XZ^XA^MMT^PW406^LL0203^LS0^FO0,160^GFA,00768,00768,00012,:Z64:eJxjYKAnYD/i3n5/zsfzIDb/u/f3z99tf98AZLOlJd69e/d44gEgm+/d+//n/v17fACs3vf+/TvmBw+A1T/uP7//8UMQm4EtgfGADAMjmM33gPGBHQMzmM3iABLjb4CKA9l89PCXvPzH57bHIWz+/7u/J4J9xcAge/9CeeEdiDjf/d2/baFs+fufy3nPQdX3/37/E6oeCNgZGOFsZgZuOJuB8TzCPsZz1PbBSAUAlzNF0w==:6D8B^FO128,128^GFA,01920,01920,00020,:Z64:eJztkT1Lw0Ach+8uoRdDKR2rtE2wy9mpHQotCCp+gRQaOwmCq0OkVh0KnukgBPETOJx1CefiR2jtUOjuKqGCrgFB3Opd2sGXDuKiQ39wy3MP9/L7AzDPPH8dNINBaFnJqlpNfoRUmvSruj5dv4o5g1nfkc4/XZvEXSOo285LL2xhGAqSIGTIONM54yPWSbi+YKWnyttuj0ILZrOLvczgQrCcu3Kba1PE0VJZO2Wu/JFyVgnWFFqyrXR5sR/uKYIhl7A8onnP14h2x0jk4eLgVaH3di3lpPpBS3oKKnodBDj3SaFsXvnSw4nG5aMCm/XDVaeQ3uhieZ63fE494XHCzBiNmsTpRqY3hra9fRzsP2x2VcnK1wttFwmvMrzxkavLO8JnA8dw0z4yjHF4ghNRByMd6cjjohgGdF2TCA5ALL5j2zUAuwDE05HnAqSZnPjR5DQy9TAMtqoHkaA6Uw/w6b547qRuddL2D+c2y5tnnv+bd/8tZhU=:C773^FO8,97^GB391,0,2^FS^BY2,3,61^FT295,29^BCI,,Y,N^FD>:PG>5"+codigoCompletoImprimir+"^FS^FT398,178^A0I,14,14^FH\^FD"+str(fechaHoy)+"^FS^FT267,120^A0I,17,16^FH\^FD"+nombreProductoGasto+"^FS^PQ1,0,1,Y^XZ")
                z = Zebra('ZDesigner GC420d')
                z.output(label)
        
            return redirect("/inventarioProductos/")

        elif "PR" in codigoProducto:
            #ImprimirEtiquetas
            fechaHoy = date.today()
            primerDigitoCodigo = codigoProducto[2]
            segundoDigitoCodigo = codigoProducto[3]
            tercerDigitoCodigo = codigoProducto[4]
            cuartoDigitoCodigo = codigoProducto[5]
            
            numeroCompletoCodigo = primerDigitoCodigo + segundoDigitoCodigo + tercerDigitoCodigo + cuartoDigitoCodigo
            codigoCompletoImprimir = str(numeroCompletoCodigo)

            #Consulta
            consultaProducto = ProductosRenta.objects.filter(codigo_producto = codigoProducto)
            for datoProducto in consultaProducto:
                costoRenta = datoProducto.costo_renta
                nombreRenta = datoProducto.nombre_producto

            for x in range(cantidadEtiquetas):
                label = ("^XA~TA000~JSN^LT0^MNW^MTD^PON^PMN^LH0,0^JMA^PR2,2~SD30^JUS^LRN^CI0^XZ^XA^MMT^PW406^LL0203^LS0^FO0,160^GFA,00768,00768,00012,:Z64:eJxjYKAnYD/i3n5/zsfzIDb/u/f3z99tf98AZLOlJd69e/d44gEgm+/d+//n/v17fACs3vf+/TvmBw+A1T/uP7//8UMQm4EtgfGADAMjmM33gPGBHQMzmM3iABLjb4CKA9l89PCXvPzH57bHIWz+/7u/J4J9xcAge/9CeeEdiDjf/d2/baFs+fufy3nPQdX3/37/E6oeCNgZGOFsZgZuOJuB8TzCPsZz1PbBSAUAlzNF0w==:6D8B^FO128,128^GFA,01920,01920,00020,:Z64:eJztkT1Lw0Ach+8uoRdDKR2rtE2wy9mpHQotCCp+gRQaOwmCq0OkVh0KnukgBPETOJx1CefiR2jtUOjuKqGCrgFB3Opd2sGXDuKiQ39wy3MP9/L7AzDPPH8dNINBaFnJqlpNfoRUmvSruj5dv4o5g1nfkc4/XZvEXSOo285LL2xhGAqSIGTIONM54yPWSbi+YKWnyttuj0ILZrOLvczgQrCcu3Kba1PE0VJZO2Wu/JFyVgnWFFqyrXR5sR/uKYIhl7A8onnP14h2x0jk4eLgVaH3di3lpPpBS3oKKnodBDj3SaFsXvnSw4nG5aMCm/XDVaeQ3uhieZ63fE494XHCzBiNmsTpRqY3hra9fRzsP2x2VcnK1wttFwmvMrzxkavLO8JnA8dw0z4yjHF4ghNRByMd6cjjohgGdF2TCA5ALL5j2zUAuwDE05HnAqSZnPjR5DQy9TAMtqoHkaA6Uw/w6b547qRuddL2D+c2y5tnnv+bd/8tZhU=:C773^FO8,97^GB391,0,2^FS^BY2,3,61^FT295,29^BCI,,Y,N^FD>:PR>5"+codigoCompletoImprimir+"^FS^FT398,178^A0I,14,14^FH\^FD"+str(fechaHoy)+"^FS^FT236,119^A0I,14,14^FH\^FD"+nombreRenta+"^FS^FT237,143^A0I,11,12^FH\^FDNombre vestido:^FS^FT376,143^A0I,17,16^FH\^FDCosto de renta^FS^FT376,110^A0I,28,28^FH\^FD$ "+str(costoRenta)+" ^FS^PQ1,0,1,Y^XZ")                        
                z = Zebra('ZDesigner GC420d')
                z.output(label)
        
            return redirect("/inventarioProductos/")

        
        
        
        
              
        
    # Si no hay una sesion iniciada..
    else:
        return render(request, "1 Login/login.html")


def realizarCorteDeCaja(request):

    if "idSesion" in request.session:

       # Variables de sesión
        idEmpleado = request.session['idSesion']
        
        
        if request.method == "POST":
            
            idSucursal = request.POST["idSucursal"]
            ingresosPorVenta = request.POST["ingresosPorVenta"]
            ingresosManuales = request.POST["ingresosManuales"]
            retirosManuales = request.POST["retirosManuales"]
            montoTotalCorte = request.POST["montoTotalCorte"]

            ingresosPorVenta = float(ingresosPorVenta)
            ingresosManuales = float(ingresosManuales)
            retirosManuales = float(retirosManuales)
            montoTotalCorte = float(montoTotalCorte)
            
            fechaActual = datetime.today().strftime('%Y-%m-%d') #Requerido
            date = datetime.now()
            
            horaCorte = date.time().strftime("%H:%M") #"15:49"

            registroCorteDeCaja = CortesDeCaja(sucursal = Sucursales.objects.get(id_sucursal = idSucursal),
            fecha_corte = fechaActual, hora_corte = horaCorte, monto_ingresos_venta = ingresosPorVenta,
            monto_ingresos_manuales = ingresosManuales,
            monto_retiros_manuales = retirosManuales,
            monto_total_corte = montoTotalCorte,
            empleado_corte = Empleados.objects.get(id_empleado = idEmpleado))

            registroCorteDeCaja.save()

            if registroCorteDeCaja:
                
                #Consulta sucursal
                consultaSucursal = Sucursales.objects.filter(id_sucursal = idSucursal)
                for datoSucursal in consultaSucursal:
                    nombreSucursal = datoSucursal.nombre
                    telefonoSucursal = datoSucursal.telefono
                    direccionSucursal = datoSucursal.direccion

                #Consulta empleado
                consultaEmpleado = Empleados.objects.filter(id_empleado = idEmpleado)
                for datoEmpleado in consultaEmpleado:
                    nombreEmpleado = datoEmpleado.nombres
                    apellidoEmpleado = datoEmpleado.apellido_paterno

                nombreCompletoEmpleadoCorte = nombreEmpleado + " "+apellidoEmpleado
                
                #ULTIMO CORTE
                idUltimoCorte = 0
                cortesDeCajaTotales = CortesDeCaja.objects.all()
                for corte in cortesDeCajaTotales:
                    idUltimoCorte = corte.id_corte_caja

                try:
                    tokenTelegram = keysBotCostabella.tokenBotCostabella
                    botCostabella = telepot.Bot(tokenTelegram)

                    idGrupoTelegram = keysBotCostabella.idGrupo
                    
                    mensaje = "Hola \U0001F44B! \nLa empleada "+nombreCompletoEmpleadoCorte+" ha generado un corte de caja, por un monto de $ "+str(montoTotalCorte)+" MXN, en la sucursal de "+nombreSucursal+" a las "+str(horaCorte)+" hrs \U0001F9FE!\n"
                    botCostabella.sendMessage(idGrupoTelegram,mensaje)
                except:
                    print("An exception occurred")
                #Impresion de tickets
                    

                    

                    

                # Esto es para obtener las impresoras. No es obligatorio hacerlo siempre que se quiera imprimir
                impresoras = Conector.ConectorV3.obtenerImpresoras()
                print(f"Las impresoras son: {impresoras}")

                contadorTickets = 0
                for x in range(2):
                    contadorTickets = contadorTickets + 1
                    c = Conector.ConectorV3()
                    c.Iniciar()
                    c.Corte(1)
                    
                    c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                    # Recuerda que la imagen debe existir y debe ser legible para el plugin. Si no, comenta las líneas
                    c.CargarImagenLocalEImprimir("C:\\COSTABELLA\\sistemaCostabella\\static\\images\\anegragrande.png", 0, 216)
                    c.EscribirTexto("\n")
                    c.EstablecerTamañoFuente(1, 1)
                    c.EstablecerEnfatizado(True)
                    c.EscribirTexto("Sucursal: "+nombreSucursal+"\n")
                    c.EstablecerEnfatizado(False)
                    c.EscribirTexto("TEL: "+telefonoSucursal+"\n")
                    c.TextoSegunPaginaDeCodigos(2, "cp850", direccionSucursal+"\n")

                    c.EstablecerEnfatizado(True)
                    c.EscribirTexto("================================================\n")
                    c.EstablecerTamañoFuente(2, 2)
                    c.EscribirTexto("CORTE DE CAJA #"+str(idUltimoCorte)+"\n")
                    c.EstablecerEnfatizado(False)
                    c.EstablecerAlineacion(Conector.ALINEACION_IZQUIERDA)
                    c.EstablecerTamañoFuente(1, 1)
                    c.EscribirTexto("\n")
                    c.EscribirTexto(" "+str(fechaActual)+" - "+str(horaCorte)+" hrs.\n")
                    c.EscribirTexto("Realizado por: "+nombreCompletoEmpleadoCorte+".\n")
                    c.EscribirTexto("\n")
                    c.EscribirTexto("\n")
                    c.EstablecerEnfatizado(True)
                    c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                    c.EscribirTexto("Total ingresos por ventas $ "+str(ingresosPorVenta)+" MXN.\n")
                    c.EscribirTexto("\n")
                    c.EscribirTexto("Total ingresos manuales $ "+str(ingresosManuales)+" MXN.\n")
                    c.EscribirTexto("\n")
                    c.EscribirTexto("Total retiros manuales $ "+str(retirosManuales)+" MXN.\n")
                    c.EscribirTexto("\n")
                    c.EscribirTexto("Total en caja $ "+str(montoTotalCorte)+" MXN.\n")
                    c.EscribirTexto("\n")
                    c.EscribirTexto("Sucursal: "+nombreSucursal+"\n")
                    c.EstablecerEnfatizado(False)
                    



                    
                    c.EscribirTexto("\n")
                    c.EscribirTexto("\n")
                    
                    

                    c.EscribirTexto("\n")
                    c.EstablecerEnfatizado(True)
                    c.EstablecerTamañoFuente(1, 1)
                    c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                    c.EscribirTexto("======== Corte de caja realizado =======\n")
                    c.EstablecerTamañoFuente(2, 2)
                    c.EstablecerEnfatizado(True)
                    c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                    if contadorTickets == 1:
                        c.EscribirTexto("\n")
                        c.EscribirTexto("COPIA TIENDA.\n")
                    else:
                        c.EscribirTexto("\n")
                        c.EscribirTexto("COPIA TRABAJADOR.\n")
                    c.EscribirTexto("\n")
                    c.EstablecerTamañoFuente(1, 1)
                    

                    c.Feed(1)
                    c.Corte(1)
                    #c.abrirCajon()
                    c.Pulso(48, 60, 120)
                    print("Imprimiendo...")
                    # Recuerda cambiar por el nombre de tu impresora
                    respuesta = c.imprimirEn("POS80 Printer")
                    if respuesta == True:
                        print("Impresión correcta")
                    else:
                        print(f"Error. El mensaje es: {respuesta}")








                request.session["corteRealizado"] = "El corte de caja se afectuado adecuadamente!!"
                return redirect("/seleccionarSucursalMovimientosDia/")
    else:
        return render(request,"1 Login/login.html")

def seleccionarSucursalCortesDeCaja(request):

    if "idSesion" in request.session:

        # Variables de sesión
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        idPerfil = idEmpleado
        idConfig = idEmpleado
    
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']

        # Variable para Menu
        estaEnAltaEmpleado = True

        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
        
           #notificacionRentas
        notificacionRenta = notificacionRentas(request)

        #notificacionCitas
        notificacionCita = notificacionCitas(request)

        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)

        sucursales = []
        if tipoUsuario == "esAdmin":
        # retornar sucursales
            listsucursales = Sucursales.objects.all()
            for dato in listsucursales:
                idSucursal =dato.id_sucursal
                nombreSucursal = dato.nombre
                direccion = dato.direccion
                sucursales.append([idSucursal,nombreSucursal, direccion])

        else:
          
            empleado = Empleados.objects.filter(id_empleado =idEmpleado)
            for sucursal in empleado:
                idSucursal =sucursal.id_sucursal_id
                
            datoSucursal = Sucursales.objects.filter(id_sucursal = idSucursal)
            for dato in datoSucursal:
                nombreSucursal = dato.nombre
                direccion = dato.direccion
            sucursales.append([idSucursal, nombreSucursal, direccion])
        
        datosVendedor = Empleados.objects.filter(id_empleado =idEmpleado )
        
        if "corteRealizado" in request.session:
            corteRealizado = request.session["corteRealizado"]
            del request.session["corteRealizado"]
            return render(request, "8 Caja/seleccionarSucursalCortesDeCaja.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado,"estaEnAltaEmpleado":estaEnAltaEmpleado, "sucursales":sucursales,
                                                                            "datosVendedor":datosVendedor,"notificacionRenta":notificacionRenta,"notificacionCita":notificacionCita, "corteRealizado":corteRealizado})

        return render(request, "8 Caja/seleccionarSucursalCortesDeCaja.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado,"estaEnAltaEmpleado":estaEnAltaEmpleado, "sucursales":sucursales,
                                                                            "datosVendedor":datosVendedor,"notificacionRenta":notificacionRenta,"notificacionCita":notificacionCita})
    else:
        return render(request,"1 Login/login.html")
    
    


def cortesDeCaja(request):

    if "idSesion" in request.session:

       # Variables de sesión
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']
        idPerfil = idEmpleado
        idConfig = idEmpleado
       

        
        
        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
        
           #notificacionRentas
        notificacionRenta = notificacionRentas(request)

        #notificacionCitas
        notificacionCita = notificacionCitas(request)

        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)
        
        if request.method == "POST":

            idSucursal = request.POST["sucursal"]


            consultaSucursal = Sucursales.objects.filter(id_sucursal = idSucursal)
            for datosSucursal in consultaSucursal:
                nombreSucursal = datosSucursal.nombre

            arregloNombresDeEmpleados = []
            consultaCortesDeCaja = CortesDeCaja.objects.filter(sucursal_id__id_sucursal = idSucursal)
            for corteCaja in consultaCortesDeCaja:
                idEmpleado = corteCaja.empleado_corte_id

                consultaEmpleadoCorteDeCaja = Empleados.objects.filter(id_empleado = idEmpleado)

                for fila in consultaEmpleadoCorteDeCaja:
                    nombresEmpleado = fila.nombres
                    apellidoPaterno = fila.apellido_paterno
                nombreCompletoEmpleado = nombresEmpleado + " " + apellidoPaterno
                arregloNombresDeEmpleados.append(nombreCompletoEmpleado)
            





            listaZipeada = zip(consultaCortesDeCaja,arregloNombresDeEmpleados)


                

            return render(request, "8 Caja/cortesDeCaja.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "notificacionRenta":notificacionRenta,"idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado, "notificacionCita":notificacionCita, "nombreSucursal":nombreSucursal,
            "listaZipeada":listaZipeada})
    
    else:
        return render(request,"1 Login/login.html")
    


def agregarServicioCertificado(request):
    if "idSesion" in request.session:
     
        #Variables de sesión
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']
        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
        
        #notificacionRentas
        notificacionRenta = notificacionRentas(request)

        #notificacionCitas
        notificacionCita = notificacionCitas(request)

        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)

        #CERTIFICADOS
        ultimoCodigoCertificado = ""
        consultaServiciosCertificados =ServiciosCertificados.objects.all()

        if consultaServiciosCertificados:
            for servicio in consultaServiciosCertificados:
                ultimoCodigoCertificado = servicio.codigo_servocio
                ultimoCodigoCertificado = str(ultimoCodigoCertificado)
                splitCodigo = ultimoCodigoCertificado.split("-")
                intCodigo = int(splitCodigo[1])
                inCodigoNuevo = intCodigo+1
                ultimoCodigoCertificado = "SERV-"+str(inCodigoNuevo)
        else:
            ultimoCodigoCertificado = "SERV-1000"

        #Sucursales
        sucursales = Sucursales.objects.all()

        if request.method == "POST": #Si clic al botón..
            codigoServicioNuevo = request.POST['codigoServicioNuevo']
            nombreServicio = request.POST['nombreServicio']
            costoServicio = request.POST['costoServicio']
            descripcion = request.POST['descripcion']
            tiempo_minimo = request.POST['tiempoMinimo']  #Requerido
            tiempo_maximo= request.POST['tiempoMaximo'] 
            listaSucursales = request.POST.getlist('sucursales')

            costoServicio = float(costoServicio)

            if "Todas" in listaSucursales:
                #El servicio se dara de alta en todas las sucursales
                sucursales = Sucursales.objects.all()
                contador = 0
                for sucursal in sucursales:
                    idSucursal = sucursal.id_sucursal
                    contador = contador+1
                    if contador == 1:
                        codigoServicioFormado = codigoServicioNuevo
                    else:
                        splitCodigoAnterior = codigoServicioNuevo.split("-")
                        intCodigoNuevo = int(splitCodigoAnterior[1])
                        inCodigoNuevo = intCodigoNuevo+1
                        codigoServicioFormado = "SERV-"+str(inCodigoNuevo)
                    registroServicio = ServiciosCertificados(codigo_servocio = codigoServicioFormado,
                    sucursal = Sucursales.objects.get(id_sucursal = idSucursal), nombre = nombreServicio,
                    precio = costoServicio, descripcion = descripcion,
                    tiempo_minimo = tiempo_minimo, 
                    tiempo_maximo = tiempo_maximo)

                    registroServicio.save()
            else:
                contador = 0
                for sucursal in listaSucursales:
                    idSucursal = int(sucursal)
                    contador = contador+1
                    if contador == 1:
                        codigoServicioFormado = codigoServicioNuevo
                    else:
                        splitCodigoAnterior = codigoServicioNuevo.split("-")
                        intCodigoNuevo = int(splitCodigoAnterior[1])
                        inCodigoNuevo = intCodigoNuevo+1
                        codigoServicioFormado = "SERV-"+str(inCodigoNuevo)

                    registroServicio = ServiciosCertificados(codigo_servocio = codigoServicioFormado,
                    sucursal = Sucursales.objects.get(id_sucursal = idSucursal), nombre = nombreServicio,
                    precio = costoServicio, descripcion = descripcion,
                    tiempo_minimo = tiempo_minimo, 
                    tiempo_maximo = tiempo_maximo)
                    registroServicio.save()

            if registroServicio:
                request.session["ServicioCertificadoRegistrado"] = "El servicio ha sido dado de alta en las sucursales correspondientes!"
                return redirect("/agregarServicioCertificado/")

        if "ServicioCertificadoRegistrado" in request.session:
            ServicioCertificadoRegistrado = request.session["ServicioCertificadoRegistrado"]
            del request.session["ServicioCertificadoRegistrado"]
            return render(request,"19 Certificados/agregarServicioCertificado.html",{"nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "puestoEmpleado":puestoEmpleado, "letra":letra,
                                                                         "notificacionRenta":notificacionRenta,"consultaPermisos":consultaPermisos,"notificacionCita":notificacionCita, "ultimoCodigoCertificado":ultimoCodigoCertificado,
                                                                         "sucursales":sucursales, "ServicioCertificadoRegistrado":ServicioCertificadoRegistrado})
        return render(request,"19 Certificados/agregarServicioCertificado.html",{"nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "puestoEmpleado":puestoEmpleado, "letra":letra,
                                                                         "notificacionRenta":notificacionRenta,"consultaPermisos":consultaPermisos,"notificacionCita":notificacionCita, "ultimoCodigoCertificado":ultimoCodigoCertificado,
                                                                         "sucursales":sucursales})
    
    
    else:
        return render(request,"1 Login/login.html")  




def verServiciosCertificado(request):
    if "idSesion" in request.session:
     
        #Variables de sesión
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']
        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
        
        #notificacionRentas
        notificacionRenta = notificacionRentas(request)

        #notificacionCitas
        notificacionCita = notificacionCitas(request)

        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)

        if request.method == "POST":
            sucursalServicio = request.POST["sucursalServicio"]

            #Info sucursal
            consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursalServicio)
            for datoSucursal in consultaSucursal:
                nombreSucursal = datoSucursal.nombre

            yaTienePaquete = []
            consultaServicios = ServiciosCertificados.objects.filter(sucursal_id__id_sucursal = sucursalServicio)
            consultaServicios2 = ServiciosCertificados.objects.filter(sucursal_id__id_sucursal = sucursalServicio)
            
            productosPorServicio = []
            for servicio in consultaServicios:
                idServicio = servicio.id_servicio_certificado

                consultaProductosServicio = ProductosServiciosCertificados.objects.filter(servicio_certificado_id__id_servicio_certificado = idServicio)
                if consultaProductosServicio:
                    conPaquete = "Con paquete"
                    yaTienePaquete.append("Con paquete")

                    productosServicio = []
                    for productoUtilizado in consultaProductosServicio:
                        #Ya tiene productos asignados... Sacar todos los productos y mandarlos a un arreglo de ese servicio.
                        idProductoGastoUtilizado = productoUtilizado.producto_gasto_id
                        cantidadUtilizada = productoUtilizado.cantidad_utilizada
                        datosProducto = ProductosGasto.objects.filter(id_producto = idProductoGastoUtilizado)
                        for dato in datosProducto:
                            codigo = dato.codigo_producto
                            idProducto = dato.id_producto
                            sku = dato.sku_producto
                            nombre = dato.nombre_producto
                            cantidad_existencias = dato.cantidad
                            
                        productosServicio.append([idProducto,codigo,sku,nombre,cantidadUtilizada,cantidad_existencias])
                    
                else:
                    conPaquete = "Sin paquete"
                    yaTienePaquete.append("Sin paquete")

                if conPaquete == "Con paquete":
                    productosPorServicio.append(productosServicio)

                if conPaquete == "Con paquete":
                    productosPorServicio.append("nada")

            listaZipTabla = zip(consultaServicios, yaTienePaquete)
            listaZipTabla2 = zip(consultaServicios, yaTienePaquete, productosPorServicio)

            return render(request,"19 Certificados/verServiciosCertificado.html",{"nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "puestoEmpleado":puestoEmpleado, "letra":letra,
                                                                            "notificacionRenta":notificacionRenta,"consultaPermisos":consultaPermisos,"notificacionCita":notificacionCita, 
                                                                            "nombreSucursal":nombreSucursal, "listaZipTabla":listaZipTabla, "consultaServicios2":consultaServicios2, "listaZipTabla2":listaZipTabla2})

        else:

            if tipoUsuario == "esAdmin":
                sucursales = Sucursales.objects.all()
            else:
                infoEmpleado = Empleados.objects.filter(id_empleado = idEmpleado)
                for datoEmpleado in infoEmpleado:
                    idSucursal = datoEmpleado.sucursal_id

                sucursales = Sucursales.objects.filter(id_sucursal = idSucursal)

            if "servicioCertificadoActualizado" in request.session:
                servicioCertificadoActualizado = request.session["servicioCertificadoActualizado"]
                del request.session["servicioCertificadoActualizado"]
                return render(request,"19 Certificados/seleccionarSucursalServiciosCertificados.html",{"nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "puestoEmpleado":puestoEmpleado, "letra":letra,
                                                                            "notificacionRenta":notificacionRenta,"consultaPermisos":consultaPermisos,"notificacionCita":notificacionCita, 
                                                                            "sucursales":sucursales, "servicioCertificadoActualizado":servicioCertificadoActualizado})
            if "registroPaquete" in request.session:
                registroPaquete = request.session["registroPaquete"]
                del request.session["registroPaquete"]
                return render(request,"19 Certificados/seleccionarSucursalServiciosCertificados.html",{"nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "puestoEmpleado":puestoEmpleado, "letra":letra,
                                                                            "notificacionRenta":notificacionRenta,"consultaPermisos":consultaPermisos,"notificacionCita":notificacionCita, 
                                                                            "sucursales":sucursales, "registroPaquete":registroPaquete})

            
            if "paqueteProductoActualizado" in request.session:
                paqueteProductoActualizado = request.session["paqueteProductoActualizado"]
                del request.session["paqueteProductoActualizado"] 

                return render(request,"19 Certificados/seleccionarSucursalServiciosCertificados.html",{"nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "puestoEmpleado":puestoEmpleado, "letra":letra,
                                                                            "notificacionRenta":notificacionRenta,"consultaPermisos":consultaPermisos,"notificacionCita":notificacionCita, 
                                                                            "sucursales":sucursales, "paqueteProductoActualizado":paqueteProductoActualizado})

            return render(request,"19 Certificados/seleccionarSucursalServiciosCertificados.html",{"nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "puestoEmpleado":puestoEmpleado, "letra":letra,
                                                                            "notificacionRenta":notificacionRenta,"consultaPermisos":consultaPermisos,"notificacionCita":notificacionCita, 
                                                                            "sucursales":sucursales})
    
    
    else:
        return render(request,"1 Login/login.html")


def actualizarServicioCertificado(request):

    if "idSesion" in request.session:

        if request.method == "POST":
            idServicioCertificadoEditar = request.POST["idServicioCertificadoEditar"]
            nombreActualizado = request.POST['nombreActualizado']
            precioActualizado = request.POST['precioActualizado']
            

            actualizacionServicioCertificado = ServiciosCertificados.objects.filter(id_servicio_certificado = idServicioCertificadoEditar).update(nombre = nombreActualizado, precio = precioActualizado)
            

            if actualizacionServicioCertificado: 
               
             
                request.session['servicioCertificadoActualizado'] = "El servicio para certificado #" + idServicioCertificadoEditar  +", "+  nombreActualizado + ", ha sido actualizado correctamente!"
            return redirect('/verServiciosCertificado/')




def crearPaqueteServicioCertificado(request):

    
    if "idSesion" in request.session:

       # Variables de sesión
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']
        idPerfil = idEmpleado
        idConfig = idEmpleado
       

        

        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
        
           #notificacionRentas
        notificacionRenta = notificacionRentas(request)

        #notificacionCitas
        notificacionCita = notificacionCitas(request)
        
         #permisosEmpleado
        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)

        
        if request.method == "POST":
            
            idServicioCertificado= request.POST['idServicioCertificado'] 
            intServicio = int(idServicioCertificado)
            datosServicio = ServiciosCertificados.objects.filter(id_servicio_certificado = intServicio)
            infoServicio = []
         
            for dato in datosServicio:
                codigo = dato.codigo_servocio
                nombre = dato.nombre
                descripcion = dato.descripcion
                precio = dato.precio
                
                idSucursal = dato.sucursal_id
                
                datosSucursal = Sucursales.objects.filter(id_sucursal = idSucursal)
                for suc in datosSucursal:
                    nombreSucursal = suc.nombre
            
                infoServicio.append([codigo,nombre,descripcion,precio,nombreSucursal])
            
            
            data = [i.json() for i in ProductosGasto.objects.filter(sucursal_id__id_sucursal = idSucursal)]
            
            
            #----------------
            productos_totales = ProductosGasto.objects.filter(sucursal_id__id_sucursal = idSucursal)
            productos_ids = []
                
            for prod in productos_totales:
                productos_ids.append(prod.id_producto)
            
            productosServicios = ProductosServiciosCertificados.objects.filter(servicio_certificado_id__id_servicio_certificado = intServicio)
            productosServicio = []
            for productoServicio in productosServicios:
                ids_producto_gasto = productoServicio.producto_gasto_id
            
                for dato in productos_ids:
                    if dato  == ids_producto_gasto:
                        productos_ids.remove(dato)
                
                  
                  
            datos_productos_no_paquete = []
                
            for id in productos_ids:
                datos = ProductosGasto.objects.filter(id_producto = id)
                for dato in datos:
                    id_producto = dato.id_producto
                    codigo_producto = dato.codigo_producto
                    sku = dato.sku_producto
                    nombreProd = dato.nombre_producto
                    existencias = dato.cantidad
                    descripcionP = dato.descripcion
                    imagen = dato.imagen_producto
                    fecha_alta = dato.fecha_alta
                    
                datos_productos_no_paquete.append([id_producto,codigo_producto,sku,nombreProd,existencias,descripcionP,imagen,fecha_alta])   
            
            
            productosVenta = ProductosGasto.objects.filter(sucursal_id__id_sucursal = idSucursal)
            productosVentaJavaScript = ProductosGasto.objects.filter(sucursal_id__id_sucursal = idSucursal)
            
        
            return render(request, "19 Certificados/crearPaqueteServicios.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado,
                                                                                       "infoServicio":infoServicio,"idServicioCertificado":idServicioCertificado,"productosVenta":productosVenta,"productosVentaJson":json.dumps(data),"productosVentaJavaScript":productosVentaJavaScript,
                                                                                       "datos_productos_no_paquete":datos_productos_no_paquete,"notificacionRenta":notificacionRenta, "notificacionCita":notificacionCita})
            
            
         

       

            
            
        return render(request, "19 Certificados/crearPaqueteServicios.html", {"consultaPermisos":consultaPermisos,"idEmpleado":idEmpleado,"idPerfil":idPerfil, "idConfig":idConfig, "nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado,"notificacionRenta":notificacionRenta, "notificacionCita":notificacionCita
                                                                                   
                                                                                 
                                                                                   
        })
    
    else:
        return render(request,"1 Login/login.html")


def guardarPaqueteServicioCertificado(request):

    
    if "idSesion" in request.session:
     

      
        
        if request.method == "POST":
            
            idServicioCertificado = request.POST['idServicioCertificado']
            productosSolicitados = request.POST['cantidadesProductosVenta']
            listaProductosSolicitados = productosSolicitados.split(",")
  
            listaCantidadesSolicitadas = []
           
            for idProducto in listaProductosSolicitados:
               
                nameCantidadProducto = "cantidadUsar" + str(idProducto)
                cantidadSolicitadaMandada = request.POST[nameCantidadProducto]
                listaCantidadesSolicitadas.append(cantidadSolicitadaMandada)
            
            lista = zip(listaProductosSolicitados,listaCantidadesSolicitadas)
            
            for producto, cantidad in lista:
                idProductoBD = producto
                cantidadProductoBD = cantidad
                
                registroProducto = ProductosServiciosCertificados(servicio_certificado = ServiciosCertificados.objects.get(id_servicio_certificado=idServicioCertificado),producto_gasto=ProductosGasto.objects.get(id_producto =idProductoBD),cantidad_utilizada=cantidadProductoBD)
                
                registroProducto.save()
                
            if registroProducto:
                
                consultaServicio = ServiciosCertificados.objects.filter(id_servicio_certificado = idServicioCertificado)
                for datoServicio in consultaServicio:
                    nombreServicio = datoServicio.nombre
                request.session['registroPaquete'] = "El paquete del servicio "+str(nombreServicio)+" ha sido gregado satisfactoriamente!"
                return redirect('/verServiciosCertificado/')
                
                
            
            
            
            
            
            
            
            
    
    
    else:
        return render(request,"1 Login/login.html")


def verProductoDePaqueteServicioCertificadoEditar(request):

    if "idSesion" in request.session:
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']
        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
        #notificacionRentas
        notificacionRenta = notificacionRentas(request)
        #notificacionCitas
        notificacionCita = notificacionCitas(request)
         #permisosEmpleado
        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)
        
        if request.method == "POST":
            
            idServicioCertificadoEditar = request.POST['idServicioCertificadoEditar']
            consultaDatosServicios = ServiciosCertificados.objects.filter(id_servicio_certificado = idServicioCertificadoEditar)
            consultaDeProductos = ProductosServiciosCertificados.objects.filter(servicio_certificado_id__id_servicio_certificado = idServicioCertificadoEditar)
            
            productosElegidos = []
            
            for producto in consultaDeProductos:
                idProducto = producto.producto_gasto_id
                cantidadUtilizadaDeProducto = producto.cantidad_utilizada
                
                consultaProducto = ProductosGasto.objects.filter(id_producto = idProducto)
                for dato in consultaProducto:
                    codigoProducto = dato.codigo_producto
                    nombreProducto = dato.nombre_producto
                    imagenProducto = dato.imagen_producto
                    skuProducto = dato.sku_producto
                    
                productosElegidos.append([idProducto,cantidadUtilizadaDeProducto,
                                          codigoProducto,
                                          nombreProducto,
                                          imagenProducto,
                                          skuProducto])
                
                
            #Sucursal de servicio
            for datoServicio in consultaDatosServicios:
                sucursal = datoServicio.sucursal_id
                
                consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursal)
                for datoSucursal in consultaSucursal:
                    nombreSucursal = datoSucursal.nombre
             
            #Lista de productos a elegir para agregar más al servicio.
            todosLosProductosGasto = ProductosGasto.objects.filter(sucursal_id__id_sucursal = sucursal)
            arrayProductosGastoNoEnServicio = []
            
            
            consultaProductosUtilizados = ProductosServiciosCertificados.objects.filter(servicio_certificado_id__id_servicio_certificado = idServicioCertificadoEditar)
            idsProductosYaUtilizados = []
            
            for productoServ in consultaProductosUtilizados:
                idProducto = productoServ.producto_gasto_id
                idsProductosYaUtilizados.append(idProducto)
                
            for producto in todosLosProductosGasto:
                idProducto = producto.id_producto
                productoYaEstaEnServicio = False
                for productoEnServicio in idsProductosYaUtilizados:
                    idProductoEnServicio = productoEnServicio
                    
                    if idProducto == idProductoEnServicio:
                        productoYaEstaEnServicio = True
                
                if productoYaEstaEnServicio == False:
                    consultaProducto = ProductosGasto.objects.filter(id_producto = idProducto)
                    for dato in consultaProducto:
                        codigoProducto = dato.codigo_producto
                        skuProducto = dato.sku_producto
                        nombreProducto = dato.nombre_producto
                        existenciasProducto = dato.cantidad
                        descripcionProducto = dato.descripcion
                        imagenProducto = dato.imagen_producto
                        fechaAgregadoProducto = dato.fecha_alta
                    
                    arrayProductosGastoNoEnServicio.append([idProducto,codigoProducto, skuProducto, nombreProducto,
                                                     existenciasProducto, descripcionProducto, imagenProducto, fechaAgregadoProducto])
                    
                    
            
            
            #Lista de productos en formato JSON.
            data = [i.json() for i in ProductosGasto.objects.filter(sucursal_id__id_sucursal = sucursal)]
            
        
        
            return render(request, "19 Certificados/actualizarPaquete.html", {"consultaPermisos":consultaPermisos,"nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado,"notificacionRenta":notificacionRenta, "consultaDatosServicios":consultaDatosServicios, "productosElegidos":productosElegidos, "nombreSucursal":nombreSucursal, "arrayProductosGastoNoEnServicio":arrayProductosGastoNoEnServicio, "productosVentaJson":json.dumps(data),
                                                                                   "todosLosProductosGasto":todosLosProductosGasto, "notificacionCita":notificacionCita})
            

            
        return render(request, "19 Certificados/actualizarPaquete.html", {"consultaPermisos":consultaPermisos,"nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "letra":letra, "puestoEmpleado":puestoEmpleado,"notificacionRenta":notificacionRenta, "consultaDatosServicios":consultaDatosServicios, "productosElegidos":productosElegidos, "nombreSucursal":nombreSucursal, "notificacionCita":notificacionCita})
    
    else:
        return render(request,"1 Login/login.html")




def actualizarPaqueteCertificados(request):

    if "idSesion" in request.session:

        if request.method == "POST":
            idProductoPaqueteEditar = request.POST['idServicioEditar']
            
            #Nombre de servicio
            consultaServicio = ServiciosCertificados.objects.filter(id_servicio_certificado = idProductoPaqueteEditar)
            for datoServicio in consultaServicio:
                nombreServicio = datoServicio.nombre
            
            nameInputEliminar = "eliminarProducto"
            nameInputCantidad = "cantidadProducto"
            
            consultaProductosServicio = ProductosServiciosCertificados.objects.filter(servicio_certificado_id__id_servicio_certificado = idProductoPaqueteEditar)
            
            for producto in consultaProductosServicio:
                idProductoUtilizado = producto.producto_gasto_id
                
                nameInputPorProductoEliminar = nameInputEliminar+str(idProductoUtilizado)
                nameInputCantidadProductoEditar = nameInputCantidad+str(idProductoUtilizado)
                
                
            
                if request.POST.get(nameInputPorProductoEliminar, False): #Checkeado Eliminar producto
                    borrado = ProductosServiciosCertificados.objects.get(producto_gasto_id = idProductoUtilizado, servicio_certificado_id__id_servicio_certificado = idProductoPaqueteEditar)
                    borrado.delete()
                    actualizacionProductoPaquete = True
                    
                elif request.POST.get(nameInputPorProductoEliminar, True): #No checkeado, actualizar producto
                    cantidadProductoActualizar = request.POST[nameInputCantidadProductoEditar]
                    actualizacionProductoPaquete = ProductosServiciosCertificados.objects.filter(producto_gasto_id = idProductoUtilizado).update(cantidad_utilizada = cantidadProductoActualizar)
                
                
            #Agregar más productos.
            masProductos = request.POST['masProductos']
            if masProductos == "noMasProductos":
                
                if actualizacionProductoPaquete or borrado: 
                    request.session['paqueteProductoActualizado'] = "El paquete del servicio "+nombreServicio+" ha sido actualizado correctamente!"
                    return redirect('/verServiciosCertificado/')
            elif masProductos == "masProductos":
                productosAgregar = request.POST['idsProductosGastoServicio']
                listaProductosAgregar = productosAgregar.split(",")
                
                listaCantidadesSolicitadas = []
                
                for idProducto in listaProductosAgregar:
                    nameCantidadProducto = "cantidadUsar"+str(idProducto)
                    cantidadSolicitadaMandada = request.POST[nameCantidadProducto]
                    listaCantidadesSolicitadas.append(cantidadSolicitadaMandada)
                lista = zip(listaProductosAgregar,listaCantidadesSolicitadas)
                
                
                for producto, cantidad in lista:
                    idProductoBD = producto
                    cantidadProductoBD = cantidad
                    
                    registroProducto = ProductosServiciosCertificados(servicio = Servicios.objects.get(id_servicio=idProductoPaqueteEditar),producto_gasto=ProductosGasto.objects.get(id_producto =idProductoBD),cantidad=cantidadProductoBD)
                    registroProducto.save()
                
                if actualizacionProductoPaquete or borrado or registroProducto: 
                    request.session['paqueteProductoActualizado'] = "El paquete del servicio "+nombreServicio+" ha sido actualizado correctamente!"
                    return redirect('/verServiciosCertificado/')


def guardarVenderCertificado(request):
    if "idSesion" in request.session:
        idEmpleado = request.session['idSesion']

        if request.method == "POST":
            
            #Datos para la venta
            
            tipoPago = request.POST["tipoPago"]

            if tipoPago == "Efectivo":
                esEnEfectivo = True
            elif tipoPago == "Tarjeta":
                esConTarjeta = True
                tipoTarjeta = request.POST["tipoTarjeta"]
                referencia = request.POST["referencia"]
            elif tipoPago == "Transferencia":
                esConTransferencia = True
                claveRastreo = request.POST["claveRastreo"]

            empleadoVendedor = idEmpleado

            clienteSeleccionado = request.POST["clienteSeleccionado"] #Puede ser clienteMomentaneo o tener el id del cliente.
            nombreBeneficiaria = request.POST["nombreBeneficiaria"]
            correoBeneficiaria = request.POST["correoBeneficiaria"]
            if correoBeneficiaria == "":
                conCorreo=False
            else:
                conCorreo=True


                
            #Datos para certificado
            codigoCertificadoNuevo = request.POST["codigoCertificadoNuevo"] #Codigo de nuevo certificado.
            fechaActual = datetime.now()
            fechaVigencia = fechaActual + relativedelta(months=1)

            sucursalCertificado = request.POST["sucursalCertificado"]

            consultaServiciosCertificado = ServiciosCertificados.objects.filter(sucursal_id__id_sucursal = sucursalCertificado)
            
            stringServiciosAVender = ""
            stringCantidadesAVender = ""
            stringPreciosAVender = ""
            stringEstatusAVender = ""
            contadorServiciosEnCarrito = 0

            montoTotalAPagar = 0
            datosServicios = []
            listaServiciosSeleccionados = []
            for servicio in consultaServiciosCertificado:
                print("Entro al if principal")

                idDelServicio = servicio.id_servicio_certificado
                nombreServicio = servicio.nombre
                precioServicio = servicio.precio
                datosServicios.append([nombreServicio,precioServicio])
                name = "checkboxServicio"+str(idDelServicio)
            
                # Inicializar servicioVendido como False
                servicioVendido = False

                if request.POST.get(name):  # Servicio checkeado
                    servicioVendido = True
                else:  # Servicio no checkeado
                    servicioVendido = False    

                if servicioVendido:
                    print("entre al if!!  servicioVendido")
                    contadorServiciosEnCarrito = contadorServiciosEnCarrito + 1

                    if contadorServiciosEnCarrito == 1:
                        print("Entre al if contadorServiciosEnCarrito")
                        stringServiciosAVender = str(idDelServicio)
                        stringCantidadesAVender = "1"
                        stringPreciosAVender = str([nombreServicio,precioServicio])
                        stringEstatusAVender = "P"
                        
                    else:
                        print("Entre al else")
                        stringServiciosAVender = stringServiciosAVender+ ","+str(idDelServicio)
                        stringCantidadesAVender = stringCantidadesAVender+ ",1"
                        stringPreciosAVender = stringPreciosAVender+ ","+str(precioServicio)
                        stringEstatusAVender = stringEstatusAVender+ ",P"
                        
                    montoTotalAPagar = montoTotalAPagar + precioServicio

                    listaServiciosSeleccionados.append([nombreServicio,precioServicio])
                else:
                    print("entro al else pendejo")
                
                print(montoTotalAPagar)

            
            #Guardar la venta
            horaVenta= datetime.now().time()
            if tipoPago == "Efectivo":
                if clienteSeleccionado == "clienteMomentaneo":
                    registroVenta = Ventas(fecha_venta = fechaActual, hora_venta = horaVenta, tipo_pago = tipoPago, empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),
                    ids_productos = "",cantidades_productos = "",ids_servicios_corporales = "",cantidades_servicios_corporales = "", ids_servicios_faciales = "", cantidades_servicios_faciales = "",
                    monto_pagar = montoTotalAPagar, credito = "N", sucursal = Sucursales.objects.get(id_sucursal = sucursalCertificado) )
                else:
                    registroVenta = Ventas(fecha_venta = fechaActual, hora_venta = horaVenta, tipo_pago = tipoPago, empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor), cliente = Clientes.objects.get(id_cliente = clienteSeleccionado),
                    monto_pagar = montoTotalAPagar, credito = "N", sucursal = Sucursales.objects.get(id_sucursal = sucursalCertificado) )

            elif tipoPago == "Tarjeta":
                if clienteSeleccionado == "clienteMomentaneo":
                    registroVenta = Ventas(fecha_venta = fechaActual, hora_venta = horaVenta, tipo_pago = tipoPago, empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),
                    ids_productos = "",cantidades_productos = "",ids_servicios_corporales = "",cantidades_servicios_corporales = "", ids_servicios_faciales = "", cantidades_servicios_faciales = "",
                    monto_pagar = montoTotalAPagar, credito = "N", sucursal = Sucursales.objects.get(id_sucursal = sucursalCertificado), tipo_tarjeta =  tipoTarjeta, referencia_pago_tarjeta = referencia)
                else:
                    registroVenta = Ventas(fecha_venta = fechaActual, hora_venta = horaVenta, tipo_pago = tipoPago, empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor), cliente = Clientes.objects.get(id_cliente = clienteSeleccionado),
                    ids_productos = "",cantidades_productos = "",ids_servicios_corporales = "",cantidades_servicios_corporales = "", ids_servicios_faciales = "", cantidades_servicios_faciales = "",
                    monto_pagar = montoTotalAPagar, credito = "N", sucursal = Sucursales.objects.get(id_sucursal = sucursalCertificado), tipo_tarjeta =  tipoTarjeta, referencia_pago_tarjeta = referencia)


            elif tipoPago == "Transferencia":
                if clienteSeleccionado == "clienteMomentaneo":
                    registroVenta = Ventas(fecha_venta = fechaActual, hora_venta = horaVenta, tipo_pago = tipoPago, empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor),
                    ids_productos = "",cantidades_productos = "",ids_servicios_corporales = "",cantidades_servicios_corporales = "", ids_servicios_faciales = "", cantidades_servicios_faciales = "",
                    monto_pagar = montoTotalAPagar, credito = "N", sucursal = Sucursales.objects.get(id_sucursal = sucursalCertificado), clave_rastreo_transferencia = claveRastreo)
                else:
                    registroVenta = Ventas(fecha_venta = fechaActual, hora_venta = horaVenta, tipo_pago = tipoPago, empleado_vendedor = Empleados.objects.get(id_empleado = empleadoVendedor), cliente = Clientes.objects.get(id_cliente = clienteSeleccionado),
                    ids_productos = "",cantidades_productos = "",ids_servicios_corporales = "",cantidades_servicios_corporales = "", ids_servicios_faciales = "", cantidades_servicios_faciales = "",
                    monto_pagar = montoTotalAPagar, credito = "N", sucursal = Sucursales.objects.get(id_sucursal = sucursalCertificado), clave_rastreo_transferencia = claveRastreo)
            registroVenta.save()
            #If venta guardada.. Guardar certificado e imprimir ticket\
            if registroVenta:
                ultimoIdVenta = 0 
                consultaTodasLasVentas = Ventas.objects.all()
                for venta in consultaTodasLasVentas:
                    ultimoIdVenta = venta.id_venta
                if clienteSeleccionado == "clienteMomentaneo":
                    if conCorreo:
                        registroCertificado = CertificadosProgramados(codigo_certificado= codigoCertificadoNuevo, fecha_alta= fechaActual, vigencia = fechaVigencia, lista_servicios_certificados = stringServiciosAVender, lista_cantidades_servicios = stringCantidadesAVender, lista_precios =stringPreciosAVender, lista_servicios_efectuados = stringEstatusAVender,
                        nombre_beneficiaria = nombreBeneficiaria, monto_total_pagar = montoTotalAPagar, monto_total_canjeado = 0, estatus_certificado = "P", venta = Ventas.objects.get(id_venta = ultimoIdVenta),correo_beneficiaria = correoBeneficiaria)
                    else:

                        registroCertificado = CertificadosProgramados(codigo_certificado= codigoCertificadoNuevo, fecha_alta= fechaActual, vigencia = fechaVigencia, lista_servicios_certificados = stringServiciosAVender, lista_cantidades_servicios = stringCantidadesAVender, lista_precios =stringPreciosAVender, lista_servicios_efectuados = stringEstatusAVender,
                        nombre_beneficiaria = nombreBeneficiaria, monto_total_pagar = montoTotalAPagar, monto_total_canjeado = 0, estatus_certificado = "P", venta = Ventas.objects.get(id_venta = ultimoIdVenta)  )
                else:
                    if conCorreo:
                        registroCertificado = CertificadosProgramados(codigo_certificado= codigoCertificadoNuevo, fecha_alta= fechaActual, vigencia = fechaVigencia, lista_servicios_certificados = stringServiciosAVender, lista_cantidades_servicios = stringCantidadesAVender, lista_precios =stringPreciosAVender, lista_servicios_efectuados = stringEstatusAVender, cliente_compro = Clientes.objects.get(id_cliente = clienteSeleccionado),
                        nombre_beneficiaria = nombreBeneficiaria, monto_total_pagar = montoTotalAPagar, monto_total_canjeado = 0, estatus_certificado = "P", venta = Ventas.objects.get(id_venta = ultimoIdVenta),correo_beneficiaria = correoBeneficiaria)
                    else:
                        registroCertificado = CertificadosProgramados(codigo_certificado= codigoCertificadoNuevo, fecha_alta= fechaActual, vigencia = fechaVigencia, lista_servicios_certificados = stringServiciosAVender, lista_cantidades_servicios = stringCantidadesAVender, lista_precios =stringPreciosAVender, lista_servicios_efectuados = stringEstatusAVender, cliente_compro = Clientes.objects.get(id_cliente = clienteSeleccionado),
                        nombre_beneficiaria = nombreBeneficiaria, monto_total_pagar = montoTotalAPagar, monto_total_canjeado = 0, estatus_certificado = "P", venta = Ventas.objects.get(id_venta = ultimoIdVenta)  )
                registroCertificado.save()
                if registroCertificado:
                    #Imprimir Ticket
                    fechaActualConFormato = fechaActual.strftime('%Y/%m/%d')
                    #Empleado Vendedor
                    empleadoVendedor = Empleados.objects.filter(id_empleado = empleadoVendedor)
                    for datoEmpleado in empleadoVendedor:
                        nombreEmpleado = datoEmpleado.nombres
                        apellidoPaternoEmpleado= datoEmpleado.apellido_paterno
                    nombreCompletoEmpleadoVendedor = nombreEmpleado + " " + apellidoPaternoEmpleado

                    #Datos Sucursal
                    consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursalCertificado)
                    for datoSucursal in consultaSucursal:
                        nombreSucursal = datoSucursal.nombre
                        telefonoSucursal = datoSucursal.telefono
                        direccionSucursal = datoSucursal.direccion 

                    #Datos Cliente
                    if clienteSeleccionado == "clienteMomentaneo":
                        clienteTicket = "Momentaneo"
                    else:
                        consultaCliente = Clientes.objects.filter(id_cliente = clienteSeleccionado)
                        for datoCliente in consultaCliente:
                            idClienteticket = datoCliente.id_cliente
                            nombreCliente = datoCliente.nombre_cliente
                            apellidoCliente = datoCliente.apellidoPaterno_cliente
                        clienteTicket= nombreCliente + " " + apellidoCliente

                    #Hora Venta
                    horaVenta = horaVenta.strftime("%H:%M:%S")
                    #Obtener las impresoras
                    impresoras = Conector.ConectorV3.obtenerImpresoras()
                    
                    contadorDeTickets=0
                    for x in range (2):
                        contadorDeTickets = contadorDeTickets+1
                        c = Conector.ConectorV3()
                        c.Corte(1)
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        c.CargarImagenLocalEImprimir("C:\\COSTABELLA\\sistemaCostabella\\static\\images\\anegragrande.png", 0, 216)
                        c.EscribirTexto("\n")
                        c.EstablecerTamañoFuente(1,1)
                        c.EstablecerEnfatizado(True)
                        c.EscribirTexto("Sucursal:"+nombreSucursal+"\n")
                        c.EstablecerEnfatizado(False)
                        c.EscribirTexto("TEL:"+telefonoSucursal+"\n")
                        c.TextoSegunPaginaDeCodigos(2, "cp850", direccionSucursal+"\n")
                        
                        c.EstablecerEnfatizado(True)
                        c.EscribirTexto("================================================\n")
                        c.EstablecerTamañoFuente(2,2)
                        c.EscribirTexto("VENTAS #"+str(ultimoIdVenta)+"\n")
                        c.EscribirTexto(codigoCertificadoNuevo+"\n")
                        c.EstablecerEnfatizado(False)
                        c.EstablecerAlineacion(Conector.ALINEACION_IZQUIERDA)
                        c.EstablecerTamañoFuente(1,1)
                        c.EscribirTexto("\n")
                        c.EscribirTexto(str(fechaActualConFormato)+" - "+str(horaVenta)+" hrs.\n")
                        c.EscribirTexto("Atendida por:"+nombreCompletoEmpleadoVendedor+"\n")
                        c.EscribirTexto("\n")
                      
                        #Listado de servicios
                        for servicio in listaServiciosSeleccionados:
                            nombreServicioTicket = servicio[0]
                            precioServicioTicket = servicio[1]
                            precioServicioTicketRedondeado = round(precioServicioTicket,2)
                            precioServicioTicketRedondeadoStr = str(precioServicioTicketRedondeado)
                            precioServicioDivididoEnElPunto = precioServicioTicketRedondeadoStr.split(".")
                            longitudPrecioServicio = len(str(precioServicioDivididoEnElPunto[0]))
                            longitudPrecioServicioEntero = int(longitudPrecioServicio)
                            caracteresServicio = len(nombreServicioTicket)

                            if longitudPrecioServicioEntero == 1:
                                espacio = 38
                            elif longitudPrecioServicioEntero == 2:
                                espacio = 37
                            elif longitudPrecioServicioEntero == 3:
                                espacio = 36
                            elif longitudPrecioServicioEntero == 4:
                                espacio = 35
                            elif longitudPrecioServicioEntero == 5:
                                espacio = 34
                            elif longitudPrecioServicioEntero == 6:
                                espacio = 33
                            numeroEspacios = espacio - int(caracteresServicio)
                            espaciosTicket = ""
                            for x in range(numeroEspacios):
                                espacioMini = " "
                                espaciosTicket = espaciosTicket + espacioMini
                            c.EscribirTexto("1 x "+ nombreServicioTicket + espaciosTicket + str(precioServicioTicketRedondeadoStr)+"\n") 

                        c.EscribirTexto("\n")
                        c.EscribirTexto("\n")

                        c.EstablecerTamañoFuente(2,2)
                        c.EstablecerAlineacion(Conector.ALINEACION_DERECHA)
                        c.EscribirTexto("TOTAL: $"+str(montoTotalAPagar)+"\n")
                        c.EscribirTexto("\n")

                        c.EstablecerEnfatizado(True)
                        c.EstablecerTamañoFuente(1,1)
                        
                        c.EscribirTexto("========= IVA incluido en el precio =========\n")
                        c.EscribirTexto("\n")
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        c.TextoSegunPaginaDeCodigos(2, "cp850", "INFORMACION DE PAGO.\n")
                        c.EstablecerEnfatizado(False)
                        c.EscribirTexto("\n")
                        if tipoPago == "Efectivo":
                            c.EscribirTexto("Pago en Efectivo \n")
                        elif tipoPago == "Tarjeta":
                            c.EscribirTexto("Pago con Tarjeta de "+str(tipoTarjeta)+"\n")
                            c.EscribirTexto("Referencia: "+referencia+"\n")
                        elif tipoPago == "Transferencia":
                            c.EscribirTexto("Pago con Transferencia\n")
                            c.EscribirTexto("Clave de Rastreo: "+claveRastreo+"\n")
                        c.EscribirTexto("\n")
                        
                        c.EstablecerEnfatizado(True)
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        c.EscribirTexto("INFORMACION DEL CLIENTE.\n")
                        if clienteTicket == "Momentaneo":
                            c.EstablecerEnfatizado(False)
                            c.EscribirTexto("Cliente Momentaneo\n")
                        else:
                            c.EstablecerEnfatizado(False)
                            c.EscribirTexto("ID: "+str(idClienteticket)+" - "+clienteTicket+"\n")
                        c.EscribirTexto("\n")
                        c.EstablecerEnfatizado(True)
                        c.EscribirTexto("INFORMACION DE LA BENEFICIARIA.\n")
                        c.EstablecerEnfatizado(False)
                        c.EscribirTexto(nombreBeneficiaria+"\n")
                        if conCorreo:
                            c.EscribirTexto(correoBeneficiaria+"\n")


                        c.EscribirTexto("=========== Gracias por su compra!! ===========\n")
                        c.EstablecerTamañoFuente(2, 2)
                        c.EstablecerEnfatizado(True)
                        c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                        if contadorDeTickets == 1:
                            c.EscribirTexto("\n")
                            c.EscribirTexto("COPIA TIENDA.\n")
                        else:
                            c.EscribirTexto("\n")
                            c.EscribirTexto("COPIA CLIENTE.\n")
                        c.EscribirTexto("\n")
                        c.EstablecerTamañoFuente(1, 1)
                        

                        c.Feed(1)
                        c.Corte(1)
                        #c.abrirCajon()
                        c.Pulso(48, 60, 120)
                        print("Imprimiendo...")
                        # Recuerda cambiar por el nombre de tu impresora
                        respuesta = c.imprimirEn("POS80 Printer")
                        if respuesta == True:
                            print("Impresión correcta")
                        else:
                            print(f"Error. El mensaje es: {respuesta}")

                            

                    if conCorreo:
                        try:
                            #Mandar correo.
                            correo = correoBeneficiaria
                            asunto = "Costabella | Nuevo certificado de regalo!!"
                            plantilla = "19 Certificados/correoCertificado.html"
                            html_mensaje = render_to_string(plantilla,{"nombreSucursal":nombreSucursal, "fechaActualConFormato":fechaActualConFormato, "nombreCompletoEmpleadoVendedor":nombreCompletoEmpleadoVendedor,
                            "codigoCertificadoNuevo":codigoCertificadoNuevo,"montoTotalAPagar":montoTotalAPagar, "datosServicios":datosServicios, "telefonoSucursal":telefonoSucursal, "direccionSucursal":direccionSucursal,
                            "nombreBeneficiaria":nombreBeneficiaria, "clienteTicket":clienteTicket,"fechaVigencia":fechaVigencia}) #Aqui va el diccionario de datos.
                            email_remitente = settings.EMAIL_HOST_USER
                            email_destino = [correo]
                            mensaje = EmailMessage(asunto, html_mensaje, email_remitente, email_destino)
                            mensaje.content_subtype = 'html'
                            #Mandar excel en el correo.
                            mensaje.send()
                            
                        except:
                            print("Error al mandar correo")
                            

                            



                        


                    #Variable para notificaciones
                    request.session["certificadoGuardado"] = "El certificado se ha guardado correctamente."
                    
                    return redirect("/verCertificadosProgramados/")

            
       
    
    
    else:
        return render(request,"1 Login/login.html")  


def verCertificadosProgramados(request):
    if "idSesion" in request.session:
     
        #Variables de sesión
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']
        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
        
        #notificacionRentas
        notificacionRenta = notificacionRentas(request)

        #notificacionCitas
        notificacionCita = notificacionCitas(request)

        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)

        if request.method == "POST":
            
            sucursalCertificados = request.POST["sucursalCertificados"]


            consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursalCertificados)
            for datoSucursal in consultaSucursal:
                nombreSucursalCertificados = datoSucursal.nombre
            
            consultaCertificadosSucursal = CertificadosProgramados.objects.all()

            certificadosPendientes = []
            certificadosCanjeados = []

            for certificado in consultaCertificadosSucursal:
                venta = certificado.venta_id
                consultaVenta = Ventas.objects.filter(id_venta = venta)
                for dato in consultaVenta:
                    idSucursalVenta = dato.sucursal_id

                    
                intSucursalMandada = int(sucursalCertificados)
                sucursalVenta = int(idSucursalVenta)
                if sucursalVenta == intSucursalMandada:
                    idCertificado = certificado.id_certificado
                    codigoCertificado = certificado.codigo_certificado
                    fechaAlta = certificado.fecha_alta
                    vigencia = certificado.vigencia

                    servicios = []
                    pendientesCanjeados = []

                    #Info de cada servicio
                    listaServiciosCertificados = certificado.lista_servicios_certificados
                    arregloServicios = listaServiciosCertificados.split(",")
                    for servicio in arregloServicios:
                        idServicio = int(servicio)
                        consultaServicioCertificado = ServiciosCertificados.objects.filter(id_servicio_certificado = idServicio)
                        for datoServicio in consultaServicioCertificado:
                            nombreServicio = datoServicio.nombre
                        
                        servicios.append(nombreServicio)


                    listaPendientesCanjeados = certificado.lista_servicios_efectuados
                    arregloPendientesCanjeados = listaPendientesCanjeados.split(",")
                    for uno in arregloPendientesCanjeados:
                        pendienteCanjeado = uno
                        pendientesCanjeados.append(pendienteCanjeado)

                    clienteCompro = certificado.cliente_compro_id
                    if clienteCompro == "Momentaneo":
                        nombreCliente = "Momentanteo"
                    else:
                        consultaCliente = Clientes.objects.filter(id_cliente = clienteCompro)
                        for datoCliente in consultaCliente:
                            nombreClientex = datoCliente.nombre_cliente
                            apellidoCliente = datoCliente.apellidoPaterno_cliente

                        nombreCliente = nombreClientex + " "+apellidoCliente
                    nombreBeneficiaria = certificado.nombre_beneficiaria
                    montoTotalAPagar = certificado.monto_total_pagar

                    estatusCertificado = certificado.estatus_certificado

                    listaZipeada = zip(servicios,pendientesCanjeados)

                    if estatusCertificado == "P":
                        estaVigente = ""
                        fechaActual = datetime.now()
                        fechaActualFormato = fechaActual.strftime('%Y-%m-%d')
                        hoy = date.today()


                        if vigencia < hoy:
                            estaVigente = "yaNoEstaVigente"
                        else:
                            estaVigente = "aunEstaVigente"

                        certificadosPendientes.append([idCertificado,codigoCertificado,fechaAlta, vigencia, listaZipeada, nombreCliente, nombreBeneficiaria, montoTotalAPagar, estaVigente])
                    elif estatusCertificado == "C":
                        certificadosCanjeados.append([idCertificado,codigoCertificado,fechaAlta, vigencia, listaZipeada, nombreCliente, nombreBeneficiaria, montoTotalAPagar])
            
            return render(request,"19 Certificados/verCertificados.html",{"nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "puestoEmpleado":puestoEmpleado, "letra":letra,
                                                                            "notificacionRenta":notificacionRenta,"consultaPermisos":consultaPermisos,"notificacionCita":notificacionCita, 
                                                                            "nombreSucursalCertificados":nombreSucursalCertificados, "certificadosPendientes":certificadosPendientes, "certificadosCanjeados":certificadosCanjeados})
                
        else:

            if tipoUsuario == "esAdmin":
                sucursales = Sucursales.objects.all()
            else:
                infoEmpleado = Empleados.objects.filter(id_empleado = idEmpleado)
                for datoEmpleado in infoEmpleado:
                    idSucursal = datoEmpleado.sucursal_id

                sucursales = Sucursales.objects.filter(id_sucursal = idSucursal)

            if "certificadoGuardado" in request.session:
                certificadoGuardado = request.session["certificadoGuardado"]
                del request.session["certificadoGuardado"]
                return render(request,"19 Certificados/seleccionarSucursalVerCertificados.html",{"nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "puestoEmpleado":puestoEmpleado, "letra":letra,
                                                                            "notificacionRenta":notificacionRenta,"consultaPermisos":consultaPermisos,"notificacionCita":notificacionCita, 
                                                                            "sucursales":sucursales, "certificadoGuardado":certificadoGuardado})
            
            if "certificadoCanjeado" in request.session:
                certificadoCanjeado = request.session["certificadoCanjeado"]
                del request.session["certificadoCanjeado"]
                return render(request,"19 Certificados/seleccionarSucursalVerCertificados.html",{"nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "puestoEmpleado":puestoEmpleado, "letra":letra,
                                                                            "notificacionRenta":notificacionRenta,"consultaPermisos":consultaPermisos,"notificacionCita":notificacionCita, 
                                                                            "sucursales":sucursales, "certificadoCanjeado":certificadoCanjeado})
            return render(request,"19 Certificados/seleccionarSucursalVerCertificados.html",{"nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "puestoEmpleado":puestoEmpleado, "letra":letra,
                                                                            "notificacionRenta":notificacionRenta,"consultaPermisos":consultaPermisos,"notificacionCita":notificacionCita, 
                                                                            "sucursales":sucursales})
    
    
    else:
        return render(request,"1 Login/login.html")



def verServiciosParaCanjear(request):
    if "idSesion" in request.session:
     
        #Variables de sesión
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']
        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
        
        #notificacionRentas
        notificacionRenta = notificacionRentas(request)

        #notificacionCitas
        notificacionCita = notificacionCitas(request)

        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)

        if request.method == "POST": #Si le apreto al boton del boletito
            
            idCertificado = request.POST["idCertificado"]

            consultaCertificado = CertificadosProgramados.objects.filter(id_certificado = idCertificado)

            for datoCertificado in consultaCertificado:
                idClienteQueCompro = datoCertificado.cliente_compro_id

                listaDeIdsDeServiciosACanjear = datoCertificado.lista_servicios_certificados
                listaEstatusServiciosCanjeados = datoCertificado.lista_servicios_efectuados

            #datos del cliente
            consultaCliente = Clientes.objects.filter(id_cliente = idClienteQueCompro)

            for datoCliente in consultaCliente:
                nombreCliente = datoCliente.nombre_cliente
                apellidoCliente = datoCliente.apellidoPaterno_cliente

            nombreCompletoCliente = nombreCliente + " " + apellidoCliente

            #Datos de los servicios

            #Separar cada servicio y meterlo a un arreglo
            arregloIdsServiciosACanjear = listaDeIdsDeServiciosACanjear.split(",")
            arregloEstatusServicios = listaEstatusServiciosCanjeados.split(",")

            zipServicios = zip(arregloIdsServiciosACanjear, arregloEstatusServicios)

            arregloServiciosTabla = []
            arregloServiciosTablaCanjeados = []
            for servicio, estatus in zipServicios:
                intServicio = int(servicio)
                consultaServicio = ServiciosCertificados.objects.filter(id_servicio_certificado = intServicio)

                for datoServicio in consultaServicio:
                    codigoServicio = datoServicio.codigo_servocio
                    nombreServicio = datoServicio.nombre
                    precioServicio = datoServicio.precio
                    descripcionServicio = datoServicio.descripcion

                if estatus == "P":

                    arregloServiciosTabla.append([intServicio,codigoServicio,nombreServicio,precioServicio,descripcionServicio])

                else:
                    arregloServiciosTablaCanjeados.append([intServicio,codigoServicio,nombreServicio,precioServicio,descripcionServicio])

            
            #Separar arreglo de estados
            

            listaZipeadaServicios = zip(arregloServiciosTabla,arregloEstatusServicios )
            listaZipeadaServiciosCanjeados = zip(arregloServiciosTablaCanjeados,arregloEstatusServicios )
                
               
           
            if "viendeDeCita" in request.POST:
                idDeCita = request.POST["viendeDeCita"]
                vieneDeCita = True
                consultaCita = Citas.objects.filter(id_cita=idDeCita)
                for datoCertificado in consultaCita:

                    certificadoServicio = datoCertificado.certificado_servicio
                certificadoServicioSeparado = certificadoServicio.split("-")
                idServicioCita = certificadoServicioSeparado[1]
                idServicioCitaEntero = int(idServicioCita)
                
                arregloServiciosTablaCita = []

                for servicioDisponible in arregloServiciosTabla:
                    idServicioDisponible = servicioDisponible[0]
                    idServicioDisponibleEntero = int(idServicioDisponible)
                    
                    if idServicioCitaEntero == idServicioDisponibleEntero:
                        disponibleCita = "si"
                    else:
                        disponibleCita = "no"

                    arregloServiciosTablaCita.append(disponibleCita)

                listaZipeadaServicios = zip(arregloServiciosTabla,arregloEstatusServicios, arregloServiciosTablaCita )



                return render(request,"19 Certificados/verServiciosParaCanjear.html",{"nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "puestoEmpleado":puestoEmpleado, "letra":letra,
                                                                            "notificacionRenta":notificacionRenta,"consultaPermisos":consultaPermisos,"notificacionCita":notificacionCita, 
                                                                            "idCertificado":idCertificado, "consultaCertificado":consultaCertificado, "nombreCompletoCliente":nombreCompletoCliente, "listaZipeadaServicios":listaZipeadaServicios,
                                                                            "arregloServiciosTabla":arregloServiciosTabla, "listaZipeadaServiciosCanjeados":listaZipeadaServiciosCanjeados, "idDeCita":idDeCita, "vieneDeCita":vieneDeCita})

            return render(request,"19 Certificados/verServiciosParaCanjear.html",{"nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "puestoEmpleado":puestoEmpleado, "letra":letra,
                                                                            "notificacionRenta":notificacionRenta,"consultaPermisos":consultaPermisos,"notificacionCita":notificacionCita, 
                                                                            "idCertificado":idCertificado, "consultaCertificado":consultaCertificado, "nombreCompletoCliente":nombreCompletoCliente, "listaZipeadaServicios":listaZipeadaServicios,
                                                                            "arregloServiciosTabla":arregloServiciosTabla, "listaZipeadaServiciosCanjeados":listaZipeadaServiciosCanjeados})
                
        
    
    
    else:
        return render(request,"1 Login/login.html")


def canjearCertificado(request):
    if "idSesion" in request.session:
     
        if request.method == "POST": #Si se dio clic al botón de canjear certificado
            
            idCertificadoACanjear = request.POST["idCertificadoACanjear"]
            

            consultaCertificado = CertificadosProgramados.objects.filter(id_certificado = idCertificadoACanjear)

            for datoCertificado in consultaCertificado:
                listaServicios = datoCertificado.lista_servicios_certificados
                codigoCertificado = datoCertificado.codigo_certificado
                listaEstatus = datoCertificado.lista_servicios_efectuados
                correoBeneficiaria = datoCertificado.correo_beneficiaria
                nombreBeneficiaria = datoCertificado.nombre_beneficiaria
                fechaAlta = datoCertificado.fecha_alta
                fechaVigencia = datoCertificado.vigencia
                idVenta = datoCertificado.venta_id

            #Consulta de id de usucrsal
            consultaVenta = Ventas.objects.filter(id_venta = idVenta)
            for datoVenta in consultaVenta:
                idSucursalCertificado = datoVenta.sucursal_id

            consultaDatosSucursal = Sucursales.objects.filter(id_sucursal = idSucursalCertificado)
            for datoSucursal in consultaDatosSucursal:
                nombreSucursalCertificado = datoSucursal.nombre
                telefonoSucursal = datoSucursal.telefono
                direccionSucursal = datoSucursal.direccion

            arregloServicios = listaServicios.split(",")
            arregloEstatus = listaEstatus.split(",")

            listazipeada = zip(arregloServicios,arregloEstatus)


            serviciosCanjeadosCorreo = []
            serviciosNoCanjeadosCorreo = []

            stringEstatusServicios = ""
            contadorServicios = 0
            for servicio, estatus in listazipeada:
                
                contadorServicios = contadorServicios + 1
                idDelServicio = servicio
                name = "checkboxServicio"+str(idDelServicio)

                #Consulta del servicio
                consultaServicio = ServiciosCertificados.objects.filter(id_servicio_certificado = idDelServicio)
                for datoServicio in consultaServicio:
                    nombreServicio = datoServicio.nombre


                if estatus == "P":
                
                    if request.POST.get(name, False): #Servicio Checkeado
                        servicioCanjeado = True
                    elif request.POST.get(name, True): #Servicio No checkeado
                        servicioCanjeado = False


                    if servicioCanjeado: #El servicio tiene chequeado el checkbox..
                        
                        if contadorServicios == 1:
                            stringEstatusServicios = "C"
                        else:
                            stringEstatusServicios = stringEstatusServicios + ",C"

                        #Dar de baja los productos gasto que utiliza
                        idDelServicioInt = int(idDelServicio)
                        consultaTratamientoProductos = ProductosServiciosCertificados.objects.filter(servicio_certificado_id__id_servicio_certificado = idDelServicioInt)
                        if consultaTratamientoProductos:
                            sinProductos = False

                            idsProductosQueUtilizaElTratamiento = []
                            for producto in consultaTratamientoProductos:
                                idProducto = producto.producto_gasto_id
                                cantidadUtilizada = producto.cantidad_utilizada

                                idsProductosQueUtilizaElTratamiento.append([idProducto, cantidadUtilizada])

                            for producto in idsProductosQueUtilizaElTratamiento:
                                idProductoSF = int(producto[0])
                                cantidadPSF = int(producto[1])

                                consultaProducto = ProductosGasto.objects.filter(id_producto = idProductoSF)
                                for dato in consultaProducto:
                                    cantidadActualEnExistencia = dato.cantidad
                                    cuantificable = dato.contenido_cuantificable  #N O S
                                
                                if cuantificable == "S":
                                    cantidadARestar = 1 * cantidadPSF
                                    actualizacionCantidad = cantidadActualEnExistencia - cantidadARestar

                                    actualizarProducto = ProductosGasto.objects.filter(id_producto = idProductoSF).update(cantidad = actualizacionCantidad)
                        else:
                            sinProductos = True

                        serviciosCanjeadosCorreo.append(nombreServicio)

                        

                    else: #El servicio aun está sin canjear.
                        print("nochequeado")
                        if contadorServicios == 1:
                            stringEstatusServicios = "P"
                        else:
                            stringEstatusServicios = stringEstatusServicios + ",P"

                        serviciosNoCanjeadosCorreo.append(nombreServicio)
                else:
                    if contadorServicios == 1:
                        stringEstatusServicios = "C"
                    else:
                        stringEstatusServicios = stringEstatusServicios + ",C"
                    
                    serviciosCanjeadosCorreo.append(nombreServicio)

            arregloNuevosEstatus = stringEstatusServicios.split(",")

            certificadoSinCanjearAlCien = False


            for estatus in arregloNuevosEstatus:
                estatusNuevo = estatus
                if estatusNuevo == "P":
                    certificadoSinCanjearAlCien = True

            
            if certificadoSinCanjearAlCien:
            #Actualizacion
                #Servicios pendientes por canjear

                #Mandar correo electrónico

                fechaActual = datetime.now()
                fechaActualConFormato = fechaActual.strftime('%Y/%m/%d')

                try:
                    #Mandar correo.
                    correo = correoBeneficiaria
                    asunto = "Costabella | Servicios canjeados!!"
                    plantilla = "19 Certificados/correoCertificadoPendiente.html"
                    html_mensaje = render_to_string(plantilla,{"nombreSucursalCertificado":nombreSucursalCertificado, "fechaActualConFormato":fechaActualConFormato, "fechaAlta":fechaAlta, "fechaVigencia":fechaVigencia,
                    "codigoCertificado":codigoCertificado, "serviciosCanjeadosCorreo":serviciosCanjeadosCorreo, "serviciosNoCanjeadosCorreo":serviciosNoCanjeadosCorreo,"telefonoSucursal":telefonoSucursal, "direccionSucursal":direccionSucursal,
                    "nombreBeneficiaria":nombreBeneficiaria}) #Aqui va el diccionario de datos.
                    email_remitente = settings.EMAIL_HOST_USER
                    email_destino = [correo]
                    mensaje = EmailMessage(asunto, html_mensaje, email_remitente, email_destino)
                    mensaje.content_subtype = 'html'
                    #Mandar excel en el correo.
                    mensaje.send()
                    
                except:
                    print("Error al mandar correo")
                actualizacionCertificado = CertificadosProgramados.objects.filter(id_certificado = idCertificadoACanjear).update(lista_servicios_efectuados = stringEstatusServicios)
            else:
                #Canjeado al 100%

                fechaActual = datetime.now()
                fechaActualConFormato = fechaActual.strftime('%Y/%m/%d')
                #Mandar correo electrónico
                try:
                    #Mandar correo.
                    correo = correoBeneficiaria
                    asunto = "Costabella | Certificado canjeado completamente!!"
                    plantilla = "19 Certificados/correoCertificadoCanjeado.html"
                    html_mensaje = render_to_string(plantilla,{"nombreSucursalCertificado":nombreSucursalCertificado, "fechaActualConFormato":fechaActualConFormato, "fechaAlta":fechaAlta, "fechaVigencia":fechaVigencia,
                    "codigoCertificado":codigoCertificado, "serviciosCanjeadosCorreo":serviciosCanjeadosCorreo, "serviciosNoCanjeadosCorreo":serviciosNoCanjeadosCorreo,"telefonoSucursal":telefonoSucursal, "direccionSucursal":direccionSucursal,
                    "nombreBeneficiaria":nombreBeneficiaria}) #Aqui va el diccionario de datos.
                    email_remitente = settings.EMAIL_HOST_USER
                    email_destino = [correo]
                    mensaje = EmailMessage(asunto, html_mensaje, email_remitente, email_destino)
                    mensaje.content_subtype = 'html'
                    #Mandar excel en el correo.
                    mensaje.send()
                    
                except:
                    print("Error al mandar correo")

                actualizacionCertificado = CertificadosProgramados.objects.filter(id_certificado = idCertificadoACanjear).update(lista_servicios_efectuados = stringEstatusServicios, estatus_certificado = "C")
            
            if "vieneDeCita" in request.POST:
                idDeCita = request.POST["vieneDeCita"]
                actualizacionCita = Citas.objects.get(id_cita = idDeCita)
                actualizacionCita.estado_cita = "efectuada"
                actualizacionCita.save()

                try:
                    tokenTelegram = keysBotCostabella.tokenBotCostabellaCitas
                    botCostabella = telepot.Bot(tokenTelegram)

                    idGrupoTelegram = keysBotCostabella.idGrupo
                    
                    mensaje = "\U0001F381 CITA VENDIDA CERTIFICADO \U0001F381 \n El cliente "+nombreBeneficiaria+" acudió y efectuo la cita #"+str(idDeCita)+", correspondiente al certificado "+codigoCertificado
                    botCostabella.sendMessage(idGrupoTelegram,mensaje)
                except:
                    print("An exception occurred")
                
            request.session["certificadoCanjeado"] = "Se han canjeado uno o varios servicios del certificado "+str(codigoCertificado)

            return redirect("/verCertificadosProgramados/")

                
        
    
    
    else:
        return render(request,"1 Login/login.html")




def reAgendarCita(request):

    if "idSesion" in request.session:

        if request.method == "POST":

            idCitaReagendar = request.POST["idCitaReagendar"]

            nameFecha = "fechaReagendar"+str(idCitaReagendar)
            fechaReagendar = request.POST[nameFecha]
            nameHorario = "horarioCitaReagendada"+str(idCitaReagendar)
            horarioCitaReagendada = request.POST[nameHorario]

            actualizacionCita = Citas.objects.filter(id_cita = idCitaReagendar).update(fecha_pactada = fechaReagendar, hora_pctada =  horarioCitaReagendada)

            if actualizacionCita:
                request.session["citaReagendada"] = "La cita ha sido reagendada satisfactoriamente!"
                
                consultaCita = Citas.objects.filter(id_cita = idCitaReagendar)
                for datoCita in consultaCita:
                    idCliente = datoCita.cliente_id
                    sucursalCita = datoCita.sucursal_id

                consultaCliente = Clientes.objects.filter(id_cliente = idCliente)
                for datoCliente in consultaCliente:
                    nombreCliente = datoCliente.nombre_cliente
                    apellidoCliente = datoCliente.apellidoPaterno_cliente

                nombreCompletoCliente = nombreCliente + " "+apellidoCliente

                consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursalCita)
                for datoSucursal in consultaSucursal:
                    nombreSucursal = datoSucursal.nombre
                try:
                    tokenTelegram = keysBotCostabella.tokenBotCostabellaCitas
                    botCostabella = telepot.Bot(tokenTelegram)

                    idGrupoTelegram = keysBotCostabella.idGrupo
                    
                    mensaje = "\U0001F4C6 CITA REAGENDADA \U0001F4C6 \n El cliente "+nombreCompletoCliente+" ha reagendado la cita #"+str(idCitaReagendar)+" al día "+fechaReagendar+" a las "+str(horarioCitaReagendada)+" hrs en la sucursal "+nombreSucursal
                    botCostabella.sendMessage(idGrupoTelegram,mensaje)
                except:
                    print("An exception occurred")


                return redirect("/citas/")

        
    else:
        return render(request,"1 Login/login.html")



def reAgendarCancelarCita(request):

    if "idSesion" in request.session:

        idEmpleado = request.session['idSesion']
        if request.method == "POST":

            idCitaReagendarCancelar = request.POST["idCitaReagendarCancelar"]

            nameJunto = "checkBoxCancelacion"+str(idCitaReagendarCancelar)
            
            if request.POST.get(nameJunto,False): #checkbox chequeado
                quiereCancelar = "Si"
            elif request.POST.get(nameJunto,True): #checkbox deschequeado
                quiereCancelar = "No"
            
            #Comentario venta
            consultaCita = Citas.objects.filter(id_cita = idCitaReagendarCancelar)
            for datoCita in consultaCita:
                idClienteCita = datoCita.cliente_id
                sucursalCita = datoCita.sucursal_id
                
                consultaCliente = Clientes.objects.filter(id_cliente = idClienteCita)
                for datoCliente in consultaCliente:
                    nombreCliente = datoCliente.nombre_cliente
                    apellidoCliente = datoCliente.apellidoPaterno_cliente

            #El comentario cambiaaaaa
            nombreCompletoCliente = nombreCliente +" "+apellidoCliente


            if quiereCancelar == "Si":

                #Cancelar cita.
                cita = Citas.objects.get(id_cita = idCitaReagendarCancelar)
                cita.delete()
                

            elif quiereCancelar == "No":
               #Agendar nueva cita.
                nameFecha = "fechaReagendar"+str(idCitaReagendarCancelar)
                fechaReagendar = request.POST[nameFecha]
                horaReagendada = request.POST["horarioCitaCancelada"]

                actualizacionCita = Citas.objects.filter(id_cita = idCitaReagendarCancelar).update(fecha_pactada = fechaReagendar, hora_pctada =  horaReagendada)
               
            


            #Recibir pago.
            formaDePago = request.POST["tipoPago"]

            esEnEfectivo = False
            esConTarjeta = False
            esConTransferencia = False

            if formaDePago == "Efectivo":
                esEnEfectivo = True
            elif formaDePago == "Tarjeta":
                esConTarjeta = True
                tipoTarjeta = request.POST["tipoTarjeta"]
                referenciaBancaria = request.POST["referenciaBancaria"]
            elif formaDePago == "Transferencia":
                esConTransferencia = True
                claveRastreo = request.POST["claveRastreoTransferencia"]

            
            if quiereCancelar == "Si":

                comentarioVenta = "Pago por cancelación de cita #"+str(idCitaReagendarCancelar)+" para el cliente "+nombreCompletoCliente

            elif quiereCancelar == "No":
                
                comentarioVenta = "Pago por reagendación de cita #"+str(idCitaReagendarCancelar)+" para el cliente "+nombreCompletoCliente

            #Guardar la venta
            fechaVenta = datetime.now() #La fecha con hora
            horaVenta= datetime.now().time()
            vendedor = idEmpleado
            intPago = 200
            floatPago = float(intPago)
            if esEnEfectivo:
                registroVenta = Ventas(fecha_venta = fechaVenta,
                hora_venta = horaVenta, tipo_pago = formaDePago, empleado_vendedor = Empleados.objects.get(id_empleado = vendedor), ids_productos = "", cantidades_productos = "",
                                    ids_servicios_corporales ="", cantidades_servicios_corporales ="",
                                    ids_servicios_faciales ="", cantidades_servicios_faciales ="", cliente = Clientes.objects.get(id_cliente = idClienteCita), monto_pagar = floatPago, credito = "N", comentariosVenta = comentarioVenta, sucursal = Sucursales.objects.get(id_sucursal = sucursalCita))
                registroVenta.save()
                
                #Generar movimiento en Caja
                ultimoIdVenta = 0
                ventasTotalesEfectivo = Ventas.objects.filter(tipo_pago ="Efectivo")
                for venta in ventasTotalesEfectivo:
                    ultimoIdVenta = venta.id_venta
                tipoMovimiento ="IN"
                montoMovimiento = float(200)
                descripcionMovimiento ="Movimiento por venta " + str(ultimoIdVenta) + " ,por cancelación de cita."
                fechaMovimiento = datetime.today().strftime('%Y-%m-%d')
                horaMovimiento = datetime.now().time()
                ingresarCantidadEfectivoAcaja =MovimientosCaja(fecha =fechaMovimiento,hora = horaMovimiento,tipo=tipoMovimiento,monto =montoMovimiento, descripcion=descripcionMovimiento,sucursal =  Sucursales.objects.get(id_sucursal = sucursalCita),
                                                                    realizado_por = Empleados.objects.get(id_empleado = vendedor))
                ingresarCantidadEfectivoAcaja.save()
                

            if esConTarjeta:
                registroVenta = Ventas(fecha_venta = fechaVenta,
                hora_venta = horaVenta, tipo_pago = formaDePago,
                tipo_tarjeta = tipoTarjeta, referencia_pago_tarjeta = referenciaBancaria
                , empleado_vendedor = Empleados.objects.get(id_empleado = vendedor), ids_productos = "", cantidades_productos = "",
                                    ids_servicios_corporales ="", cantidades_servicios_corporales ="",
                                    ids_servicios_faciales ="", cantidades_servicios_faciales ="", cliente = Clientes.objects.get(id_cliente = idClienteCita), monto_pagar = floatPago, credito = "N", comentariosVenta = comentarioVenta, sucursal = Sucursales.objects.get(id_sucursal = sucursalCita))
                registroVenta.save()

            if esConTransferencia:
                registroVenta = Ventas(fecha_venta = fechaVenta,
                hora_venta = horaVenta, tipo_pago = formaDePago,
                clave_rastreo_transferencia = claveRastreo,
                empleado_vendedor = Empleados.objects.get(id_empleado = vendedor), ids_productos = "", cantidades_productos = "",
                                    ids_servicios_corporales ="", cantidades_servicios_corporales ="",
                                    ids_servicios_faciales ="", cantidades_servicios_faciales ="", cliente = Clientes.objects.get(id_cliente = idClienteCita), monto_pagar = floatPago, credito = "N", comentariosVenta = comentarioVenta, sucursal = Sucursales.objects.get(id_sucursal = sucursalCita))
                registroVenta.save()

            if registroVenta:

                #IMPRESION DE TICKEEETSSSS
                #Ultimo id de venta
                consultaVentas = Ventas.objects.all()
                ultimoIdVenta = 0
                for venta in consultaVentas:
                    ultimoIdVenta = venta.id_venta


                #Fecha
                hoy = datetime.now()
                hoyFormato = hoy.strftime('%Y/%m/%d')
                horaVenta = horaVenta.strftime("%H:%M:%S")

                #Empleado vendedor
                consultaEmpleadoVendedor = Empleados.objects.filter(id_empleado = vendedor)
                for datoVendedor in consultaEmpleadoVendedor:
                    nombreEmpleado = datoVendedor.nombres
                    apellidoPatEmpleado = datoVendedor.apellido_paterno

                nombreCompletoEmpleadoVendedor = nombreEmpleado + " "+ apellidoPatEmpleado

                #Datos sucurssal
                consultaSucursal = Sucursales.objects.filter(id_sucursal = sucursalCita)
                for datoSucursal in consultaSucursal:
                    nombreSucursal = datoSucursal.nombre
                    telefonoSucursal = datoSucursal.telefono
                    direccionSucursal = datoSucursal.direccion

                #DatosCliente
                consultaCliente = Clientes.objects.filter(id_cliente = idClienteCita)
                for datoCliente in consultaCliente:
                    idCienteTicket = datoCliente.id_cliente
                    nombreCliente = datoCliente.nombre_cliente
                    apellidoCliente = datoCliente.apellidoPaterno_cliente

                nombreClienteTicket = nombreCliente + " " + apellidoCliente
                

                # Esto es para obtener las impresoras. No es obligatorio hacerlo siempre que se quiera imprimir
                impresoras = Conector.ConectorV3.obtenerImpresoras()
                print(f"Las impresoras son: {impresoras}")

                contadorTickets = 0
                for x in range(2):
                    contadorTickets = contadorTickets + 1
                    c = Conector.ConectorV3()
                    c.Iniciar()
                    c.Corte(1)
                    
                    c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                    # Recuerda que la imagen debe existir y debe ser legible para el plugin. Si no, comenta las líneas
                    c.CargarImagenLocalEImprimir("C:\\COSTABELLA\\sistemaCostabella\\static\\images\\anegragrande.png", 0, 216)
                    c.EscribirTexto("\n")
                    c.EstablecerTamañoFuente(1, 1)
                    c.EstablecerEnfatizado(True)
                    c.EscribirTexto("Sucursal: "+nombreSucursal+"\n")
                    c.EstablecerEnfatizado(False)
                    c.EscribirTexto("TEL: "+telefonoSucursal+"\n")
                    c.TextoSegunPaginaDeCodigos(2, "cp850", direccionSucursal+"\n")

                    c.EstablecerEnfatizado(True)
                    c.EscribirTexto("================================================\n")
                    c.EstablecerTamañoFuente(2, 2)
                    c.EscribirTexto("VENTA #"+str(ultimoIdVenta)+"\n")
                    c.EstablecerEnfatizado(False)
                    c.EstablecerAlineacion(Conector.ALINEACION_IZQUIERDA)
                    c.EstablecerTamañoFuente(1, 1)
                    c.EscribirTexto("\n")
                    c.EscribirTexto(str(hoyFormato)+" - "+str(horaVenta)+" hrs.\n")
                    c.EscribirTexto("Atendida por: "+nombreCompletoEmpleadoVendedor+".\n")
                    c.EscribirTexto("\n")

                    #Listado de productos 
                    #Productos venta
                    
                    longitudCostoTotal = len("200.00")
                    longitudCostoTotal = int(longitudCostoTotal)

                    if quiereCancelar == "Si":
                        nombreProducto = "Cancelación cita" 
                        caracteresProducto = len(nombreProducto)

                    elif quiereCancelar == "No":
                        nombreProducto = "Reagendación cita"

                        caracteresProducto = len(nombreProducto)

                    if longitudCostoTotal == 2:
                        espacio = 38
                    if longitudCostoTotal == 2:
                        espacio = 37
                    elif longitudCostoTotal == 3:
                        espacio = 36
                    elif longitudCostoTotal == 4:
                        espacio = 35
                    elif longitudCostoTotal == 5:
                        espacio = 34
                    elif longitudCostoTotal == 6:
                        espacio = 33
                    numeroEspacios = espacio - int(caracteresProducto)
                    
                    espaciosTicket = ""
                    for x in range(numeroEspacios):
                        espacioMini = " "
                        espaciosTicket = espaciosTicket + espacioMini
                    c.EscribirTexto("1 x "+nombreProducto+espaciosTicket+str("200.00")+"\n")


                    

                    
                    c.EscribirTexto("\n")
                    c.EscribirTexto("\n")
                    
                   
                    c.EscribirTexto("TOTAL PAGADO:  $200.00\n")
                    c.EscribirTexto("\n")
                    c.EstablecerTamañoFuente(2, 2)
                    c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                    if quiereCancelar == "Si":
                        c.EscribirTexto("CITA CANCELADA!\n")

                    elif quiereCancelar == "No":
                        c.EscribirTexto("CITA REAGENDADA!\n")
                    
                        c.EstablecerTamañoFuente(1, 1)
                        c.EscribirTexto("El día: "+str(fechaReagendar)+" a las "+str(horaReagendada)+" hrs. \n")
                    c.EstablecerEnfatizado(True)
                    c.EstablecerTamañoFuente(1, 1)
                    c.EscribirTexto("========== IVA incluido en el precio ==========\n")
                    c.EscribirTexto("\n")
                    c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                    c.TextoSegunPaginaDeCodigos(2, "cp850", "INFORMACION DE PAGO.\n")
                    c.EstablecerEnfatizado(False)
                    c.EscribirTexto("\n")
                    if esEnEfectivo:
                        c.EscribirTexto("Pago en efectivo.\n")
                    elif esConTarjeta:
                        c.EscribirTexto("Pago con "+str(tipoTarjeta)+".\n")
                        c.EscribirTexto("Referencia: "+referenciaBancaria+".\n")
                    elif esConTransferencia:
                        c.EscribirTexto("Transferencia.\n")
                        c.EscribirTexto("Clave de rastreo: "+str(claveRastreo)+".\n")
                    c.EscribirTexto("\n")
                    c.EstablecerEnfatizado(True)
                    c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                    c.TextoSegunPaginaDeCodigos(2, "cp850", "INFORMACIÓN DE CLIENTE.\n")

                    
                    c.EstablecerEnfatizado(False)
                    c.EscribirTexto("ID:"+str(idCienteTicket)+" - "+nombreClienteTicket+".\n")
                    c.EscribirTexto("=========== Gracias por su pago!! ===========\n")
                    c.EstablecerTamañoFuente(2, 2)
                    c.EstablecerEnfatizado(True)
                    c.EstablecerAlineacion(Conector.ALINEACION_CENTRO)
                    if contadorTickets == 1:
                        c.EscribirTexto("\n")
                        c.EscribirTexto("COPIA TIENDA.\n")
                    else:
                        c.EscribirTexto("\n")
                        c.EscribirTexto("COPIA CLIENTE.\n")
                    c.EscribirTexto("\n")
                    c.EstablecerTamañoFuente(1, 1)
                    

                    c.Feed(1)
                    c.Corte(1)
                    #c.abrirCajon()
                    print("Imprimiendo...")
                    # Recuerda cambiar por el nombre de tu impresora
                    respuesta = c.imprimirEn("POS80 Printer")
                    if respuesta == True:
                        print("Impresión correcta")
                    else:
                        print(f"Error. El mensaje es: {respuesta}")

                if quiereCancelar == "Si":
                    
                    try:
                        tokenTelegram = keysBotCostabella.tokenBotCostabellaCitas
                        botCostabella = telepot.Bot(tokenTelegram)

                        idGrupoTelegram = keysBotCostabella.idGrupo
                        
                        mensaje = "\U0001F4C6 CITA CANCELADA \U0001F4C6 \n El cliente "+nombreClienteTicket+" ha cancelado la cita #"+str(idCitaReagendarCancelar)+" en la sucursal "+nombreSucursal
                        botCostabella.sendMessage(idGrupoTelegram,mensaje)
                    except:
                        print("An exception occurred")

                elif quiereCancelar == "No":
                    try:
                        tokenTelegram = keysBotCostabella.tokenBotCostabellaCitas
                        botCostabella = telepot.Bot(tokenTelegram)

                        idGrupoTelegram = keysBotCostabella.idGrupo
                        
                        mensaje = "\U0001F4C6 CITA REAGENDADA CON CUOTA \U0001F4C6 \n El cliente "+nombreClienteTicket+" ha reagendado con cuota la cita #"+str(idCitaReagendarCancelar)+" en la sucursal "+nombreSucursal
                        botCostabella.sendMessage(idGrupoTelegram,mensaje)
                    except:
                        print("An exception occurred")


                request.session['ventaCancelacionCita'] = "La venta por $200 ha sido agregada satisfactoriamente!"

                return redirect("/ventas/")



        
    else:
        return render(request,"1 Login/login.html")



def agregarMovimiento(request):

    if "idSesion" in request.session:

        #Variables de sesión
        idEmpleado = request.session['idSesion']
        nombresEmpleado = request.session['nombresSesion']
        tipoUsuario = request.session['tipoUsuario']
        puestoEmpleado = request.session['puestoSesion']
        #INFORMACION de empleado para menusito
        letra = nombresEmpleado[0]
        
        #notificacionRentas
        notificacionRenta = notificacionRentas(request)

        #notificacionCitas
        notificacionCita = notificacionCitas(request)

        consultaPermisos = Permisos.objects.filter(id_empleado_id__id_empleado = idEmpleado)

        if request.method == "POST":
            idSucursalOrigen = request.POST["idSucursalOrigen"]
            idSucursalDestino = request.POST["idSucursalDestino"]

            if idSucursalOrigen == idSucursalDestino:
                sucursalesPrimera = Sucursales.objects.all()
                sucursalesSegunda = Sucursales.objects.all()
                sucursalesIguales = True
                mensajeSucursalesIguales = "Se han elegido las mismas sucursales!"
                return render(request,"23 Movimientos/seleccionarSucursalesParaMovimiento.html",{"nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "puestoEmpleado":puestoEmpleado, "letra":letra,
                                                                                "notificacionRenta":notificacionRenta,"consultaPermisos":consultaPermisos,"notificacionCita":notificacionCita, 
                                                                                "sucursalesPrimera":sucursalesPrimera, "sucursalesSegunda":sucursalesSegunda, "sucursalesIguales":sucursalesIguales,
                                                                                "mensajeSucursalesIguales":mensajeSucursalesIguales})
            else:
                #No son iguales
                consultaVestidosRenta = ProductosRenta.objects.filter(sucursal_id__id_sucursal = idSucursalOrigen, estado_renta = "Sin rentar")
                consultaVestidosRenta2 = ProductosRenta.objects.filter(sucursal_id__id_sucursal = idSucursalOrigen, estado_renta = "Sin rentar")
                consultaSucursalOrigen = Sucursales.objects.filter(id_sucursal = idSucursalOrigen)
                for dato in consultaSucursalOrigen:
                    nombreSucursalOrigen = dato.nombre

                consultaSucursalDestino = Sucursales.objects.filter(id_sucursal = idSucursalDestino)
                for dato in consultaSucursalDestino:
                    nombreSucursalDestino = dato.nombre

                dataProductosRenta = [i.jsonRenta() for i in ProductosRenta.objects.filter(sucursal_id__id_sucursal = idSucursalOrigen) ]
                rutaMedias= os.path.join(BASE_DIR,'media')

                return render(request,"23 Movimientos/agregarMovimientoVestidos.html",{"nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "puestoEmpleado":puestoEmpleado, "letra":letra,
                                                                            "notificacionRenta":notificacionRenta,"consultaPermisos":consultaPermisos,"notificacionCita":notificacionCita, 
                                                                            "idSucursalOrigen":idSucursalOrigen, "nombreSucursalOrigen":nombreSucursalOrigen, 
                                                                            "idSucursalDestino":idSucursalDestino, "nombreSucursalDestino":nombreSucursalDestino, "consultaVestidosRenta":consultaVestidosRenta, "consultaVestidosRenta2":consultaVestidosRenta2,
                                                                            "data":json.dumps(dataProductosRenta), "rutaMedias":rutaMedias})

        else:
            sucursalesPrimera = Sucursales.objects.all()
            sucursalesSegunda = Sucursales.objects.all()

            if "movimientoRealizado" in request.session:
                movimientoRealizado = request.session["movimientoRealizado"]
                del request.session["movimientoRealizado"]

                return render(request,"23 Movimientos/seleccionarSucursalesParaMovimiento.html",{"nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "puestoEmpleado":puestoEmpleado, "letra":letra,
                                                                            "notificacionRenta":notificacionRenta,"consultaPermisos":consultaPermisos,"notificacionCita":notificacionCita, 
                                                                            "sucursalesPrimera":sucursalesPrimera, "sucursalesSegunda":sucursalesSegunda, "movimientoRealizado":movimientoRealizado})



            return render(request,"23 Movimientos/seleccionarSucursalesParaMovimiento.html",{"nombresEmpleado":nombresEmpleado,"tipoUsuario":tipoUsuario, "puestoEmpleado":puestoEmpleado, "letra":letra,
                                                                            "notificacionRenta":notificacionRenta,"consultaPermisos":consultaPermisos,"notificacionCita":notificacionCita, 
                                                                            "sucursalesPrimera":sucursalesPrimera, "sucursalesSegunda":sucursalesSegunda})



        
    else:
        return render(request,"1 Login/login.html")






def guardarMovimiento(request):

    if "idSesion" in request.session:

        idEmpleado = request.session['idSesion']
        
        idSucursalOrigen = request.POST["idSucursalOrigen"]
        idSucursalDestino = request.POST["idSucursalDestino"]
        consultaVestidosRenta = ProductosRenta.objects.filter(sucursal_id__id_sucursal = idSucursalOrigen, estado_renta = "Sin rentar")

        datosVestidosMovidos = []
        
        for vestido in consultaVestidosRenta:
            idVestido = vestido.id_producto
            nameCheckbox = "checkboxVestido"+str(idVestido)

            if request.POST.get(nameCheckbox,False): #Significa que si el checkbox esta chequeado
                moverVestido = True
                
                #Actualizar solo el dato de la sucursal
                consultaVestido = ProductosRenta.objects.filter(id_producto = idVestido).update(sucursal = Sucursales.objects.get(id_sucursal = idSucursalDestino))

                #Agregar sus datos al arreglo para posteriormente sacarlos y agregarlos a telegram.
                segundaConsultaVestido = ProductosRenta.objects.filter(id_producto = idVestido)
                for datoVestido in segundaConsultaVestido:
                    codigoVestido = datoVestido.codigo_producto
                    nombreVestido = datoVestido.nombre_producto

                datosVestidosMovidos.append([idVestido, codigoVestido, nombreVestido])

                #Consultar si hay un vestido con el mismo nombre en productos para venta
                consultaProductoVenta = ProductosVenta.objects.filter(nombre_producto = nombreVestido)
                if consultaProductoVenta:
                    actualizacionProducto = ProductosVenta.objects.filter(nombre_producto = nombreVestido).update(sucursal = Sucursales.objects.get(id_sucursal = idSucursalDestino) )
                
            elif request.POST.get(nameCheckbox,True): #Significa que si el checkbox no esta chequeado
                moverVestido = False
        request.session["movimientoRealizado"] = "El movimiento de vestidos se ha realizado satisfactoriamente!!"   



        #Mensaje telegram
        consultaSucursalOrigen = Sucursales.objects.filter(id_sucursal = idSucursalOrigen)
        for datoSucursalOrigen in consultaSucursalOrigen:
            nombreSucursalOrigen = datoSucursalOrigen.nombre

        consultaSucursalDestino = Sucursales.objects.filter(id_sucursal = idSucursalDestino)
        for datoSucursalDestino in consultaSucursalDestino:
            nombreSucursalDestino = datoSucursalDestino.nombre

        
        #Consulta nombre empleado
        consultaEmpleado = Empleados.objects.filter(id_empleado = idEmpleado)
        for datoEmpleado in consultaEmpleado:
            nombreEmpleado = datoEmpleado.nombres


        mensajeVestidos = ""
        for vestidito in datosVestidosMovidos:
            idVestidito = str(vestidito[0])
            codigoVestidito = str(vestidito[1])
            nombreVestidito = str(vestidito[2])
            
            mensajeVestidos = mensajeVestidos + "\n \n"+"\U0001F457	Vestido #"+idVestidito+" - "+codigoVestidito+" "+nombreVestidito


        try:
            tokenTelegram = keysBotCostabella.tokenBotCostabellaRentas
            botCostabella = telepot.Bot(tokenTelegram)

            idGrupoTelegram = keysBotCostabella.idGrupo
            
            mensaje = "\U0001F519 MOVIMIENTO DE VESTIDOS \U0001F51C \n La empleada "+nombreEmpleado+" ha generado el movimiento de vestidos de la sucursal "+nombreSucursalOrigen+" a la sucursal "+nombreSucursalDestino + mensajeVestidos
            botCostabella.sendMessage(idGrupoTelegram,mensaje)
        except:
            print("An exception occurred")
        


        





        return redirect("/agregarMovimiento/")

        



        
    else:
        return render(request,"1 Login/login.html")



#Y aqui termina todo c: 